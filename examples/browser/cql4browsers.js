(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/* eslint-disable
    no-undef,
*/
// TODO: This file was created by bulk-decaffeinate.
// Fix any style issues and re-enable lint.
/*
 * decaffeinate suggestions:
 * DS102: Remove unnecessary code created because of implicit returns
 * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md
 */
window.cql = require('../../lib/cql');

window.executeSimpleELM = function (
  elm,
  patientSource,
  valueSets,
  libraryName,
  version,
  executionDateTime,
  parameters = {}
) {
  let lib;
  if (Array.isArray(elm)) {
    if (elm.length > 1) {
      const rep = new window.cql.Repository(elm);
      lib = rep.resolve(libraryName, version);
    } else {
      lib = new window.cql.Library(elm[0]);
    }
  } else {
    lib = new window.cql.Library(elm);
  }

  const codeService = new window.cql.CodeService(valueSets);
  const executor = new window.cql.Executor(lib, codeService, parameters);
  return executor.exec(patientSource, executionDateTime);
};

},{"../../lib/cql":4}],2:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./datatypes/datatypes'),
    Code = _require.Code,
    ValueSet = _require.ValueSet;

var CodeService = /*#__PURE__*/function () {
  function CodeService() {
    var valueSetsJson = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CodeService);

    this.valueSets = {};

    for (var oid in valueSetsJson) {
      this.valueSets[oid] = {};

      for (var version in valueSetsJson[oid]) {
        var codes = valueSetsJson[oid][version].map(function (code) {
          return new Code(code.code, code.system, code.version);
        });
        this.valueSets[oid][version] = new ValueSet(oid, version, codes);
      }
    }
  }

  _createClass(CodeService, [{
    key: "findValueSetsByOid",
    value: function findValueSetsByOid(oid) {
      return this.valueSets[oid] ? Object.values(this.valueSets[oid]) : [];
    }
  }, {
    key: "findValueSet",
    value: function findValueSet(oid, version) {
      if (version != null) {
        return this.valueSets[oid] != null ? this.valueSets[oid][version] : undefined;
      } else {
        var results = this.findValueSetsByOid(oid);

        if (results.length === 0) {
          return null;
        } else {
          return results.reduce(function (a, b) {
            if (a.version > b.version) {
              return a;
            } else {
              return b;
            }
          });
        }
      }
    }
  }]);

  return CodeService;
}();

module.exports.CodeService = CodeService;
},{"./datatypes/datatypes":6}],3:[function(require,module,exports){
"use strict";

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DT = require('./datatypes/datatypes');

var Record = /*#__PURE__*/function () {
  function Record(json) {
    _classCallCheck(this, Record);

    this.json = json;
    this.id = this.json.id;
  }

  _createClass(Record, [{
    key: "_is",
    value: function _is(typeSpecifier) {
      return this._typeHierarchy().some(function (t) {
        return t.type === typeSpecifier.type && t.name == typeSpecifier.name;
      });
    }
  }, {
    key: "_typeHierarchy",
    value: function _typeHierarchy() {
      return [{
        name: "{https://github.com/cqframework/cql-execution/simple}".concat(this.json.recordType),
        type: 'NamedTypeSpecifier'
      }, {
        name: '{https://github.com/cqframework/cql-execution/simple}Record',
        type: 'NamedTypeSpecifier'
      }, {
        name: '{urn:hl7-org:elm-types:r1}Any',
        type: 'NamedTypeSpecifier'
      }];
    }
  }, {
    key: "_recursiveGet",
    value: function _recursiveGet(field) {
      if (field != null && field.indexOf('.') >= 0) {
        var _field$split = field.split('.', 2),
            _field$split2 = _slicedToArray(_field$split, 2),
            root = _field$split2[0],
            rest = _field$split2[1];

        return new Record(this._recursiveGet(root))._recursiveGet(rest);
      }

      return this.json[field];
    }
  }, {
    key: "get",
    value: function get(field) {
      // the model should return the correct type for the field. For this simple model example,
      // we just cheat and use the shape of the value to determine it. Real implementations should
      // have a more sophisticated approach
      var value = this._recursiveGet(field);

      if (typeof value === 'string' && /\d{4}-\d{2}-\d{2}(T[\d\-.]+)?/.test(value)) {
        return this.getDate(field);
      }

      if (value != null && _typeof(value) === 'object' && value.code != null && value.system != null) {
        return this.getCode(field);
      }

      if (value != null && _typeof(value) === 'object' && (value.low != null || value.high != null)) {
        return this.getInterval(field);
      }

      return value;
    }
  }, {
    key: "getId",
    value: function getId() {
      return this.id;
    }
  }, {
    key: "getDate",
    value: function getDate(field) {
      var val = this._recursiveGet(field);

      if (val != null) {
        return DT.DateTime.parse(val);
      } else {
        return null;
      }
    }
  }, {
    key: "getInterval",
    value: function getInterval(field) {
      var val = this._recursiveGet(field);

      if (val != null && _typeof(val) === 'object') {
        var low = val.low != null ? DT.DateTime.parse(val.low) : null;
        var high = val.high != null ? DT.DateTime.parse(val.high) : null;
        return new DT.Interval(low, high);
      }
    }
  }, {
    key: "getDateOrInterval",
    value: function getDateOrInterval(field) {
      var val = this._recursiveGet(field);

      if (val != null && _typeof(val) === 'object') {
        return this.getInterval(field);
      } else {
        return this.getDate(field);
      }
    }
  }, {
    key: "getCode",
    value: function getCode(field) {
      var val = this._recursiveGet(field);

      if (val != null && _typeof(val) === 'object') {
        return new DT.Code(val.code, val.system, val.version);
      }
    }
  }]);

  return Record;
}();

var Patient = /*#__PURE__*/function (_Record) {
  _inherits(Patient, _Record);

  var _super = _createSuper(Patient);

  function Patient(json) {
    var _this;

    _classCallCheck(this, Patient);

    _this = _super.call(this, json);
    _this.name = json.name;
    _this.gender = json.gender;
    _this.birthDate = json.birthDate != null ? DT.DateTime.parse(json.birthDate) : undefined;
    _this.records = {};
    (json.records || []).forEach(function (r) {
      if (_this.records[r.recordType] == null) {
        _this.records[r.recordType] = [];
      }

      _this.records[r.recordType].push(new Record(r));
    });
    return _this;
  }

  _createClass(Patient, [{
    key: "findRecords",
    value: function findRecords(profile) {
      if (profile == null) {
        return [];
      }

      var recordType = profile.match(/(\{https:\/\/github\.com\/cqframework\/cql-execution\/simple\})?(.*)/)[2];

      if (recordType === 'Patient') {
        return [this];
      } else {
        return this.records[recordType] || [];
      }
    }
  }]);

  return Patient;
}(Record);

var PatientSource = /*#__PURE__*/function () {
  function PatientSource(patients) {
    _classCallCheck(this, PatientSource);

    this.patients = patients;
    this.nextPatient();
  }

  _createClass(PatientSource, [{
    key: "currentPatient",
    value: function currentPatient() {
      return this.current;
    }
  }, {
    key: "nextPatient",
    value: function nextPatient() {
      var currentJSON = this.patients.shift();
      this.current = currentJSON ? new Patient(currentJSON) : undefined;
      return this.current;
    }
  }]);

  return PatientSource;
}();

module.exports.Patient = Patient;
module.exports.PatientSource = PatientSource;
},{"./datatypes/datatypes":6}],4:[function(require,module,exports){
"use strict";

var library = require('./elm/library');

var expression = require('./elm/expression');

var repository = require('./runtime/repository');

var context = require('./runtime/context');

var exec = require('./runtime/executor');

var results = require('./runtime/results');

var datatypes = require('./datatypes/datatypes');

var patient = require('./cql-patient');

var codeservice = require('./cql-code-service'); // Library-related classes


module.exports.Library = library.Library;
module.exports.Repository = repository.Repository;
module.exports.Expression = expression.Expression; // Execution-related classes

module.exports.Context = context.Context;
module.exports.Executor = exec.Executor;
module.exports.PatientContext = context.PatientContext;
module.exports.UnfilteredContext = context.UnfilteredContext;
module.exports.Results = results.Results; // PatientSource-related classes

module.exports.Patient = patient.Patient;
module.exports.PatientSource = patient.PatientSource; // TerminologyService-related classes

module.exports.CodeService = codeservice.CodeService; // DataType classes

module.exports.Code = datatypes.Code;
module.exports.CodeSystem = datatypes.CodeSystem;
module.exports.Concept = datatypes.Concept;
module.exports.Date = datatypes.Date;
module.exports.DateTime = datatypes.DateTime;
module.exports.Interval = datatypes.Interval;
module.exports.Quantity = datatypes.Quantity;
module.exports.Ratio = datatypes.Ratio;
module.exports.ValueSet = datatypes.ValueSet;
},{"./cql-code-service":2,"./cql-patient":3,"./datatypes/datatypes":6,"./elm/expression":22,"./elm/library":27,"./runtime/context":41,"./runtime/executor":42,"./runtime/repository":43,"./runtime/results":44}],5:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('../util/util'),
    typeIsArray = _require.typeIsArray;

var Code = /*#__PURE__*/function () {
  function Code(code, system, version, display) {
    _classCallCheck(this, Code);

    this.code = code;
    this.system = system;
    this.version = version;
    this.display = display;
  }

  _createClass(Code, [{
    key: "hasMatch",
    value: function hasMatch(code) {
      if (typeof code === 'string') {
        // the specific behavior for this is not in the specification. Matching codesystem behavior.
        return code === this.code;
      } else {
        return codesInList(toCodeList(code), [this]);
      }
    }
  }, {
    key: "isCode",
    get: function get() {
      return true;
    }
  }]);

  return Code;
}();

var Concept = /*#__PURE__*/function () {
  function Concept(codes, display) {
    _classCallCheck(this, Concept);

    this.codes = codes || [];
    this.display = display;
  }

  _createClass(Concept, [{
    key: "hasMatch",
    value: function hasMatch(code) {
      return codesInList(toCodeList(code), this.codes);
    }
  }, {
    key: "isConcept",
    get: function get() {
      return true;
    }
  }]);

  return Concept;
}();

var ValueSet = /*#__PURE__*/function () {
  function ValueSet(oid, version, codes) {
    _classCallCheck(this, ValueSet);

    this.oid = oid;
    this.version = version;
    this.codes = codes || [];
  }

  _createClass(ValueSet, [{
    key: "hasMatch",
    value: function hasMatch(code) {
      var codesList = toCodeList(code); // InValueSet String Overload

      if (codesList.length === 1 && typeof codesList[0] === 'string') {
        var matchFound = false;
        var multipleCodeSystemsExist = false;

        var _iterator = _createForOfIteratorHelper(this.codes),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var codeItem = _step.value;

            // Confirm all code systems match
            if (codeItem.system !== this.codes[0].system) {
              multipleCodeSystemsExist = true;
            }

            if (codeItem.code === codesList[0]) {
              matchFound = true;
            }

            if (multipleCodeSystemsExist && matchFound) {
              throw new Error('In (valueset) is ambiguous -- multiple codes with multiple code systems exist in value set.');
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return matchFound;
      } else {
        return codesInList(codesList, this.codes);
      }
    }
  }, {
    key: "isValueSet",
    get: function get() {
      return true;
    }
  }]);

  return ValueSet;
}();

function toCodeList(c) {
  if (c == null) {
    return [];
  } else if (typeIsArray(c)) {
    var list = [];

    var _iterator2 = _createForOfIteratorHelper(c),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var c2 = _step2.value;
        list = list.concat(toCodeList(c2));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return list;
  } else if (typeIsArray(c.codes)) {
    return c.codes;
  } else {
    return [c];
  }
}

function codesInList(cl1, cl2) {
  // test each code in c1 against each code in c2 looking for a match
  return cl1.some(function (c1) {
    return cl2.some(function (c2) {
      // only the left argument (cl1) can contain strings. cl2 will only contain codes.
      if (typeof c1 === 'string') {
        // for "string in codesystem" this should compare the string to
        // the code's "code" field according to the specification.
        return c1 === c2.code;
      } else {
        return codesMatch(c1, c2);
      }
    });
  });
}

function codesMatch(code1, code2) {
  return code1.code === code2.code && code1.system === code2.system;
}

var CodeSystem = function CodeSystem(id, version) {
  _classCallCheck(this, CodeSystem);

  this.id = id;
  this.version = version;
};

module.exports = {
  Code: Code,
  Concept: Concept,
  ValueSet: ValueSet,
  CodeSystem: CodeSystem
};
},{"../util/util":48}],6:[function(require,module,exports){
"use strict";

var logic = require('./logic');

var clinical = require('./clinical');

var uncertainty = require('./uncertainty');

var datetime = require('./datetime');

var interval = require('./interval');

var quantity = require('./quantity');

var ratio = require('./ratio');

var libs = [logic, clinical, uncertainty, datetime, interval, quantity, ratio];

for (var _i = 0, _libs = libs; _i < _libs.length; _i++) {
  var lib = _libs[_i];

  for (var _i2 = 0, _Object$keys = Object.keys(lib); _i2 < _Object$keys.length; _i2++) {
    var element = _Object$keys[_i2];
    module.exports[element] = lib[element];
  }
}
},{"./clinical":5,"./datetime":7,"./interval":9,"./logic":10,"./quantity":11,"./ratio":12,"./uncertainty":13}],7:[function(require,module,exports){
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./uncertainty'),
    Uncertainty = _require.Uncertainty;

var _require2 = require('../util/util'),
    jsDate = _require2.jsDate,
    normalizeMillisecondsField = _require2.normalizeMillisecondsField,
    normalizeMillisecondsFieldInString = _require2.normalizeMillisecondsFieldInString;

var luxon = require('luxon'); // It's easiest and most performant to organize formats by length of the supported strings.
// This way we can test strings only against the formats that have a chance of working.
// NOTE: Formats use Luxon formats, documented here: https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens


var LENGTH_TO_DATE_FORMAT_MAP = function () {
  var ltdfMap = new Map();
  ltdfMap.set(4, 'yyyy');
  ltdfMap.set(7, 'yyyy-MM');
  ltdfMap.set(10, 'yyyy-MM-dd');
  return ltdfMap;
}();

var LENGTH_TO_DATETIME_FORMATS_MAP = function () {
  var formats = {
    yyyy: '2012',
    'yyyy-MM': '2012-01',
    'yyyy-MM-dd': '2012-01-31',
    "yyyy-MM-dd'T''Z'": '2012-01-31TZ',
    "yyyy-MM-dd'T'ZZ": '2012-01-31T-04:00',
    "yyyy-MM-dd'T'HH": '2012-01-31T12',
    "yyyy-MM-dd'T'HH'Z'": '2012-01-31T12Z',
    "yyyy-MM-dd'T'HHZZ": '2012-01-31T12-04:00',
    "yyyy-MM-dd'T'HH:mm": '2012-01-31T12:30',
    "yyyy-MM-dd'T'HH:mm'Z'": '2012-01-31T12:30Z',
    "yyyy-MM-dd'T'HH:mmZZ": '2012-01-31T12:30-04:00',
    "yyyy-MM-dd'T'HH:mm:ss": '2012-01-31T12:30:59',
    "yyyy-MM-dd'T'HH:mm:ss'Z'": '2012-01-31T12:30:59Z',
    "yyyy-MM-dd'T'HH:mm:ssZZ": '2012-01-31T12:30:59-04:00',
    "yyyy-MM-dd'T'HH:mm:ss.SSS": '2012-01-31T12:30:59.000',
    "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'": '2012-01-31T12:30:59.000Z',
    "yyyy-MM-dd'T'HH:mm:ss.SSSZZ": '2012-01-31T12:30:59.000-04:00'
  };
  var ltdtfMap = new Map();
  Object.keys(formats).forEach(function (k) {
    var example = formats[k];

    if (!ltdtfMap.has(example.length)) {
      ltdtfMap.set(example.length, [k]);
    } else {
      ltdtfMap.get(example.length).push(k);
    }
  });
  return ltdtfMap;
}();

function wholeLuxonDuration(duration, unit) {
  var value = duration.get(unit);
  return value >= 0 ? Math.floor(value) : Math.ceil(value);
}

function truncateLuxonDateTime(luxonDT, unit) {
  // Truncating by week (to the previous Sunday) requires different logic than the rest
  if (unit === DateTime.Unit.WEEK) {
    // Sunday is ISO weekday 7
    if (luxonDT.weekday !== 7) {
      luxonDT = luxonDT.set({
        weekday: 7
      }).minus({
        weeks: 1
      });
    }

    unit = DateTime.Unit.DAY;
  }

  return luxonDT.startOf(unit);
}

var DateTime = /*#__PURE__*/function () {
  _createClass(DateTime, null, [{
    key: "parse",
    value: function parse(string) {
      if (string === null) {
        return null;
      }

      var matches = /(\d{4})(-(\d{2}))?(-(\d{2}))?(T((\d{2})(:(\d{2})(:(\d{2})(\.(\d+))?)?)?)?(Z|(([+-])(\d{2})(:?(\d{2}))?))?)?/.exec(string);

      if (matches == null) {
        return null;
      }

      var years = matches[1];
      var months = matches[3];
      var days = matches[5];
      var hours = matches[8];
      var minutes = matches[10];
      var seconds = matches[12];
      var milliseconds = matches[14];

      if (milliseconds != null) {
        milliseconds = normalizeMillisecondsField(milliseconds);
      }

      if (milliseconds != null) {
        string = normalizeMillisecondsFieldInString(string, matches[14]);
      }

      if (!isValidDateTimeStringFormat(string)) {
        return null;
      } // convert the args to integers


      var args = [years, months, days, hours, minutes, seconds, milliseconds].map(function (arg) {
        return arg != null ? parseInt(arg) : arg;
      }); // convert timezone offset to decimal and add it to arguments

      if (matches[18] != null) {
        var num = parseInt(matches[18]) + (matches[20] != null ? parseInt(matches[20]) / 60 : 0);
        args.push(matches[17] === '+' ? num : num * -1);
      } else if (matches[15] === 'Z') {
        args.push(0);
      }

      return _construct(DateTime, _toConsumableArray(args));
    }
  }, {
    key: "fromJSDate",
    value: function fromJSDate(date, timezoneOffset) {
      //This is from a JS Date, not a CQL Date
      if (date instanceof DateTime) {
        return date;
      }

      if (timezoneOffset != null) {
        date = new jsDate(date.getTime() + timezoneOffset * 60 * 60 * 1000);
        return new DateTime(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds(), timezoneOffset);
      } else {
        return new DateTime(date.getFullYear(), date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
      }
    }
  }, {
    key: "fromLuxonDateTime",
    value: function fromLuxonDateTime(luxonDT) {
      if (luxonDT instanceof DateTime) {
        return luxonDT;
      }

      return new DateTime(luxonDT.year, luxonDT.month, luxonDT.day, luxonDT.hour, luxonDT.minute, luxonDT.second, luxonDT.millisecond, luxonDT.offset / 60);
    }
  }]);

  function DateTime() {
    var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var day = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var hour = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var minute = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var second = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var millisecond = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
    var timezoneOffset = arguments.length > 7 ? arguments[7] : undefined;

    _classCallCheck(this, DateTime);

    // from the spec: If no timezone is specified, the timezone of the evaluation request timestamp is used.
    // NOTE: timezoneOffset will be explicitly null for the Time overload, whereas
    // it will be undefined if simply unspecified
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.millisecond = millisecond;
    this.timezoneOffset = timezoneOffset;

    if (this.timezoneOffset === undefined) {
      this.timezoneOffset = new jsDate().getTimezoneOffset() / 60 * -1;
    }
  }

  _createClass(DateTime, [{
    key: "copy",
    value: function copy() {
      return new DateTime(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond, this.timezoneOffset);
    }
  }, {
    key: "successor",
    value: function successor() {
      if (this.millisecond != null) {
        return this.add(1, DateTime.Unit.MILLISECOND);
      } else if (this.second != null) {
        return this.add(1, DateTime.Unit.SECOND);
      } else if (this.minute != null) {
        return this.add(1, DateTime.Unit.MINUTE);
      } else if (this.hour != null) {
        return this.add(1, DateTime.Unit.HOUR);
      } else if (this.day != null) {
        return this.add(1, DateTime.Unit.DAY);
      } else if (this.month != null) {
        return this.add(1, DateTime.Unit.MONTH);
      } else if (this.year != null) {
        return this.add(1, DateTime.Unit.YEAR);
      }
    }
  }, {
    key: "predecessor",
    value: function predecessor() {
      if (this.millisecond != null) {
        return this.add(-1, DateTime.Unit.MILLISECOND);
      } else if (this.second != null) {
        return this.add(-1, DateTime.Unit.SECOND);
      } else if (this.minute != null) {
        return this.add(-1, DateTime.Unit.MINUTE);
      } else if (this.hour != null) {
        return this.add(-1, DateTime.Unit.HOUR);
      } else if (this.day != null) {
        return this.add(-1, DateTime.Unit.DAY);
      } else if (this.month != null) {
        return this.add(-1, DateTime.Unit.MONTH);
      } else if (this.year != null) {
        return this.add(-1, DateTime.Unit.YEAR);
      }
    }
  }, {
    key: "convertToTimezoneOffset",
    value: function convertToTimezoneOffset() {
      var timezoneOffset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var shiftedLuxonDT = this.toLuxonDateTime().setZone(luxon.FixedOffsetZone.instance(timezoneOffset * 60));
      var shiftedDT = DateTime.fromLuxonDateTime(shiftedLuxonDT);
      return shiftedDT.reducedPrecision(this.getPrecision());
    }
  }, {
    key: "differenceBetween",
    value: function differenceBetween(other, unitField) {
      other = this._implicitlyConvert(other);

      if (other == null || !other.isDateTime) {
        return null;
      } // According to CQL spec:
      // * "Difference calculations are performed by truncating the datetime values at the next precision,
      //   and then performing the corresponding duration calculation on the truncated values."
      // * "When difference is calculated for hours or finer units, timezone offsets should be normalized
      //   prior to truncation to correctly consider real (actual elapsed) time. When difference is calculated
      //   for days or coarser units, however, the time components (including timezone offset) should be truncated
      //   without normalization to correctly reflect the difference in calendar days, months, and years."


      var a = this.toLuxonUncertainty();
      var b = other.toLuxonUncertainty(); // If unit is days or above, reset all the DateTimes to UTC since TZ offset should not be considered;
      // Otherwise, we don't actually have to "normalize" to a common TZ because Luxon takes TZ into account.

      if ([DateTime.Unit.YEAR, DateTime.Unit.MONTH, DateTime.Unit.WEEK, DateTime.Unit.DAY].includes(unitField)) {
        a.low = a.low.toUTC(0, {
          keepLocalTime: true
        });
        a.high = a.high.toUTC(0, {
          keepLocalTime: true
        });
        b.low = b.low.toUTC(0, {
          keepLocalTime: true
        });
        b.high = b.high.toUTC(0, {
          keepLocalTime: true
        });
      } // Truncate all dates at precision below specified unit


      a.low = truncateLuxonDateTime(a.low, unitField);
      a.high = truncateLuxonDateTime(a.high, unitField);
      b.low = truncateLuxonDateTime(b.low, unitField);
      b.high = truncateLuxonDateTime(b.high, unitField); // Return the duration based on the normalize and truncated values

      return new Uncertainty(wholeLuxonDuration(b.low.diff(a.high, unitField), unitField), wholeLuxonDuration(b.high.diff(a.low, unitField), unitField));
    }
  }, {
    key: "durationBetween",
    value: function durationBetween(other, unitField) {
      other = this._implicitlyConvert(other);

      if (other == null || !other.isDateTime) {
        return null;
      }

      var a = this.toLuxonUncertainty();
      var b = other.toLuxonUncertainty();
      return new Uncertainty(wholeLuxonDuration(b.low.diff(a.high, unitField), unitField), wholeLuxonDuration(b.high.diff(a.low, unitField), unitField));
    }
  }, {
    key: "isUTC",
    value: function isUTC() {
      // A timezoneOffset of 0 indicates UTC time.
      return !this.timezoneOffset;
    }
  }, {
    key: "getPrecision",
    value: function getPrecision() {
      var result = null;

      if (this.year != null) {
        result = DateTime.Unit.YEAR;
      } else {
        return result;
      }

      if (this.month != null) {
        result = DateTime.Unit.MONTH;
      } else {
        return result;
      }

      if (this.day != null) {
        result = DateTime.Unit.DAY;
      } else {
        return result;
      }

      if (this.hour != null) {
        result = DateTime.Unit.HOUR;
      } else {
        return result;
      }

      if (this.minute != null) {
        result = DateTime.Unit.MINUTE;
      } else {
        return result;
      }

      if (this.second != null) {
        result = DateTime.Unit.SECOND;
      } else {
        return result;
      }

      if (this.millisecond != null) {
        result = DateTime.Unit.MILLISECOND;
      }

      return result;
    }
  }, {
    key: "toLuxonDateTime",
    value: function toLuxonDateTime() {
      var offsetMins = this.timezoneOffset != null ? this.timezoneOffset * 60 : new jsDate().getTimezoneOffset() * -1;
      return luxon.DateTime.fromObject({
        year: this.year,
        month: this.month,
        day: this.day,
        hour: this.hour,
        minute: this.minute,
        second: this.second,
        millisecond: this.millisecond,
        zone: luxon.FixedOffsetZone.instance(offsetMins)
      });
    }
  }, {
    key: "toLuxonUncertainty",
    value: function toLuxonUncertainty() {
      var low = this.toLuxonDateTime();
      var high = low.endOf(this.getPrecision());
      return new Uncertainty(low, high);
    }
  }, {
    key: "toJSDate",
    value: function toJSDate() {
      var ignoreTimezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var luxonDT = this.toLuxonDateTime(); // I don't know if anyone is using "ignoreTimezone" anymore (we aren't), but just in case

      if (ignoreTimezone) {
        var offset = new jsDate().getTimezoneOffset() * -1;
        luxonDT = luxonDT.setZone(luxon.FixedOffsetZone.instance(offset), {
          keepLocalTime: true
        });
      }

      return luxonDT.toJSDate();
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }, {
    key: "_pad",
    value: function _pad(num) {
      return String('0' + num).slice(-2);
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.isTime()) {
        return this.toStringTime();
      } else {
        return this.toStringDateTime();
      }
    }
  }, {
    key: "toStringTime",
    value: function toStringTime() {
      var str = '';

      if (this.hour != null) {
        str += this._pad(this.hour);

        if (this.minute != null) {
          str += ':' + this._pad(this.minute);

          if (this.second != null) {
            str += ':' + this._pad(this.second);

            if (this.millisecond != null) {
              str += '.' + String('00' + this.millisecond).slice(-3);
            }
          }
        }
      }

      return str;
    }
  }, {
    key: "toStringDateTime",
    value: function toStringDateTime() {
      var str = '';

      if (this.year != null) {
        str += this.year;

        if (this.month != null) {
          str += '-' + this._pad(this.month);

          if (this.day != null) {
            str += '-' + this._pad(this.day);

            if (this.hour != null) {
              str += 'T' + this._pad(this.hour);

              if (this.minute != null) {
                str += ':' + this._pad(this.minute);

                if (this.second != null) {
                  str += ':' + this._pad(this.second);

                  if (this.millisecond != null) {
                    str += '.' + String('00' + this.millisecond).slice(-3);
                  }
                }
              }
            }
          }
        }
      }

      if (str.indexOf('T') !== -1 && this.timezoneOffset != null) {
        str += this.timezoneOffset < 0 ? '-' : '+';
        var offsetHours = Math.floor(Math.abs(this.timezoneOffset));
        str += this._pad(offsetHours);
        var offsetMin = (Math.abs(this.timezoneOffset) - offsetHours) * 60;
        str += ':' + this._pad(offsetMin);
      }

      return str;
    }
  }, {
    key: "getDateTime",
    value: function getDateTime() {
      return this;
    }
  }, {
    key: "getDate",
    value: function getDate() {
      return new _Date(this.year, this.month, this.day);
    }
  }, {
    key: "getTime",
    value: function getTime() {
      // Times no longer have timezoneOffets, so we must explicitly set it to null
      return new DateTime(0, 1, 1, this.hour, this.minute, this.second, this.millisecond, null);
    }
  }, {
    key: "isTime",
    value: function isTime() {
      return this.year === 0 && this.month === 1 && this.day === 1;
    }
  }, {
    key: "_implicitlyConvert",
    value: function _implicitlyConvert(other) {
      if (other != null && other.isDate) {
        return other.getDateTime();
      }

      return other;
    }
  }, {
    key: "reducedPrecision",
    value: function reducedPrecision() {
      var unitField = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DateTime.Unit.MILLISECOND;
      var reduced = this.copy();

      if (unitField !== DateTime.Unit.MILLISECOND) {
        var fieldIndex = DateTime.FIELDS.indexOf(unitField);
        var fieldsToRemove = DateTime.FIELDS.slice(fieldIndex + 1);

        var _iterator = _createForOfIteratorHelper(fieldsToRemove),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var field = _step.value;
            reduced[field] = null;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return reduced;
    }
  }, {
    key: "isDateTime",
    get: function get() {
      return true;
    }
  }]);

  return DateTime;
}();

DateTime.Unit = {
  YEAR: 'year',
  MONTH: 'month',
  WEEK: 'week',
  DAY: 'day',
  HOUR: 'hour',
  MINUTE: 'minute',
  SECOND: 'second',
  MILLISECOND: 'millisecond'
};
DateTime.FIELDS = [DateTime.Unit.YEAR, DateTime.Unit.MONTH, DateTime.Unit.DAY, DateTime.Unit.HOUR, DateTime.Unit.MINUTE, DateTime.Unit.SECOND, DateTime.Unit.MILLISECOND];

var _Date = /*#__PURE__*/function () {
  _createClass(_Date, null, [{
    key: "parse",
    value: function parse(string) {
      if (string === null) {
        return null;
      }

      var matches = /(\d{4})(-(\d{2}))?(-(\d{2}))?/.exec(string);

      if (matches == null) {
        return null;
      }

      var years = matches[1];
      var months = matches[3];
      var days = matches[5];

      if (!isValidDateStringFormat(string)) {
        return null;
      } // convert args to integers


      var args = [years, months, days].map(function (arg) {
        return arg != null ? parseInt(arg) : arg;
      });
      return _construct(_Date, _toConsumableArray(args));
    }
  }]);

  function _Date() {
    var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var day = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, _Date);

    this.year = year;
    this.month = month;
    this.day = day;
  }

  _createClass(_Date, [{
    key: "copy",
    value: function copy() {
      return new _Date(this.year, this.month, this.day);
    }
  }, {
    key: "successor",
    value: function successor() {
      if (this.day != null) {
        return this.add(1, _Date.Unit.DAY);
      } else if (this.month != null) {
        return this.add(1, _Date.Unit.MONTH);
      } else if (this.year != null) {
        return this.add(1, _Date.Unit.YEAR);
      }
    }
  }, {
    key: "predecessor",
    value: function predecessor() {
      if (this.day != null) {
        return this.add(-1, _Date.Unit.DAY);
      } else if (this.month != null) {
        return this.add(-1, _Date.Unit.MONTH);
      } else if (this.year != null) {
        return this.add(-1, _Date.Unit.YEAR);
      }
    }
  }, {
    key: "differenceBetween",
    value: function differenceBetween(other, unitField) {
      if (other != null && other.isDateTime) {
        return this.getDateTime().differenceBetween(other, unitField);
      }

      if (other == null || !other.isDate) {
        return null;
      } // According to CQL spec:
      // * "Difference calculations are performed by truncating the datetime values at the next precision,
      //   and then performing the corresponding duration calculation on the truncated values."


      var a = this.toLuxonUncertainty();
      var b = other.toLuxonUncertainty(); // Truncate all dates at precision below specified unit

      a.low = truncateLuxonDateTime(a.low, unitField);
      a.high = truncateLuxonDateTime(a.high, unitField);
      b.low = truncateLuxonDateTime(b.low, unitField);
      b.high = truncateLuxonDateTime(b.high, unitField); // Return the duration based on the normalize and truncated values

      return new Uncertainty(wholeLuxonDuration(b.low.diff(a.high, unitField), unitField), wholeLuxonDuration(b.high.diff(a.low, unitField), unitField));
    }
  }, {
    key: "durationBetween",
    value: function durationBetween(other, unitField) {
      if (other != null && other.isDateTime) {
        return this.getDateTime().durationBetween(other, unitField);
      }

      if (other == null || !other.isDate) {
        return null;
      }

      var a = this.toLuxonUncertainty();
      var b = other.toLuxonUncertainty();
      return new Uncertainty(wholeLuxonDuration(b.low.diff(a.high, unitField), unitField), wholeLuxonDuration(b.high.diff(a.low, unitField), unitField));
    }
  }, {
    key: "getPrecision",
    value: function getPrecision() {
      var result = null;

      if (this.year != null) {
        result = _Date.Unit.YEAR;
      } else {
        return result;
      }

      if (this.month != null) {
        result = _Date.Unit.MONTH;
      } else {
        return result;
      }

      if (this.day != null) {
        result = _Date.Unit.DAY;
      } else {
        return result;
      }

      return result;
    }
  }, {
    key: "toLuxonDateTime",
    value: function toLuxonDateTime() {
      return luxon.DateTime.fromObject({
        year: this.year,
        month: this.month,
        day: this.day,
        zone: luxon.FixedOffsetZone.utcInstance
      });
    }
  }, {
    key: "toLuxonUncertainty",
    value: function toLuxonUncertainty() {
      var low = this.toLuxonDateTime();
      var high = low.endOf(this.getPrecision()).startOf('day'); // Date type is always at T00:00:00.0

      return new Uncertainty(low, high);
    }
  }, {
    key: "toJSDate",
    value: function toJSDate() {
      var _ref = [this.year, this.month != null ? this.month - 1 : 0, this.day != null ? this.day : 1],
          y = _ref[0],
          mo = _ref[1],
          d = _ref[2];
      return new jsDate(y, mo, d);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }, {
    key: "toString",
    value: function toString() {
      var str = '';

      if (this.year != null) {
        str += this.year.toString();

        if (this.month != null) {
          str += '-' + this.month.toString().padStart(2, '0');

          if (this.day != null) {
            str += '-' + this.day.toString().padStart(2, '0');
          }
        }
      }

      return str;
    }
  }, {
    key: "getDateTime",
    value: function getDateTime() {
      // from the spec: the result will be a DateTime with the time components set to zero,
      // except for the timezone offset, which will be set to the timezone offset of the evaluation
      // request timestamp. (this last part is acheived by just not passing in timezone offset)
      if (this.year != null && this.month != null && this.day != null) {
        return new DateTime(this.year, this.month, this.day, 0, 0, 0, 0); // from spec: no component may be specified at a precision below an unspecified precision.
        // For example, hour may be null, but if it is, minute, second, and millisecond must all be null as well.
      } else {
        return new DateTime(this.year, this.month, this.day);
      }
    }
  }, {
    key: "reducedPrecision",
    value: function reducedPrecision() {
      var unitField = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Date.Unit.DAY;
      var reduced = this.copy();

      if (unitField !== _Date.Unit.DAY) {
        var fieldIndex = _Date.FIELDS.indexOf(unitField);

        var fieldsToRemove = _Date.FIELDS.slice(fieldIndex + 1);

        var _iterator2 = _createForOfIteratorHelper(fieldsToRemove),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var field = _step2.value;
            reduced[field] = null;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      return reduced;
    }
  }, {
    key: "isDate",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromJSDate",
    value: function fromJSDate(date) {
      if (date instanceof _Date) {
        return date;
      }

      return new _Date(date.getFullYear(), date.getMonth() + 1, date.getDate());
    }
  }, {
    key: "fromLuxonDateTime",
    value: function fromLuxonDateTime(luxonDT) {
      if (luxonDT instanceof _Date) {
        return luxonDT;
      }

      return new _Date(luxonDT.year, luxonDT.month, luxonDT.day);
    }
  }]);

  return _Date;
}();

var MIN_DATETIME_VALUE = DateTime.parse('0001-01-01T00:00:00.000');
var MAX_DATETIME_VALUE = DateTime.parse('9999-12-31T23:59:59.999');

var MIN_DATE_VALUE = _Date.parse('0001-01-01');

var MAX_DATE_VALUE = _Date.parse('9999-12-31');

var MIN_TIME_VALUE = DateTime.parse('0000-01-01T00:00:00.000').getTime();
var MAX_TIME_VALUE = DateTime.parse('0000-01-01T23:59:59.999').getTime();
_Date.Unit = {
  YEAR: 'year',
  MONTH: 'month',
  WEEK: 'week',
  DAY: 'day'
};
_Date.FIELDS = [_Date.Unit.YEAR, _Date.Unit.MONTH, _Date.Unit.DAY]; // Shared Funtions For Date and DateTime

DateTime.prototype.isPrecise = _Date.prototype.isPrecise = function () {
  var _this = this;

  return this.constructor.FIELDS.every(function (field) {
    return _this[field] != null;
  });
};

DateTime.prototype.isImprecise = _Date.prototype.isImprecise = function () {
  return !this.isPrecise();
}; // This function can take another Date-ish object, or a precision string (e.g. 'month')


DateTime.prototype.isMorePrecise = _Date.prototype.isMorePrecise = function (other) {
  if (typeof other === 'string' && this.constructor.FIELDS.includes(other)) {
    if (this[other] == null) {
      return false;
    }
  } else {
    var _iterator3 = _createForOfIteratorHelper(this.constructor.FIELDS),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var field = _step3.value;

        if (other[field] != null && this[field] == null) {
          return false;
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }

  return !this.isSamePrecision(other);
}; // This function can take another Date-ish object, or a precision string (e.g. 'month')


DateTime.prototype.isLessPrecise = _Date.prototype.isLessPrecise = function (other) {
  return !this.isSamePrecision(other) && !this.isMorePrecise(other);
}; // This function can take another Date-ish object, or a precision string (e.g. 'month')


DateTime.prototype.isSamePrecision = _Date.prototype.isSamePrecision = function (other) {
  if (typeof other === 'string' && this.constructor.FIELDS.includes(other)) {
    return other === this.getPrecision();
  }

  var _iterator4 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var field = _step4.value;

      if (this[field] != null && other[field] == null) {
        return false;
      }

      if (this[field] == null && other[field] != null) {
        return false;
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return true;
};

DateTime.prototype.equals = _Date.prototype.equals = function (other) {
  return compareWithDefaultResult(this, other, null);
};

DateTime.prototype.equivalent = _Date.prototype.equivalent = function (other) {
  return compareWithDefaultResult(this, other, false);
};

DateTime.prototype.sameAs = _Date.prototype.sameAs = function (other, precision) {
  if (!(other.isDate || other.isDateTime)) {
    return null;
  } else if (this.isDate && other.isDateTime) {
    return this.getDateTime().sameAs(other, precision);
  } else if (this.isDateTime && other.isDate) {
    other = other.getDateTime();
  }

  if (precision != null && this.constructor.FIELDS.indexOf(precision) < 0) {
    throw new Error("Invalid precision: ".concat(precision));
  } // make a copy of other in the correct timezone offset if they don't match.


  if (this.timezoneOffset !== other.timezoneOffset) {
    other = other.convertToTimezoneOffset(this.timezoneOffset);
  }

  var _iterator5 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var field = _step5.value;

      // if both have this precision defined
      if (this[field] != null && other[field] != null) {
        // if they are different then return with false
        if (this[field] !== other[field]) {
          return false;
        } // if both dont have this precision, return true of precision is not defined

      } else if (this[field] == null && other[field] == null) {
        if (precision == null) {
          return true;
        } else {
          // we havent met precision yet
          return null;
        } // otherwise they have inconclusive precision, return null

      } else {
        return null;
      } // if precision is defined and we have reached expected precision, we can leave the loop


      if (precision != null && precision === field) {
        break;
      }
    } // if we made it here, then all fields matched.

  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  return true;
};

DateTime.prototype.sameOrBefore = _Date.prototype.sameOrBefore = function (other, precision) {
  if (!(other.isDate || other.isDateTime)) {
    return null;
  } else if (this.isDate && other.isDateTime) {
    return this.getDateTime().sameOrBefore(other, precision);
  } else if (this.isDateTime && other.isDate) {
    other = other.getDateTime();
  }

  if (precision != null && this.constructor.FIELDS.indexOf(precision) < 0) {
    throw new Error("Invalid precision: ".concat(precision));
  } // make a copy of other in the correct timezone offset if they don't match.


  if (this.timezoneOffset !== other.timezoneOffset) {
    other = other.convertToTimezoneOffset(this.timezoneOffset);
  }

  var _iterator6 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var field = _step6.value;

      // if both have this precision defined
      if (this[field] != null && other[field] != null) {
        // if this value is less than the other return with true. this is before other
        if (this[field] < other[field]) {
          return true; // if this value is greater than the other return with false. this is after
        } else if (this[field] > other[field]) {
          return false;
        } // execution continues if the values are the same
        // if both dont have this precision, return true if precision is not defined

      } else if (this[field] == null && other[field] == null) {
        if (precision == null) {
          return true;
        } else {
          // we havent met precision yet
          return null;
        } // otherwise they have inconclusive precision, return null

      } else {
        return null;
      } // if precision is defined and we have reached expected precision, we can leave the loop


      if (precision != null && precision === field) {
        break;
      }
    } // if we made it here, then all fields matched and they are same

  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  return true;
};

DateTime.prototype.sameOrAfter = _Date.prototype.sameOrAfter = function (other, precision) {
  if (!(other.isDate || other.isDateTime)) {
    return null;
  } else if (this.isDate && other.isDateTime) {
    return this.getDateTime().sameOrAfter(other, precision);
  } else if (this.isDateTime && other.isDate) {
    other = other.getDateTime();
  }

  if (precision != null && this.constructor.FIELDS.indexOf(precision) < 0) {
    throw new Error("Invalid precision: ".concat(precision));
  } // make a copy of other in the correct timezone offset if they don't match.


  if (this.timezoneOffset !== other.timezoneOffset) {
    other = other.convertToTimezoneOffset(this.timezoneOffset);
  }

  var _iterator7 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step7;

  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var field = _step7.value;

      // if both have this precision defined
      if (this[field] != null && other[field] != null) {
        // if this value is greater than the other return with true. this is after other
        if (this[field] > other[field]) {
          return true; // if this value is greater than the other return with false. this is before
        } else if (this[field] < other[field]) {
          return false;
        } // execution continues if the values are the same
        // if both dont have this precision, return true if precision is not defined

      } else if (this[field] == null && other[field] == null) {
        if (precision == null) {
          return true;
        } else {
          // we havent met precision yet
          return null;
        } // otherwise they have inconclusive precision, return null

      } else {
        return null;
      } // if precision is defined and we have reached expected precision, we can leave the loop


      if (precision != null && precision === field) {
        break;
      }
    } // if we made it here, then all fields matched and they are same

  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }

  return true;
};

DateTime.prototype.before = _Date.prototype.before = function (other, precision) {
  if (!(other.isDate || other.isDateTime)) {
    return null;
  } else if (this.isDate && other.isDateTime) {
    return this.getDateTime().before(other, precision);
  } else if (this.isDateTime && other.isDate) {
    other = other.getDateTime();
  }

  if (precision != null && this.constructor.FIELDS.indexOf(precision) < 0) {
    throw new Error("Invalid precision: ".concat(precision));
  } // make a copy of other in the correct timezone offset if they don't match.


  if (this.timezoneOffset !== other.timezoneOffset) {
    other = other.convertToTimezoneOffset(this.timezoneOffset);
  }

  var _iterator8 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step8;

  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var field = _step8.value;

      // if both have this precision defined
      if (this[field] != null && other[field] != null) {
        // if this value is less than the other return with true. this is before other
        if (this[field] < other[field]) {
          return true; // if this value is greater than the other return with false. this is after
        } else if (this[field] > other[field]) {
          return false;
        } // execution continues if the values are the same
        // if both dont have this precision, return false if precision is not defined

      } else if (this[field] == null && other[field] == null) {
        if (precision == null) {
          return false;
        } else {
          // we havent met precision yet
          return null;
        } // otherwise they have inconclusive precision, return null

      } else {
        return null;
      } // if precision is defined and we have reached expected precision, we can leave the loop


      if (precision != null && precision === field) {
        break;
      }
    } // if we made it here, then all fields matched and they are same

  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }

  return false;
};

DateTime.prototype.after = _Date.prototype.after = function (other, precision) {
  if (!(other.isDate || other.isDateTime)) {
    return null;
  } else if (this.isDate && other.isDateTime) {
    return this.getDateTime().after(other, precision);
  } else if (this.isDateTime && other.isDate) {
    other = other.getDateTime();
  }

  if (precision != null && this.constructor.FIELDS.indexOf(precision) < 0) {
    throw new Error("Invalid precision: ".concat(precision));
  } // make a copy of other in the correct timezone offset if they don't match.


  if (this.timezoneOffset !== other.timezoneOffset) {
    other = other.convertToTimezoneOffset(this.timezoneOffset);
  }

  var _iterator9 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step9;

  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var field = _step9.value;

      // if both have this precision defined
      if (this[field] != null && other[field] != null) {
        // if this value is greater than the other return with true. this is after other
        if (this[field] > other[field]) {
          return true; // if this value is greater than the other return with false. this is before
        } else if (this[field] < other[field]) {
          return false;
        } // execution continues if the values are the same
        // if both dont have this precision, return false if precision is not defined

      } else if (this[field] == null && other[field] == null) {
        if (precision == null) {
          return false;
        } else {
          // we havent met precision yet
          return null;
        } // otherwise they have inconclusive precision, return null

      } else {
        return null;
      } // if precision is defined and we have reached expected precision, we can leave the loop


      if (precision != null && precision === field) {
        break;
      }
    } // if we made it here, then all fields matched and they are same

  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }

  return false;
};

DateTime.prototype.add = _Date.prototype.add = function (offset, field) {
  if (offset === 0 || this.year == null) {
    return this.copy();
  } // Use luxon to do the date math because it honors DST and it has the leap-year/end-of-month semantics we want.
  // NOTE: The luxonDateTime will contain default values where this[unit] is null, but we'll account for that.


  var luxonDateTime = this.toLuxonDateTime(); // From the spec: "The operation is performed by converting the time-based quantity to the most precise value
  // specified in the date/time (truncating any resulting decimal portion) and then adding it to the date/time value."
  // However, since you can't really convert days to months,  if "this" is less precise than the field being added, we can
  // add to the earliest possible value of "this" or subtract from the latest possible value of "this" (depending on the
  // sign of the offset), and then null out the imprecise fields again after doing the calculation.  Due to the way
  // luxonDateTime is constructed above, it is already at the earliest value, so only adjust if the offset is negative.

  var offsetIsMorePrecise = this[field] == null; //whether the quantity we are adding is more precise than "this".

  if (offsetIsMorePrecise && offset < 0) {
    luxonDateTime = luxonDateTime.endOf(this.getPrecision());
  } // Now do the actual math and convert it back to a Date/DateTime w/ originally null fields nulled out again


  var luxonResult = luxonDateTime.plus(_defineProperty({}, field, offset));
  var result = this.constructor.fromLuxonDateTime(luxonResult).reducedPrecision(this.getPrecision()); // Luxon never has a null offset, but sometimes "this" does, so reset to null if applicable

  if (this.isDateTime && this.timezoneOffset == null) {
    result.timezoneOffset = null;
  } // Can't use overflowsOrUnderflows from math.js due to circular dependencies when we require it


  if (result.after(MAX_DATETIME_VALUE || result.before(MIN_DATETIME_VALUE))) {
    return null;
  } else {
    return result;
  }
};

DateTime.prototype.getFieldFloor = _Date.prototype.getFieldFloor = function (field) {
  switch (field) {
    case 'month':
      return 1;

    case 'day':
      return 1;

    case 'hour':
      return 0;

    case 'minute':
      return 0;

    case 'second':
      return 0;

    case 'millisecond':
      return 0;

    default:
      throw new Error('Tried to floor a field that has no floor value: ' + field);
  }
};

DateTime.prototype.getFieldCieling = _Date.prototype.getFieldCieling = function (field) {
  switch (field) {
    case 'month':
      return 12;

    case 'day':
      return daysInMonth(this.year, this.month);

    case 'hour':
      return 23;

    case 'minute':
      return 59;

    case 'second':
      return 59;

    case 'millisecond':
      return 999;

    default:
      throw new Error('Tried to clieling a field that has no cieling value: ' + field);
  }
};

function compareWithDefaultResult(a, b, defaultResult) {
  // return false there is a type mismatch
  if ((!a.isDate || !b.isDate) && (!a.isDateTime || !b.isDateTime)) {
    return false;
  } // make a copy of other in the correct timezone offset if they don't match.


  if (a.timezoneOffset !== b.timezoneOffset) {
    b = b.convertToTimezoneOffset(a.timezoneOffset);
  }

  var _iterator10 = _createForOfIteratorHelper(a.constructor.FIELDS),
      _step10;

  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var field = _step10.value;

      // if both have this precision defined
      if (a[field] != null && b[field] != null) {
        // For the purposes of comparison, seconds and milliseconds are combined
        // as a single precision using a decimal, with decimal equality semantics
        if (field === 'second') {
          // NOTE: if millisecond is null it will calcualte like this anyway, but
          // if millisecond is undefined, using it will result in NaN calculations
          var aMillisecond = a['millisecond'] != null ? a['millisecond'] : 0;
          var aSecondAndMillisecond = a[field] + aMillisecond / 1000;
          var bMillisecond = b['millisecond'] != null ? b['millisecond'] : 0;
          var bSecondAndMillisecond = b[field] + bMillisecond / 1000; // second/millisecond is the most precise comparison, so we can directly return

          return aSecondAndMillisecond === bSecondAndMillisecond;
        } // if they are different then return with false


        if (a[field] !== b[field]) {
          return false;
        } // if both dont have this precision, return true

      } else if (a[field] == null && b[field] == null) {
        return true; // otherwise they have inconclusive precision, return defaultResult
      } else {
        return defaultResult;
      }
    } // if we made it here, then all fields matched.

  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }

  return true;
}

function daysInMonth(year, month) {
  if (year == null || month == null) {
    throw new Error('daysInMonth requires year and month as arguments');
  } // Month is 1-indexed here because of the 0 day


  return new jsDate(year, month, 0).getDate();
}

function isValidDateStringFormat(string) {
  if (typeof string !== 'string') {
    return false;
  }

  var format = LENGTH_TO_DATE_FORMAT_MAP.get(string.length);

  if (format == null) {
    return false;
  }

  return luxon.DateTime.fromFormat(string, format).isValid;
}

function isValidDateTimeStringFormat(string) {
  if (typeof string !== 'string') {
    return false;
  } // Luxon doesn't support +hh offset, so change it to +hh:00


  if (/T[\d:.]*[+-]\d{2}$/.test(string)) {
    string += ':00';
  }

  var formats = LENGTH_TO_DATETIME_FORMATS_MAP.get(string.length);

  if (formats == null) {
    return false;
  }

  return formats.some(function (fmt) {
    return luxon.DateTime.fromFormat(string, fmt).isValid;
  });
}

module.exports = {
  DateTime: DateTime,
  Date: _Date,
  MIN_DATETIME_VALUE: MIN_DATETIME_VALUE,
  MAX_DATETIME_VALUE: MAX_DATETIME_VALUE,
  MIN_DATE_VALUE: MIN_DATE_VALUE,
  MAX_DATE_VALUE: MAX_DATE_VALUE,
  MIN_TIME_VALUE: MIN_TIME_VALUE,
  MAX_TIME_VALUE: MAX_TIME_VALUE
}; // Require MIN/MAX here because math.js requires this file, and when we make this file require
// math.js before it exports DateTime and Date, it errors due to the circular dependency...
// const { MAX_DATETIME_VALUE, MIN_DATETIME_VALUE } = require('../util/math');
},{"../util/util":48,"./uncertainty":13,"luxon":65}],8:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Exception = function Exception(message, wrapped) {
  _classCallCheck(this, Exception);

  this.message = message;
  this.wrapped = wrapped;
};

module.exports = {
  Exception: Exception
};
},{}],9:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./uncertainty'),
    Uncertainty = _require.Uncertainty;

var _require2 = require('../datatypes/quantity'),
    Quantity = _require2.Quantity,
    doSubtraction = _require2.doSubtraction;

var _require3 = require('./logic'),
    ThreeValuedLogic = _require3.ThreeValuedLogic;

var _require4 = require('../util/math'),
    successor = _require4.successor,
    predecessor = _require4.predecessor,
    maxValueForInstance = _require4.maxValueForInstance,
    minValueForInstance = _require4.minValueForInstance,
    maxValueForType = _require4.maxValueForType,
    minValueForType = _require4.minValueForType;

var cmp = require('../util/comparison');

var Interval = /*#__PURE__*/function () {
  function Interval(low, high, lowClosed, highClosed, defaultPointType) {
    _classCallCheck(this, Interval);

    this.low = low;
    this.high = high;
    this.lowClosed = lowClosed != null ? lowClosed : true;
    this.highClosed = highClosed != null ? highClosed : true; // defaultPointType is used in the case that both endpoints are null

    this.defaultPointType = defaultPointType;
  }

  _createClass(Interval, [{
    key: "copy",
    value: function copy() {
      var newLow = this.low;
      var newHigh = this.high;

      if (this.low != null && typeof this.low.copy === 'function') {
        newLow = this.low.copy();
      }

      if (this.high != null && typeof this.high.copy === 'function') {
        newHigh = this.high.copy();
      }

      return new Interval(newLow, newHigh, this.lowClosed, this.highClosed);
    }
  }, {
    key: "contains",
    value: function contains(item, precision) {
      // These first two checks ensure correct handling of edge case where an item equals the closed boundary
      if (this.lowClosed && this.low != null && cmp.equals(this.low, item)) {
        return true;
      }

      if (this.highClosed && this.high != null && cmp.equals(this.high, item)) {
        return true;
      }

      if (item != null && item.isInterval) {
        throw new Error('Argument to contains must be a point');
      }

      var lowFn;

      if (this.lowClosed && this.low == null) {
        lowFn = function lowFn() {
          return true;
        };
      } else if (this.lowClosed) {
        lowFn = cmp.lessThanOrEquals;
      } else {
        lowFn = cmp.lessThan;
      }

      var highFn;

      if (this.highClosed && this.high == null) {
        highFn = function highFn() {
          return true;
        };
      } else if (this.highClosed) {
        highFn = cmp.greaterThanOrEquals;
      } else {
        highFn = cmp.greaterThan;
      }

      return ThreeValuedLogic.and(lowFn(this.low, item, precision), highFn(this.high, item, precision));
    }
  }, {
    key: "properlyIncludes",
    value: function properlyIncludes(other, precision) {
      if (other == null || !other.isInterval) {
        throw new Error('Argument to properlyIncludes must be an interval');
      }

      return ThreeValuedLogic.and(this.includes(other, precision), ThreeValuedLogic.not(other.includes(this, precision)));
    }
  }, {
    key: "includes",
    value: function includes(other, precision) {
      if (other == null || !other.isInterval) {
        return this.contains(other, precision);
      }

      var a = this.toClosed();
      var b = other.toClosed();
      return ThreeValuedLogic.and(cmp.lessThanOrEquals(a.low, b.low, precision), cmp.greaterThanOrEquals(a.high, b.high, precision));
    }
  }, {
    key: "includedIn",
    value: function includedIn(other, precision) {
      // For the point overload, this operator is a synonym for the in operator
      if (other == null || !other.isInterval) {
        return this.contains(other, precision);
      } else {
        return other.includes(this);
      }
    }
  }, {
    key: "overlaps",
    value: function overlaps(item, precision) {
      var closed = this.toClosed();

      var _ref = function () {
        if (item != null && item.isInterval) {
          var itemClosed = item.toClosed();
          return [itemClosed.low, itemClosed.high];
        } else {
          return [item, item];
        }
      }(),
          _ref2 = _slicedToArray(_ref, 2),
          low = _ref2[0],
          high = _ref2[1];

      return ThreeValuedLogic.and(cmp.lessThanOrEquals(closed.low, high, precision), cmp.greaterThanOrEquals(closed.high, low, precision));
    }
  }, {
    key: "overlapsAfter",
    value: function overlapsAfter(item, precision) {
      var closed = this.toClosed();
      var high = item != null && item.isInterval ? item.toClosed().high : item;
      return ThreeValuedLogic.and(cmp.lessThanOrEquals(closed.low, high, precision), cmp.greaterThan(closed.high, high, precision));
    }
  }, {
    key: "overlapsBefore",
    value: function overlapsBefore(item, precision) {
      var closed = this.toClosed();
      var low = item != null && item.isInterval ? item.toClosed().low : item;
      return ThreeValuedLogic.and(cmp.lessThan(closed.low, low, precision), cmp.greaterThanOrEquals(closed.high, low, precision));
    }
  }, {
    key: "union",
    value: function union(other) {
      if (other == null || !other.isInterval) {
        throw new Error('Argument to union must be an interval');
      } // Note that interval union is only defined if the arguments overlap or meet.


      if (this.overlaps(other) || this.meets(other)) {
        var _ref3 = [this.toClosed(), other.toClosed()],
            a = _ref3[0],
            b = _ref3[1];
        var l, lc;

        if (cmp.lessThanOrEquals(a.low, b.low)) {
          var _ref4 = [this.low, this.lowClosed];
          l = _ref4[0];
          lc = _ref4[1];
        } else if (cmp.greaterThanOrEquals(a.low, b.low)) {
          var _ref5 = [other.low, other.lowClosed];
          l = _ref5[0];
          lc = _ref5[1];
        } else if (areNumeric(a.low, b.low)) {
          var _ref6 = [lowestNumericUncertainty(a.low, b.low), true];
          l = _ref6[0];
          lc = _ref6[1];
        } else if (areDateTimes(a.low, b.low) && a.low.isMorePrecise(b.low)) {
          var _ref7 = [other.low, other.lowClosed];
          l = _ref7[0];
          lc = _ref7[1];
        } else {
          var _ref8 = [this.low, this.lowClosed];
          l = _ref8[0];
          lc = _ref8[1];
        }

        var h, hc;

        if (cmp.greaterThanOrEquals(a.high, b.high)) {
          var _ref9 = [this.high, this.highClosed];
          h = _ref9[0];
          hc = _ref9[1];
        } else if (cmp.lessThanOrEquals(a.high, b.high)) {
          var _ref10 = [other.high, other.highClosed];
          h = _ref10[0];
          hc = _ref10[1];
        } else if (areNumeric(a.high, b.high)) {
          var _ref11 = [highestNumericUncertainty(a.high, b.high), true];
          h = _ref11[0];
          hc = _ref11[1];
        } else if (areDateTimes(a.high, b.high) && a.high.isMorePrecise(b.high)) {
          var _ref12 = [other.high, other.highClosed];
          h = _ref12[0];
          hc = _ref12[1];
        } else {
          var _ref13 = [this.high, this.highClosed];
          h = _ref13[0];
          hc = _ref13[1];
        }

        return new Interval(l, h, lc, hc);
      } else {
        return null;
      }
    }
  }, {
    key: "intersect",
    value: function intersect(other) {
      if (other == null || !other.isInterval) {
        throw new Error('Argument to union must be an interval');
      } // Note that interval union is only defined if the arguments overlap.


      if (this.overlaps(other)) {
        var _ref14 = [this.toClosed(), other.toClosed()],
            a = _ref14[0],
            b = _ref14[1];
        var l, lc;

        if (cmp.greaterThanOrEquals(a.low, b.low)) {
          var _ref15 = [this.low, this.lowClosed];
          l = _ref15[0];
          lc = _ref15[1];
        } else if (cmp.lessThanOrEquals(a.low, b.low)) {
          var _ref16 = [other.low, other.lowClosed];
          l = _ref16[0];
          lc = _ref16[1];
        } else if (areNumeric(a.low, b.low)) {
          var _ref17 = [highestNumericUncertainty(a.low, b.low), true];
          l = _ref17[0];
          lc = _ref17[1];
        } else if (areDateTimes(a.low, b.low) && b.low.isMorePrecise(a.low)) {
          var _ref18 = [other.low, other.lowClosed];
          l = _ref18[0];
          lc = _ref18[1];
        } else {
          var _ref19 = [this.low, this.lowClosed];
          l = _ref19[0];
          lc = _ref19[1];
        }

        var h, hc;

        if (cmp.lessThanOrEquals(a.high, b.high)) {
          var _ref20 = [this.high, this.highClosed];
          h = _ref20[0];
          hc = _ref20[1];
        } else if (cmp.greaterThanOrEquals(a.high, b.high)) {
          var _ref21 = [other.high, other.highClosed];
          h = _ref21[0];
          hc = _ref21[1];
        } else if (areNumeric(a.high, b.high)) {
          var _ref22 = [lowestNumericUncertainty(a.high, b.high), true];
          h = _ref22[0];
          hc = _ref22[1];
        } else if (areDateTimes(a.high, b.high) && b.high.isMorePrecise(a.high)) {
          var _ref23 = [other.high, other.highClosed];
          h = _ref23[0];
          hc = _ref23[1];
        } else {
          var _ref24 = [this.high, this.highClosed];
          h = _ref24[0];
          hc = _ref24[1];
        }

        return new Interval(l, h, lc, hc);
      } else {
        return null;
      }
    }
  }, {
    key: "except",
    value: function except(other) {
      if (other === null) {
        return null;
      }

      if (other == null || !other.isInterval) {
        throw new Error('Argument to except must be an interval');
      }

      var ol = this.overlaps(other);

      if (ol === true) {
        var olb = this.overlapsBefore(other);
        var ola = this.overlapsAfter(other);

        if (olb === true && ola === false) {
          return new Interval(this.low, other.low, this.lowClosed, !other.lowClosed);
        } else if (ola === true && olb === false) {
          return new Interval(other.high, this.high, !other.highClosed, this.highClosed);
        } else {
          return null;
        }
      } else if (ol === false) {
        return this;
      } else {
        // ol is null
        return null;
      }
    }
  }, {
    key: "sameAs",
    value: function sameAs(other, precision) {
      // This large if and else if block handles the scenarios where there is an open ended null
      // If both lows or highs exists, it can be determined that intervals are not Same As
      if (this.low != null && other.low != null && this.high == null && other.high != null && !this.highClosed || this.low != null && other.low != null && this.high != null && other.high == null && !other.highClosed || this.low != null && other.low != null && this.high == null && other.high == null && !other.highClosed && !this.highClosed) {
        if (typeof this.low === 'number') {
          if (!(this.start() === other.start())) {
            return false;
          }
        } else {
          if (!this.start().sameAs(other.start(), precision)) {
            return false;
          }
        }
      } else if (this.low != null && other.low == null && this.high != null && other.high != null || this.low == null && other.low != null && this.high != null && other.high != null || this.low == null && other.low == null && this.high != null && other.high != null) {
        if (typeof this.high === 'number') {
          if (!(this.end() === other.end())) {
            return false;
          }
        } else {
          if (!this.end().sameAs(other.end(), precision)) {
            return false;
          }
        }
      } // Checks to see if any of the Intervals have a open, null boundary


      if (this.low == null && !this.lowClosed || this.high == null && !this.highClosed || other.low == null && !other.lowClosed || other.high == null && !other.highClosed) {
        return null;
      } // For the special cases where @ is Interval[null,null]


      if (this.lowClosed && this.low == null && this.highClosed && this.high == null) {
        return other.lowClosed && other.low == null && other.highClosed && other.high == null;
      } // For the special case where Interval[...] same as Interval[null,null] should return false.
      // This accounts for the inverse of the if statement above: where the second Interval is
      // [null,null] and not the first Interval.
      // The reason why this isn't caught below is due to how start() and end() work.
      // There is no way to tell the datatype for MIN and MAX if both boundaries are null.


      if (other.lowClosed && other.low == null && other.highClosed && other.high == null) {
        return false;
      }

      if (typeof this.low === 'number') {
        return this.start() === other.start() && this.end() === other.end();
      } else {
        return this.start().sameAs(other.start(), precision) && this.end().sameAs(other.end(), precision);
      }
    }
  }, {
    key: "sameOrBefore",
    value: function sameOrBefore(other, precision) {
      if (this.end() == null || other == null || other.start() == null) {
        return null;
      } else {
        return cmp.lessThanOrEquals(this.end(), other.start(), precision);
      }
    }
  }, {
    key: "sameOrAfter",
    value: function sameOrAfter(other, precision) {
      if (this.start() == null || other == null || other.end() == null) {
        return null;
      } else {
        return cmp.greaterThanOrEquals(this.start(), other.end(), precision);
      }
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (other != null && other.isInterval) {
        var _ref25 = [this.toClosed(), other.toClosed()],
            a = _ref25[0],
            b = _ref25[1];
        return ThreeValuedLogic.and(cmp.equals(a.low, b.low), cmp.equals(a.high, b.high));
      } else {
        return false;
      }
    }
  }, {
    key: "after",
    value: function after(other, precision) {
      var closed = this.toClosed(); // Meets spec, but not 100% correct (e.g., (null, 5] after [6, 10] --> null)
      // Simple way to fix it: and w/ not overlaps

      if (other.toClosed) {
        return cmp.greaterThan(closed.low, other.toClosed().high, precision);
      } else {
        return cmp.greaterThan(closed.low, other, precision);
      }
    }
  }, {
    key: "before",
    value: function before(other, precision) {
      var closed = this.toClosed(); // Meets spec, but not 100% correct (e.g., (null, 5] after [6, 10] --> null)
      // Simple way to fix it: and w/ not overlaps

      if (other.toClosed) {
        return cmp.lessThan(closed.high, other.toClosed().low, precision);
      } else {
        return cmp.lessThan(closed.high, other, precision);
      }
    }
  }, {
    key: "meets",
    value: function meets(other, precision) {
      return ThreeValuedLogic.or(this.meetsBefore(other, precision), this.meetsAfter(other, precision));
    }
  }, {
    key: "meetsAfter",
    value: function meetsAfter(other, precision) {
      try {
        if (precision != null && this.low != null && this.low.isDateTime) {
          return this.toClosed().low.sameAs(other.toClosed().high != null ? other.toClosed().high.add(1, precision) : null, precision);
        } else {
          return cmp.equals(this.toClosed().low, successor(other.toClosed().high));
        }
      } catch (error) {
        return false;
      }
    }
  }, {
    key: "meetsBefore",
    value: function meetsBefore(other, precision) {
      try {
        if (precision != null && this.high != null && this.high.isDateTime) {
          return this.toClosed().high.sameAs(other.toClosed().low != null ? other.toClosed().low.add(-1, precision) : null, precision);
        } else {
          return cmp.equals(this.toClosed().high, predecessor(other.toClosed().low));
        }
      } catch (error) {
        return false;
      }
    }
  }, {
    key: "start",
    value: function start() {
      if (this.low == null) {
        if (this.lowClosed) {
          return minValueForInstance(this.high);
        } else {
          return this.low;
        }
      }

      return this.toClosed().low;
    }
  }, {
    key: "end",
    value: function end() {
      if (this.high == null) {
        if (this.highClosed) {
          return maxValueForInstance(this.low);
        } else {
          return this.high;
        }
      }

      return this.toClosed().high;
    }
  }, {
    key: "starts",
    value: function starts(other, precision) {
      var startEqual;

      if (precision != null && this.low != null && this.low.isDateTime) {
        startEqual = this.low.sameAs(other.low, precision);
      } else {
        startEqual = cmp.equals(this.low, other.low);
      }

      var endLessThanOrEqual = cmp.lessThanOrEquals(this.high, other.high, precision);
      return startEqual && endLessThanOrEqual;
    }
  }, {
    key: "ends",
    value: function ends(other, precision) {
      var endEqual;
      var startGreaterThanOrEqual = cmp.greaterThanOrEquals(this.low, other.low, precision);

      if (precision != null && (this.low != null ? this.low.isDateTime : undefined)) {
        endEqual = this.high.sameAs(other.high, precision);
      } else {
        endEqual = cmp.equals(this.high, other.high);
      }

      return startGreaterThanOrEqual && endEqual;
    }
  }, {
    key: "width",
    value: function width() {
      if (this.low != null && (this.low.isDateTime || this.low.isDate) || this.high != null && (this.high.isDateTime || this.high.isDate)) {
        throw new Error('Width of Date, DateTime, and Time intervals is not supported');
      }

      var closed = this.toClosed();

      if (closed.low != null && closed.low.isUncertainty || closed.high != null && closed.high.isUncertainty) {
        return null;
      } else if (closed.low.isQuantity) {
        if (closed.low.unit !== closed.high.unit) {
          throw new Error('Cannot calculate width of Quantity Interval with different units');
        }

        var lowValue = closed.low.value;
        var highValue = closed.high.value;
        var diff = Math.abs(highValue - lowValue);
        diff = Math.round(diff * Math.pow(10, 8)) / Math.pow(10, 8);
        return new Quantity(diff, closed.low.unit);
      } else {
        // TODO: Fix precision to 8 decimals in other places that return numbers
        var _diff = Math.abs(closed.high - closed.low);

        return Math.round(_diff * Math.pow(10, 8)) / Math.pow(10, 8);
      }
    }
  }, {
    key: "size",
    value: function size() {
      var pointSize = this.getPointSize();

      if (this.low != null && (this.low.isDateTime || this.low.isDate) || this.high != null && (this.high.isDateTime || this.high.isDate)) {
        throw new Error('Size of Date, DateTime, and Time intervals is not supported');
      }

      var closed = this.toClosed();

      if (closed.low != null && closed.low.isUncertainty || closed.high != null && closed.high.isUncertainty) {
        return null;
      } else if (closed.low.isQuantity) {
        if (closed.low.unit !== closed.high.unit) {
          throw new Error('Cannot calculate size of Quantity Interval with different units');
        }

        var lowValue = closed.low.value;
        var highValue = closed.high.value;
        var diff = Math.abs(highValue - lowValue) + pointSize.value;
        Math.round(diff * Math.pow(10, 8)) / Math.pow(10, 8);
        return new Quantity(diff, closed.low.unit);
      } else {
        var _diff2 = Math.abs(closed.high - closed.low) + pointSize.value;

        return Math.round(_diff2 * Math.pow(10, 8)) / Math.pow(10, 8);
      }
    }
  }, {
    key: "getPointSize",
    value: function getPointSize() {
      var pointSize;

      if (this.low != null) {
        if (this.low.isDateTime) {
          pointSize = new Quantity(1, this.low.getPrecision());
        } else if (this.low.isQuantity) {
          pointSize = doSubtraction(successor(this.low), this.low);
        } else {
          pointSize = successor(this.low) - this.low;
        }
      } else if (this.high != null) {
        if (this.high.isDateTime) {
          pointSize = new Quantity(1, this.high.getPrecision());
        } else if (this.high.isQuantity) {
          pointSize = doSubtraction(successor(this.high), this.high);
        } else {
          pointSize = successor(this.high) - this.high;
        }
      } else {
        throw new Error('Point type of intervals cannot be determined.');
      }

      if (typeof pointSize === 'number') {
        pointSize = new Quantity(pointSize, '1');
      }

      return pointSize;
    }
  }, {
    key: "toClosed",
    value: function toClosed() {
      // Calculate the closed flags. Despite the name of this function, if a boundary is null open,
      // we cannot close the boundary because that changes its meaning from "unknown" to "max/min value"
      var lowClosed = this.lowClosed || this.low != null;
      var highClosed = this.highClosed || this.high != null;

      if (this.pointType != null) {
        var low;

        if (this.lowClosed && this.low == null) {
          low = minValueForType(this.pointType);
        } else if (!this.lowClosed && this.low != null) {
          low = successor(this.low);
        } else {
          low = this.low;
        }

        var high;

        if (this.highClosed && this.high == null) {
          high = maxValueForType(this.pointType);
        } else if (!this.highClosed && this.high != null) {
          high = predecessor(this.high);
        } else {
          high = this.high;
        }

        if (low == null) {
          low = new Uncertainty(minValueForType(this.pointType), high);
        }

        if (high == null) {
          high = new Uncertainty(low, maxValueForType(this.pointType));
        }

        return new Interval(low, high, lowClosed, highClosed);
      } else {
        return new Interval(this.low, this.high, lowClosed, highClosed);
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      var start = this.lowClosed ? '[' : '(';
      var end = this.highClosed ? ']' : ')';
      return start + this.low.toString() + ', ' + this.high.toString() + end;
    }
  }, {
    key: "isInterval",
    get: function get() {
      return true;
    }
  }, {
    key: "pointType",
    get: function get() {
      var pointType = null;
      var point = this.low != null ? this.low : this.high;

      if (point != null) {
        if (typeof point === 'number') {
          pointType = parseInt(point) === point ? '{urn:hl7-org:elm-types:r1}Integer' : '{urn:hl7-org:elm-types:r1}Decimal';
        } else if (point.isTime && point.isTime()) {
          pointType = '{urn:hl7-org:elm-types:r1}Time';
        } else if (point.isDate) {
          pointType = '{urn:hl7-org:elm-types:r1}Date';
        } else if (point.isDateTime) {
          pointType = '{urn:hl7-org:elm-types:r1}DateTime';
        } else if (point.isQuantity) {
          pointType = '{urn:hl7-org:elm-types:r1}Quantity';
        }
      }

      if (pointType == null && this.defaultPointType != null) {
        pointType = this.defaultPointType;
      }

      return pointType;
    }
  }]);

  return Interval;
}();

function areDateTimes(x, y) {
  return [x, y].every(function (z) {
    return z != null && z.isDateTime;
  });
}

function areNumeric(x, y) {
  return [x, y].every(function (z) {
    return typeof z === 'number' || z != null && z.isUncertainty && typeof z.low === 'number';
  });
}

function lowestNumericUncertainty(x, y) {
  if (x == null || !x.isUncertainty) {
    x = new Uncertainty(x);
  }

  if (y == null || !y.isUncertainty) {
    y = new Uncertainty(y);
  }

  var low = x.low < y.low ? x.low : y.low;
  var high = x.high < y.high ? x.high : y.high;

  if (low !== high) {
    return new Uncertainty(low, high);
  } else {
    return low;
  }
}

function highestNumericUncertainty(x, y) {
  if (x == null || !x.isUncertainty) {
    x = new Uncertainty(x);
  }

  if (y == null || !y.isUncertainty) {
    y = new Uncertainty(y);
  }

  var low = x.low > y.low ? x.low : y.low;
  var high = x.high > y.high ? x.high : y.high;

  if (low !== high) {
    return new Uncertainty(low, high);
  } else {
    return low;
  }
}

module.exports = {
  Interval: Interval
};
},{"../datatypes/quantity":11,"../util/comparison":45,"../util/math":46,"./logic":10,"./uncertainty":13}],10:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ThreeValuedLogic = /*#__PURE__*/function () {
  function ThreeValuedLogic() {
    _classCallCheck(this, ThreeValuedLogic);
  }

  _createClass(ThreeValuedLogic, null, [{
    key: "and",
    value: function and() {
      for (var _len = arguments.length, val = new Array(_len), _key = 0; _key < _len; _key++) {
        val[_key] = arguments[_key];
      }

      if (val.includes(false)) {
        return false;
      } else if (val.includes(null)) {
        return null;
      } else {
        return true;
      }
    }
  }, {
    key: "or",
    value: function or() {
      for (var _len2 = arguments.length, val = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        val[_key2] = arguments[_key2];
      }

      if (val.includes(true)) {
        return true;
      } else if (val.includes(null)) {
        return null;
      } else {
        return false;
      }
    }
  }, {
    key: "xor",
    value: function xor() {
      for (var _len3 = arguments.length, val = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        val[_key3] = arguments[_key3];
      }

      if (val.includes(null)) {
        return null;
      } else {
        return val.reduce(function (a, b) {
          return (!a ^ !b) === 1;
        });
      }
    }
  }, {
    key: "not",
    value: function not(val) {
      if (val != null) {
        return !val;
      } else {
        return null;
      }
    }
  }]);

  return ThreeValuedLogic;
}();

module.exports = {
  ThreeValuedLogic: ThreeValuedLogic
};
},{}],11:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('../util/math'),
    decimalAdjust = _require.decimalAdjust,
    isValidDecimal = _require.isValidDecimal,
    overflowsOrUnderflows = _require.overflowsOrUnderflows;

var _require2 = require('../util/units'),
    checkUnit = _require2.checkUnit,
    _convertUnit = _require2.convertUnit,
    normalizeUnitsWhenPossible = _require2.normalizeUnitsWhenPossible,
    convertToCQLDateUnit = _require2.convertToCQLDateUnit,
    getProductOfUnits = _require2.getProductOfUnits,
    getQuotientOfUnits = _require2.getQuotientOfUnits;

var Quantity = /*#__PURE__*/function () {
  function Quantity(value, unit) {
    _classCallCheck(this, Quantity);

    this.value = value;
    this.unit = unit;

    if (this.value == null || isNaN(this.value)) {
      throw new Error('Cannot create a quantity with an undefined value');
    } else if (!isValidDecimal(this.value)) {
      throw new Error('Cannot create a quantity with an invalid decimal value');
    } // Attempt to parse the unit with UCUM. If it fails, throw a friendly error.


    if (this.unit != null) {
      var validation = checkUnit(this.unit);

      if (!validation.valid) {
        throw new Error(validation.message);
      }
    }
  }

  _createClass(Quantity, [{
    key: "clone",
    value: function clone() {
      return new Quantity(this.value, this.unit);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.value, " '").concat(this.unit, "'");
    }
  }, {
    key: "sameOrBefore",
    value: function sameOrBefore(other) {
      if (other != null && other.isQuantity) {
        var otherVal = _convertUnit(other.value, other.unit, this.unit);

        if (otherVal == null) {
          return null;
        } else {
          return this.value <= otherVal;
        }
      }
    }
  }, {
    key: "sameOrAfter",
    value: function sameOrAfter(other) {
      if (other != null && other.isQuantity) {
        var otherVal = _convertUnit(other.value, other.unit, this.unit);

        if (otherVal == null) {
          return null;
        } else {
          return this.value >= otherVal;
        }
      }
    }
  }, {
    key: "after",
    value: function after(other) {
      if (other != null && other.isQuantity) {
        var otherVal = _convertUnit(other.value, other.unit, this.unit);

        if (otherVal == null) {
          return null;
        } else {
          return this.value > otherVal;
        }
      }
    }
  }, {
    key: "before",
    value: function before(other) {
      if (other != null && other.isQuantity) {
        var otherVal = _convertUnit(other.value, other.unit, this.unit);

        if (otherVal == null) {
          return null;
        } else {
          return this.value < otherVal;
        }
      }
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (other != null && other.isQuantity) {
        if (!this.unit && other.unit || this.unit && !other.unit) {
          return false;
        } else if (!this.unit && !other.unit) {
          return this.value === other.value;
        } else {
          var otherVal = _convertUnit(other.value, other.unit, this.unit);

          if (otherVal == null) {
            return null;
          } else {
            return decimalAdjust('round', this.value, -8) === otherVal;
          }
        }
      }
    }
  }, {
    key: "convertUnit",
    value: function convertUnit(toUnit) {
      var value = _convertUnit(this.value, this.unit, toUnit); // Need to pass through constructor again to catch invalid units


      return new Quantity(value, toUnit);
    }
  }, {
    key: "dividedBy",
    value: function dividedBy(other) {
      if (other == null || other === 0 || other.value === 0) {
        return null;
      } else if (!other.isQuantity) {
        // convert it to a quantity w/ unit 1
        other = new Quantity(other, '1');
      }

      var _normalizeUnitsWhenPo = normalizeUnitsWhenPossible(this.value, this.unit, other.value, other.unit),
          _normalizeUnitsWhenPo2 = _slicedToArray(_normalizeUnitsWhenPo, 4),
          val1 = _normalizeUnitsWhenPo2[0],
          unit1 = _normalizeUnitsWhenPo2[1],
          val2 = _normalizeUnitsWhenPo2[2],
          unit2 = _normalizeUnitsWhenPo2[3];

      var resultValue = val1 / val2;
      var resultUnit = getQuotientOfUnits(unit1, unit2); // Check for invalid unit or value

      if (resultUnit == null || overflowsOrUnderflows(resultValue)) {
        return null;
      }

      return new Quantity(decimalAdjust('round', resultValue, -8), resultUnit);
    }
  }, {
    key: "multiplyBy",
    value: function multiplyBy(other) {
      if (other == null) {
        return null;
      } else if (!other.isQuantity) {
        // convert it to a quantity w/ unit 1
        other = new Quantity(other, '1');
      }

      var _normalizeUnitsWhenPo3 = normalizeUnitsWhenPossible(this.value, this.unit, other.value, other.unit),
          _normalizeUnitsWhenPo4 = _slicedToArray(_normalizeUnitsWhenPo3, 4),
          val1 = _normalizeUnitsWhenPo4[0],
          unit1 = _normalizeUnitsWhenPo4[1],
          val2 = _normalizeUnitsWhenPo4[2],
          unit2 = _normalizeUnitsWhenPo4[3];

      var resultValue = val1 * val2;
      var resultUnit = getProductOfUnits(unit1, unit2); // Check for invalid unit or value

      if (resultUnit == null || overflowsOrUnderflows(resultValue)) {
        return null;
      }

      return new Quantity(decimalAdjust('round', resultValue, -8), resultUnit);
    }
  }, {
    key: "isQuantity",
    get: function get() {
      return true;
    }
  }]);

  return Quantity;
}();

function parseQuantity(str) {
  var components = /([+|-]?\d+\.?\d*)\s*('(.+)')?/.exec(str);

  if (components != null && components[1] != null) {
    var value = parseFloat(components[1]);

    if (!isValidDecimal(value)) {
      return null;
    }

    var unit;

    if (components[3] != null) {
      unit = components[3].trim();
    } else {
      unit = '';
    }

    return new Quantity(value, unit);
  } else {
    return null;
  }
}

function doScaledAddition(a, b, scaleForB) {
  if (a != null && a.isQuantity && b != null && b.isQuantity) {
    var _normalizeUnitsWhenPo5 = normalizeUnitsWhenPossible(a.value, a.unit, b.value * scaleForB, b.unit),
        _normalizeUnitsWhenPo6 = _slicedToArray(_normalizeUnitsWhenPo5, 4),
        val1 = _normalizeUnitsWhenPo6[0],
        unit1 = _normalizeUnitsWhenPo6[1],
        val2 = _normalizeUnitsWhenPo6[2],
        unit2 = _normalizeUnitsWhenPo6[3];

    if (unit1 !== unit2) {
      // not compatible units, so we can't do addition
      return null;
    }

    var sum = val1 + val2;

    if (overflowsOrUnderflows(sum)) {
      return null;
    }

    return new Quantity(sum, unit1);
  } else if (a.copy && a.add) {
    // Date / DateTime require a CQL time unit
    var cqlUnitB = convertToCQLDateUnit(b.unit) || b.unit;
    return a.copy().add(b.value * scaleForB, cqlUnitB);
  } else {
    throw new Error('Unsupported argument types.');
  }
}

function doAddition(a, b) {
  return doScaledAddition(a, b, 1);
}

function doSubtraction(a, b) {
  return doScaledAddition(a, b, -1);
}

function doDivision(a, b) {
  if (a != null && a.isQuantity) {
    return a.dividedBy(b);
  }
}

function doMultiplication(a, b) {
  if (a != null && a.isQuantity) {
    return a.multiplyBy(b);
  } else {
    return b.multiplyBy(a);
  }
}

module.exports = {
  Quantity: Quantity,
  parseQuantity: parseQuantity,
  doAddition: doAddition,
  doSubtraction: doSubtraction,
  doDivision: doDivision,
  doMultiplication: doMultiplication
};
},{"../util/math":46,"../util/units":47}],12:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Ratio = /*#__PURE__*/function () {
  function Ratio(numerator, denominator) {
    _classCallCheck(this, Ratio);

    this.numerator = numerator;
    this.denominator = denominator;

    if (this.numerator == null) {
      throw new Error('Cannot create a ratio with an undefined numerator');
    }

    if (this.denominator == null) {
      throw new Error('Cannot create a ratio with an undefined denominator');
    }
  }

  _createClass(Ratio, [{
    key: "clone",
    value: function clone() {
      return new Ratio(this.numerator.clone(), this.denominator.clone());
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.numerator.toString(), " : ").concat(this.denominator.toString());
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (other != null && other.isRatio) {
        var divided_this = this.numerator.dividedBy(this.denominator);
        var divided_other = other.numerator.dividedBy(other.denominator);
        return divided_this.equals(divided_other);
      } else {
        return false;
      }
    }
  }, {
    key: "equivalent",
    value: function equivalent(other) {
      var equal = this.equals(other);
      return equal != null ? equal : false;
    }
  }, {
    key: "isRatio",
    get: function get() {
      return true;
    }
  }]);

  return Ratio;
}();

module.exports = {
  Ratio: Ratio
};
},{}],13:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./logic'),
    ThreeValuedLogic = _require.ThreeValuedLogic;

var Uncertainty = /*#__PURE__*/function () {
  _createClass(Uncertainty, null, [{
    key: "from",
    value: function from(obj) {
      if (obj != null && obj.isUncertainty) {
        return obj;
      } else {
        return new Uncertainty(obj);
      }
    }
  }]);

  function Uncertainty() {
    var low = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var high = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Uncertainty);

    this.low = low;
    this.high = high;

    var gt = function gt(a, b) {
      if (_typeof(a) !== _typeof(b)) {
        // TODO: This should probably throw rather than return false.
        // Uncertainties with different types probably shouldn't be supported.
        return false;
      }

      if (typeof a.after === 'function') {
        return a.after(b);
      } else {
        return a > b;
      }
    };

    var isNonEnumerable = function isNonEnumerable(val) {
      return val != null && (val.isCode || val.isConcept || val.isValueSet);
    };

    if (typeof this.high === 'undefined') {
      this.high = this.low;
    }

    if (isNonEnumerable(this.low) || isNonEnumerable(this.high)) {
      this.low = this.high = null;
    }

    if (this.low != null && this.high != null && gt(this.low, this.high)) {
      var _ref = [this.high, this.low];
      this.low = _ref[0];
      this.high = _ref[1];
    }
  }

  _createClass(Uncertainty, [{
    key: "copy",
    value: function copy() {
      var newLow = this.low;
      var newHigh = this.high;

      if (typeof this.low.copy === 'function') {
        newLow = this.low.copy();
      }

      if (typeof this.high.copy === 'function') {
        newHigh = this.high.copy();
      }

      return new Uncertainty(newLow, newHigh);
    }
  }, {
    key: "isPoint",
    value: function isPoint() {
      // Note: Can't use normal equality, as that fails for Javascript dates
      // TODO: Fix after we don't need to support Javascript date uncertainties anymore
      var lte = function lte(a, b) {
        if (_typeof(a) !== _typeof(b)) {
          return false;
        }

        if (typeof a.sameOrBefore === 'function') {
          return a.sameOrBefore(b);
        } else {
          return a <= b;
        }
      };

      var gte = function gte(a, b) {
        if (_typeof(a) !== _typeof(b)) {
          return false;
        }

        if (typeof a.sameOrBefore === 'function') {
          return a.sameOrAfter(b);
        } else {
          return a >= b;
        }
      };

      return this.low != null && this.high != null && lte(this.low, this.high) && gte(this.low, this.high);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      other = Uncertainty.from(other);
      return ThreeValuedLogic.not(ThreeValuedLogic.or(this.lessThan(other), this.greaterThan(other)));
    }
  }, {
    key: "lessThan",
    value: function lessThan(other) {
      var lt = function lt(a, b) {
        if (_typeof(a) !== _typeof(b)) {
          return false;
        }

        if (typeof a.before === 'function') {
          return a.before(b);
        } else {
          return a < b;
        }
      };

      other = Uncertainty.from(other);
      var bestCase = this.low == null || other.high == null || lt(this.low, other.high);
      var worstCase = this.high != null && other.low != null && lt(this.high, other.low);

      if (bestCase === worstCase) {
        return bestCase;
      } else {
        return null;
      }
    }
  }, {
    key: "greaterThan",
    value: function greaterThan(other) {
      return Uncertainty.from(other).lessThan(this);
    }
  }, {
    key: "lessThanOrEquals",
    value: function lessThanOrEquals(other) {
      return ThreeValuedLogic.not(this.greaterThan(Uncertainty.from(other)));
    }
  }, {
    key: "greaterThanOrEquals",
    value: function greaterThanOrEquals(other) {
      return ThreeValuedLogic.not(this.lessThan(Uncertainty.from(other)));
    }
  }, {
    key: "isUncertainty",
    get: function get() {
      return true;
    }
  }]);

  return Uncertainty;
}();

module.exports = {
  Uncertainty: Uncertainty
};
},{"./logic":10}],14:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('../util/util'),
    typeIsArray = _require2.typeIsArray,
    allTrue = _require2.allTrue,
    anyTrue = _require2.anyTrue,
    removeNulls = _require2.removeNulls,
    numerical_sort = _require2.numerical_sort;

var _require3 = require('./builder'),
    build = _require3.build;

var _require4 = require('../datatypes/exception'),
    Exception = _require4.Exception;

var _require5 = require('../util/comparison'),
    greaterThan = _require5.greaterThan,
    lessThan = _require5.lessThan;

var _require6 = require('../datatypes/quantity'),
    Quantity = _require6.Quantity;

var AggregateExpression = /*#__PURE__*/function (_Expression) {
  _inherits(AggregateExpression, _Expression);

  var _super = _createSuper(AggregateExpression);

  function AggregateExpression(json) {
    var _this;

    _classCallCheck(this, AggregateExpression);

    _this = _super.call(this, json);
    _this.source = build(json.source);
    return _this;
  }

  return AggregateExpression;
}(Expression);

var Count = /*#__PURE__*/function (_AggregateExpression) {
  _inherits(Count, _AggregateExpression);

  var _super2 = _createSuper(Count);

  function Count(json) {
    _classCallCheck(this, Count);

    return _super2.call(this, json);
  }

  _createClass(Count, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (typeIsArray(items)) {
        return removeNulls(items).length;
      }

      return 0;
    }
  }]);

  return Count;
}(AggregateExpression);

var Sum = /*#__PURE__*/function (_AggregateExpression2) {
  _inherits(Sum, _AggregateExpression2);

  var _super3 = _createSuper(Sum);

  function Sum(json) {
    _classCallCheck(this, Sum);

    return _super3.call(this, json);
  }

  _createClass(Sum, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      if (hasOnlyQuantities(items)) {
        var values = getValuesFromQuantities(items);
        var sum = values.reduce(function (x, y) {
          return x + y;
        });
        return new Quantity(sum, items[0].unit);
      } else {
        return items.reduce(function (x, y) {
          return x + y;
        });
      }
    }
  }]);

  return Sum;
}(AggregateExpression);

var Min = /*#__PURE__*/function (_AggregateExpression3) {
  _inherits(Min, _AggregateExpression3);

  var _super4 = _createSuper(Min);

  function Min(json) {
    _classCallCheck(this, Min);

    return _super4.call(this, json);
  }

  _createClass(Min, [{
    key: "exec",
    value: function exec(ctx) {
      var list = this.source.execute(ctx);

      if (list == null) {
        return null;
      }

      var listWithoutNulls = removeNulls(list); // Check for incompatible units and return null. We don't want to convert
      // the units for Min/Max, so we throw away the converted array if it succeeds

      try {
        processQuantities(list);
      } catch (e) {
        return null;
      }

      if (listWithoutNulls.length === 0) {
        return null;
      } // We assume the list is an array of all the same type.


      var minimum = listWithoutNulls[0];

      var _iterator = _createForOfIteratorHelper(listWithoutNulls),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var element = _step.value;

          if (lessThan(element, minimum)) {
            minimum = element;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return minimum;
    }
  }]);

  return Min;
}(AggregateExpression);

var Max = /*#__PURE__*/function (_AggregateExpression4) {
  _inherits(Max, _AggregateExpression4);

  var _super5 = _createSuper(Max);

  function Max(json) {
    _classCallCheck(this, Max);

    return _super5.call(this, json);
  }

  _createClass(Max, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (items == null) {
        return null;
      }

      var listWithoutNulls = removeNulls(items); // Check for incompatible units and return null. We don't want to convert
      // the units for Min/Max, so we throw away the converted array if it succeeds

      try {
        processQuantities(items);
      } catch (e) {
        return null;
      }

      if (listWithoutNulls.length === 0) {
        return null;
      } // We assume the list is an array of all the same type.


      var maximum = listWithoutNulls[0];

      var _iterator2 = _createForOfIteratorHelper(listWithoutNulls),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var element = _step2.value;

          if (greaterThan(element, maximum)) {
            maximum = element;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return maximum;
    }
  }]);

  return Max;
}(AggregateExpression);

var Avg = /*#__PURE__*/function (_AggregateExpression5) {
  _inherits(Avg, _AggregateExpression5);

  var _super6 = _createSuper(Avg);

  function Avg(json) {
    _classCallCheck(this, Avg);

    return _super6.call(this, json);
  }

  _createClass(Avg, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      if (hasOnlyQuantities(items)) {
        var values = getValuesFromQuantities(items);
        var sum = values.reduce(function (x, y) {
          return x + y;
        });
        return new Quantity(sum / values.length, items[0].unit);
      } else {
        var _sum = items.reduce(function (x, y) {
          return x + y;
        });

        return _sum / items.length;
      }
    }
  }]);

  return Avg;
}(AggregateExpression);

var Median = /*#__PURE__*/function (_AggregateExpression6) {
  _inherits(Median, _AggregateExpression6);

  var _super7 = _createSuper(Median);

  function Median(json) {
    _classCallCheck(this, Median);

    return _super7.call(this, json);
  }

  _createClass(Median, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (!hasOnlyQuantities(items)) {
        return medianOfNumbers(items);
      }

      var values = getValuesFromQuantities(items);
      var median = medianOfNumbers(values);
      return new Quantity(median, items[0].unit);
    }
  }]);

  return Median;
}(AggregateExpression);

var Mode = /*#__PURE__*/function (_AggregateExpression7) {
  _inherits(Mode, _AggregateExpression7);

  var _super8 = _createSuper(Mode);

  function Mode(json) {
    _classCallCheck(this, Mode);

    return _super8.call(this, json);
  }

  _createClass(Mode, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      var filtered;

      try {
        filtered = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (hasOnlyQuantities(filtered)) {
        var values = getValuesFromQuantities(filtered);
        var mode = this.mode(values);

        if (mode.length === 1) {
          mode = mode[0];
        }

        return new Quantity(mode, items[0].unit);
      } else {
        var _mode = this.mode(filtered);

        if (_mode.length === 1) {
          return _mode[0];
        } else {
          return _mode;
        }
      }
    }
  }, {
    key: "mode",
    value: function mode(arr) {
      var max = 0;
      var counts = {};
      var results = [];

      var _iterator3 = _createForOfIteratorHelper(arr),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var elem = _step3.value;
          var cnt = counts[elem] = (counts[elem] != null ? counts[elem] : 0) + 1;

          if (cnt === max && !results.includes(elem)) {
            results.push(elem);
          } else if (cnt > max) {
            results = [elem];
            max = cnt;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return results;
    }
  }]);

  return Mode;
}(AggregateExpression);

var StdDev = /*#__PURE__*/function (_AggregateExpression8) {
  _inherits(StdDev, _AggregateExpression8);

  var _super9 = _createSuper(StdDev);

  // TODO: This should be a derived class of an abstract base class 'Statistic'
  // rather than the base class
  function StdDev(json) {
    var _this2;

    _classCallCheck(this, StdDev);

    _this2 = _super9.call(this, json);
    _this2.type = 'standard_deviation';
    return _this2;
  }

  _createClass(StdDev, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      if (hasOnlyQuantities(items)) {
        var values = getValuesFromQuantities(items);
        var stdDev = this.standardDeviation(values);
        return new Quantity(stdDev, items[0].unit);
      } else {
        return this.standardDeviation(items);
      }
    }
  }, {
    key: "standardDeviation",
    value: function standardDeviation(list) {
      var val = this.stats(list);

      if (val) {
        return val[this.type];
      }
    }
  }, {
    key: "stats",
    value: function stats(list) {
      var sum = list.reduce(function (x, y) {
        return x + y;
      });
      var mean = sum / list.length;
      var sumOfSquares = 0;

      var _iterator4 = _createForOfIteratorHelper(list),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var sq = _step4.value;
          sumOfSquares += Math.pow(sq - mean, 2);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var std_var = 1 / (list.length - 1) * sumOfSquares;
      var pop_var = 1 / list.length * sumOfSquares;
      var std_dev = Math.sqrt(std_var);
      var pop_dev = Math.sqrt(pop_var);
      return {
        standard_variance: std_var,
        population_variance: pop_var,
        standard_deviation: std_dev,
        population_deviation: pop_dev
      };
    }
  }]);

  return StdDev;
}(AggregateExpression);

var Product = /*#__PURE__*/function (_AggregateExpression9) {
  _inherits(Product, _AggregateExpression9);

  var _super10 = _createSuper(Product);

  function Product(json) {
    _classCallCheck(this, Product);

    return _super10.call(this, json);
  }

  _createClass(Product, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      if (hasOnlyQuantities(items)) {
        var values = getValuesFromQuantities(items);
        var product = values.reduce(function (x, y) {
          return x * y;
        }); // Units are not multiplied for the geometric product

        return new Quantity(product, items[0].unit);
      } else {
        return items.reduce(function (x, y) {
          return x * y;
        });
      }
    }
  }]);

  return Product;
}(AggregateExpression);

var GeometricMean = /*#__PURE__*/function (_AggregateExpression10) {
  _inherits(GeometricMean, _AggregateExpression10);

  var _super11 = _createSuper(GeometricMean);

  function GeometricMean(json) {
    _classCallCheck(this, GeometricMean);

    return _super11.call(this, json);
  }

  _createClass(GeometricMean, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      if (hasOnlyQuantities(items)) {
        var values = getValuesFromQuantities(items);
        var product = values.reduce(function (x, y) {
          return x * y;
        });
        var geoMean = Math.pow(product, 1.0 / items.length);
        return new Quantity(geoMean, items[0].unit);
      } else {
        var _product = items.reduce(function (x, y) {
          return x * y;
        });

        return Math.pow(_product, 1.0 / items.length);
      }
    }
  }]);

  return GeometricMean;
}(AggregateExpression);

var PopulationStdDev = /*#__PURE__*/function (_StdDev) {
  _inherits(PopulationStdDev, _StdDev);

  var _super12 = _createSuper(PopulationStdDev);

  function PopulationStdDev(json) {
    var _this3;

    _classCallCheck(this, PopulationStdDev);

    _this3 = _super12.call(this, json);
    _this3.type = 'population_deviation';
    return _this3;
  }

  return PopulationStdDev;
}(StdDev);

var Variance = /*#__PURE__*/function (_StdDev2) {
  _inherits(Variance, _StdDev2);

  var _super13 = _createSuper(Variance);

  function Variance(json) {
    var _this4;

    _classCallCheck(this, Variance);

    _this4 = _super13.call(this, json);
    _this4.type = 'standard_variance';
    return _this4;
  }

  return Variance;
}(StdDev);

var PopulationVariance = /*#__PURE__*/function (_StdDev3) {
  _inherits(PopulationVariance, _StdDev3);

  var _super14 = _createSuper(PopulationVariance);

  function PopulationVariance(json) {
    var _this5;

    _classCallCheck(this, PopulationVariance);

    _this5 = _super14.call(this, json);
    _this5.type = 'population_variance';
    return _this5;
  }

  return PopulationVariance;
}(StdDev);

var AllTrue = /*#__PURE__*/function (_AggregateExpression11) {
  _inherits(AllTrue, _AggregateExpression11);

  var _super15 = _createSuper(AllTrue);

  function AllTrue(json) {
    _classCallCheck(this, AllTrue);

    return _super15.call(this, json);
  }

  _createClass(AllTrue, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);
      return allTrue(removeNulls(items));
    }
  }]);

  return AllTrue;
}(AggregateExpression);

var AnyTrue = /*#__PURE__*/function (_AggregateExpression12) {
  _inherits(AnyTrue, _AggregateExpression12);

  var _super16 = _createSuper(AnyTrue);

  function AnyTrue(json) {
    _classCallCheck(this, AnyTrue);

    return _super16.call(this, json);
  }

  _createClass(AnyTrue, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);
      return anyTrue(items);
    }
  }]);

  return AnyTrue;
}(AggregateExpression);

function processQuantities(values) {
  var items = removeNulls(values);

  if (hasOnlyQuantities(items)) {
    return convertAllUnits(items);
  } else if (hasSomeQuantities(items)) {
    throw new Exception('Cannot perform aggregate operations on mixed values of Quantities and non Quantities');
  } else {
    return items;
  }
}

function getValuesFromQuantities(quantities) {
  return quantities.map(function (quantity) {
    return quantity.value;
  });
}

function hasOnlyQuantities(arr) {
  return arr.every(function (x) {
    return x.isQuantity;
  });
}

function hasSomeQuantities(arr) {
  return arr.some(function (x) {
    return x.isQuantity;
  });
}

function convertAllUnits(arr) {
  // convert all quantities in array to match the unit of the first item
  return arr.map(function (q) {
    return q.convertUnit(arr[0].unit);
  });
}

function medianOfNumbers(numbers) {
  var items = numerical_sort(numbers, 'asc');

  if (items.length % 2 === 1) {
    // Odd number of items
    return items[(items.length - 1) / 2];
  } else {
    // Even number of items
    return (items[items.length / 2 - 1] + items[items.length / 2]) / 2;
  }
}

module.exports = {
  Count: Count,
  Sum: Sum,
  Min: Min,
  Max: Max,
  Avg: Avg,
  Median: Median,
  Mode: Mode,
  StdDev: StdDev,
  Product: Product,
  GeometricMean: GeometricMean,
  PopulationStdDev: PopulationStdDev,
  Variance: Variance,
  PopulationVariance: PopulationVariance,
  AllTrue: AllTrue,
  AnyTrue: AnyTrue
};
},{"../datatypes/exception":8,"../datatypes/quantity":11,"../util/comparison":45,"../util/util":48,"./builder":16,"./expression":22}],15:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var MathUtil = require('../util/math');

var _require3 = require('../datatypes/quantity'),
    Quantity = _require3.Quantity,
    doAddition = _require3.doAddition,
    doSubtraction = _require3.doSubtraction,
    doMultiplication = _require3.doMultiplication,
    doDivision = _require3.doDivision;

var _require4 = require('../datatypes/uncertainty'),
    Uncertainty = _require4.Uncertainty;

var Add = /*#__PURE__*/function (_Expression) {
  _inherits(Add, _Expression);

  var _super = _createSuper(Add);

  function Add(json) {
    _classCallCheck(this, Add);

    return _super.call(this, json);
  }

  _createClass(Add, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var sum = args.reduce(function (x, y) {
        if (x.isUncertainty && !y.isUncertainty) {
          y = new Uncertainty(y, y);
        } else if (y.isUncertainty && !x.isUncertainty) {
          x = new Uncertainty(x, x);
        }

        if (x.isQuantity || x.isDateTime || x.isDate || x.isTime && x.isTime()) {
          return doAddition(x, y);
        } else if (x.isUncertainty && y.isUncertainty) {
          if (x.low.isQuantity || x.low.isDateTime || x.low.isDate || x.low.isTime && x.low.isTime()) {
            return new Uncertainty(doAddition(x.low, y.low), doAddition(x.high, y.high));
          } else {
            return new Uncertainty(x.low + y.low, x.high + y.high);
          }
        } else {
          return x + y;
        }
      });

      if (MathUtil.overflowsOrUnderflows(sum)) {
        return null;
      }

      return sum;
    }
  }]);

  return Add;
}(Expression);

var Subtract = /*#__PURE__*/function (_Expression2) {
  _inherits(Subtract, _Expression2);

  var _super2 = _createSuper(Subtract);

  function Subtract(json) {
    _classCallCheck(this, Subtract);

    return _super2.call(this, json);
  }

  _createClass(Subtract, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var difference = args.reduce(function (x, y) {
        if (x.isUncertainty && !y.isUncertainty) {
          y = new Uncertainty(y, y);
        } else if (y.isUncertainty && !x.isUncertainty) {
          x = new Uncertainty(x, x);
        }

        if (x.isQuantity || x.isDateTime || x.isDate) {
          return doSubtraction(x, y);
        } else if (x.isUncertainty && y.isUncertainty) {
          if (x.low.isQuantity || x.low.isDateTime || x.low.isDate) {
            return new Uncertainty(doSubtraction(x.low, y.high), doSubtraction(x.high, y.low));
          } else {
            return new Uncertainty(x.low - y.high, x.high - y.low);
          }
        } else {
          return x - y;
        }
      });

      if (MathUtil.overflowsOrUnderflows(difference)) {
        return null;
      }

      return difference;
    }
  }]);

  return Subtract;
}(Expression);

var Multiply = /*#__PURE__*/function (_Expression3) {
  _inherits(Multiply, _Expression3);

  var _super3 = _createSuper(Multiply);

  function Multiply(json) {
    _classCallCheck(this, Multiply);

    return _super3.call(this, json);
  }

  _createClass(Multiply, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var product = args.reduce(function (x, y) {
        if (x.isUncertainty && !y.isUncertainty) {
          y = new Uncertainty(y, y);
        } else if (y.isUncertainty && !x.isUncertainty) {
          x = new Uncertainty(x, x);
        }

        if (x.isQuantity || y.isQuantity) {
          return doMultiplication(x, y);
        } else if (x.isUncertainty && y.isUncertainty) {
          if (x.low.isQuantity) {
            return new Uncertainty(doMultiplication(x.low, y.low), doMultiplication(x.high, y.high));
          } else {
            return new Uncertainty(x.low * y.low, x.high * y.high);
          }
        } else {
          return x * y;
        }
      });

      if (MathUtil.overflowsOrUnderflows(product)) {
        return null;
      }

      return product;
    }
  }]);

  return Multiply;
}(Expression);

var Divide = /*#__PURE__*/function (_Expression4) {
  _inherits(Divide, _Expression4);

  var _super4 = _createSuper(Divide);

  function Divide(json) {
    _classCallCheck(this, Divide);

    return _super4.call(this, json);
  }

  _createClass(Divide, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var quotient = args.reduce(function (x, y) {
        if (x.isUncertainty && !y.isUncertainty) {
          y = new Uncertainty(y, y);
        } else if (y.isUncertainty && !x.isUncertainty) {
          x = new Uncertainty(x, x);
        }

        if (x.isQuantity) {
          return doDivision(x, y);
        } else if (x.isUncertainty && y.isUncertainty) {
          if (x.low.isQuantity) {
            return new Uncertainty(doDivision(x.low, y.high), doDivision(x.high, y.low));
          } else {
            return new Uncertainty(x.low / y.high, x.high / y.low);
          }
        } else {
          return x / y;
        }
      }); // Note, anything divided by 0 is Infinity in Javascript, which will be
      // considered as overflow by this check.

      if (MathUtil.overflowsOrUnderflows(quotient)) {
        return null;
      }

      return quotient;
    }
  }]);

  return Divide;
}(Expression);

var TruncatedDivide = /*#__PURE__*/function (_Expression5) {
  _inherits(TruncatedDivide, _Expression5);

  var _super5 = _createSuper(TruncatedDivide);

  function TruncatedDivide(json) {
    _classCallCheck(this, TruncatedDivide);

    return _super5.call(this, json);
  }

  _createClass(TruncatedDivide, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var quotient = args.reduce(function (x, y) {
        return x / y;
      });
      var truncatedQuotient = quotient >= 0 ? Math.floor(quotient) : Math.ceil(quotient);

      if (MathUtil.overflowsOrUnderflows(truncatedQuotient)) {
        return null;
      }

      return truncatedQuotient;
    }
  }]);

  return TruncatedDivide;
}(Expression);

var Modulo = /*#__PURE__*/function (_Expression6) {
  _inherits(Modulo, _Expression6);

  var _super6 = _createSuper(Modulo);

  function Modulo(json) {
    _classCallCheck(this, Modulo);

    return _super6.call(this, json);
  }

  _createClass(Modulo, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var modulo = args.reduce(function (x, y) {
        return x % y;
      });
      return MathUtil.decimalOrNull(modulo);
    }
  }]);

  return Modulo;
}(Expression);

var Ceiling = /*#__PURE__*/function (_Expression7) {
  _inherits(Ceiling, _Expression7);

  var _super7 = _createSuper(Ceiling);

  function Ceiling(json) {
    _classCallCheck(this, Ceiling);

    return _super7.call(this, json);
  }

  _createClass(Ceiling, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      return Math.ceil(arg);
    }
  }]);

  return Ceiling;
}(Expression);

var Floor = /*#__PURE__*/function (_Expression8) {
  _inherits(Floor, _Expression8);

  var _super8 = _createSuper(Floor);

  function Floor(json) {
    _classCallCheck(this, Floor);

    return _super8.call(this, json);
  }

  _createClass(Floor, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      return Math.floor(arg);
    }
  }]);

  return Floor;
}(Expression);

var Truncate = /*#__PURE__*/function (_Expression9) {
  _inherits(Truncate, _Expression9);

  var _super9 = _createSuper(Truncate);

  function Truncate(json) {
    _classCallCheck(this, Truncate);

    return _super9.call(this, json);
  }

  _createClass(Truncate, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      return arg >= 0 ? Math.floor(arg) : Math.ceil(arg);
    }
  }]);

  return Truncate;
}(Expression);

var Abs = /*#__PURE__*/function (_Expression10) {
  _inherits(Abs, _Expression10);

  var _super10 = _createSuper(Abs);

  function Abs(json) {
    _classCallCheck(this, Abs);

    return _super10.call(this, json);
  }

  _createClass(Abs, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      } else if (arg.isQuantity) {
        return new Quantity(Math.abs(arg.value), arg.unit);
      } else {
        return Math.abs(arg);
      }
    }
  }]);

  return Abs;
}(Expression);

var Negate = /*#__PURE__*/function (_Expression11) {
  _inherits(Negate, _Expression11);

  var _super11 = _createSuper(Negate);

  function Negate(json) {
    _classCallCheck(this, Negate);

    return _super11.call(this, json);
  }

  _createClass(Negate, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      } else if (arg.isQuantity) {
        return new Quantity(arg.value * -1, arg.unit);
      } else {
        return arg * -1;
      }
    }
  }]);

  return Negate;
}(Expression);

var Round = /*#__PURE__*/function (_Expression12) {
  _inherits(Round, _Expression12);

  var _super12 = _createSuper(Round);

  function Round(json) {
    var _this;

    _classCallCheck(this, Round);

    _this = _super12.call(this, json);
    _this.precision = build(json.precision);
    return _this;
  }

  _createClass(Round, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      var dec = this.precision != null ? this.precision.execute(ctx) : 0;
      return Math.round(arg * Math.pow(10, dec)) / Math.pow(10, dec);
    }
  }]);

  return Round;
}(Expression);

var Ln = /*#__PURE__*/function (_Expression13) {
  _inherits(Ln, _Expression13);

  var _super13 = _createSuper(Ln);

  function Ln(json) {
    _classCallCheck(this, Ln);

    return _super13.call(this, json);
  }

  _createClass(Ln, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      var ln = Math.log(arg);
      return MathUtil.decimalOrNull(ln);
    }
  }]);

  return Ln;
}(Expression);

var Exp = /*#__PURE__*/function (_Expression14) {
  _inherits(Exp, _Expression14);

  var _super14 = _createSuper(Exp);

  function Exp(json) {
    _classCallCheck(this, Exp);

    return _super14.call(this, json);
  }

  _createClass(Exp, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      var power = Math.exp(arg);

      if (MathUtil.overflowsOrUnderflows(power)) {
        return null;
      }

      return power;
    }
  }]);

  return Exp;
}(Expression);

var Log = /*#__PURE__*/function (_Expression15) {
  _inherits(Log, _Expression15);

  var _super15 = _createSuper(Log);

  function Log(json) {
    _classCallCheck(this, Log);

    return _super15.call(this, json);
  }

  _createClass(Log, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var log = args.reduce(function (x, y) {
        return Math.log(x) / Math.log(y);
      });
      return MathUtil.decimalOrNull(log);
    }
  }]);

  return Log;
}(Expression);

var Power = /*#__PURE__*/function (_Expression16) {
  _inherits(Power, _Expression16);

  var _super16 = _createSuper(Power);

  function Power(json) {
    _classCallCheck(this, Power);

    return _super16.call(this, json);
  }

  _createClass(Power, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var power = args.reduce(function (x, y) {
        return Math.pow(x, y);
      });

      if (MathUtil.overflowsOrUnderflows(power)) {
        return null;
      }

      return power;
    }
  }]);

  return Power;
}(Expression);

var MinValue = /*#__PURE__*/function (_Expression17) {
  _inherits(MinValue, _Expression17);

  var _super17 = _createSuper(MinValue);

  function MinValue(json) {
    var _this2;

    _classCallCheck(this, MinValue);

    _this2 = _super17.call(this, json);
    _this2.valueType = json.valueType;
    return _this2;
  }

  _createClass(MinValue, [{
    key: "exec",
    value: function exec(ctx) {
      if (MinValue.MIN_VALUES[this.valueType]) {
        if (this.valueType === '{urn:hl7-org:elm-types:r1}DateTime') {
          var minDateTime = MinValue.MIN_VALUES[this.valueType].copy();
          minDateTime.timezoneOffset = ctx.getTimezoneOffset();
          return minDateTime;
        } else {
          return MinValue.MIN_VALUES[this.valueType];
        }
      } else {
        throw new Error("Minimum not supported for ".concat(this.valueType));
      }
    }
  }]);

  return MinValue;
}(Expression);

MinValue.MIN_VALUES = {};
MinValue.MIN_VALUES['{urn:hl7-org:elm-types:r1}Integer'] = MathUtil.MIN_INT_VALUE;
MinValue.MIN_VALUES['{urn:hl7-org:elm-types:r1}Decimal'] = MathUtil.MIN_FLOAT_VALUE;
MinValue.MIN_VALUES['{urn:hl7-org:elm-types:r1}DateTime'] = MathUtil.MIN_DATETIME_VALUE;
MinValue.MIN_VALUES['{urn:hl7-org:elm-types:r1}Date'] = MathUtil.MIN_DATE_VALUE;
MinValue.MIN_VALUES['{urn:hl7-org:elm-types:r1}Time'] = MathUtil.MIN_TIME_VALUE;

var MaxValue = /*#__PURE__*/function (_Expression18) {
  _inherits(MaxValue, _Expression18);

  var _super18 = _createSuper(MaxValue);

  function MaxValue(json) {
    var _this3;

    _classCallCheck(this, MaxValue);

    _this3 = _super18.call(this, json);
    _this3.valueType = json.valueType;
    return _this3;
  }

  _createClass(MaxValue, [{
    key: "exec",
    value: function exec(ctx) {
      if (MaxValue.MAX_VALUES[this.valueType] != null) {
        if (this.valueType === '{urn:hl7-org:elm-types:r1}DateTime') {
          var maxDateTime = MaxValue.MAX_VALUES[this.valueType].copy();
          maxDateTime.timezoneOffset = ctx.getTimezoneOffset();
          return maxDateTime;
        } else {
          return MaxValue.MAX_VALUES[this.valueType];
        }
      } else {
        throw new Error("Maximum not supported for ".concat(this.valueType));
      }
    }
  }]);

  return MaxValue;
}(Expression);

MaxValue.MAX_VALUES = {};
MaxValue.MAX_VALUES['{urn:hl7-org:elm-types:r1}Integer'] = MathUtil.MAX_INT_VALUE;
MaxValue.MAX_VALUES['{urn:hl7-org:elm-types:r1}Decimal'] = MathUtil.MAX_FLOAT_VALUE;
MaxValue.MAX_VALUES['{urn:hl7-org:elm-types:r1}DateTime'] = MathUtil.MAX_DATETIME_VALUE;
MaxValue.MAX_VALUES['{urn:hl7-org:elm-types:r1}Date'] = MathUtil.MAX_DATE_VALUE;
MaxValue.MAX_VALUES['{urn:hl7-org:elm-types:r1}Time'] = MathUtil.MAX_TIME_VALUE;

var Successor = /*#__PURE__*/function (_Expression19) {
  _inherits(Successor, _Expression19);

  var _super19 = _createSuper(Successor);

  function Successor(json) {
    _classCallCheck(this, Successor);

    return _super19.call(this, json);
  }

  _createClass(Successor, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        null;
      }

      var successor = null;

      try {
        // MathUtil.successor throws on overflow, and the exception is used in
        // the logic for evaluating `meets`, so it can't be changed to just return null
        successor = MathUtil.successor(arg);
      } catch (e) {
        if (e instanceof MathUtil.OverFlowException) {
          return null;
        }
      }

      if (MathUtil.overflowsOrUnderflows(successor)) {
        return null;
      }

      return successor;
    }
  }]);

  return Successor;
}(Expression);

var Predecessor = /*#__PURE__*/function (_Expression20) {
  _inherits(Predecessor, _Expression20);

  var _super20 = _createSuper(Predecessor);

  function Predecessor(json) {
    _classCallCheck(this, Predecessor);

    return _super20.call(this, json);
  }

  _createClass(Predecessor, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        null;
      }

      var predecessor = null;

      try {
        // MathUtil.predecessor throws on underflow, and the exception is used in
        // the logic for evaluating `meets`, so it can't be changed to just return null
        predecessor = MathUtil.predecessor(arg);
      } catch (e) {
        if (e instanceof MathUtil.OverFlowException) {
          return null;
        }
      }

      if (MathUtil.overflowsOrUnderflows(predecessor)) {
        return null;
      }

      return predecessor;
    }
  }]);

  return Predecessor;
}(Expression);

module.exports = {
  Abs: Abs,
  Add: Add,
  Ceiling: Ceiling,
  Divide: Divide,
  Exp: Exp,
  Floor: Floor,
  Ln: Ln,
  Log: Log,
  MaxValue: MaxValue,
  MinValue: MinValue,
  Modulo: Modulo,
  Multiply: Multiply,
  Negate: Negate,
  Power: Power,
  Predecessor: Predecessor,
  Round: Round,
  Subtract: Subtract,
  Successor: Successor,
  Truncate: Truncate,
  TruncatedDivide: TruncatedDivide
};
},{"../datatypes/quantity":11,"../datatypes/uncertainty":13,"../util/math":46,"./builder":16,"./expression":22}],16:[function(require,module,exports){
"use strict";

var E = require('./expressions');

var _require = require('../util/util'),
    typeIsArray = _require.typeIsArray;

function build(json) {
  if (json == null) {
    return json;
  }

  if (typeIsArray(json)) {
    return json.map(function (child) {
      return build(child);
    });
  }

  if (json.type === 'FunctionRef') {
    return new E.FunctionRef(json);
  } else if (json.type === 'Literal') {
    return E.Literal.from(json);
  } else if (functionExists(json.type)) {
    return constructByName(json.type, json);
  } else {
    return null;
  }
}

function functionExists(name) {
  return typeof E[name] === 'function';
}

function constructByName(name, json) {
  return new E[name](json);
}

module.exports = {
  build: build
};
},{"../util/util":48,"./expressions":23}],17:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var dt = require('../datatypes/datatypes');

var _require2 = require('./builder'),
    build = _require2.build;

var ValueSetDef = /*#__PURE__*/function (_Expression) {
  _inherits(ValueSetDef, _Expression);

  var _super = _createSuper(ValueSetDef);

  function ValueSetDef(json) {
    var _this;

    _classCallCheck(this, ValueSetDef);

    _this = _super.call(this, json);
    _this.name = json.name;
    _this.id = json.id;
    _this.version = json.version;
    return _this;
  } //todo: code systems and versions


  _createClass(ValueSetDef, [{
    key: "exec",
    value: function exec(ctx) {
      var valueset = ctx.codeService.findValueSet(this.id, this.version) || new dt.ValueSet(this.id, this.version);
      ctx.rootContext().set(this.name, valueset);
      return valueset;
    }
  }]);

  return ValueSetDef;
}(Expression);

var ValueSetRef = /*#__PURE__*/function (_Expression2) {
  _inherits(ValueSetRef, _Expression2);

  var _super2 = _createSuper(ValueSetRef);

  function ValueSetRef(json) {
    var _this2;

    _classCallCheck(this, ValueSetRef);

    _this2 = _super2.call(this, json);
    _this2.name = json.name;
    _this2.libraryName = json.libraryName;
    return _this2;
  }

  _createClass(ValueSetRef, [{
    key: "exec",
    value: function exec(ctx) {
      // TODO: This calls the code service every time-- should be optimized
      var valueset = ctx.getValueSet(this.name, this.libraryName);

      if (valueset instanceof Expression) {
        valueset = valueset.execute(ctx);
      }

      return valueset;
    }
  }]);

  return ValueSetRef;
}(Expression);

var AnyInValueSet = /*#__PURE__*/function (_Expression3) {
  _inherits(AnyInValueSet, _Expression3);

  var _super3 = _createSuper(AnyInValueSet);

  function AnyInValueSet(json) {
    var _this3;

    _classCallCheck(this, AnyInValueSet);

    _this3 = _super3.call(this, json);
    _this3.codes = build(json.codes);
    _this3.valueset = new ValueSetRef(json.valueset);
    return _this3;
  }

  _createClass(AnyInValueSet, [{
    key: "exec",
    value: function exec(ctx) {
      var valueset = this.valueset.execute(ctx); // If the value set reference cannot be resolved, a run-time error is thrown.

      if (valueset == null || !valueset.isValueSet) {
        throw new Error('ValueSet must be provided to InValueSet function');
      }

      var codes = this.codes.exec(ctx);
      return codes != null && codes.some(function (code) {
        return valueset.hasMatch(code);
      });
    }
  }]);

  return AnyInValueSet;
}(Expression);

var InValueSet = /*#__PURE__*/function (_Expression4) {
  _inherits(InValueSet, _Expression4);

  var _super4 = _createSuper(InValueSet);

  function InValueSet(json) {
    var _this4;

    _classCallCheck(this, InValueSet);

    _this4 = _super4.call(this, json);
    _this4.code = build(json.code);
    _this4.valueset = new ValueSetRef(json.valueset);
    return _this4;
  }

  _createClass(InValueSet, [{
    key: "exec",
    value: function exec(ctx) {
      // If the code argument is null, the result is false
      if (this.code == null) {
        return false;
      }

      if (this.valueset == null) {
        throw new Error('ValueSet must be provided to InValueSet function');
      }

      var code = this.code.execute(ctx); // spec indicates to return false if code is null, throw error if value set cannot be resolved

      if (code == null) {
        return false;
      }

      var valueset = this.valueset.execute(ctx);

      if (valueset == null || !valueset.isValueSet) {
        throw new Error('ValueSet must be provided to InValueSet function');
      } // If there is a code and valueset return whether or not the valueset has the code


      return valueset.hasMatch(code);
    }
  }]);

  return InValueSet;
}(Expression);

var CodeSystemDef = /*#__PURE__*/function (_Expression5) {
  _inherits(CodeSystemDef, _Expression5);

  var _super5 = _createSuper(CodeSystemDef);

  function CodeSystemDef(json) {
    var _this5;

    _classCallCheck(this, CodeSystemDef);

    _this5 = _super5.call(this, json);
    _this5.name = json.name;
    _this5.id = json.id;
    _this5.version = json.version;
    return _this5;
  }

  _createClass(CodeSystemDef, [{
    key: "exec",
    value: function exec(ctx) {
      return new dt.CodeSystem(this.id, this.version);
    }
  }]);

  return CodeSystemDef;
}(Expression);

var CodeDef = /*#__PURE__*/function (_Expression6) {
  _inherits(CodeDef, _Expression6);

  var _super6 = _createSuper(CodeDef);

  function CodeDef(json) {
    var _this6;

    _classCallCheck(this, CodeDef);

    _this6 = _super6.call(this, json);
    _this6.name = json.name;
    _this6.id = json.id;
    _this6.systemName = json.codeSystem.name;
    _this6.display = json.display;
    return _this6;
  }

  _createClass(CodeDef, [{
    key: "exec",
    value: function exec(ctx) {
      var system = ctx.getCodeSystem(this.systemName).execute(ctx);
      return new dt.Code(this.id, system.id, system.version, this.display);
    }
  }]);

  return CodeDef;
}(Expression);

var CodeRef = /*#__PURE__*/function (_Expression7) {
  _inherits(CodeRef, _Expression7);

  var _super7 = _createSuper(CodeRef);

  function CodeRef(json) {
    var _this7;

    _classCallCheck(this, CodeRef);

    _this7 = _super7.call(this, json);
    _this7.name = json.name;
    _this7.library = json.libraryName;
    return _this7;
  }

  _createClass(CodeRef, [{
    key: "exec",
    value: function exec(ctx) {
      ctx = this.library ? ctx.getLibraryContext(this.library) : ctx;
      var codeDef = ctx.getCode(this.name);
      return codeDef ? codeDef.execute(ctx) : undefined;
    }
  }]);

  return CodeRef;
}(Expression);

var Code = /*#__PURE__*/function (_Expression8) {
  _inherits(Code, _Expression8);

  var _super8 = _createSuper(Code);

  function Code(json) {
    var _this8;

    _classCallCheck(this, Code);

    _this8 = _super8.call(this, json);
    _this8.code = json.code;
    _this8.systemName = json.system.name;
    _this8.version = json.version;
    _this8.display = json.display;
    return _this8;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(Code, [{
    key: "exec",
    value: function exec(ctx) {
      var system = ctx.getCodeSystem(this.systemName) || {};
      return new dt.Code(this.code, system.id, this.version, this.display);
    }
  }, {
    key: "isCode",
    get: function get() {
      return true;
    }
  }]);

  return Code;
}(Expression);

var ConceptDef = /*#__PURE__*/function (_Expression9) {
  _inherits(ConceptDef, _Expression9);

  var _super9 = _createSuper(ConceptDef);

  function ConceptDef(json) {
    var _this9;

    _classCallCheck(this, ConceptDef);

    _this9 = _super9.call(this, json);
    _this9.name = json.name;
    _this9.display = json.display;
    _this9.codes = json.code;
    return _this9;
  }

  _createClass(ConceptDef, [{
    key: "exec",
    value: function exec(ctx) {
      var codes = this.codes.map(function (code) {
        var codeDef = ctx.getCode(code.name);
        return codeDef ? codeDef.execute(ctx) : undefined;
      });
      return new dt.Concept(codes, this.display);
    }
  }]);

  return ConceptDef;
}(Expression);

var ConceptRef = /*#__PURE__*/function (_Expression10) {
  _inherits(ConceptRef, _Expression10);

  var _super10 = _createSuper(ConceptRef);

  function ConceptRef(json) {
    var _this10;

    _classCallCheck(this, ConceptRef);

    _this10 = _super10.call(this, json);
    _this10.name = json.name;
    return _this10;
  }

  _createClass(ConceptRef, [{
    key: "exec",
    value: function exec(ctx) {
      var conceptDef = ctx.getConcept(this.name);
      return conceptDef ? conceptDef.execute(ctx) : undefined;
    }
  }]);

  return ConceptRef;
}(Expression);

var Concept = /*#__PURE__*/function (_Expression11) {
  _inherits(Concept, _Expression11);

  var _super11 = _createSuper(Concept);

  function Concept(json) {
    var _this11;

    _classCallCheck(this, Concept);

    _this11 = _super11.call(this, json);
    _this11.codes = json.code;
    _this11.display = json.display;
    return _this11;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(Concept, [{
    key: "toCode",
    value: function toCode(ctx, code) {
      var system = ctx.getCodeSystem(code.system.name) || {};
      return new dt.Code(code.code, system.id, code.version, code.display);
    }
  }, {
    key: "exec",
    value: function exec(ctx) {
      var _this12 = this;

      var codes = this.codes.map(function (code) {
        return _this12.toCode(ctx, code);
      });
      return new dt.Concept(codes, this.display);
    }
  }, {
    key: "isConcept",
    get: function get() {
      return true;
    }
  }]);

  return Concept;
}(Expression);

var CalculateAge = /*#__PURE__*/function (_Expression12) {
  _inherits(CalculateAge, _Expression12);

  var _super12 = _createSuper(CalculateAge);

  function CalculateAge(json) {
    var _this13;

    _classCallCheck(this, CalculateAge);

    _this13 = _super12.call(this, json);
    _this13.precision = json.precision;
    return _this13;
  }

  _createClass(CalculateAge, [{
    key: "exec",
    value: function exec(ctx) {
      var date1 = this.execArgs(ctx);
      var date2 = dt.DateTime.fromJSDate(ctx.getExecutionDateTime());
      var result = date1 != null ? date1.durationBetween(date2, this.precision.toLowerCase()) : undefined;

      if (result != null && result.isPoint()) {
        return result.low;
      } else {
        return result;
      }
    }
  }]);

  return CalculateAge;
}(Expression);

var CalculateAgeAt = /*#__PURE__*/function (_Expression13) {
  _inherits(CalculateAgeAt, _Expression13);

  var _super13 = _createSuper(CalculateAgeAt);

  function CalculateAgeAt(json) {
    var _this14;

    _classCallCheck(this, CalculateAgeAt);

    _this14 = _super13.call(this, json);
    _this14.precision = json.precision;
    return _this14;
  }

  _createClass(CalculateAgeAt, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs = this.execArgs(ctx),
          _this$execArgs2 = _slicedToArray(_this$execArgs, 2),
          date1 = _this$execArgs2[0],
          date2 = _this$execArgs2[1];

      if (date1 != null && date2 != null) {
        // date1 is the birthdate, convert it to date if date2 is a date (to support ignoring time)
        if (date2.isDate && date1.isDateTime) {
          date1 = date1.getDate();
        }

        var result = date1.durationBetween(date2, this.precision.toLowerCase());

        if (result != null && result.isPoint()) {
          return result.low;
        } else {
          return result;
        }
      }

      return null;
    }
  }]);

  return CalculateAgeAt;
}(Expression);

module.exports = {
  AnyInValueSet: AnyInValueSet,
  CalculateAge: CalculateAge,
  CalculateAgeAt: CalculateAgeAt,
  Code: Code,
  CodeDef: CodeDef,
  CodeRef: CodeRef,
  CodeSystemDef: CodeSystemDef,
  Concept: Concept,
  ConceptDef: ConceptDef,
  ConceptRef: ConceptRef,
  InValueSet: InValueSet,
  ValueSetDef: ValueSetDef,
  ValueSetRef: ValueSetRef
};
},{"../datatypes/datatypes":6,"./builder":16,"./expression":22}],18:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('../datatypes/datatypes'),
    Uncertainty = _require2.Uncertainty; // Equal is completely handled by overloaded#Equal
// NotEqual is completely handled by overloaded#Equal


var Less = /*#__PURE__*/function (_Expression) {
  _inherits(Less, _Expression);

  var _super = _createSuper(Less);

  function Less(json) {
    _classCallCheck(this, Less);

    return _super.call(this, json);
  }

  _createClass(Less, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx).map(function (x) {
        return Uncertainty.from(x);
      });

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return args[0].lessThan(args[1]);
    }
  }]);

  return Less;
}(Expression);

var LessOrEqual = /*#__PURE__*/function (_Expression2) {
  _inherits(LessOrEqual, _Expression2);

  var _super2 = _createSuper(LessOrEqual);

  function LessOrEqual(json) {
    _classCallCheck(this, LessOrEqual);

    return _super2.call(this, json);
  }

  _createClass(LessOrEqual, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx).map(function (x) {
        return Uncertainty.from(x);
      });

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return args[0].lessThanOrEquals(args[1]);
    }
  }]);

  return LessOrEqual;
}(Expression);

var Greater = /*#__PURE__*/function (_Expression3) {
  _inherits(Greater, _Expression3);

  var _super3 = _createSuper(Greater);

  function Greater(json) {
    _classCallCheck(this, Greater);

    return _super3.call(this, json);
  }

  _createClass(Greater, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx).map(function (x) {
        return Uncertainty.from(x);
      });

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return args[0].greaterThan(args[1]);
    }
  }]);

  return Greater;
}(Expression);

var GreaterOrEqual = /*#__PURE__*/function (_Expression4) {
  _inherits(GreaterOrEqual, _Expression4);

  var _super4 = _createSuper(GreaterOrEqual);

  function GreaterOrEqual(json) {
    _classCallCheck(this, GreaterOrEqual);

    return _super4.call(this, json);
  }

  _createClass(GreaterOrEqual, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx).map(function (x) {
        return Uncertainty.from(x);
      });

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return args[0].greaterThanOrEquals(args[1]);
    }
  }]);

  return GreaterOrEqual;
}(Expression);

module.exports = {
  Greater: Greater,
  GreaterOrEqual: GreaterOrEqual,
  Less: Less,
  LessOrEqual: LessOrEqual
};
},{"../datatypes/datatypes":6,"./expression":22}],19:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('../util/comparison'),
    equals = _require3.equals; // TODO: Spec lists "Conditional", but it's "If" in the XSD


var If = /*#__PURE__*/function (_Expression) {
  _inherits(If, _Expression);

  var _super = _createSuper(If);

  function If(json) {
    var _this;

    _classCallCheck(this, If);

    _this = _super.call(this, json);
    _this.condition = build(json.condition);
    _this.th = build(json.then);
    _this.els = build(json.else);
    return _this;
  }

  _createClass(If, [{
    key: "exec",
    value: function exec(ctx) {
      if (this.condition.execute(ctx)) {
        return this.th.execute(ctx);
      } else {
        return this.els.execute(ctx);
      }
    }
  }]);

  return If;
}(Expression);

var CaseItem = function CaseItem(json) {
  _classCallCheck(this, CaseItem);

  this.when = build(json.when);
  this.then = build(json.then);
};

var Case = /*#__PURE__*/function (_Expression2) {
  _inherits(Case, _Expression2);

  var _super2 = _createSuper(Case);

  function Case(json) {
    var _this2;

    _classCallCheck(this, Case);

    _this2 = _super2.call(this, json);
    _this2.comparand = build(json.comparand);
    _this2.caseItems = json.caseItem.map(function (ci) {
      return new CaseItem(ci);
    });
    _this2.els = build(json.else);
    return _this2;
  }

  _createClass(Case, [{
    key: "exec",
    value: function exec(ctx) {
      if (this.comparand) {
        return this.exec_selected(ctx);
      } else {
        return this.exec_standard(ctx);
      }
    }
  }, {
    key: "exec_selected",
    value: function exec_selected(ctx) {
      var val = this.comparand.execute(ctx);

      var _iterator = _createForOfIteratorHelper(this.caseItems),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var ci = _step.value;

          if (equals(ci.when.execute(ctx), val)) {
            return ci.then.execute(ctx);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return this.els.execute(ctx);
    }
  }, {
    key: "exec_standard",
    value: function exec_standard(ctx) {
      var _iterator2 = _createForOfIteratorHelper(this.caseItems),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var ci = _step2.value;

          if (ci.when.execute(ctx)) {
            return ci.then.execute(ctx);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return this.els.execute(ctx);
    }
  }]);

  return Case;
}(Expression);

module.exports = {
  Case: Case,
  CaseItem: CaseItem,
  If: If
};
},{"../util/comparison":45,"./builder":16,"./expression":22}],20:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('./literal'),
    Literal = _require3.Literal;

var DT = require('../datatypes/datatypes');

var DateTime = /*#__PURE__*/function (_Expression) {
  _inherits(DateTime, _Expression);

  var _super = _createSuper(DateTime);

  function DateTime(json) {
    var _this;

    _classCallCheck(this, DateTime);

    _this = _super.call(this, json);
    _this.json = json;
    return _this;
  }

  _createClass(DateTime, [{
    key: "exec",
    value: function exec(ctx) {
      var _this2 = this;

      var _iterator = _createForOfIteratorHelper(DateTime.PROPERTIES),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;

          // if json does not contain 'timezoneOffset' set it to the executionDateTime from the context
          if (this.json[property] != null) {
            this[property] = build(this.json[property]);
          } else if (property === 'timezoneOffset' && ctx.getTimezoneOffset() != null) {
            this[property] = Literal.from({
              type: 'Literal',
              value: ctx.getTimezoneOffset(),
              valueType: '{urn:hl7-org:elm-types:r1}Integer'
            });
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var args = DateTime.PROPERTIES.map(function (p) {
        return _this2[p] != null ? _this2[p].execute(ctx) : undefined;
      });
      return _construct(DT.DateTime, _toConsumableArray(args));
    }
  }]);

  return DateTime;
}(Expression);

DateTime.PROPERTIES = ['year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond', 'timezoneOffset'];

var _Date = /*#__PURE__*/function (_Expression2) {
  _inherits(_Date, _Expression2);

  var _super2 = _createSuper(_Date);

  function _Date(json) {
    var _this3;

    _classCallCheck(this, _Date);

    _this3 = _super2.call(this, json);
    _this3.json = json;
    return _this3;
  }

  _createClass(_Date, [{
    key: "exec",
    value: function exec(ctx) {
      var _this4 = this;

      var _iterator2 = _createForOfIteratorHelper(_Date.PROPERTIES),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var property = _step2.value;

          if (this.json[property] != null) {
            this[property] = build(this.json[property]);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var args = _Date.PROPERTIES.map(function (p) {
        return _this4[p] != null ? _this4[p].execute(ctx) : undefined;
      });

      return _construct(DT.Date, _toConsumableArray(args));
    }
  }]);

  return _Date;
}(Expression);

_Date.PROPERTIES = ['year', 'month', 'day'];

var Time = /*#__PURE__*/function (_Expression3) {
  _inherits(Time, _Expression3);

  var _super3 = _createSuper(Time);

  function Time(json) {
    var _this5;

    _classCallCheck(this, Time);

    _this5 = _super3.call(this, json);

    var _iterator3 = _createForOfIteratorHelper(Time.PROPERTIES),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var property = _step3.value;

        if (json[property] != null) {
          _this5[property] = build(json[property]);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return _this5;
  }

  _createClass(Time, [{
    key: "exec",
    value: function exec(ctx) {
      var _this6 = this;

      var args = Time.PROPERTIES.map(function (p) {
        return _this6[p] != null ? _this6[p].execute(ctx) : undefined;
      });
      return _construct(DT.DateTime, [0, 1, 1].concat(_toConsumableArray(args))).getTime();
    }
  }]);

  return Time;
}(Expression);

Time.PROPERTIES = ['hour', 'minute', 'second', 'millisecond'];

var Today = /*#__PURE__*/function (_Expression4) {
  _inherits(Today, _Expression4);

  var _super4 = _createSuper(Today);

  function Today(json) {
    _classCallCheck(this, Today);

    return _super4.call(this, json);
  }

  _createClass(Today, [{
    key: "exec",
    value: function exec(ctx) {
      return ctx.getExecutionDateTime().getDate();
    }
  }]);

  return Today;
}(Expression);

var Now = /*#__PURE__*/function (_Expression5) {
  _inherits(Now, _Expression5);

  var _super5 = _createSuper(Now);

  function Now(json) {
    _classCallCheck(this, Now);

    return _super5.call(this, json);
  }

  _createClass(Now, [{
    key: "exec",
    value: function exec(ctx) {
      return ctx.getExecutionDateTime();
    }
  }]);

  return Now;
}(Expression);

var TimeOfDay = /*#__PURE__*/function (_Expression6) {
  _inherits(TimeOfDay, _Expression6);

  var _super6 = _createSuper(TimeOfDay);

  function TimeOfDay(json) {
    _classCallCheck(this, TimeOfDay);

    return _super6.call(this, json);
  }

  _createClass(TimeOfDay, [{
    key: "exec",
    value: function exec(ctx) {
      return ctx.getExecutionDateTime().getTime();
    }
  }]);

  return TimeOfDay;
}(Expression);

var DateTimeComponentFrom = /*#__PURE__*/function (_Expression7) {
  _inherits(DateTimeComponentFrom, _Expression7);

  var _super7 = _createSuper(DateTimeComponentFrom);

  function DateTimeComponentFrom(json) {
    var _this7;

    _classCallCheck(this, DateTimeComponentFrom);

    _this7 = _super7.call(this, json);
    _this7.precision = json.precision;
    return _this7;
  }

  _createClass(DateTimeComponentFrom, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return arg[this.precision.toLowerCase()];
      } else {
        return null;
      }
    }
  }]);

  return DateTimeComponentFrom;
}(Expression);

var DateFrom = /*#__PURE__*/function (_Expression8) {
  _inherits(DateFrom, _Expression8);

  var _super8 = _createSuper(DateFrom);

  function DateFrom(json) {
    _classCallCheck(this, DateFrom);

    return _super8.call(this, json);
  }

  _createClass(DateFrom, [{
    key: "exec",
    value: function exec(ctx) {
      var date = this.execArgs(ctx);

      if (date != null) {
        return date.getDate();
      } else {
        return null;
      }
    }
  }]);

  return DateFrom;
}(Expression);

var TimeFrom = /*#__PURE__*/function (_Expression9) {
  _inherits(TimeFrom, _Expression9);

  var _super9 = _createSuper(TimeFrom);

  function TimeFrom(json) {
    _classCallCheck(this, TimeFrom);

    return _super9.call(this, json);
  }

  _createClass(TimeFrom, [{
    key: "exec",
    value: function exec(ctx) {
      var date = this.execArgs(ctx);

      if (date != null) {
        return date.getTime();
      } else {
        return null;
      }
    }
  }]);

  return TimeFrom;
}(Expression);

var TimezoneOffsetFrom = /*#__PURE__*/function (_Expression10) {
  _inherits(TimezoneOffsetFrom, _Expression10);

  var _super10 = _createSuper(TimezoneOffsetFrom);

  function TimezoneOffsetFrom(json) {
    _classCallCheck(this, TimezoneOffsetFrom);

    return _super10.call(this, json);
  }

  _createClass(TimezoneOffsetFrom, [{
    key: "exec",
    value: function exec(ctx) {
      var date = this.execArgs(ctx);

      if (date != null) {
        return date.timezoneOffset;
      } else {
        return null;
      }
    }
  }]);

  return TimezoneOffsetFrom;
}(Expression); // Delegated to by overloaded#After


function doAfter(a, b, precision) {
  return a.after(b, precision);
} // Delegated to by overloaded#Before


function doBefore(a, b, precision) {
  return a.before(b, precision);
}

var DifferenceBetween = /*#__PURE__*/function (_Expression11) {
  _inherits(DifferenceBetween, _Expression11);

  var _super11 = _createSuper(DifferenceBetween);

  function DifferenceBetween(json) {
    var _this8;

    _classCallCheck(this, DifferenceBetween);

    _this8 = _super11.call(this, json);
    _this8.precision = json.precision;
    return _this8;
  }

  _createClass(DifferenceBetween, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx); // Check to make sure args exist and that they have differenceBetween functions so that they can be compared to one another

      if (args[0] == null || args[1] == null || typeof args[0].differenceBetween !== 'function' || typeof args[1].differenceBetween !== 'function') {
        return null;
      }

      var result = args[0].differenceBetween(args[1], this.precision != null ? this.precision.toLowerCase() : undefined);

      if (result != null && result.isPoint()) {
        return result.low;
      } else {
        return result;
      }
    }
  }]);

  return DifferenceBetween;
}(Expression);

var DurationBetween = /*#__PURE__*/function (_Expression12) {
  _inherits(DurationBetween, _Expression12);

  var _super12 = _createSuper(DurationBetween);

  function DurationBetween(json) {
    var _this9;

    _classCallCheck(this, DurationBetween);

    _this9 = _super12.call(this, json);
    _this9.precision = json.precision;
    return _this9;
  }

  _createClass(DurationBetween, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx); // Check to make sure args exist and that they have durationBetween functions so that they can be compared to one another

      if (args[0] == null || args[1] == null || typeof args[0].durationBetween !== 'function' || typeof args[1].durationBetween !== 'function') {
        return null;
      }

      var result = args[0].durationBetween(args[1], this.precision != null ? this.precision.toLowerCase() : undefined);

      if (result != null && result.isPoint()) {
        return result.low;
      } else {
        return result;
      }
    }
  }]);

  return DurationBetween;
}(Expression);

module.exports = {
  Date: _Date,
  DateFrom: DateFrom,
  DateTime: DateTime,
  DateTimeComponentFrom: DateTimeComponentFrom,
  DifferenceBetween: DifferenceBetween,
  DurationBetween: DurationBetween,
  Now: Now,
  Time: Time,
  TimeFrom: TimeFrom,
  TimeOfDay: TimeOfDay,
  TimezoneOffsetFrom: TimezoneOffsetFrom,
  Today: Today,
  doAfter: doAfter,
  doBefore: doBefore
};
},{"../datatypes/datatypes":6,"./builder":16,"./expression":22,"./literal":29}],21:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    UnimplementedExpression = _require.UnimplementedExpression;

var UsingDef = /*#__PURE__*/function (_UnimplementedExpress) {
  _inherits(UsingDef, _UnimplementedExpress);

  var _super = _createSuper(UsingDef);

  function UsingDef() {
    _classCallCheck(this, UsingDef);

    return _super.apply(this, arguments);
  }

  return UsingDef;
}(UnimplementedExpression);

var IncludeDef = /*#__PURE__*/function (_UnimplementedExpress2) {
  _inherits(IncludeDef, _UnimplementedExpress2);

  var _super2 = _createSuper(IncludeDef);

  function IncludeDef() {
    _classCallCheck(this, IncludeDef);

    return _super2.apply(this, arguments);
  }

  return IncludeDef;
}(UnimplementedExpression);

var VersionedIdentifier = /*#__PURE__*/function (_UnimplementedExpress3) {
  _inherits(VersionedIdentifier, _UnimplementedExpress3);

  var _super3 = _createSuper(VersionedIdentifier);

  function VersionedIdentifier() {
    _classCallCheck(this, VersionedIdentifier);

    return _super3.apply(this, arguments);
  }

  return VersionedIdentifier;
}(UnimplementedExpression);

module.exports = {
  UsingDef: UsingDef,
  IncludeDef: IncludeDef,
  VersionedIdentifier: VersionedIdentifier
};
},{"./expression":22}],22:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./builder'),
    build = _require.build;

var _require2 = require('../util/util'),
    typeIsArray = _require2.typeIsArray;

var Expression = /*#__PURE__*/function () {
  function Expression(json) {
    _classCallCheck(this, Expression);

    if (json.operand != null) {
      var op = build(json.operand);

      if (typeIsArray(json.operand)) {
        this.args = op;
      } else {
        this.arg = op;
      }
    }

    if (json.localId != null) {
      this.localId = json.localId;
    }
  }

  _createClass(Expression, [{
    key: "execute",
    value: function execute(ctx) {
      if (this.localId != null) {
        // Store the localId and result on the root context of this library
        var execValue = this.exec(ctx);
        ctx.rootContext().setLocalIdWithResult(this.localId, execValue);
        return execValue;
      } else {
        return this.exec(ctx);
      }
    }
  }, {
    key: "exec",
    value: function exec(ctx) {
      return this;
    }
  }, {
    key: "execArgs",
    value: function execArgs(ctx) {
      switch (false) {
        case this.args == null:
          return this.args.map(function (arg) {
            return arg.execute(ctx);
          });

        case this.arg == null:
          return this.arg.execute(ctx);

        default:
          return null;
      }
    }
  }]);

  return Expression;
}();

var UnimplementedExpression = /*#__PURE__*/function (_Expression) {
  _inherits(UnimplementedExpression, _Expression);

  var _super = _createSuper(UnimplementedExpression);

  function UnimplementedExpression(json) {
    var _this;

    _classCallCheck(this, UnimplementedExpression);

    _this = _super.call(this, json);
    _this.json = json;
    return _this;
  }

  _createClass(UnimplementedExpression, [{
    key: "exec",
    value: function exec(ctx) {
      throw new Error("Unimplemented Expression: ".concat(this.json.type));
    }
  }]);

  return UnimplementedExpression;
}(Expression);

module.exports = {
  Expression: Expression,
  UnimplementedExpression: UnimplementedExpression
};
},{"../util/util":48,"./builder":16}],23:[function(require,module,exports){
"use strict";

var expression = require('./expression');

var aggregate = require('./aggregate');

var arithmetic = require('./arithmetic');

var clinical = require('./clinical');

var comparison = require('./comparison');

var conditional = require('./conditional');

var datetime = require('./datetime');

var declaration = require('./declaration');

var external = require('./external');

var instance = require('./instance');

var interval = require('./interval');

var list = require('./list');

var literal = require('./literal');

var logical = require('./logical');

var nullological = require('./nullological');

var parameters = require('./parameters');

var quantity = require('./quantity');

var query = require('./query');

var ratio = require('./ratio');

var reusable = require('./reusable');

var string = require('./string');

var structured = require('./structured');

var type = require('./type');

var overloaded = require('./overloaded');

var libs = [expression, aggregate, arithmetic, clinical, comparison, conditional, datetime, declaration, external, instance, interval, list, literal, logical, nullological, parameters, query, quantity, ratio, reusable, string, structured, type, overloaded];

for (var _i = 0, _libs = libs; _i < _libs.length; _i++) {
  var lib = _libs[_i];

  for (var _i2 = 0, _Object$keys = Object.keys(lib); _i2 < _Object$keys.length; _i2++) {
    var element = _Object$keys[_i2];
    module.exports[element] = lib[element];
  }
}
},{"./aggregate":14,"./arithmetic":15,"./clinical":17,"./comparison":18,"./conditional":19,"./datetime":20,"./declaration":21,"./expression":22,"./external":24,"./instance":25,"./interval":26,"./list":28,"./literal":29,"./logical":30,"./nullological":31,"./overloaded":32,"./parameters":33,"./quantity":34,"./query":35,"./ratio":36,"./reusable":37,"./string":38,"./structured":39,"./type":40}],24:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('../util/util'),
    typeIsArray = _require3.typeIsArray;

var Retrieve = /*#__PURE__*/function (_Expression) {
  _inherits(Retrieve, _Expression);

  var _super = _createSuper(Retrieve);

  function Retrieve(json) {
    var _this;

    _classCallCheck(this, Retrieve);

    _this = _super.call(this, json);
    _this.datatype = json.dataType;
    _this.templateId = json.templateId;
    _this.codeProperty = json.codeProperty;
    _this.codes = build(json.codes);
    _this.dateProperty = json.dateProperty;
    _this.dateRange = build(json.dateRange);
    return _this;
  }

  _createClass(Retrieve, [{
    key: "exec",
    value: function exec(ctx) {
      var _this2 = this;

      var records = ctx.findRecords(this.templateId != null ? this.templateId : this.datatype);
      var codes = this.codes;

      if (this.codes && typeof this.codes.exec === 'function') {
        codes = this.codes.execute(ctx);

        if (codes == null) {
          return [];
        }
      }

      if (codes) {
        records = records.filter(function (r) {
          return _this2.recordMatchesCodesOrVS(r, codes);
        });
      } // TODO: Added @dateProperty check due to previous fix in cql4browsers in cql_qdm_patient_api hash: ddbc57


      if (this.dateRange && this.dateProperty) {
        var range = this.dateRange.execute(ctx);
        records = records.filter(function (r) {
          return range.includes(r.getDateOrInterval(_this2.dateProperty));
        });
      }

      if (Array.isArray(records)) {
        var _ctx$evaluatedRecords;

        (_ctx$evaluatedRecords = ctx.evaluatedRecords).push.apply(_ctx$evaluatedRecords, _toConsumableArray(records));
      } else {
        ctx.evaluatedRecords.push(records);
      }

      return records;
    }
  }, {
    key: "recordMatchesCodesOrVS",
    value: function recordMatchesCodesOrVS(record, codes) {
      var _this3 = this;

      if (typeIsArray(codes)) {
        return codes.some(function (c) {
          return c.hasMatch(record.getCode(_this3.codeProperty));
        });
      } else {
        return codes.hasMatch(record.getCode(this.codeProperty));
      }
    }
  }]);

  return Retrieve;
}(Expression);

module.exports = {
  Retrieve: Retrieve
};
},{"../util/util":48,"./builder":16,"./expression":22}],25:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('../datatypes/quantity'),
    Quantity = _require3.Quantity;

var _require4 = require('../datatypes/datatypes'),
    Code = _require4.Code,
    Concept = _require4.Concept;

var Element = /*#__PURE__*/function () {
  function Element(json) {
    _classCallCheck(this, Element);

    this.name = json.name;
    this.value = build(json.value);
  }

  _createClass(Element, [{
    key: "exec",
    value: function exec(ctx) {
      return this.value != null ? this.value.execute(ctx) : undefined;
    }
  }]);

  return Element;
}();

var Instance = /*#__PURE__*/function (_Expression) {
  _inherits(Instance, _Expression);

  var _super = _createSuper(Instance);

  function Instance(json) {
    var _this;

    _classCallCheck(this, Instance);

    _this = _super.call(this, json);
    _this.classType = json.classType;
    _this.element = json.element.map(function (child) {
      return new Element(child);
    });
    return _this;
  }

  _createClass(Instance, [{
    key: "exec",
    value: function exec(ctx) {
      var obj = {};

      var _iterator = _createForOfIteratorHelper(this.element),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var el = _step.value;
          obj[el.name] = el.exec(ctx);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      switch (this.classType) {
        case '{urn:hl7-org:elm-types:r1}Quantity':
          return new Quantity(obj.value, obj.unit);

        case '{urn:hl7-org:elm-types:r1}Code':
          return new Code(obj.code, obj.system, obj.version, obj.display);

        case '{urn:hl7-org:elm-types:r1}Concept':
          return new Concept(obj.codes, obj.display);

        default:
          return obj;
      }
    }
  }]);

  return Instance;
}(Expression);

module.exports = {
  Instance: Instance
};
},{"../datatypes/datatypes":6,"../datatypes/quantity":11,"./builder":16,"./expression":22}],26:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('../datatypes/quantity'),
    Quantity = _require3.Quantity,
    doAddition = _require3.doAddition;

var _require4 = require('../util/math'),
    successor = _require4.successor,
    predecessor = _require4.predecessor,
    MAX_DATETIME_VALUE = _require4.MAX_DATETIME_VALUE,
    MIN_DATETIME_VALUE = _require4.MIN_DATETIME_VALUE;

var _require5 = require('../util/units'),
    convertUnit = _require5.convertUnit,
    compareUnits = _require5.compareUnits,
    convertToCQLDateUnit = _require5.convertToCQLDateUnit;

var dtivl = require('../datatypes/interval');

var Interval = /*#__PURE__*/function (_Expression) {
  _inherits(Interval, _Expression);

  var _super = _createSuper(Interval);

  function Interval(json) {
    var _this;

    _classCallCheck(this, Interval);

    _this = _super.call(this, json);
    _this.lowClosed = json.lowClosed;
    _this.lowClosedExpression = build(json.lowClosedExpression);
    _this.highClosed = json.highClosed;
    _this.highClosedExpression = build(json.highClosedExpression);
    _this.low = build(json.low);
    _this.high = build(json.high);
    return _this;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(Interval, [{
    key: "exec",
    value: function exec(ctx) {
      var lowValue = this.low.execute(ctx);
      var highValue = this.high.execute(ctx);
      var lowClosed = this.lowClosed != null ? this.lowClosed : this.lowClosedExpression && this.lowClosedExpression.execute(ctx);
      var highClosed = this.highClosed != null ? this.highClosed : this.highClosedExpression && this.highClosedExpression.execute(ctx);
      var defaultPointType;

      if (lowValue == null && highValue == null) {
        // try to get the default point type from a cast
        if (this.low.asTypeSpecifier && this.low.asTypeSpecifier.type === 'NamedTypeSpecifier') {
          defaultPointType = this.low.asTypeSpecifier.name;
        } else if (this.high.asTypeSpecifier && this.high.asTypeSpecifier.type === 'NamedTypeSpecifier') {
          defaultPointType = this.high.asTypeSpecifier.name;
        }
      }

      return new dtivl.Interval(lowValue, highValue, lowClosed, highClosed, defaultPointType);
    }
  }, {
    key: "isInterval",
    get: function get() {
      return true;
    }
  }]);

  return Interval;
}(Expression); // Equal is completely handled by overloaded#Equal
// NotEqual is completely handled by overloaded#Equal
// Delegated to by overloaded#Contains and overloaded#In


function doContains(interval, item, precision) {
  return interval.contains(item, precision);
} // Delegated to by overloaded#Includes and overloaded#IncludedIn


function doIncludes(interval, subinterval, precision) {
  return interval.includes(subinterval, precision);
} // Delegated to by overloaded#ProperIncludes and overloaded@ProperIncludedIn


function doProperIncludes(interval, subinterval, precision) {
  return interval.properlyIncludes(subinterval, precision);
} // Delegated to by overloaded#After


function doAfter(a, b, precision) {
  return a.after(b, precision);
} // Delegated to by overloaded#Before


function doBefore(a, b, precision) {
  return a.before(b, precision);
}

var Meets = /*#__PURE__*/function (_Expression2) {
  _inherits(Meets, _Expression2);

  var _super2 = _createSuper(Meets);

  function Meets(json) {
    var _this2;

    _classCallCheck(this, Meets);

    _this2 = _super2.call(this, json);
    _this2.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this2;
  }

  _createClass(Meets, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs = this.execArgs(ctx),
          _this$execArgs2 = _slicedToArray(_this$execArgs, 2),
          a = _this$execArgs2[0],
          b = _this$execArgs2[1];

      if (a != null && b != null) {
        return a.meets(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return Meets;
}(Expression);

var MeetsAfter = /*#__PURE__*/function (_Expression3) {
  _inherits(MeetsAfter, _Expression3);

  var _super3 = _createSuper(MeetsAfter);

  function MeetsAfter(json) {
    var _this3;

    _classCallCheck(this, MeetsAfter);

    _this3 = _super3.call(this, json);
    _this3.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this3;
  }

  _createClass(MeetsAfter, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs3 = this.execArgs(ctx),
          _this$execArgs4 = _slicedToArray(_this$execArgs3, 2),
          a = _this$execArgs4[0],
          b = _this$execArgs4[1];

      if (a != null && b != null) {
        return a.meetsAfter(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return MeetsAfter;
}(Expression);

var MeetsBefore = /*#__PURE__*/function (_Expression4) {
  _inherits(MeetsBefore, _Expression4);

  var _super4 = _createSuper(MeetsBefore);

  function MeetsBefore(json) {
    var _this4;

    _classCallCheck(this, MeetsBefore);

    _this4 = _super4.call(this, json);
    _this4.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this4;
  }

  _createClass(MeetsBefore, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs5 = this.execArgs(ctx),
          _this$execArgs6 = _slicedToArray(_this$execArgs5, 2),
          a = _this$execArgs6[0],
          b = _this$execArgs6[1];

      if (a != null && b != null) {
        return a.meetsBefore(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return MeetsBefore;
}(Expression);

var Overlaps = /*#__PURE__*/function (_Expression5) {
  _inherits(Overlaps, _Expression5);

  var _super5 = _createSuper(Overlaps);

  function Overlaps(json) {
    var _this5;

    _classCallCheck(this, Overlaps);

    _this5 = _super5.call(this, json);
    _this5.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this5;
  }

  _createClass(Overlaps, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs7 = this.execArgs(ctx),
          _this$execArgs8 = _slicedToArray(_this$execArgs7, 2),
          a = _this$execArgs8[0],
          b = _this$execArgs8[1];

      if (a != null && b != null) {
        return a.overlaps(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return Overlaps;
}(Expression);

var OverlapsAfter = /*#__PURE__*/function (_Expression6) {
  _inherits(OverlapsAfter, _Expression6);

  var _super6 = _createSuper(OverlapsAfter);

  function OverlapsAfter(json) {
    var _this6;

    _classCallCheck(this, OverlapsAfter);

    _this6 = _super6.call(this, json);
    _this6.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this6;
  }

  _createClass(OverlapsAfter, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs9 = this.execArgs(ctx),
          _this$execArgs10 = _slicedToArray(_this$execArgs9, 2),
          a = _this$execArgs10[0],
          b = _this$execArgs10[1];

      if (a != null && b != null) {
        return a.overlapsAfter(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return OverlapsAfter;
}(Expression);

var OverlapsBefore = /*#__PURE__*/function (_Expression7) {
  _inherits(OverlapsBefore, _Expression7);

  var _super7 = _createSuper(OverlapsBefore);

  function OverlapsBefore(json) {
    var _this7;

    _classCallCheck(this, OverlapsBefore);

    _this7 = _super7.call(this, json);
    _this7.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this7;
  }

  _createClass(OverlapsBefore, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs11 = this.execArgs(ctx),
          _this$execArgs12 = _slicedToArray(_this$execArgs11, 2),
          a = _this$execArgs12[0],
          b = _this$execArgs12[1];

      if (a != null && b != null) {
        return a.overlapsBefore(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return OverlapsBefore;
}(Expression); // Delegated to by overloaded#Union


function doUnion(a, b) {
  return a.union(b);
} // Delegated to by overloaded#Except


function doExcept(a, b) {
  if (a != null && b != null) {
    return a.except(b);
  } else {
    return null;
  }
} // Delegated to by overloaded#Intersect


function doIntersect(a, b) {
  if (a != null && b != null) {
    return a.intersect(b);
  } else {
    return null;
  }
}

var Width = /*#__PURE__*/function (_Expression8) {
  _inherits(Width, _Expression8);

  var _super8 = _createSuper(Width);

  function Width(json) {
    _classCallCheck(this, Width);

    return _super8.call(this, json);
  }

  _createClass(Width, [{
    key: "exec",
    value: function exec(ctx) {
      var interval = this.arg.execute(ctx);

      if (interval == null) {
        return null;
      }

      return interval.width();
    }
  }]);

  return Width;
}(Expression);

var Size = /*#__PURE__*/function (_Expression9) {
  _inherits(Size, _Expression9);

  var _super9 = _createSuper(Size);

  function Size(json) {
    _classCallCheck(this, Size);

    return _super9.call(this, json);
  }

  _createClass(Size, [{
    key: "exec",
    value: function exec(ctx) {
      var interval = this.arg.execute(ctx);

      if (interval == null) {
        return null;
      }

      return interval.size();
    }
  }]);

  return Size;
}(Expression);

var Start = /*#__PURE__*/function (_Expression10) {
  _inherits(Start, _Expression10);

  var _super10 = _createSuper(Start);

  function Start(json) {
    _classCallCheck(this, Start);

    return _super10.call(this, json);
  }

  _createClass(Start, [{
    key: "exec",
    value: function exec(ctx) {
      var interval = this.arg.execute(ctx);

      if (interval == null) {
        return null;
      }

      var start = interval.start(); // fix the timezoneOffset of minimum Datetime to match context offset

      if (start && start.isDateTime && start.equals(MIN_DATETIME_VALUE)) {
        start.timezoneOffset = ctx.getTimezoneOffset();
      }

      return start;
    }
  }]);

  return Start;
}(Expression);

var End = /*#__PURE__*/function (_Expression11) {
  _inherits(End, _Expression11);

  var _super11 = _createSuper(End);

  function End(json) {
    _classCallCheck(this, End);

    return _super11.call(this, json);
  }

  _createClass(End, [{
    key: "exec",
    value: function exec(ctx) {
      var interval = this.arg.execute(ctx);

      if (interval == null) {
        return null;
      }

      var end = interval.end(); // fix the timezoneOffset of maximum Datetime to match context offset

      if (end && end.isDateTime && end.equals(MAX_DATETIME_VALUE)) {
        end.timezoneOffset = ctx.getTimezoneOffset();
      }

      return end;
    }
  }]);

  return End;
}(Expression);

var Starts = /*#__PURE__*/function (_Expression12) {
  _inherits(Starts, _Expression12);

  var _super12 = _createSuper(Starts);

  function Starts(json) {
    var _this8;

    _classCallCheck(this, Starts);

    _this8 = _super12.call(this, json);
    _this8.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this8;
  }

  _createClass(Starts, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs13 = this.execArgs(ctx),
          _this$execArgs14 = _slicedToArray(_this$execArgs13, 2),
          a = _this$execArgs14[0],
          b = _this$execArgs14[1];

      if (a != null && b != null) {
        return a.starts(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return Starts;
}(Expression);

var Ends = /*#__PURE__*/function (_Expression13) {
  _inherits(Ends, _Expression13);

  var _super13 = _createSuper(Ends);

  function Ends(json) {
    var _this9;

    _classCallCheck(this, Ends);

    _this9 = _super13.call(this, json);
    _this9.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this9;
  }

  _createClass(Ends, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs15 = this.execArgs(ctx),
          _this$execArgs16 = _slicedToArray(_this$execArgs15, 2),
          a = _this$execArgs16[0],
          b = _this$execArgs16[1];

      if (a != null && b != null) {
        return a.ends(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return Ends;
}(Expression);

function intervalListType(intervals) {
  // Returns one of null, 'time', 'date', 'datetime', 'quantity', 'integer', 'decimal' or 'mismatch'
  var type = null;

  var _iterator = _createForOfIteratorHelper(intervals),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var itvl = _step.value;

      if (itvl == null) {
        continue;
      }

      if (itvl.low == null && itvl.high == null) {
        //can't really determine type from this
        continue;
      } // if one end is null (but not both), the type can be determined from the other end


      var low = itvl.low != null ? itvl.low : itvl.high;
      var high = itvl.high != null ? itvl.high : itvl.low;

      if (low.isTime && low.isTime() && high.isTime && high.isTime()) {
        if (type == null) {
          type = 'time';
        } else if (type === 'time') {
          continue;
        } else {
          return 'mismatch';
        } // if an interval mixes date and datetime, type is datetime (for implicit conversion)

      } else if ((low.isDateTime || high.isDateTime) && (low.isDateTime || low.isDate) && (high.isDateTime || high.isDate)) {
        if (type == null || type === 'date') {
          type = 'datetime';
        } else if (type === 'datetime') {
          continue;
        } else {
          return 'mismatch';
        }
      } else if (low.isDate && high.isDate) {
        if (type == null) {
          type = 'date';
        } else if (type === 'date' || type === 'datetime') {
          continue;
        } else {
          return 'mismatch';
        }
      } else if (low.isQuantity && high.isQuantity) {
        if (type == null) {
          type = 'quantity';
        } else if (type === 'quantity') {
          continue;
        } else {
          return 'mismatch';
        }
      } else if (Number.isInteger(low) && Number.isInteger(high)) {
        if (type == null) {
          type = 'integer';
        } else if (type === 'integer' || type === 'decimal') {
          continue;
        } else {
          return 'mismatch';
        }
      } else if (typeof low === 'number' && typeof high === 'number') {
        if (type == null || type === 'integer') {
          type = 'decimal';
        } else if (type === 'decimal') {
          continue;
        } else {
          return 'mismatch';
        } //if we are here ends are mismatched

      } else {
        return 'mismatch';
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return type;
}

var Expand = /*#__PURE__*/function (_Expression14) {
  _inherits(Expand, _Expression14);

  var _super14 = _createSuper(Expand);

  function Expand(json) {
    _classCallCheck(this, Expand);

    return _super14.call(this, json);
  }

  _createClass(Expand, [{
    key: "exec",
    value: function exec(ctx) {
      // expand(argument List<Interval<T>>, per Quantity) List<Interval<T>>
      var defaultPer, expandFunction;

      var _this$execArgs17 = this.execArgs(ctx),
          _this$execArgs18 = _slicedToArray(_this$execArgs17, 2),
          intervals = _this$execArgs18[0],
          per = _this$execArgs18[1];

      var type = intervalListType(intervals);

      if (type === 'mismatch') {
        throw new Error('List of intervals contains mismatched types.');
      }

      if (type == null) {
        return null;
      } // this step collapses overlaps, and also returns a clone of intervals so we can feel free to mutate


      intervals = collapseIntervals(intervals, per);

      if (intervals.length === 0) {
        return [];
      }

      if (['time', 'date', 'datetime'].includes(type)) {
        expandFunction = this.expandDTishInterval;

        defaultPer = function defaultPer(interval) {
          return new Quantity(1, interval.low.getPrecision());
        };
      } else if (['quantity'].includes(type)) {
        expandFunction = this.expandQuantityInterval;

        defaultPer = function defaultPer(interval) {
          return new Quantity(1, interval.low.unit);
        };
      } else if (['integer', 'decimal'].includes(type)) {
        expandFunction = this.expandNumericInterval;

        defaultPer = function defaultPer(interval) {
          return new Quantity(1, '1');
        };
      } else {
        throw new Error('Interval list type not yet supported.');
      }

      var results = [];

      var _iterator2 = _createForOfIteratorHelper(intervals),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var interval = _step2.value;

          if (interval == null) {
            continue;
          } // We do not support open ended intervals since result would likely be too long


          if (interval.low == null || interval.high == null) {
            return null;
          }

          if (type === 'datetime') {
            //support for implicitly converting dates to datetime
            interval.low = interval.low.getDateTime();
            interval.high = interval.high.getDateTime();
          }

          per = per != null ? per : defaultPer(interval);
          var items = expandFunction.call(this, interval, per);

          if (items === null) {
            return null;
          }

          results.push.apply(results, _toConsumableArray(items || []));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return results;
    }
  }, {
    key: "expandDTishInterval",
    value: function expandDTishInterval(interval, per) {
      per.unit = convertToCQLDateUnit(per.unit);

      if (per.unit === 'week') {
        per.value *= 7;
        per.unit = 'day';
      } // Precision Checks
      // return null if precision not applicable (e.g. gram, or minutes for dates)


      if (!interval.low.constructor.FIELDS.includes(per.unit)) {
        return null;
      } // open interval with null boundaries do not contribute to output
      // closed interval with null boundaries are not allowed for performance reasons


      if (interval.low == null || interval.high == null) {
        return null;
      }

      var low = interval.lowClosed ? interval.low : interval.low.successor();
      var high = interval.highClosed ? interval.high : interval.high.predecessor();

      if (low.after(high)) {
        return [];
      }

      if (interval.low.isLessPrecise(per.unit) || interval.high.isLessPrecise(per.unit)) {
        return [];
      }

      var current_low = low;
      var results = [];
      low = this.truncateToPrecision(low, per.unit);
      high = this.truncateToPrecision(high, per.unit);
      var current_high = current_low.add(per.value, per.unit).predecessor();
      var intervalToAdd = new dtivl.Interval(current_low, current_high, true, true);

      while (intervalToAdd.high.sameOrBefore(high)) {
        results.push(intervalToAdd);
        current_low = current_low.add(per.value, per.unit);
        current_high = current_low.add(per.value, per.unit).predecessor();
        intervalToAdd = new dtivl.Interval(current_low, current_high, true, true);
      }

      return results;
    }
  }, {
    key: "truncateToPrecision",
    value: function truncateToPrecision(value, unit) {
      // If interval boundaries are more precise than per quantity, truncate to
      // the precision specified by the per
      var shouldTruncate = false;

      var _iterator3 = _createForOfIteratorHelper(value.constructor.FIELDS),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var field = _step3.value;

          if (shouldTruncate) {
            value[field] = null;
          }

          if (field === unit) {
            // Start truncating after this unit
            shouldTruncate = true;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return value;
    }
  }, {
    key: "expandQuantityInterval",
    value: function expandQuantityInterval(interval, per) {
      // we want to convert everything to the more precise of the interval.low or per
      var result_units;

      if (compareUnits(interval.low.unit, per.unit) > 0) {
        //interval.low.unit is 'bigger' aka les precise
        result_units = per.unit;
      } else {
        result_units = interval.low.unit;
      }

      var low_value = convertUnit(interval.low.value, interval.low.unit, result_units);
      var high_value = convertUnit(interval.high.value, interval.high.unit, result_units);
      var per_value = convertUnit(per.value, per.unit, result_units); // return null if unit conversion failed, must have mismatched units

      if (!(low_value != null && high_value != null && per_value != null)) {
        return null;
      }

      var results = this.makeNumericIntervalList(low_value, high_value, interval.lowClosed, interval.highClosed, per_value);

      var _iterator4 = _createForOfIteratorHelper(results),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var itvl = _step4.value;
          itvl.low = new Quantity(itvl.low, result_units);
          itvl.high = new Quantity(itvl.high, result_units);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return results;
    }
  }, {
    key: "expandNumericInterval",
    value: function expandNumericInterval(interval, per) {
      if (per.unit !== '1' && per.unit !== '') {
        return null;
      }

      return this.makeNumericIntervalList(interval.low, interval.high, interval.lowClosed, interval.highClosed, per.value);
    }
  }, {
    key: "makeNumericIntervalList",
    value: function makeNumericIntervalList(low, high, lowClosed, highClosed, perValue) {
      // If the per value is a Decimal (has a .), 8 decimal places are appropriate
      // Integers should have 0 Decimal places
      var perIsDecimal = perValue.toString().includes('.');
      var decimalPrecision = perIsDecimal ? 8 : 0;
      low = lowClosed ? low : successor(low);
      high = highClosed ? high : predecessor(high); // If the interval boundaries are more precise than the per quantity, the
      // more precise values will be truncated to the precision specified by the
      // per quantity.

      low = truncateDecimal(low, decimalPrecision);
      high = truncateDecimal(high, decimalPrecision);

      if (low > high) {
        return [];
      }

      if (low == null || high == null) {
        return [];
      }

      var perUnitSize = perIsDecimal ? 0.00000001 : 1;

      if (low === high && Number.isInteger(low) && Number.isInteger(high) && !Number.isInteger(perValue)) {
        high = parseFloat((high + 1).toFixed(decimalPrecision));
      }

      var current_low = low;
      var results = [];

      if (perValue > high - low + perUnitSize) {
        return [];
      }

      var current_high = parseFloat((current_low + perValue - perUnitSize).toFixed(decimalPrecision));
      var intervalToAdd = new dtivl.Interval(current_low, current_high, true, true);

      while (intervalToAdd.high <= high) {
        results.push(intervalToAdd);
        current_low = parseFloat((current_low + perValue).toFixed(decimalPrecision));
        current_high = parseFloat((current_low + perValue - perUnitSize).toFixed(decimalPrecision));
        intervalToAdd = new dtivl.Interval(current_low, current_high, true, true);
      }

      return results;
    }
  }]);

  return Expand;
}(Expression);

var Collapse = /*#__PURE__*/function (_Expression15) {
  _inherits(Collapse, _Expression15);

  var _super15 = _createSuper(Collapse);

  function Collapse(json) {
    _classCallCheck(this, Collapse);

    return _super15.call(this, json);
  }

  _createClass(Collapse, [{
    key: "exec",
    value: function exec(ctx) {
      // collapse(argument List<Interval<T>>, per Quantity) List<Interval<T>>
      var _this$execArgs19 = this.execArgs(ctx),
          _this$execArgs20 = _slicedToArray(_this$execArgs19, 2),
          intervals = _this$execArgs20[0],
          perWidth = _this$execArgs20[1];

      return collapseIntervals(intervals, perWidth);
    }
  }]);

  return Collapse;
}(Expression);

function collapseIntervals(intervals, perWidth) {
  // Clone intervals so this function remains idempotent
  var intervalsClone = [];

  var _iterator5 = _createForOfIteratorHelper(intervals),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var interval = _step5.value;

      // The spec says to ignore null intervals
      if (interval != null) {
        intervalsClone.push(interval.copy());
      }
    } // If the list is null, return null

  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  if (intervals == null) {
    return null;
  } else if (intervalsClone.length <= 1) {
    return intervalsClone;
  } else {
    // If the per argument is null, the default unit interval for the point type
    // of the intervals involved will be used (i.e. the interval that has a
    // width equal to the result of the successor function for the point type).
    if (perWidth == null) {
      perWidth = intervalsClone[0].getPointSize();
    } // sort intervalsClone by start


    intervalsClone.sort(function (a, b) {
      if (a.low && typeof a.low.before === 'function') {
        if (b.low != null && a.low.before(b.low)) {
          return -1;
        }

        if (b.low == null || a.low.after(b.low)) {
          return 1;
        }
      } else if (a.low != null && b.low != null) {
        if (a.low < b.low) {
          return -1;
        }

        if (a.low > b.low) {
          return 1;
        }
      } else if (a.low != null && b.low == null) {
        return 1;
      } else if (a.low == null && b.low != null) {
        return -1;
      } // if both lows are undefined, sort by high


      if (a.high && typeof a.high.before === 'function') {
        if (b.high == null || a.high.before(b.high)) {
          return -1;
        }

        if (a.high.after(b.high)) {
          return 1;
        }
      } else if (a.high != null && b.high != null) {
        if (a.high < b.high) {
          return -1;
        }

        if (a.high > b.high) {
          return 1;
        }
      } else if (a.high != null && b.high == null) {
        return -1;
      } else if (a.high == null && b.high != null) {
        return 1;
      }

      return 0;
    }); // collapse intervals as necessary

    var collapsedIntervals = [];
    var a = intervalsClone.shift();
    var b = intervalsClone.shift();

    while (b) {
      if (b.low && typeof b.low.durationBetween === 'function') {
        // handle DateTimes using durationBetween
        if (a.high != null ? a.high.sameOrAfter(b.low) : undefined) {
          // overlap
          if (b.high == null || b.high.after(a.high)) {
            a.high = b.high;
          }
        } else if ((a.high != null ? a.high.durationBetween(b.low, perWidth.unit).high : undefined) <= perWidth.value) {
          a.high = b.high;
        } else {
          collapsedIntervals.push(a);
          a = b;
        }
      } else if (b.low && typeof b.low.sameOrBefore === 'function') {
        if (a.high != null && b.low.sameOrBefore(doAddition(a.high, perWidth))) {
          if (b.high == null || b.high.after(a.high)) {
            a.high = b.high;
          }
        } else {
          collapsedIntervals.push(a);
          a = b;
        }
      } else {
        if (b.low - a.high <= perWidth.value) {
          if (b.high > a.high || b.high == null) {
            a.high = b.high;
          }
        } else {
          collapsedIntervals.push(a);
          a = b;
        }
      }

      b = intervalsClone.shift();
    }

    collapsedIntervals.push(a);
    return collapsedIntervals;
  }
}

function truncateDecimal(decimal, decimalPlaces) {
  // like parseFloat().toFixed() but floor rather than round
  // Needed for when per precision is less than the interval input precision
  var re = new RegExp('^-?\\d+(?:.\\d{0,' + (decimalPlaces || -1) + '})?');
  return parseFloat(decimal.toString().match(re)[0]);
}

module.exports = {
  Collapse: Collapse,
  End: End,
  Ends: Ends,
  Expand: Expand,
  Interval: Interval,
  Meets: Meets,
  MeetsAfter: MeetsAfter,
  MeetsBefore: MeetsBefore,
  Overlaps: Overlaps,
  OverlapsAfter: OverlapsAfter,
  OverlapsBefore: OverlapsBefore,
  Size: Size,
  Start: Start,
  Starts: Starts,
  Width: Width,
  doContains: doContains,
  doIncludes: doIncludes,
  doProperIncludes: doProperIncludes,
  doAfter: doAfter,
  doBefore: doBefore,
  doUnion: doUnion,
  doExcept: doExcept,
  doIntersect: doIntersect
};
},{"../datatypes/interval":9,"../datatypes/quantity":11,"../util/math":46,"../util/units":47,"./builder":16,"./expression":22}],27:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Library = /*#__PURE__*/function () {
  function Library(json, libraryManager) {
    _classCallCheck(this, Library);

    this.source = json; // usings

    var usingDefs = json.library.usings && json.library.usings.def || [];
    this.usings = usingDefs.filter(function (u) {
      return u.localIdentifier !== 'System';
    }).map(function (u) {
      return {
        name: u.localIdentifier,
        version: u.version
      };
    }); // parameters

    var paramDefs = json.library.parameters && json.library.parameters.def || [];
    this.parameters = {};

    var _iterator = _createForOfIteratorHelper(paramDefs),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var param = _step.value;
        this.parameters[param.name] = new ParameterDef(param);
      } // code systems

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var csDefs = json.library.codeSystems && json.library.codeSystems.def || [];
    this.codesystems = {};

    var _iterator2 = _createForOfIteratorHelper(csDefs),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var codesystem = _step2.value;
        this.codesystems[codesystem.name] = new CodeSystemDef(codesystem);
      } // value sets

    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    var vsDefs = json.library.valueSets && json.library.valueSets.def || [];
    this.valuesets = {};

    var _iterator3 = _createForOfIteratorHelper(vsDefs),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var valueset = _step3.value;
        this.valuesets[valueset.name] = new ValueSetDef(valueset);
      } // codes

    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    var codeDefs = json.library.codes && json.library.codes.def || [];
    this.codes = {};

    var _iterator4 = _createForOfIteratorHelper(codeDefs),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var code = _step4.value;
        this.codes[code.name] = new CodeDef(code);
      } // concepts

    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    var conceptDefs = json.library.concepts && json.library.concepts.def || [];
    this.concepts = {};

    var _iterator5 = _createForOfIteratorHelper(conceptDefs),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var concept = _step5.value;
        this.concepts[concept.name] = new ConceptDef(concept);
      } // expressions

    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }

    var exprDefs = json.library.statements && json.library.statements.def || [];
    this.expressions = {};
    this.functions = {};

    var _iterator6 = _createForOfIteratorHelper(exprDefs),
        _step6;

    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var expr = _step6.value;

        if (expr.type === 'FunctionDef') {
          if (!this.functions[expr.name]) {
            this.functions[expr.name] = [];
          }

          this.functions[expr.name].push(new FunctionDef(expr));
        } else {
          this.expressions[expr.name] = new ExpressionDef(expr);
        }
      } // includes

    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }

    var inclDefs = json.library.includes && json.library.includes.def || [];
    this.includes = {};

    var _iterator7 = _createForOfIteratorHelper(inclDefs),
        _step7;

    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var incl = _step7.value;

        if (libraryManager) {
          this.includes[incl.localIdentifier] = libraryManager.resolve(incl.path, incl.version);
        }
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
  }

  _createClass(Library, [{
    key: "getFunction",
    value: function getFunction(identifier) {
      return this.functions[identifier];
    }
  }, {
    key: "get",
    value: function get(identifier) {
      return this.expressions[identifier] || this.includes[identifier] || this.getFunction(identifier);
    }
  }, {
    key: "getValueSet",
    value: function getValueSet(identifier, libraryName) {
      if (this.valuesets[identifier] != null) {
        return this.valuesets[identifier];
      }

      return this.includes[libraryName] != null ? this.includes[libraryName].valuesets[identifier] : undefined;
    }
  }, {
    key: "getCodeSystem",
    value: function getCodeSystem(identifier) {
      return this.codesystems[identifier];
    }
  }, {
    key: "getCode",
    value: function getCode(identifier) {
      return this.codes[identifier];
    }
  }, {
    key: "getConcept",
    value: function getConcept(identifier) {
      return this.concepts[identifier];
    }
  }, {
    key: "getParameter",
    value: function getParameter(name) {
      return this.parameters[name];
    }
  }]);

  return Library;
}(); // These requires are at the end of the file because having them first in the
// file creates errors due to the order that the libraries are loaded.


var _require = require('./expressions'),
    ExpressionDef = _require.ExpressionDef,
    FunctionDef = _require.FunctionDef,
    ParameterDef = _require.ParameterDef,
    ValueSetDef = _require.ValueSetDef,
    CodeSystemDef = _require.CodeSystemDef,
    CodeDef = _require.CodeDef,
    ConceptDef = _require.ConceptDef;

module.exports = {
  Library: Library
};
},{"./expressions":23}],28:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression,
    UnimplementedExpression = _require.UnimplementedExpression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('../util/util'),
    typeIsArray = _require3.typeIsArray;

var _require4 = require('../util/comparison'),
    equals = _require4.equals;

var List = /*#__PURE__*/function (_Expression) {
  _inherits(List, _Expression);

  var _super = _createSuper(List);

  function List(json) {
    var _this;

    _classCallCheck(this, List);

    _this = _super.call(this, json);
    _this.elements = build(json.element) || [];
    return _this;
  }

  _createClass(List, [{
    key: "exec",
    value: function exec(ctx) {
      return this.elements.map(function (item) {
        return item.execute(ctx);
      });
    }
  }, {
    key: "isList",
    get: function get() {
      return true;
    }
  }]);

  return List;
}(Expression);

var Exists = /*#__PURE__*/function (_Expression2) {
  _inherits(Exists, _Expression2);

  var _super2 = _createSuper(Exists);

  function Exists(json) {
    _classCallCheck(this, Exists);

    return _super2.call(this, json);
  }

  _createClass(Exists, [{
    key: "exec",
    value: function exec(ctx) {
      var list = this.execArgs(ctx); // if list exists and has non empty length we need to make sure it isnt just full of nulls

      if (list) {
        return list.some(function (item) {
          return item != null;
        });
      }

      return false;
    }
  }]);

  return Exists;
}(Expression); // Equal is completely handled by overloaded#Equal
// NotEqual is completely handled by overloaded#Equal
// Delegated to by overloaded#Union


function doUnion(a, b) {
  var distinct = doDistinct(a.concat(b));
  return removeDuplicateNulls(distinct);
} // Delegated to by overloaded#Except


function doExcept(a, b) {
  var distinct = doDistinct(a);
  var setList = removeDuplicateNulls(distinct);
  return setList.filter(function (item) {
    return !doContains(b, item, true);
  });
} // Delegated to by overloaded#Intersect


function doIntersect(a, b) {
  var distinct = doDistinct(a);
  var setList = removeDuplicateNulls(distinct);
  return setList.filter(function (item) {
    return doContains(b, item, true);
  });
} // ELM-only, not a product of CQL


var Times = /*#__PURE__*/function (_UnimplementedExpress) {
  _inherits(Times, _UnimplementedExpress);

  var _super3 = _createSuper(Times);

  function Times() {
    _classCallCheck(this, Times);

    return _super3.apply(this, arguments);
  }

  return Times;
}(UnimplementedExpression); // ELM-only, not a product of CQL


var Filter = /*#__PURE__*/function (_UnimplementedExpress2) {
  _inherits(Filter, _UnimplementedExpress2);

  var _super4 = _createSuper(Filter);

  function Filter() {
    _classCallCheck(this, Filter);

    return _super4.apply(this, arguments);
  }

  return Filter;
}(UnimplementedExpression);

var SingletonFrom = /*#__PURE__*/function (_Expression3) {
  _inherits(SingletonFrom, _Expression3);

  var _super5 = _createSuper(SingletonFrom);

  function SingletonFrom(json) {
    _classCallCheck(this, SingletonFrom);

    return _super5.call(this, json);
  }

  _createClass(SingletonFrom, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null && arg.length > 1) {
        throw new Error("IllegalArgument: 'SingletonFrom' requires a 0 or 1 arg array");
      } else if (arg != null && arg.length === 1) {
        return arg[0];
      } else {
        return null;
      }
    }
  }]);

  return SingletonFrom;
}(Expression);

var ToList = /*#__PURE__*/function (_Expression4) {
  _inherits(ToList, _Expression4);

  var _super6 = _createSuper(ToList);

  function ToList(json) {
    _classCallCheck(this, ToList);

    return _super6.call(this, json);
  }

  _createClass(ToList, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return [arg];
      } else {
        return [];
      }
    }
  }]);

  return ToList;
}(Expression);

var IndexOf = /*#__PURE__*/function (_Expression5) {
  _inherits(IndexOf, _Expression5);

  var _super7 = _createSuper(IndexOf);

  function IndexOf(json) {
    var _this2;

    _classCallCheck(this, IndexOf);

    _this2 = _super7.call(this, json);
    _this2.source = build(json.source);
    _this2.element = build(json.element);
    return _this2;
  }

  _createClass(IndexOf, [{
    key: "exec",
    value: function exec(ctx) {
      var index;
      var src = this.source.execute(ctx);
      var el = this.element.execute(ctx);

      if (src == null || el == null) {
        return null;
      }

      for (var i = 0; i < src.length; i++) {
        var itm = src[i];

        if (equals(itm, el)) {
          index = i;
          break;
        }
      }

      if (index != null) {
        return index;
      } else {
        return -1;
      }
    }
  }]);

  return IndexOf;
}(Expression); // Indexer is completely handled by overloaded#Indexer
// Delegated to by overloaded#Contains and overloaded#In


function doContains(container, item) {
  var nullEquivalence = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return container.some(function (element) {
    return equals(element, item) || nullEquivalence && element == null && item == null;
  });
} // Delegated to by overloaded#Includes and overloaded@IncludedIn


function doIncludes(list, sublist) {
  return sublist.every(function (x) {
    return doContains(list, x);
  });
} // Delegated to by overloaded#ProperIncludes and overloaded@ProperIncludedIn


function doProperIncludes(list, sublist) {
  return list.length > sublist.length && doIncludes(list, sublist);
} // ELM-only, not a product of CQL


var ForEach = /*#__PURE__*/function (_UnimplementedExpress3) {
  _inherits(ForEach, _UnimplementedExpress3);

  var _super8 = _createSuper(ForEach);

  function ForEach() {
    _classCallCheck(this, ForEach);

    return _super8.apply(this, arguments);
  }

  return ForEach;
}(UnimplementedExpression);

var Flatten = /*#__PURE__*/function (_Expression6) {
  _inherits(Flatten, _Expression6);

  var _super9 = _createSuper(Flatten);

  function Flatten(json) {
    _classCallCheck(this, Flatten);

    return _super9.call(this, json);
  }

  _createClass(Flatten, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (typeIsArray(arg) && arg.every(function (x) {
        return typeIsArray(x);
      })) {
        return arg.reduce(function (x, y) {
          return x.concat(y);
        }, []);
      } else {
        return arg;
      }
    }
  }]);

  return Flatten;
}(Expression);

var Distinct = /*#__PURE__*/function (_Expression7) {
  _inherits(Distinct, _Expression7);

  var _super10 = _createSuper(Distinct);

  function Distinct(json) {
    _classCallCheck(this, Distinct);

    return _super10.call(this, json);
  }

  _createClass(Distinct, [{
    key: "exec",
    value: function exec(ctx) {
      var result = this.execArgs(ctx);

      if (result == null) {
        return null;
      }

      return doDistinct(result);
    }
  }]);

  return Distinct;
}(Expression);

function doDistinct(list) {
  var distinct = [];
  list.forEach(function (item) {
    var isNew = distinct.every(function (seenItem) {
      return !equals(item, seenItem);
    });

    if (isNew) {
      distinct.push(item);
    }
  });
  return removeDuplicateNulls(distinct);
}

function removeDuplicateNulls(list) {
  // Remove duplicate null elements
  var firstNullFound = false;
  var setList = [];

  var _iterator = _createForOfIteratorHelper(list),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;

      if (item !== null) {
        setList.push(item);
      } else if (item === null && !firstNullFound) {
        setList.push(item);
        firstNullFound = true;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return setList;
} // ELM-only, not a product of CQL


var Current = /*#__PURE__*/function (_UnimplementedExpress4) {
  _inherits(Current, _UnimplementedExpress4);

  var _super11 = _createSuper(Current);

  function Current() {
    _classCallCheck(this, Current);

    return _super11.apply(this, arguments);
  }

  return Current;
}(UnimplementedExpression);

var First = /*#__PURE__*/function (_Expression8) {
  _inherits(First, _Expression8);

  var _super12 = _createSuper(First);

  function First(json) {
    var _this3;

    _classCallCheck(this, First);

    _this3 = _super12.call(this, json);
    _this3.source = build(json.source);
    return _this3;
  }

  _createClass(First, [{
    key: "exec",
    value: function exec(ctx) {
      var src = this.source.exec(ctx);

      if (src != null && typeIsArray(src) && src.length > 0) {
        return src[0];
      } else {
        return null;
      }
    }
  }]);

  return First;
}(Expression);

var Last = /*#__PURE__*/function (_Expression9) {
  _inherits(Last, _Expression9);

  var _super13 = _createSuper(Last);

  function Last(json) {
    var _this4;

    _classCallCheck(this, Last);

    _this4 = _super13.call(this, json);
    _this4.source = build(json.source);
    return _this4;
  }

  _createClass(Last, [{
    key: "exec",
    value: function exec(ctx) {
      var src = this.source.exec(ctx);

      if (src != null && typeIsArray(src) && src.length > 0) {
        return src[src.length - 1];
      } else {
        return null;
      }
    }
  }]);

  return Last;
}(Expression);

var Slice = /*#__PURE__*/function (_Expression10) {
  _inherits(Slice, _Expression10);

  var _super14 = _createSuper(Slice);

  function Slice(json) {
    var _this5;

    _classCallCheck(this, Slice);

    _this5 = _super14.call(this, json);
    _this5.source = build(json.source);
    _this5.startIndex = build(json.startIndex);
    _this5.endIndex = build(json.endIndex);
    return _this5;
  }

  _createClass(Slice, [{
    key: "exec",
    value: function exec(ctx) {
      var src = this.source.exec(ctx);

      if (src != null && typeIsArray(src)) {
        var startIndex = this.startIndex.exec(ctx);
        var endIndex = this.endIndex.exec(ctx);
        var start = startIndex != null ? startIndex : 0;
        var end = endIndex != null ? endIndex : src.length;

        if (src.length === 0 || start < 0 || end < 0 || end < start) {
          return [];
        }

        return src.slice(start, end);
      }

      return null;
    }
  }]);

  return Slice;
}(Expression); // Length is completely handled by overloaded#Length


module.exports = {
  Current: Current,
  Distinct: Distinct,
  Exists: Exists,
  Filter: Filter,
  First: First,
  Flatten: Flatten,
  ForEach: ForEach,
  IndexOf: IndexOf,
  Last: Last,
  List: List,
  SingletonFrom: SingletonFrom,
  Slice: Slice,
  Times: Times,
  ToList: ToList,
  doContains: doContains,
  doIncludes: doIncludes,
  doProperIncludes: doProperIncludes,
  doUnion: doUnion,
  doExcept: doExcept,
  doIntersect: doIntersect
};
},{"../util/comparison":45,"../util/util":48,"./builder":16,"./expression":22}],29:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var Literal = /*#__PURE__*/function (_Expression) {
  _inherits(Literal, _Expression);

  var _super = _createSuper(Literal);

  _createClass(Literal, null, [{
    key: "from",
    value: function from(json) {
      switch (json.valueType) {
        case '{urn:hl7-org:elm-types:r1}Boolean':
          return new BooleanLiteral(json);

        case '{urn:hl7-org:elm-types:r1}Integer':
          return new IntegerLiteral(json);

        case '{urn:hl7-org:elm-types:r1}Decimal':
          return new DecimalLiteral(json);

        case '{urn:hl7-org:elm-types:r1}String':
          return new StringLiteral(json);

        default:
          return new Literal(json);
      }
    }
  }]);

  function Literal(json) {
    var _this;

    _classCallCheck(this, Literal);

    _this = _super.call(this, json);
    _this.valueType = json.valueType;
    _this.value = json.value;
    return _this;
  }

  _createClass(Literal, [{
    key: "exec",
    value: function exec(ctx) {
      return this.value;
    }
  }]);

  return Literal;
}(Expression); // The following are not defined in ELM, but helpful for execution


var BooleanLiteral = /*#__PURE__*/function (_Literal) {
  _inherits(BooleanLiteral, _Literal);

  var _super2 = _createSuper(BooleanLiteral);

  function BooleanLiteral(json) {
    var _this2;

    _classCallCheck(this, BooleanLiteral);

    _this2 = _super2.call(this, json);
    _this2.value = _this2.value === 'true';
    return _this2;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(BooleanLiteral, [{
    key: "exec",
    value: function exec(ctx) {
      return this.value;
    }
  }, {
    key: "isBooleanLiteral",
    get: function get() {
      return true;
    }
  }]);

  return BooleanLiteral;
}(Literal);

var IntegerLiteral = /*#__PURE__*/function (_Literal2) {
  _inherits(IntegerLiteral, _Literal2);

  var _super3 = _createSuper(IntegerLiteral);

  function IntegerLiteral(json) {
    var _this3;

    _classCallCheck(this, IntegerLiteral);

    _this3 = _super3.call(this, json);
    _this3.value = parseInt(_this3.value, 10);
    return _this3;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(IntegerLiteral, [{
    key: "exec",
    value: function exec(ctx) {
      return this.value;
    }
  }, {
    key: "isIntegerLiteral",
    get: function get() {
      return true;
    }
  }]);

  return IntegerLiteral;
}(Literal);

var DecimalLiteral = /*#__PURE__*/function (_Literal3) {
  _inherits(DecimalLiteral, _Literal3);

  var _super4 = _createSuper(DecimalLiteral);

  function DecimalLiteral(json) {
    var _this4;

    _classCallCheck(this, DecimalLiteral);

    _this4 = _super4.call(this, json);
    _this4.value = parseFloat(_this4.value);
    return _this4;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(DecimalLiteral, [{
    key: "exec",
    value: function exec(ctx) {
      return this.value;
    }
  }, {
    key: "isDecimalLiteral",
    get: function get() {
      return true;
    }
  }]);

  return DecimalLiteral;
}(Literal);

var StringLiteral = /*#__PURE__*/function (_Literal4) {
  _inherits(StringLiteral, _Literal4);

  var _super5 = _createSuper(StringLiteral);

  function StringLiteral(json) {
    _classCallCheck(this, StringLiteral);

    return _super5.call(this, json);
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(StringLiteral, [{
    key: "exec",
    value: function exec(ctx) {
      // TODO: Remove these replacements when CQL-to-ELM fixes bug: https://github.com/cqframework/clinical_quality_language/issues/82
      return this.value.replace(/\\'/g, "'").replace(/\\"/g, '"');
    }
  }, {
    key: "isStringLiteral",
    get: function get() {
      return true;
    }
  }]);

  return StringLiteral;
}(Literal);

module.exports = {
  BooleanLiteral: BooleanLiteral,
  DecimalLiteral: DecimalLiteral,
  IntegerLiteral: IntegerLiteral,
  Literal: Literal,
  StringLiteral: StringLiteral
};
},{"./expression":22}],30:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('../datatypes/datatypes'),
    ThreeValuedLogic = _require2.ThreeValuedLogic;

var And = /*#__PURE__*/function (_Expression) {
  _inherits(And, _Expression);

  var _super = _createSuper(And);

  function And(json) {
    _classCallCheck(this, And);

    return _super.call(this, json);
  }

  _createClass(And, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.and.apply(ThreeValuedLogic, _toConsumableArray(this.execArgs(ctx)));
    }
  }]);

  return And;
}(Expression);

var Or = /*#__PURE__*/function (_Expression2) {
  _inherits(Or, _Expression2);

  var _super2 = _createSuper(Or);

  function Or(json) {
    _classCallCheck(this, Or);

    return _super2.call(this, json);
  }

  _createClass(Or, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.or.apply(ThreeValuedLogic, _toConsumableArray(this.execArgs(ctx)));
    }
  }]);

  return Or;
}(Expression);

var Not = /*#__PURE__*/function (_Expression3) {
  _inherits(Not, _Expression3);

  var _super3 = _createSuper(Not);

  function Not(json) {
    _classCallCheck(this, Not);

    return _super3.call(this, json);
  }

  _createClass(Not, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.not(this.execArgs(ctx));
    }
  }]);

  return Not;
}(Expression);

var Xor = /*#__PURE__*/function (_Expression4) {
  _inherits(Xor, _Expression4);

  var _super4 = _createSuper(Xor);

  function Xor(json) {
    _classCallCheck(this, Xor);

    return _super4.call(this, json);
  }

  _createClass(Xor, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.xor.apply(ThreeValuedLogic, _toConsumableArray(this.execArgs(ctx)));
    }
  }]);

  return Xor;
}(Expression);

var IsTrue = /*#__PURE__*/function (_Expression5) {
  _inherits(IsTrue, _Expression5);

  var _super5 = _createSuper(IsTrue);

  function IsTrue(json) {
    _classCallCheck(this, IsTrue);

    return _super5.call(this, json);
  }

  _createClass(IsTrue, [{
    key: "exec",
    value: function exec(ctx) {
      return true === this.execArgs(ctx);
    }
  }]);

  return IsTrue;
}(Expression);

var IsFalse = /*#__PURE__*/function (_Expression6) {
  _inherits(IsFalse, _Expression6);

  var _super6 = _createSuper(IsFalse);

  function IsFalse(json) {
    _classCallCheck(this, IsFalse);

    return _super6.call(this, json);
  }

  _createClass(IsFalse, [{
    key: "exec",
    value: function exec(ctx) {
      return false === this.execArgs(ctx);
    }
  }]);

  return IsFalse;
}(Expression);

module.exports = {
  And: And,
  IsFalse: IsFalse,
  IsTrue: IsTrue,
  Not: Not,
  Or: Or,
  Xor: Xor
};
},{"../datatypes/datatypes":6,"./expression":22}],31:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var Null = /*#__PURE__*/function (_Expression) {
  _inherits(Null, _Expression);

  var _super = _createSuper(Null);

  function Null(json) {
    _classCallCheck(this, Null);

    return _super.call(this, json);
  }

  _createClass(Null, [{
    key: "exec",
    value: function exec(ctx) {
      return null;
    }
  }]);

  return Null;
}(Expression);

var IsNull = /*#__PURE__*/function (_Expression2) {
  _inherits(IsNull, _Expression2);

  var _super2 = _createSuper(IsNull);

  function IsNull(json) {
    _classCallCheck(this, IsNull);

    return _super2.call(this, json);
  }

  _createClass(IsNull, [{
    key: "exec",
    value: function exec(ctx) {
      return this.execArgs(ctx) == null;
    }
  }]);

  return IsNull;
}(Expression);

var Coalesce = /*#__PURE__*/function (_Expression3) {
  _inherits(Coalesce, _Expression3);

  var _super3 = _createSuper(Coalesce);

  function Coalesce(json) {
    _classCallCheck(this, Coalesce);

    return _super3.call(this, json);
  }

  _createClass(Coalesce, [{
    key: "exec",
    value: function exec(ctx) {
      var _iterator = _createForOfIteratorHelper(this.args),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var arg = _step.value;
          var result = arg.execute(ctx); // if a single arg that's a list, coalesce over the list

          if (this.args.length === 1 && Array.isArray(result)) {
            var item = result.find(function (item) {
              return item != null;
            });

            if (item != null) {
              return item;
            }
          } else {
            if (result != null) {
              return result;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return null;
    }
  }]);

  return Coalesce;
}(Expression);

module.exports = {
  Coalesce: Coalesce,
  IsNull: IsNull,
  Null: Null
};
},{"./expression":22}],32:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('../datatypes/logic'),
    ThreeValuedLogic = _require2.ThreeValuedLogic;

var _require3 = require('../datatypes/datetime'),
    DateTime = _require3.DateTime;

var _require4 = require('../util/util'),
    typeIsArray = _require4.typeIsArray;

var _require5 = require('../util/comparison'),
    equals = _require5.equals,
    equivalent = _require5.equivalent;

var DT = require('./datetime');

var LIST = require('./list');

var IVL = require('./interval');

var Equal = /*#__PURE__*/function (_Expression) {
  _inherits(Equal, _Expression);

  var _super = _createSuper(Equal);

  function Equal(json) {
    _classCallCheck(this, Equal);

    return _super.call(this, json);
  }

  _createClass(Equal, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return equals.apply(void 0, _toConsumableArray(args));
    }
  }]);

  return Equal;
}(Expression);

var Equivalent = /*#__PURE__*/function (_Expression2) {
  _inherits(Equivalent, _Expression2);

  var _super2 = _createSuper(Equivalent);

  function Equivalent(json) {
    _classCallCheck(this, Equivalent);

    return _super2.call(this, json);
  }

  _createClass(Equivalent, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs = this.execArgs(ctx),
          _this$execArgs2 = _slicedToArray(_this$execArgs, 2),
          a = _this$execArgs2[0],
          b = _this$execArgs2[1];

      if (a == null && b == null) {
        return true;
      } else if (a == null || b == null) {
        return false;
      } else {
        return equivalent(a, b);
      }
    }
  }]);

  return Equivalent;
}(Expression);

var NotEqual = /*#__PURE__*/function (_Expression3) {
  _inherits(NotEqual, _Expression3);

  var _super3 = _createSuper(NotEqual);

  function NotEqual(json) {
    _classCallCheck(this, NotEqual);

    return _super3.call(this, json);
  }

  _createClass(NotEqual, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return ThreeValuedLogic.not(equals.apply(void 0, _toConsumableArray(this.execArgs(ctx))));
    }
  }]);

  return NotEqual;
}(Expression);

var Union = /*#__PURE__*/function (_Expression4) {
  _inherits(Union, _Expression4);

  var _super4 = _createSuper(Union);

  function Union(json) {
    _classCallCheck(this, Union);

    return _super4.call(this, json);
  }

  _createClass(Union, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs3 = this.execArgs(ctx),
          _this$execArgs4 = _slicedToArray(_this$execArgs3, 2),
          a = _this$execArgs4[0],
          b = _this$execArgs4[1];

      if (a == null || b == null) {
        return null;
      }

      var lib = typeIsArray(a) ? LIST : IVL;
      return lib.doUnion(a, b);
    }
  }]);

  return Union;
}(Expression);

var Except = /*#__PURE__*/function (_Expression5) {
  _inherits(Except, _Expression5);

  var _super5 = _createSuper(Except);

  function Except(json) {
    _classCallCheck(this, Except);

    return _super5.call(this, json);
  }

  _createClass(Except, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs5 = this.execArgs(ctx),
          _this$execArgs6 = _slicedToArray(_this$execArgs5, 2),
          a = _this$execArgs6[0],
          b = _this$execArgs6[1];

      if (a == null) {
        return null;
      }

      if (b == null) {
        return typeIsArray(a) ? a : null;
      }

      var lib = typeIsArray(a) ? LIST : IVL;
      return lib.doExcept(a, b);
    }
  }]);

  return Except;
}(Expression);

var Intersect = /*#__PURE__*/function (_Expression6) {
  _inherits(Intersect, _Expression6);

  var _super6 = _createSuper(Intersect);

  function Intersect(json) {
    _classCallCheck(this, Intersect);

    return _super6.call(this, json);
  }

  _createClass(Intersect, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs7 = this.execArgs(ctx),
          _this$execArgs8 = _slicedToArray(_this$execArgs7, 2),
          a = _this$execArgs8[0],
          b = _this$execArgs8[1];

      if (a == null || b == null) {
        return null;
      }

      var lib = typeIsArray(a) ? LIST : IVL;
      return lib.doIntersect(a, b);
    }
  }]);

  return Intersect;
}(Expression);

var Indexer = /*#__PURE__*/function (_Expression7) {
  _inherits(Indexer, _Expression7);

  var _super7 = _createSuper(Indexer);

  function Indexer(json) {
    _classCallCheck(this, Indexer);

    return _super7.call(this, json);
  }

  _createClass(Indexer, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs9 = this.execArgs(ctx),
          _this$execArgs10 = _slicedToArray(_this$execArgs9, 2),
          operand = _this$execArgs10[0],
          index = _this$execArgs10[1];

      if (operand == null || index == null) {
        return null;
      }

      if (index < 0 || index >= operand.length) {
        return null;
      }

      return operand[index];
    }
  }]);

  return Indexer;
}(Expression);

var In = /*#__PURE__*/function (_Expression8) {
  _inherits(In, _Expression8);

  var _super8 = _createSuper(In);

  function In(json) {
    var _this;

    _classCallCheck(this, In);

    _this = _super8.call(this, json);
    _this.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this;
  }

  _createClass(In, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs11 = this.execArgs(ctx),
          _this$execArgs12 = _slicedToArray(_this$execArgs11, 2),
          item = _this$execArgs12[0],
          container = _this$execArgs12[1];

      if (item == null) {
        return null;
      }

      if (container == null) {
        return false;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doContains(container, item, this.precision);
    }
  }]);

  return In;
}(Expression);

var Contains = /*#__PURE__*/function (_Expression9) {
  _inherits(Contains, _Expression9);

  var _super9 = _createSuper(Contains);

  function Contains(json) {
    var _this2;

    _classCallCheck(this, Contains);

    _this2 = _super9.call(this, json);
    _this2.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this2;
  }

  _createClass(Contains, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs13 = this.execArgs(ctx),
          _this$execArgs14 = _slicedToArray(_this$execArgs13, 2),
          container = _this$execArgs14[0],
          item = _this$execArgs14[1];

      if (container == null) {
        return false;
      }

      if (item == null) {
        return null;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doContains(container, item, this.precision);
    }
  }]);

  return Contains;
}(Expression);

var Includes = /*#__PURE__*/function (_Expression10) {
  _inherits(Includes, _Expression10);

  var _super10 = _createSuper(Includes);

  function Includes(json) {
    var _this3;

    _classCallCheck(this, Includes);

    _this3 = _super10.call(this, json);
    _this3.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this3;
  }

  _createClass(Includes, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs15 = this.execArgs(ctx),
          _this$execArgs16 = _slicedToArray(_this$execArgs15, 2),
          container = _this$execArgs16[0],
          contained = _this$execArgs16[1];

      if (container == null || contained == null) {
        return null;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doIncludes(container, contained, this.precision);
    }
  }]);

  return Includes;
}(Expression);

var IncludedIn = /*#__PURE__*/function (_Expression11) {
  _inherits(IncludedIn, _Expression11);

  var _super11 = _createSuper(IncludedIn);

  function IncludedIn(json) {
    var _this4;

    _classCallCheck(this, IncludedIn);

    _this4 = _super11.call(this, json);
    _this4.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this4;
  }

  _createClass(IncludedIn, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs17 = this.execArgs(ctx),
          _this$execArgs18 = _slicedToArray(_this$execArgs17, 2),
          contained = _this$execArgs18[0],
          container = _this$execArgs18[1];

      if (container == null || contained == null) {
        return null;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doIncludes(container, contained, this.precision);
    }
  }]);

  return IncludedIn;
}(Expression);

var ProperIncludes = /*#__PURE__*/function (_Expression12) {
  _inherits(ProperIncludes, _Expression12);

  var _super12 = _createSuper(ProperIncludes);

  function ProperIncludes(json) {
    var _this5;

    _classCallCheck(this, ProperIncludes);

    _this5 = _super12.call(this, json);
    _this5.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this5;
  }

  _createClass(ProperIncludes, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs19 = this.execArgs(ctx),
          _this$execArgs20 = _slicedToArray(_this$execArgs19, 2),
          container = _this$execArgs20[0],
          contained = _this$execArgs20[1];

      if (container == null || contained == null) {
        return null;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doProperIncludes(container, contained, this.precision);
    }
  }]);

  return ProperIncludes;
}(Expression);

var ProperIncludedIn = /*#__PURE__*/function (_Expression13) {
  _inherits(ProperIncludedIn, _Expression13);

  var _super13 = _createSuper(ProperIncludedIn);

  function ProperIncludedIn(json) {
    var _this6;

    _classCallCheck(this, ProperIncludedIn);

    _this6 = _super13.call(this, json);
    _this6.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this6;
  }

  _createClass(ProperIncludedIn, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs21 = this.execArgs(ctx),
          _this$execArgs22 = _slicedToArray(_this$execArgs21, 2),
          contained = _this$execArgs22[0],
          container = _this$execArgs22[1];

      if (container == null || contained == null) {
        return null;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doProperIncludes(container, contained, this.precision);
    }
  }]);

  return ProperIncludedIn;
}(Expression);

var Length = /*#__PURE__*/function (_Expression14) {
  _inherits(Length, _Expression14);

  var _super14 = _createSuper(Length);

  function Length(json) {
    _classCallCheck(this, Length);

    return _super14.call(this, json);
  }

  _createClass(Length, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return arg.length;
      } else if (this.arg.asTypeSpecifier.type === 'ListTypeSpecifier') {
        return 0;
      } else {
        return null;
      }
    }
  }]);

  return Length;
}(Expression);

var After = /*#__PURE__*/function (_Expression15) {
  _inherits(After, _Expression15);

  var _super15 = _createSuper(After);

  function After(json) {
    var _this7;

    _classCallCheck(this, After);

    _this7 = _super15.call(this, json);
    _this7.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this7;
  }

  _createClass(After, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs23 = this.execArgs(ctx),
          _this$execArgs24 = _slicedToArray(_this$execArgs23, 2),
          a = _this$execArgs24[0],
          b = _this$execArgs24[1];

      if (a == null || b == null) {
        return null;
      }

      var lib = a instanceof DateTime ? DT : IVL;
      return lib.doAfter(a, b, this.precision);
    }
  }]);

  return After;
}(Expression);

var Before = /*#__PURE__*/function (_Expression16) {
  _inherits(Before, _Expression16);

  var _super16 = _createSuper(Before);

  function Before(json) {
    var _this8;

    _classCallCheck(this, Before);

    _this8 = _super16.call(this, json);
    _this8.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this8;
  }

  _createClass(Before, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs25 = this.execArgs(ctx),
          _this$execArgs26 = _slicedToArray(_this$execArgs25, 2),
          a = _this$execArgs26[0],
          b = _this$execArgs26[1];

      if (a == null || b == null) {
        return null;
      }

      var lib = a instanceof DateTime ? DT : IVL;
      return lib.doBefore(a, b, this.precision);
    }
  }]);

  return Before;
}(Expression);

var SameAs = /*#__PURE__*/function (_Expression17) {
  _inherits(SameAs, _Expression17);

  var _super17 = _createSuper(SameAs);

  function SameAs(json) {
    var _this9;

    _classCallCheck(this, SameAs);

    _this9 = _super17.call(this, json);
    _this9.precision = json.precision;
    return _this9;
  }

  _createClass(SameAs, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs27 = this.execArgs(ctx),
          _this$execArgs28 = _slicedToArray(_this$execArgs27, 2),
          a = _this$execArgs28[0],
          b = _this$execArgs28[1];

      if (a != null && b != null) {
        return a.sameAs(b, this.precision != null ? this.precision.toLowerCase() : undefined);
      } else {
        return null;
      }
    }
  }]);

  return SameAs;
}(Expression);

var SameOrAfter = /*#__PURE__*/function (_Expression18) {
  _inherits(SameOrAfter, _Expression18);

  var _super18 = _createSuper(SameOrAfter);

  function SameOrAfter(json) {
    var _this10;

    _classCallCheck(this, SameOrAfter);

    _this10 = _super18.call(this, json);
    _this10.precision = json.precision;
    return _this10;
  }

  _createClass(SameOrAfter, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs29 = this.execArgs(ctx),
          _this$execArgs30 = _slicedToArray(_this$execArgs29, 2),
          d1 = _this$execArgs30[0],
          d2 = _this$execArgs30[1];

      if (d1 != null && d2 != null) {
        return d1.sameOrAfter(d2, this.precision != null ? this.precision.toLowerCase() : undefined);
      } else {
        return null;
      }
    }
  }]);

  return SameOrAfter;
}(Expression);

var SameOrBefore = /*#__PURE__*/function (_Expression19) {
  _inherits(SameOrBefore, _Expression19);

  var _super19 = _createSuper(SameOrBefore);

  function SameOrBefore(json) {
    var _this11;

    _classCallCheck(this, SameOrBefore);

    _this11 = _super19.call(this, json);
    _this11.precision = json.precision;
    return _this11;
  }

  _createClass(SameOrBefore, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs31 = this.execArgs(ctx),
          _this$execArgs32 = _slicedToArray(_this$execArgs31, 2),
          d1 = _this$execArgs32[0],
          d2 = _this$execArgs32[1];

      if (d1 != null && d2 != null) {
        return d1.sameOrBefore(d2, this.precision != null ? this.precision.toLowerCase() : undefined);
      } else {
        return null;
      }
    }
  }]);

  return SameOrBefore;
}(Expression);

module.exports = {
  After: After,
  Before: Before,
  Contains: Contains,
  Equal: Equal,
  Equivalent: Equivalent,
  Except: Except,
  In: In,
  IncludedIn: IncludedIn,
  Includes: Includes,
  Indexer: Indexer,
  Intersect: Intersect,
  Length: Length,
  NotEqual: NotEqual,
  ProperIncludedIn: ProperIncludedIn,
  ProperIncludes: ProperIncludes,
  SameAs: SameAs,
  SameOrAfter: SameOrAfter,
  SameOrBefore: SameOrBefore,
  Union: Union
};
},{"../datatypes/datetime":7,"../datatypes/logic":10,"../util/comparison":45,"../util/util":48,"./datetime":20,"./expression":22,"./interval":26,"./list":28}],33:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var ParameterDef = /*#__PURE__*/function (_Expression) {
  _inherits(ParameterDef, _Expression);

  var _super = _createSuper(ParameterDef);

  function ParameterDef(json) {
    var _this;

    _classCallCheck(this, ParameterDef);

    _this = _super.call(this, json);
    _this.name = json.name;
    _this.default = build(json.default);
    _this.parameterTypeSpecifier = json.parameterTypeSpecifier;
    return _this;
  }

  _createClass(ParameterDef, [{
    key: "exec",
    value: function exec(ctx) {
      // If context parameters contains the name, return value.
      if (ctx && ctx.parameters[this.name] !== undefined) {
        return ctx.parameters[this.name]; // If the parent context contains the name, return that
      } else if (ctx.getParentParameter(this.name) !== undefined) {
        var parentParam = ctx.getParentParameter(this.name);
        return parentParam.default != null ? parentParam.default.execute(ctx) : parentParam; // If default type exists, execute the default type
      } else if (this.default != null) {
        this.default.execute(ctx);
      }
    }
  }]);

  return ParameterDef;
}(Expression);

var ParameterRef = /*#__PURE__*/function (_Expression2) {
  _inherits(ParameterRef, _Expression2);

  var _super2 = _createSuper(ParameterRef);

  function ParameterRef(json) {
    var _this2;

    _classCallCheck(this, ParameterRef);

    _this2 = _super2.call(this, json);
    _this2.name = json.name;
    _this2.library = json.libraryName;
    return _this2;
  }

  _createClass(ParameterRef, [{
    key: "exec",
    value: function exec(ctx) {
      ctx = this.library ? ctx.getLibraryContext(this.library) : ctx;
      var param = ctx.getParameter(this.name);
      return param != null ? param.execute(ctx) : undefined;
    }
  }]);

  return ParameterRef;
}(Expression);

module.exports = {
  ParameterDef: ParameterDef,
  ParameterRef: ParameterRef
};
},{"./builder":16,"./expression":22}],34:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var DT = require('../datatypes/datatypes'); // Unit conversation is currently implemented on for time duration comparison operations
// TODO: Implement unit conversation for time duration mathematical operations


var Quantity = /*#__PURE__*/function (_Expression) {
  _inherits(Quantity, _Expression);

  var _super = _createSuper(Quantity);

  function Quantity(json) {
    var _this;

    _classCallCheck(this, Quantity);

    _this = _super.call(this, json);
    _this.value = parseFloat(json.value);
    _this.unit = json.unit;
    return _this;
  }

  _createClass(Quantity, [{
    key: "exec",
    value: function exec(ctx) {
      return new DT.Quantity(this.value, this.unit);
    }
  }]);

  return Quantity;
}(Expression);

module.exports = {
  Quantity: Quantity
};
},{"../datatypes/datatypes":6,"./expression":22}],35:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('./expression'),
    Expression = _require.Expression,
    UnimplementedExpression = _require.UnimplementedExpression;

var _require2 = require('../runtime/context'),
    Context = _require2.Context;

var _require3 = require('./builder'),
    build = _require3.build;

var _require4 = require('../util/util'),
    typeIsArray = _require4.typeIsArray,
    allTrue = _require4.allTrue;

var _require5 = require('../util/comparison'),
    equals = _require5.equals;

var AliasedQuerySource = function AliasedQuerySource(json) {
  _classCallCheck(this, AliasedQuerySource);

  this.alias = json.alias;
  this.expression = build(json.expression);
};

var LetClause = function LetClause(json) {
  _classCallCheck(this, LetClause);

  this.identifier = json.identifier;
  this.expression = build(json.expression);
};

var With = /*#__PURE__*/function (_Expression) {
  _inherits(With, _Expression);

  var _super = _createSuper(With);

  function With(json) {
    var _this;

    _classCallCheck(this, With);

    _this = _super.call(this, json);
    _this.alias = json.alias;
    _this.expression = build(json.expression);
    _this.suchThat = build(json.suchThat);
    return _this;
  }

  _createClass(With, [{
    key: "exec",
    value: function exec(ctx) {
      var _this2 = this;

      var records = this.expression.execute(ctx);

      if (!typeIsArray(records)) {
        records = [records];
      }

      var returns = records.map(function (rec) {
        var childCtx = ctx.childContext();
        childCtx.set(_this2.alias, rec);
        return _this2.suchThat.execute(childCtx);
      });
      return returns.some(function (x) {
        return x;
      });
    }
  }]);

  return With;
}(Expression);

var Without = /*#__PURE__*/function (_With) {
  _inherits(Without, _With);

  var _super2 = _createSuper(Without);

  function Without(json) {
    _classCallCheck(this, Without);

    return _super2.call(this, json);
  }

  _createClass(Without, [{
    key: "exec",
    value: function exec(ctx) {
      return !_get(_getPrototypeOf(Without.prototype), "exec", this).call(this, ctx);
    }
  }]);

  return Without;
}(With); // ELM-only, not a product of CQL


var Sort = /*#__PURE__*/function (_UnimplementedExpress) {
  _inherits(Sort, _UnimplementedExpress);

  var _super3 = _createSuper(Sort);

  function Sort() {
    _classCallCheck(this, Sort);

    return _super3.apply(this, arguments);
  }

  return Sort;
}(UnimplementedExpression);

var ByDirection = /*#__PURE__*/function (_Expression2) {
  _inherits(ByDirection, _Expression2);

  var _super4 = _createSuper(ByDirection);

  function ByDirection(json) {
    var _this3;

    _classCallCheck(this, ByDirection);

    _this3 = _super4.call(this, json);
    _this3.direction = json.direction;
    _this3.low_order = _this3.direction === 'asc' ? -1 : 1;
    _this3.high_order = _this3.low_order * -1;
    return _this3;
  }

  _createClass(ByDirection, [{
    key: "exec",
    value: function exec(ctx, a, b) {
      if (a === b) {
        return 0;
      } else if (a.isQuantity && b.isQuantity) {
        if (a.before(b)) {
          return this.low_order;
        } else {
          return this.high_order;
        }
      } else if (a < b) {
        return this.low_order;
      } else {
        return this.high_order;
      }
    }
  }]);

  return ByDirection;
}(Expression);

var ByExpression = /*#__PURE__*/function (_Expression3) {
  _inherits(ByExpression, _Expression3);

  var _super5 = _createSuper(ByExpression);

  function ByExpression(json) {
    var _this4;

    _classCallCheck(this, ByExpression);

    _this4 = _super5.call(this, json);
    _this4.expression = build(json.expression);
    _this4.direction = json.direction;
    _this4.low_order = _this4.direction === 'asc' ? -1 : 1;
    _this4.high_order = _this4.low_order * -1;
    return _this4;
  }

  _createClass(ByExpression, [{
    key: "exec",
    value: function exec(ctx, a, b) {
      var sctx = ctx.childContext(a);
      var a_val = this.expression.execute(sctx);
      sctx = ctx.childContext(b);
      var b_val = this.expression.execute(sctx);

      if (a_val === b_val) {
        return 0;
      } else if (a_val.isQuantity && b_val.isQuantity) {
        if (a_val.before(b_val)) {
          return this.low_order;
        } else {
          return this.high_order;
        }
      } else if (a_val < b_val) {
        return this.low_order;
      } else {
        return this.high_order;
      }
    }
  }]);

  return ByExpression;
}(Expression);

var ByColumn = /*#__PURE__*/function (_ByExpression) {
  _inherits(ByColumn, _ByExpression);

  var _super6 = _createSuper(ByColumn);

  function ByColumn(json) {
    var _this5;

    _classCallCheck(this, ByColumn);

    _this5 = _super6.call(this, json);
    _this5.expression = build({
      name: json.path,
      type: 'IdentifierRef'
    });
    return _this5;
  }

  return ByColumn;
}(ByExpression);

var ReturnClause = function ReturnClause(json) {
  _classCallCheck(this, ReturnClause);

  this.expression = build(json.expression);
  this.distinct = json.distinct != null ? json.distinct : true;
};

var SortClause = /*#__PURE__*/function () {
  function SortClause(json) {
    _classCallCheck(this, SortClause);

    this.by = build(json != null ? json.by : undefined);
  }

  _createClass(SortClause, [{
    key: "sort",
    value: function sort(ctx, values) {
      var _this6 = this;

      if (this.by) {
        return values.sort(function (a, b) {
          var order = 0;

          var _iterator = _createForOfIteratorHelper(_this6.by),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var item = _step.value;
              // Do not use execute here because the value of the sort order is not important.
              order = item.exec(ctx, a, b);

              if (order !== 0) {
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return order;
        });
      }
    }
  }]);

  return SortClause;
}();

var toDistinctList = function toDistinctList(xList) {
  var yList = [];
  xList.forEach(function (x) {
    if (!yList.some(function (y) {
      return equals(x, y);
    })) {
      yList.push(x);
    }
  });
  return yList;
};

var Query = /*#__PURE__*/function (_Expression4) {
  _inherits(Query, _Expression4);

  var _super7 = _createSuper(Query);

  function Query(json) {
    var _this7;

    _classCallCheck(this, Query);

    _this7 = _super7.call(this, json);
    _this7.sources = new MultiSource(json.source.map(function (s) {
      return new AliasedQuerySource(s);
    }));
    _this7.letClauses = json.let != null ? json.let.map(function (d) {
      return new LetClause(d);
    }) : [];
    _this7.relationship = json.relationship != null ? build(json.relationship) : [];
    _this7.where = build(json.where);
    _this7.returnClause = json.return != null ? new ReturnClause(json.return) : null;
    _this7.aliases = _this7.sources.aliases();
    _this7.sortClause = json.sort != null ? new SortClause(json.sort) : null;
    return _this7;
  }

  _createClass(Query, [{
    key: "exec",
    value: function exec(ctx) {
      var _this8 = this;

      var returnedValues = [];
      this.sources.forEach(ctx, function (rctx) {
        var _iterator2 = _createForOfIteratorHelper(_this8.letClauses),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var def = _step2.value;
            rctx.set(def.identifier, def.expression.execute(rctx));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        var relations = _this8.relationship.map(function (rel) {
          var child_ctx = rctx.childContext();
          return rel.execute(child_ctx);
        });

        var passed = allTrue(relations) && (_this8.where ? _this8.where.execute(rctx) : true);

        if (passed) {
          if (_this8.returnClause != null) {
            var val = _this8.returnClause.expression.execute(rctx);

            returnedValues.push(val);
          } else {
            if (_this8.aliases.length === 1) {
              returnedValues.push(rctx.get(_this8.aliases[0]));
            } else {
              returnedValues.push(rctx.context_values);
            }
          }
        }
      });
      var distinct = this.returnClause != null ? this.returnClause.distinct : true;

      if (distinct) {
        returnedValues = toDistinctList(returnedValues);
      }

      if (this.sortClause != null) {
        this.sortClause.sort(ctx, returnedValues);
      }

      if (this.sources.returnsList()) {
        return returnedValues;
      } else {
        return returnedValues[0];
      }
    }
  }]);

  return Query;
}(Expression);

var AliasRef = /*#__PURE__*/function (_Expression5) {
  _inherits(AliasRef, _Expression5);

  var _super8 = _createSuper(AliasRef);

  function AliasRef(json) {
    var _this9;

    _classCallCheck(this, AliasRef);

    _this9 = _super8.call(this, json);
    _this9.name = json.name;
    return _this9;
  }

  _createClass(AliasRef, [{
    key: "exec",
    value: function exec(ctx) {
      return ctx != null ? ctx.get(this.name) : undefined;
    }
  }]);

  return AliasRef;
}(Expression);

var QueryLetRef = /*#__PURE__*/function (_AliasRef) {
  _inherits(QueryLetRef, _AliasRef);

  var _super9 = _createSuper(QueryLetRef);

  function QueryLetRef(json) {
    _classCallCheck(this, QueryLetRef);

    return _super9.call(this, json);
  }

  return QueryLetRef;
}(AliasRef); // The following is not defined by ELM but is helpful for execution


var MultiSource = /*#__PURE__*/function () {
  function MultiSource(sources) {
    _classCallCheck(this, MultiSource);

    this.sources = sources;
    this.alias = this.sources[0].alias;
    this.expression = this.sources[0].expression;
    this.isList = true;

    if (this.sources.length > 1) {
      this.rest = new MultiSource(this.sources.slice(1));
    }
  }

  _createClass(MultiSource, [{
    key: "aliases",
    value: function aliases() {
      var a = [this.alias];

      if (this.rest) {
        a = a.concat(this.rest.aliases());
      }

      return a;
    }
  }, {
    key: "returnsList",
    value: function returnsList() {
      return this.isList || this.rest && this.rest.returnsList();
    }
  }, {
    key: "forEach",
    value: function forEach(ctx, func) {
      var _this10 = this;

      var records = this.expression.execute(ctx);
      this.isList = typeIsArray(records);
      records = this.isList ? records : [records];
      return records.map(function (rec) {
        var rctx = new Context(ctx);
        rctx.set(_this10.alias, rec);

        if (_this10.rest) {
          return _this10.rest.forEach(rctx, func);
        } else {
          return func(rctx);
        }
      });
    }
  }]);

  return MultiSource;
}();

module.exports = {
  AliasedQuerySource: AliasedQuerySource,
  AliasRef: AliasRef,
  ByColumn: ByColumn,
  ByDirection: ByDirection,
  ByExpression: ByExpression,
  LetClause: LetClause,
  Query: Query,
  QueryLetRef: QueryLetRef,
  ReturnClause: ReturnClause,
  Sort: Sort,
  SortClause: SortClause,
  With: With,
  Without: Without
};
},{"../runtime/context":41,"../util/comparison":45,"../util/util":48,"./builder":16,"./expression":22}],36:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('../datatypes/quantity'),
    Quantity = _require2.Quantity;

var DT = require('../datatypes/datatypes');

var Ratio = /*#__PURE__*/function (_Expression) {
  _inherits(Ratio, _Expression);

  var _super = _createSuper(Ratio);

  function Ratio(json) {
    var _this;

    _classCallCheck(this, Ratio);

    _this = _super.call(this, json);

    if (json.numerator == null) {
      throw new Error('Cannot create a ratio with an undefined numerator value');
    } else {
      _this.numerator = new Quantity(json.numerator.value, json.numerator.unit);
    }

    if (json.denominator == null) {
      throw new Error('Cannot create a ratio with an undefined denominator value');
    } else {
      _this.denominator = new Quantity(json.denominator.value, json.denominator.unit);
    }

    return _this;
  }

  _createClass(Ratio, [{
    key: "exec",
    value: function exec(ctx) {
      return new DT.Ratio(this.numerator, this.denominator);
    }
  }]);

  return Ratio;
}(Expression);

module.exports = {
  Ratio: Ratio
};
},{"../datatypes/datatypes":6,"../datatypes/quantity":11,"./expression":22}],37:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var ExpressionDef = /*#__PURE__*/function (_Expression) {
  _inherits(ExpressionDef, _Expression);

  var _super = _createSuper(ExpressionDef);

  function ExpressionDef(json) {
    var _this;

    _classCallCheck(this, ExpressionDef);

    _this = _super.call(this, json);
    _this.name = json.name;
    _this.context = json.context;
    _this.expression = build(json.expression);
    return _this;
  }

  _createClass(ExpressionDef, [{
    key: "exec",
    value: function exec(ctx) {
      var value = this.expression != null ? this.expression.execute(ctx) : undefined;
      ctx.rootContext().set(this.name, value);
      return value;
    }
  }]);

  return ExpressionDef;
}(Expression);

var ExpressionRef = /*#__PURE__*/function (_Expression2) {
  _inherits(ExpressionRef, _Expression2);

  var _super2 = _createSuper(ExpressionRef);

  function ExpressionRef(json) {
    var _this2;

    _classCallCheck(this, ExpressionRef);

    _this2 = _super2.call(this, json);
    _this2.name = json.name;
    _this2.library = json.libraryName;
    return _this2;
  }

  _createClass(ExpressionRef, [{
    key: "exec",
    value: function exec(ctx) {
      ctx = this.library ? ctx.getLibraryContext(this.library) : ctx;
      var value = ctx.get(this.name);

      if (value instanceof Expression) {
        value = value.execute(ctx);
      }

      return value;
    }
  }]);

  return ExpressionRef;
}(Expression);

var FunctionDef = /*#__PURE__*/function (_Expression3) {
  _inherits(FunctionDef, _Expression3);

  var _super3 = _createSuper(FunctionDef);

  function FunctionDef(json) {
    var _this3;

    _classCallCheck(this, FunctionDef);

    _this3 = _super3.call(this, json);
    _this3.name = json.name;
    _this3.expression = build(json.expression);
    _this3.parameters = json.operand;
    return _this3;
  }

  _createClass(FunctionDef, [{
    key: "exec",
    value: function exec(ctx) {
      return this;
    }
  }]);

  return FunctionDef;
}(Expression);

var FunctionRef = /*#__PURE__*/function (_Expression4) {
  _inherits(FunctionRef, _Expression4);

  var _super4 = _createSuper(FunctionRef);

  function FunctionRef(json) {
    var _this4;

    _classCallCheck(this, FunctionRef);

    _this4 = _super4.call(this, json);
    _this4.name = json.name;
    _this4.library = json.libraryName;
    return _this4;
  }

  _createClass(FunctionRef, [{
    key: "exec",
    value: function exec(ctx) {
      var functionDefs, child_ctx;

      if (this.library) {
        var lib = ctx.get(this.library);
        functionDefs = lib ? lib.getFunction(this.name) : undefined;
        var libCtx = ctx.getLibraryContext(this.library);
        child_ctx = libCtx ? libCtx.childContext() : undefined;
      } else {
        functionDefs = ctx.get(this.name);
        child_ctx = ctx.childContext();
      }

      var args = this.execArgs(ctx); // Filter out functions w/ wrong number of arguments.

      functionDefs = functionDefs.filter(function (f) {
        return f.parameters.length === args.length;
      }); // If there is still > 1 matching function, filter by argument types

      if (functionDefs.length > 1) {
        functionDefs = functionDefs.filter(function (f) {
          var match = true;

          for (var i = 0; i < args.length && match; i++) {
            if (args[i] !== null) {
              var operandTypeSpecifier = f.parameters[i].operandTypeSpecifier;

              if (operandTypeSpecifier == null && f.parameters[i].operandType != null) {
                // convert it to a NamedTypedSpecifier
                operandTypeSpecifier = {
                  name: f.parameters[i].operandType,
                  type: 'NamedTypeSpecifier'
                };
              }

              match = ctx.matchesTypeSpecifier(args[i], operandTypeSpecifier);
            }
          }

          return match;
        });
      } // If there is still > 1 matching function, calculate a score based on quality of matches


      if (functionDefs.length > 1) {// TODO
      }

      if (functionDefs.length === 0) {
        throw new Error('no function with matching signature could be found');
      } // By this point, we should have only one function, but until implementation is completed,
      // use the last one (no matter how many still remain)


      var functionDef = functionDefs[functionDefs.length - 1];

      for (var i = 0; i < functionDef.parameters.length; i++) {
        child_ctx.set(functionDef.parameters[i].name, args[i]);
      }

      return functionDef.expression.execute(child_ctx);
    }
  }]);

  return FunctionRef;
}(Expression);

var OperandRef = /*#__PURE__*/function (_Expression5) {
  _inherits(OperandRef, _Expression5);

  var _super5 = _createSuper(OperandRef);

  function OperandRef(json) {
    var _this5;

    _classCallCheck(this, OperandRef);

    _this5 = _super5.call(this, json);
    _this5.name = json.name;
    return _this5;
  }

  _createClass(OperandRef, [{
    key: "exec",
    value: function exec(ctx) {
      return ctx.get(this.name);
    }
  }]);

  return OperandRef;
}(Expression);

var IdentifierRef = /*#__PURE__*/function (_Expression6) {
  _inherits(IdentifierRef, _Expression6);

  var _super6 = _createSuper(IdentifierRef);

  function IdentifierRef(json) {
    var _this6;

    _classCallCheck(this, IdentifierRef);

    _this6 = _super6.call(this, json);
    _this6.name = json.name;
    _this6.library = json.libraryName;
    return _this6;
  }

  _createClass(IdentifierRef, [{
    key: "exec",
    value: function exec(ctx) {
      // TODO: Technically, the ELM Translator should never output one of these
      // but this code is needed since it does, as a work-around to get queries
      // to work properly when sorting by a field in a tuple
      var lib = this.library ? ctx.get(this.library) : undefined;
      var val = lib ? lib.get(this.name) : ctx.get(this.name);

      if (val == null) {
        var parts = this.name.split('.');
        val = ctx.get(parts[0]);

        if (val != null && parts.length > 1) {
          var curr_obj = val;

          var _iterator = _createForOfIteratorHelper(parts.slice(1)),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var part = _step.value;

              // _obj = curr_obj?[part] ? curr_obj?.get?(part)
              // curr_obj = if _obj instanceof Function then _obj.call(curr_obj) else _obj
              var _obj = void 0;

              if (curr_obj != null) {
                _obj = curr_obj[part];

                if (_obj === undefined && typeof curr_obj.get === 'function') {
                  _obj = curr_obj.get(part);
                }
              }

              curr_obj = _obj instanceof Function ? _obj.call(curr_obj) : _obj;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          val = curr_obj;
        }
      }

      if (val instanceof Function) {
        return val.call(ctx.context_values);
      } else {
        return val;
      }
    }
  }]);

  return IdentifierRef;
}(Expression);

module.exports = {
  ExpressionDef: ExpressionDef,
  ExpressionRef: ExpressionRef,
  FunctionDef: FunctionDef,
  FunctionRef: FunctionRef,
  IdentifierRef: IdentifierRef,
  OperandRef: OperandRef
};
},{"./builder":16,"./expression":22}],38:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var Concatenate = /*#__PURE__*/function (_Expression) {
  _inherits(Concatenate, _Expression);

  var _super = _createSuper(Concatenate);

  function Concatenate(json) {
    _classCallCheck(this, Concatenate);

    return _super.call(this, json);
  }

  _createClass(Concatenate, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args.some(function (x) {
        return x == null;
      })) {
        return null;
      } else {
        return args.reduce(function (x, y) {
          return x + y;
        });
      }
    }
  }]);

  return Concatenate;
}(Expression);

var Combine = /*#__PURE__*/function (_Expression2) {
  _inherits(Combine, _Expression2);

  var _super2 = _createSuper(Combine);

  function Combine(json) {
    var _this;

    _classCallCheck(this, Combine);

    _this = _super2.call(this, json);
    _this.source = build(json.source);
    _this.separator = build(json.separator);
    return _this;
  }

  _createClass(Combine, [{
    key: "exec",
    value: function exec(ctx) {
      var source = this.source.execute(ctx);
      var separator = this.separator != null ? this.separator.execute(ctx) : '';

      if (source == null) {
        return null;
      } else {
        var filteredArray = source.filter(function (x) {
          return x != null;
        });

        if (filteredArray.length === 0) {
          return null;
        } else {
          return filteredArray.join(separator);
        }
      }
    }
  }]);

  return Combine;
}(Expression);

var Split = /*#__PURE__*/function (_Expression3) {
  _inherits(Split, _Expression3);

  var _super3 = _createSuper(Split);

  function Split(json) {
    var _this2;

    _classCallCheck(this, Split);

    _this2 = _super3.call(this, json);
    _this2.stringToSplit = build(json.stringToSplit);
    _this2.separator = build(json.separator);
    return _this2;
  }

  _createClass(Split, [{
    key: "exec",
    value: function exec(ctx) {
      var stringToSplit = this.stringToSplit.execute(ctx);
      var separator = this.separator.execute(ctx);

      if (stringToSplit && separator) {
        return stringToSplit.split(separator);
      }

      return stringToSplit ? [stringToSplit] : null;
    }
  }]);

  return Split;
}(Expression);

var SplitOnMatches = /*#__PURE__*/function (_Expression4) {
  _inherits(SplitOnMatches, _Expression4);

  var _super4 = _createSuper(SplitOnMatches);

  function SplitOnMatches(json) {
    var _this3;

    _classCallCheck(this, SplitOnMatches);

    _this3 = _super4.call(this, json);
    _this3.stringToSplit = build(json.stringToSplit);
    _this3.separatorPattern = build(json.separatorPattern);
    return _this3;
  }

  _createClass(SplitOnMatches, [{
    key: "exec",
    value: function exec(ctx) {
      var stringToSplit = this.stringToSplit.execute(ctx);
      var separatorPattern = this.separatorPattern.execute(ctx);

      if (stringToSplit && separatorPattern) {
        return stringToSplit.split(new RegExp(separatorPattern));
      }

      return stringToSplit ? [stringToSplit] : null;
    }
  }]);

  return SplitOnMatches;
}(Expression); // Length is completely handled by overloaded#Length


var Upper = /*#__PURE__*/function (_Expression5) {
  _inherits(Upper, _Expression5);

  var _super5 = _createSuper(Upper);

  function Upper(json) {
    _classCallCheck(this, Upper);

    return _super5.call(this, json);
  }

  _createClass(Upper, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return arg.toUpperCase();
      } else {
        return null;
      }
    }
  }]);

  return Upper;
}(Expression);

var Lower = /*#__PURE__*/function (_Expression6) {
  _inherits(Lower, _Expression6);

  var _super6 = _createSuper(Lower);

  function Lower(json) {
    _classCallCheck(this, Lower);

    return _super6.call(this, json);
  }

  _createClass(Lower, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return arg.toLowerCase();
      } else {
        return null;
      }
    }
  }]);

  return Lower;
}(Expression); // Indexer is completely handled by overloaded#Indexer


var PositionOf = /*#__PURE__*/function (_Expression7) {
  _inherits(PositionOf, _Expression7);

  var _super7 = _createSuper(PositionOf);

  function PositionOf(json) {
    var _this4;

    _classCallCheck(this, PositionOf);

    _this4 = _super7.call(this, json);
    _this4.pattern = build(json.pattern);
    _this4.string = build(json.string);
    return _this4;
  }

  _createClass(PositionOf, [{
    key: "exec",
    value: function exec(ctx) {
      var pattern = this.pattern.execute(ctx);
      var string = this.string.execute(ctx);

      if (pattern == null || string == null) {
        return null;
      } else {
        return string.indexOf(pattern);
      }
    }
  }]);

  return PositionOf;
}(Expression);

var LastPositionOf = /*#__PURE__*/function (_Expression8) {
  _inherits(LastPositionOf, _Expression8);

  var _super8 = _createSuper(LastPositionOf);

  function LastPositionOf(json) {
    var _this5;

    _classCallCheck(this, LastPositionOf);

    _this5 = _super8.call(this, json);
    _this5.pattern = build(json.pattern);
    _this5.string = build(json.string);
    return _this5;
  }

  _createClass(LastPositionOf, [{
    key: "exec",
    value: function exec(ctx) {
      var pattern = this.pattern.execute(ctx);
      var string = this.string.execute(ctx);

      if (pattern == null || string == null) {
        return null;
      } else {
        return string.lastIndexOf(pattern);
      }
    }
  }]);

  return LastPositionOf;
}(Expression);

var Matches = /*#__PURE__*/function (_Expression9) {
  _inherits(Matches, _Expression9);

  var _super9 = _createSuper(Matches);

  function Matches(json) {
    _classCallCheck(this, Matches);

    return _super9.call(this, json);
  }

  _createClass(Matches, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs = this.execArgs(ctx),
          _this$execArgs2 = _slicedToArray(_this$execArgs, 2),
          string = _this$execArgs2[0],
          pattern = _this$execArgs2[1];

      if (string == null || pattern == null) {
        return null;
      }

      return new RegExp('^' + pattern + '$').test(string);
    }
  }]);

  return Matches;
}(Expression);

var Substring = /*#__PURE__*/function (_Expression10) {
  _inherits(Substring, _Expression10);

  var _super10 = _createSuper(Substring);

  function Substring(json) {
    var _this6;

    _classCallCheck(this, Substring);

    _this6 = _super10.call(this, json);
    _this6.stringToSub = build(json.stringToSub);
    _this6.startIndex = build(json.startIndex);
    _this6.length = build(json['length']);
    return _this6;
  }

  _createClass(Substring, [{
    key: "exec",
    value: function exec(ctx) {
      var stringToSub = this.stringToSub.execute(ctx);
      var startIndex = this.startIndex.execute(ctx);
      var length = this.length != null ? this.length.execute(ctx) : null; // According to spec: If stringToSub or startIndex is null, or startIndex is out of range, the result is null.

      if (stringToSub == null || startIndex == null || startIndex < 0 || startIndex >= stringToSub.length) {
        return null;
      } else if (length != null) {
        return stringToSub.substr(startIndex, length);
      } else {
        return stringToSub.substr(startIndex);
      }
    }
  }]);

  return Substring;
}(Expression);

var StartsWith = /*#__PURE__*/function (_Expression11) {
  _inherits(StartsWith, _Expression11);

  var _super11 = _createSuper(StartsWith);

  function StartsWith(json) {
    _classCallCheck(this, StartsWith);

    return _super11.call(this, json);
  }

  _createClass(StartsWith, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args.some(function (x) {
        return x == null;
      })) {
        return null;
      } else {
        return args[0].slice(0, args[1].length) === args[1];
      }
    }
  }]);

  return StartsWith;
}(Expression);

var EndsWith = /*#__PURE__*/function (_Expression12) {
  _inherits(EndsWith, _Expression12);

  var _super12 = _createSuper(EndsWith);

  function EndsWith(json) {
    _classCallCheck(this, EndsWith);

    return _super12.call(this, json);
  }

  _createClass(EndsWith, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args.some(function (x) {
        return x == null;
      })) {
        return null;
      } else {
        return args[1] === '' || args[0].slice(-args[1].length) === args[1];
      }
    }
  }]);

  return EndsWith;
}(Expression);

var ReplaceMatches = /*#__PURE__*/function (_Expression13) {
  _inherits(ReplaceMatches, _Expression13);

  var _super13 = _createSuper(ReplaceMatches);

  function ReplaceMatches(json) {
    _classCallCheck(this, ReplaceMatches);

    return _super13.call(this, json);
  }

  _createClass(ReplaceMatches, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args.some(function (x) {
        return x == null;
      })) {
        return null;
      } else {
        return args[0].replace(new RegExp(args[1], 'g'), args[2]);
      }
    }
  }]);

  return ReplaceMatches;
}(Expression);

module.exports = {
  Combine: Combine,
  Concatenate: Concatenate,
  EndsWith: EndsWith,
  LastPositionOf: LastPositionOf,
  Lower: Lower,
  Matches: Matches,
  PositionOf: PositionOf,
  ReplaceMatches: ReplaceMatches,
  Split: Split,
  SplitOnMatches: SplitOnMatches,
  StartsWith: StartsWith,
  Substring: Substring,
  Upper: Upper
};
},{"./builder":16,"./expression":22}],39:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression,
    UnimplementedExpression = _require.UnimplementedExpression;

var _require2 = require('./builder'),
    build = _require2.build;

var Property = /*#__PURE__*/function (_Expression) {
  _inherits(Property, _Expression);

  var _super = _createSuper(Property);

  function Property(json) {
    var _this;

    _classCallCheck(this, Property);

    _this = _super.call(this, json);
    _this.scope = json.scope;
    _this.source = build(json.source);
    _this.path = json.path;
    return _this;
  }

  _createClass(Property, [{
    key: "exec",
    value: function exec(ctx) {
      var obj = this.scope != null ? ctx.get(this.scope) : this.source;

      if (obj instanceof Expression) {
        obj = obj.execute(ctx);
      }

      var val = getPropertyFromObject(obj, this.path);

      if (val == null) {
        var parts = this.path.split('.');
        var curr_obj = obj;

        var _iterator = _createForOfIteratorHelper(parts),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var part = _step.value;

            var _obj = getPropertyFromObject(curr_obj, part);

            curr_obj = _obj instanceof Function ? _obj.call(curr_obj) : _obj;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        val = curr_obj != null ? curr_obj : null; // convert undefined to null
      }

      if (val instanceof Function) {
        return val.call(obj);
      } else {
        return val;
      }
    }
  }]);

  return Property;
}(Expression);

function getPropertyFromObject(obj, path) {
  var val;

  if (obj != null) {
    val = obj[path];

    if (val === undefined && typeof obj.get === 'function') {
      val = obj.get(path);
    }
  }

  return val;
}

var Tuple = /*#__PURE__*/function (_Expression2) {
  _inherits(Tuple, _Expression2);

  var _super2 = _createSuper(Tuple);

  function Tuple(json) {
    var _this2;

    _classCallCheck(this, Tuple);

    _this2 = _super2.call(this, json);
    var elements = json.element != null ? json.element : [];
    _this2.elements = elements.map(function (el) {
      return {
        name: el.name,
        value: build(el.value)
      };
    });
    return _this2;
  }

  _createClass(Tuple, [{
    key: "exec",
    value: function exec(ctx) {
      var val = {};

      var _iterator2 = _createForOfIteratorHelper(this.elements),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var el = _step2.value;
          val[el.name] = el.value != null ? el.value.execute(ctx) : undefined;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return val;
    }
  }, {
    key: "isTuple",
    get: function get() {
      return true;
    }
  }]);

  return Tuple;
}(Expression);

var TupleElement = /*#__PURE__*/function (_UnimplementedExpress) {
  _inherits(TupleElement, _UnimplementedExpress);

  var _super3 = _createSuper(TupleElement);

  function TupleElement() {
    _classCallCheck(this, TupleElement);

    return _super3.apply(this, arguments);
  }

  return TupleElement;
}(UnimplementedExpression);

var TupleElementDefinition = /*#__PURE__*/function (_UnimplementedExpress2) {
  _inherits(TupleElementDefinition, _UnimplementedExpress2);

  var _super4 = _createSuper(TupleElementDefinition);

  function TupleElementDefinition() {
    _classCallCheck(this, TupleElementDefinition);

    return _super4.apply(this, arguments);
  }

  return TupleElementDefinition;
}(UnimplementedExpression);

module.exports = {
  Property: Property,
  Tuple: Tuple,
  TupleElement: TupleElement,
  TupleElementDefinition: TupleElementDefinition
};
},{"./builder":16,"./expression":22}],40:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression,
    UnimplementedExpression = _require.UnimplementedExpression;

var _require2 = require('../datatypes/datetime'),
    DateTime = _require2.DateTime,
    _Date = _require2.Date;

var _require3 = require('../datatypes/clinical'),
    Concept = _require3.Concept;

var _require4 = require('../datatypes/quantity'),
    parseQuantity = _require4.parseQuantity;

var _require5 = require('../util/math'),
    isValidDecimal = _require5.isValidDecimal,
    isValidInteger = _require5.isValidInteger,
    limitDecimalPrecision = _require5.limitDecimalPrecision;

var _require6 = require('../util/util'),
    normalizeMillisecondsField = _require6.normalizeMillisecondsField;

var _require7 = require('../datatypes/ratio'),
    Ratio = _require7.Ratio;

var _require8 = require('../datatypes/uncertainty'),
    Uncertainty = _require8.Uncertainty; // TODO: Casting and Conversion needs unit tests!


var As = /*#__PURE__*/function (_Expression) {
  _inherits(As, _Expression);

  var _super = _createSuper(As);

  function As(json) {
    var _this;

    _classCallCheck(this, As);

    _this = _super.call(this, json);

    if (json.asTypeSpecifier) {
      _this.asTypeSpecifier = json.asTypeSpecifier;
    } else if (json.asType) {
      // convert it to a NamedTypedSpecifier
      _this.asTypeSpecifier = {
        name: json.asType,
        type: 'NamedTypeSpecifier'
      };
    }

    _this.strict = json.strict != null ? json.strict : false;
    return _this;
  }

  _createClass(As, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx); // If it is null, return null

      if (arg == null) {
        return null;
      }

      if (ctx.matchesTypeSpecifier(arg, this.asTypeSpecifier)) {
        // TODO: request patient source to change type identification
        return arg;
      } else if (this.strict) {
        var argTypeString = specifierToString(guessSpecifierType(arg));
        var asTypeString = specifierToString(this.asTypeSpecifier);
        throw new Error("Cannot cast ".concat(argTypeString, " as ").concat(asTypeString));
      } else {
        return null;
      }
    }
  }]);

  return As;
}(Expression);

var ToBoolean = /*#__PURE__*/function (_Expression2) {
  _inherits(ToBoolean, _Expression2);

  var _super2 = _createSuper(ToBoolean);

  function ToBoolean(json) {
    _classCallCheck(this, ToBoolean);

    return _super2.call(this, json);
  }

  _createClass(ToBoolean, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        var strArg = arg.toString().toLowerCase();

        if (['true', 't', 'yes', 'y', '1'].includes(strArg)) {
          return true;
        } else if (['false', 'f', 'no', 'n', '0'].includes(strArg)) {
          return false;
        }
      }

      return null;
    }
  }]);

  return ToBoolean;
}(Expression);

var ToConcept = /*#__PURE__*/function (_Expression3) {
  _inherits(ToConcept, _Expression3);

  var _super3 = _createSuper(ToConcept);

  function ToConcept(json) {
    _classCallCheck(this, ToConcept);

    return _super3.call(this, json);
  }

  _createClass(ToConcept, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return new Concept([arg], arg.display);
      } else {
        return null;
      }
    }
  }]);

  return ToConcept;
}(Expression);

var ToDate = /*#__PURE__*/function (_Expression4) {
  _inherits(ToDate, _Expression4);

  var _super4 = _createSuper(ToDate);

  function ToDate(json) {
    _classCallCheck(this, ToDate);

    return _super4.call(this, json);
  }

  _createClass(ToDate, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      } else if (arg.isDateTime) {
        return arg.getDate();
      } else {
        return _Date.parse(arg.toString());
      }
    }
  }]);

  return ToDate;
}(Expression);

var ToDateTime = /*#__PURE__*/function (_Expression5) {
  _inherits(ToDateTime, _Expression5);

  var _super5 = _createSuper(ToDateTime);

  function ToDateTime(json) {
    _classCallCheck(this, ToDateTime);

    return _super5.call(this, json);
  }

  _createClass(ToDateTime, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      } else if (arg.isDate) {
        return arg.getDateTime();
      } else {
        return DateTime.parse(arg.toString());
      }
    }
  }]);

  return ToDateTime;
}(Expression);

var ToDecimal = /*#__PURE__*/function (_Expression6) {
  _inherits(ToDecimal, _Expression6);

  var _super6 = _createSuper(ToDecimal);

  function ToDecimal(json) {
    _classCallCheck(this, ToDecimal);

    return _super6.call(this, json);
  }

  _createClass(ToDecimal, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        if (arg.isUncertainty) {
          var low = limitDecimalPrecision(parseFloat(arg.low.toString()));
          var high = limitDecimalPrecision(parseFloat(arg.high.toString()));
          return new Uncertainty(low, high);
        } else {
          var decimal = limitDecimalPrecision(parseFloat(arg.toString()));

          if (isValidDecimal(decimal)) {
            return decimal;
          }
        }
      }

      return null;
    }
  }]);

  return ToDecimal;
}(Expression);

var ToInteger = /*#__PURE__*/function (_Expression7) {
  _inherits(ToInteger, _Expression7);

  var _super7 = _createSuper(ToInteger);

  function ToInteger(json) {
    _classCallCheck(this, ToInteger);

    return _super7.call(this, json);
  }

  _createClass(ToInteger, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        var integer = parseInt(arg.toString());

        if (isValidInteger(integer)) {
          return integer;
        }
      }

      return null;
    }
  }]);

  return ToInteger;
}(Expression);

var ToQuantity = /*#__PURE__*/function (_Expression8) {
  _inherits(ToQuantity, _Expression8);

  var _super8 = _createSuper(ToQuantity);

  function ToQuantity(json) {
    _classCallCheck(this, ToQuantity);

    return _super8.call(this, json);
  }

  _createClass(ToQuantity, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return parseQuantity(arg.toString());
      } else {
        return null;
      }
    }
  }]);

  return ToQuantity;
}(Expression);

var ToRatio = /*#__PURE__*/function (_Expression9) {
  _inherits(ToRatio, _Expression9);

  var _super9 = _createSuper(ToRatio);

  function ToRatio(json) {
    _classCallCheck(this, ToRatio);

    return _super9.call(this, json);
  }

  _createClass(ToRatio, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        // Argument will be of form '<quantity>:<quantity>'
        var denominator, numerator;

        try {
          // String will be split into an array. Numerator will be at index 1, Denominator will be at index 4
          var splitRatioString = arg.toString().match(/^(\d+(\.\d+)?\s*('.+')?)\s*:\s*(\d+(\.\d+)?\s*('.+')?)$/);

          if (splitRatioString == null) {
            return null;
          }

          numerator = parseQuantity(splitRatioString[1]);
          denominator = parseQuantity(splitRatioString[4]);
        } catch (error) {
          // If the input string is not formatted correctly, or cannot be
          // interpreted as a valid Quantity value, the result is null.
          return null;
        } // The value element of a Quantity must be present.


        if (numerator == null || denominator == null) {
          return null;
        }

        return new Ratio(numerator, denominator);
      } else {
        return null;
      }
    }
  }]);

  return ToRatio;
}(Expression);

var ToString = /*#__PURE__*/function (_Expression10) {
  _inherits(ToString, _Expression10);

  var _super10 = _createSuper(ToString);

  function ToString(json) {
    _classCallCheck(this, ToString);

    return _super10.call(this, json);
  }

  _createClass(ToString, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return arg.toString();
      } else {
        return null;
      }
    }
  }]);

  return ToString;
}(Expression);

var ToTime = /*#__PURE__*/function (_Expression11) {
  _inherits(ToTime, _Expression11);

  var _super11 = _createSuper(ToTime);

  function ToTime(json) {
    _classCallCheck(this, ToTime);

    return _super11.call(this, json);
  }

  _createClass(ToTime, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        var timeString = arg.toString(); // Return null if string doesn't represent a valid ISO-8601 Time
        // hh:mm:ss.fff or hh:mm:ss.fff

        var matches = /^T?((\d{2})(:(\d{2})(:(\d{2})(\.(\d+))?)?)?)?(Z|(([+-])(\d{2})(:?(\d{2}))?))?$/.exec(timeString);

        if (matches == null) {
          return null;
        }

        var hours = matches[2];
        var minutes = matches[4];
        var seconds = matches[6]; // Validate h/m/s if they exist, but allow null

        if (hours != null) {
          if (hours < 0 || hours > 23) {
            return null;
          }

          hours = parseInt(hours, 10);
        }

        if (minutes != null) {
          if (minutes < 0 || minutes > 59) {
            return null;
          }

          minutes = parseInt(minutes, 10);
        }

        if (seconds != null) {
          if (seconds < 0 || seconds > 59) {
            return null;
          }

          seconds = parseInt(seconds, 10);
        }

        var milliseconds = matches[8];

        if (milliseconds != null) {
          milliseconds = parseInt(normalizeMillisecondsField(milliseconds));
        } // Time is implemented as Datetime with year 0, month 1, day 1 and null timezoneOffset


        return new DateTime(0, 1, 1, hours, minutes, seconds, milliseconds, null);
      } else {
        return null;
      }
    }
  }]);

  return ToTime;
}(Expression);

var Convert = /*#__PURE__*/function (_Expression12) {
  _inherits(Convert, _Expression12);

  var _super12 = _createSuper(Convert);

  function Convert(json) {
    var _this2;

    _classCallCheck(this, Convert);

    _this2 = _super12.call(this, json);
    _this2.operand = json.operand;
    _this2.toType = json.toType;
    return _this2;
  }

  _createClass(Convert, [{
    key: "exec",
    value: function exec(ctx) {
      switch (this.toType) {
        case '{urn:hl7-org:elm-types:r1}Boolean':
          return new ToBoolean({
            type: 'ToBoolean',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Concept':
          return new ToConcept({
            type: 'ToConcept',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Decimal':
          return new ToDecimal({
            type: 'ToDecimal',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Integer':
          return new ToInteger({
            type: 'ToInteger',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}String':
          return new ToString({
            type: 'ToString',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Quantity':
          return new ToQuantity({
            type: 'ToQuantity',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}DateTime':
          return new ToDateTime({
            type: 'ToDateTime',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Date':
          return new ToDate({
            type: 'ToDate',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Time':
          return new ToTime({
            type: 'ToTime',
            operand: this.operand
          }).execute(ctx);

        default:
          return this.execArgs(ctx);
      }
    }
  }]);

  return Convert;
}(Expression);

var ConvertsToBoolean = /*#__PURE__*/function (_Expression13) {
  _inherits(ConvertsToBoolean, _Expression13);

  var _super13 = _createSuper(ConvertsToBoolean);

  function ConvertsToBoolean(json) {
    var _this3;

    _classCallCheck(this, ConvertsToBoolean);

    _this3 = _super13.call(this, json);
    _this3.operand = json.operand;
    return _this3;
  }

  _createClass(ConvertsToBoolean, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToBoolean, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToBoolean;
}(Expression);

var ConvertsToDate = /*#__PURE__*/function (_Expression14) {
  _inherits(ConvertsToDate, _Expression14);

  var _super14 = _createSuper(ConvertsToDate);

  function ConvertsToDate(json) {
    var _this4;

    _classCallCheck(this, ConvertsToDate);

    _this4 = _super14.call(this, json);
    _this4.operand = json.operand;
    return _this4;
  }

  _createClass(ConvertsToDate, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToDate, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToDate;
}(Expression);

var ConvertsToDateTime = /*#__PURE__*/function (_Expression15) {
  _inherits(ConvertsToDateTime, _Expression15);

  var _super15 = _createSuper(ConvertsToDateTime);

  function ConvertsToDateTime(json) {
    var _this5;

    _classCallCheck(this, ConvertsToDateTime);

    _this5 = _super15.call(this, json);
    _this5.operand = json.operand;
    return _this5;
  }

  _createClass(ConvertsToDateTime, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToDateTime, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToDateTime;
}(Expression);

var ConvertsToDecimal = /*#__PURE__*/function (_Expression16) {
  _inherits(ConvertsToDecimal, _Expression16);

  var _super16 = _createSuper(ConvertsToDecimal);

  function ConvertsToDecimal(json) {
    var _this6;

    _classCallCheck(this, ConvertsToDecimal);

    _this6 = _super16.call(this, json);
    _this6.operand = json.operand;
    return _this6;
  }

  _createClass(ConvertsToDecimal, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToDecimal, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToDecimal;
}(Expression);

var ConvertsToInteger = /*#__PURE__*/function (_Expression17) {
  _inherits(ConvertsToInteger, _Expression17);

  var _super17 = _createSuper(ConvertsToInteger);

  function ConvertsToInteger(json) {
    var _this7;

    _classCallCheck(this, ConvertsToInteger);

    _this7 = _super17.call(this, json);
    _this7.operand = json.operand;
    return _this7;
  }

  _createClass(ConvertsToInteger, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToInteger, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToInteger;
}(Expression);

var ConvertsToQuantity = /*#__PURE__*/function (_Expression18) {
  _inherits(ConvertsToQuantity, _Expression18);

  var _super18 = _createSuper(ConvertsToQuantity);

  function ConvertsToQuantity(json) {
    var _this8;

    _classCallCheck(this, ConvertsToQuantity);

    _this8 = _super18.call(this, json);
    _this8.operand = json.operand;
    return _this8;
  }

  _createClass(ConvertsToQuantity, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToQuantity, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToQuantity;
}(Expression);

var ConvertsToRatio = /*#__PURE__*/function (_Expression19) {
  _inherits(ConvertsToRatio, _Expression19);

  var _super19 = _createSuper(ConvertsToRatio);

  function ConvertsToRatio(json) {
    var _this9;

    _classCallCheck(this, ConvertsToRatio);

    _this9 = _super19.call(this, json);
    _this9.operand = json.operand;
    return _this9;
  }

  _createClass(ConvertsToRatio, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToRatio, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToRatio;
}(Expression);

var ConvertsToString = /*#__PURE__*/function (_Expression20) {
  _inherits(ConvertsToString, _Expression20);

  var _super20 = _createSuper(ConvertsToString);

  function ConvertsToString(json) {
    var _this10;

    _classCallCheck(this, ConvertsToString);

    _this10 = _super20.call(this, json);
    _this10.operand = json.operand;
    return _this10;
  }

  _createClass(ConvertsToString, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToString, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToString;
}(Expression);

var ConvertsToTime = /*#__PURE__*/function (_Expression21) {
  _inherits(ConvertsToTime, _Expression21);

  var _super21 = _createSuper(ConvertsToTime);

  function ConvertsToTime(json) {
    var _this11;

    _classCallCheck(this, ConvertsToTime);

    _this11 = _super21.call(this, json);
    _this11.operand = json.operand;
    return _this11;
  }

  _createClass(ConvertsToTime, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToTime, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToTime;
}(Expression);

function canConvertToType(toFunction, operand, ctx) {
  try {
    var value = new toFunction({
      type: toFunction.name,
      operand: operand
    }).execute(ctx);

    if (value != null) {
      return true;
    } else {
      return false;
    }
  } catch (error) {
    return false;
  }
}

var ConvertQuantity = /*#__PURE__*/function (_Expression22) {
  _inherits(ConvertQuantity, _Expression22);

  var _super22 = _createSuper(ConvertQuantity);

  function ConvertQuantity(json) {
    _classCallCheck(this, ConvertQuantity);

    return _super22.call(this, json);
  }

  _createClass(ConvertQuantity, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs = this.execArgs(ctx),
          _this$execArgs2 = _slicedToArray(_this$execArgs, 2),
          quantity = _this$execArgs2[0],
          newUnit = _this$execArgs2[1];

      if (quantity != null && newUnit != null) {
        try {
          return quantity.convertUnit(newUnit);
        } catch (error) {
          // Cannot convert input to target unit, spec says to return null
          return null;
        }
      }
    }
  }]);

  return ConvertQuantity;
}(Expression);

var CanConvertQuantity = /*#__PURE__*/function (_Expression23) {
  _inherits(CanConvertQuantity, _Expression23);

  var _super23 = _createSuper(CanConvertQuantity);

  function CanConvertQuantity(json) {
    _classCallCheck(this, CanConvertQuantity);

    return _super23.call(this, json);
  }

  _createClass(CanConvertQuantity, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs3 = this.execArgs(ctx),
          _this$execArgs4 = _slicedToArray(_this$execArgs3, 2),
          quantity = _this$execArgs4[0],
          newUnit = _this$execArgs4[1];

      if (quantity != null && newUnit != null) {
        try {
          quantity.convertUnit(newUnit);
          return true;
        } catch (error) {
          return false;
        }
      }

      return null;
    }
  }]);

  return CanConvertQuantity;
}(Expression);

var Is = /*#__PURE__*/function (_Expression24) {
  _inherits(Is, _Expression24);

  var _super24 = _createSuper(Is);

  function Is(json) {
    var _this12;

    _classCallCheck(this, Is);

    _this12 = _super24.call(this, json);

    if (json.isTypeSpecifier) {
      _this12.isTypeSpecifier = json.isTypeSpecifier;
    } else if (json.isType) {
      // Convert it to a NamedTypeSpecifier
      _this12.isTypeSpecifier = {
        name: json.isType,
        type: 'NamedTypeSpecifier'
      };
    }

    return _this12;
  }

  _createClass(Is, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg === null) {
        return false;
      }

      if (typeof arg._is !== 'function' && !isSystemType(this.isTypeSpecifier)) {
        // We need an _is implementation in order to check non System types
        throw new Error("Patient Source does not support Is operation for localId: ".concat(this.localId));
      }

      return ctx.matchesTypeSpecifier(arg, this.isTypeSpecifier);
    }
  }]);

  return Is;
}(Expression);

function isSystemType(spec) {
  switch (spec.type) {
    case 'NamedTypeSpecifier':
      return spec.name.startsWith('{urn:hl7-org:elm-types:r1}');

    case 'ListTypeSpecifier':
      return isSystemType(spec.elementType);

    case 'TupleTypeSpecifier':
      return spec.element.every(function (e) {
        return isSystemType(e.elementType);
      });

    case 'IntervalTypeSpecifier':
      return isSystemType(spec.pointType);

    case 'ChoiceTypeSpecifier':
      return spec.choice.every(function (c) {
        return isSystemType(c);
      });

    default:
      return false;
  }
}

function specifierToString(spec) {
  if (typeof spec === 'string') {
    return spec;
  } else if (spec == null || spec.type == null) {
    return '';
  }

  switch (spec.type) {
    case 'NamedTypeSpecifier':
      return spec.name;

    case 'ListTypeSpecifier':
      return "List<".concat(specifierToString(spec.elementType), ">");

    case 'TupleTypeSpecifier':
      return "Tuple<".concat(spec.element.map(function (e) {
        return "".concat(e.name, " ").concat(specifierToString(e.elementType));
      }).join(', '), ">");

    case 'IntervalTypeSpecifier':
      return "Interval<".concat(specifierToString(spec.pointType), ">");

    case 'ChoiceTypeSpecifier':
      return "Choice<".concat(spec.choice.map(function (c) {
        return specifierToString(c);
      }).join(', '), ">");

    default:
      return JSON.stringify(spec);
  }
}

function guessSpecifierType(val) {
  if (val == null) {
    return 'Null';
  }

  var typeHierarchy = typeof val._typeHierarchy === 'function' && val._typeHierarchy();

  if (typeHierarchy && typeHierarchy.length > 0) {
    return typeHierarchy[0];
  } else if (typeof val === 'boolean') {
    return {
      type: 'NamedTypeSpecifier',
      name: '{urn:hl7-org:elm-types:r1}Boolean'
    };
  } else if (typeof val === 'number' && Math.floor(val) === val) {
    // it could still be a decimal, but we have to just take our best guess!
    return {
      type: 'NamedTypeSpecifier',
      name: '{urn:hl7-org:elm-types:r1}Integer'
    };
  } else if (typeof val === 'number') {
    return {
      type: 'NamedTypeSpecifier',
      name: '{urn:hl7-org:elm-types:r1}Decimal'
    };
  } else if (typeof val === 'string') {
    return {
      type: 'NamedTypeSpecifier',
      name: '{urn:hl7-org:elm-types:r1}String'
    };
  } else if (val.isConcept) {
    return {
      type: 'NamedTypeSpecifier',
      name: '{urn:hl7-org:elm-types:r1}Concept'
    };
  } else if (val.isCode) {
    return {
      type: 'NamedTypeSpecifier',
      name: '{urn:hl7-org:elm-types:r1}Code'
    };
  } else if (val.isDate) {
    return {
      type: 'NamedTypeSpecifier',
      name: '{urn:hl7-org:elm-types:r1}Date'
    };
  } else if (val.isTime && val.isTime()) {
    return {
      type: 'NamedTypeSpecifier',
      name: '{urn:hl7-org:elm-types:r1}Time'
    };
  } else if (val.isDateTime) {
    return {
      type: 'NamedTypeSpecifier',
      name: '{urn:hl7-org:elm-types:r1}DateTime'
    };
  } else if (val.isQuantity) {
    return {
      type: 'NamedTypeSpecifier',
      name: '{urn:hl7-org:elm-types:r1}DateTime'
    };
  } else if (Array.isArray(val)) {
    // Get unique types from the array (by converting to string and putting in a Set)
    var typesAsStrings = Array.from(new Set(val.map(function (v) {
      return JSON.stringify(guessSpecifierType(v));
    })));
    var types = typesAsStrings.map(function (ts) {
      return /^{/.test(ts) ? JSON.parse(ts) : ts;
    });
    return {
      type: 'ListTypeSpecifier',
      elementType: types.length == 1 ? types[0] : {
        type: 'ChoiceTypeSpecifier',
        choice: types
      }
    };
  } else if (val.isInterval) {
    return {
      type: 'IntervalTypeSpecifier',
      pointType: val.pointType
    };
  } else if (_typeof(val) === 'object' && Object.keys(val).length > 0) {
    return {
      type: 'TupleTypeSpecifier',
      element: Object.keys(val).map(function (k) {
        return {
          name: k,
          elementType: guessSpecifierType(val[k])
        };
      })
    };
  }

  return 'Unknown';
}

var IntervalTypeSpecifier = /*#__PURE__*/function (_UnimplementedExpress) {
  _inherits(IntervalTypeSpecifier, _UnimplementedExpress);

  var _super25 = _createSuper(IntervalTypeSpecifier);

  function IntervalTypeSpecifier() {
    _classCallCheck(this, IntervalTypeSpecifier);

    return _super25.apply(this, arguments);
  }

  return IntervalTypeSpecifier;
}(UnimplementedExpression);

var ListTypeSpecifier = /*#__PURE__*/function (_UnimplementedExpress2) {
  _inherits(ListTypeSpecifier, _UnimplementedExpress2);

  var _super26 = _createSuper(ListTypeSpecifier);

  function ListTypeSpecifier() {
    _classCallCheck(this, ListTypeSpecifier);

    return _super26.apply(this, arguments);
  }

  return ListTypeSpecifier;
}(UnimplementedExpression);

var NamedTypeSpecifier = /*#__PURE__*/function (_UnimplementedExpress3) {
  _inherits(NamedTypeSpecifier, _UnimplementedExpress3);

  var _super27 = _createSuper(NamedTypeSpecifier);

  function NamedTypeSpecifier() {
    _classCallCheck(this, NamedTypeSpecifier);

    return _super27.apply(this, arguments);
  }

  return NamedTypeSpecifier;
}(UnimplementedExpression);

var TupleTypeSpecifier = /*#__PURE__*/function (_UnimplementedExpress4) {
  _inherits(TupleTypeSpecifier, _UnimplementedExpress4);

  var _super28 = _createSuper(TupleTypeSpecifier);

  function TupleTypeSpecifier() {
    _classCallCheck(this, TupleTypeSpecifier);

    return _super28.apply(this, arguments);
  }

  return TupleTypeSpecifier;
}(UnimplementedExpression);

module.exports = {
  As: As,
  CanConvertQuantity: CanConvertQuantity,
  Convert: Convert,
  ConvertQuantity: ConvertQuantity,
  ConvertsToBoolean: ConvertsToBoolean,
  ConvertsToDate: ConvertsToDate,
  ConvertsToDateTime: ConvertsToDateTime,
  ConvertsToDecimal: ConvertsToDecimal,
  ConvertsToInteger: ConvertsToInteger,
  ConvertsToQuantity: ConvertsToQuantity,
  ConvertsToRatio: ConvertsToRatio,
  ConvertsToString: ConvertsToString,
  ConvertsToTime: ConvertsToTime,
  IntervalTypeSpecifier: IntervalTypeSpecifier,
  Is: Is,
  ListTypeSpecifier: ListTypeSpecifier,
  NamedTypeSpecifier: NamedTypeSpecifier,
  ToBoolean: ToBoolean,
  ToConcept: ToConcept,
  ToDate: ToDate,
  ToDateTime: ToDateTime,
  ToDecimal: ToDecimal,
  ToInteger: ToInteger,
  ToQuantity: ToQuantity,
  ToRatio: ToRatio,
  ToString: ToString,
  ToTime: ToTime,
  TupleTypeSpecifier: TupleTypeSpecifier
};
},{"../datatypes/clinical":5,"../datatypes/datetime":7,"../datatypes/quantity":11,"../datatypes/ratio":12,"../datatypes/uncertainty":13,"../util/math":46,"../util/util":48,"./expression":22}],41:[function(require,module,exports){
"use strict";

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('../datatypes/exception'),
    Exception = _require.Exception;

var _require2 = require('../util/util'),
    typeIsArray = _require2.typeIsArray;

var dt = require('../datatypes/datatypes');

var Context = /*#__PURE__*/function () {
  function Context(parent) {
    var _codeService = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var _parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Context);

    this.parent = parent;
    this._codeService = _codeService;
    this.context_values = {};
    this.library_context = {};
    this.localId_context = {};
    this.evaluatedRecords = []; // TODO: If there is an issue with number of parameters look into cql4browsers fix: 387ea77538182833283af65e6341e7a05192304c

    this.checkParameters(_parameters); // not crazy about possibly throwing an error in a constructor, but...

    this._parameters = _parameters;
  }

  _createClass(Context, [{
    key: "withParameters",
    value: function withParameters(params) {
      this.parameters = params || {};
      return this;
    }
  }, {
    key: "withCodeService",
    value: function withCodeService(cs) {
      this.codeService = cs;
      return this;
    }
  }, {
    key: "rootContext",
    value: function rootContext() {
      if (this.parent) {
        return this.parent.rootContext();
      } else {
        return this;
      }
    }
  }, {
    key: "findRecords",
    value: function findRecords(profile) {
      return this.parent && this.parent.findRecords(profile);
    }
  }, {
    key: "childContext",
    value: function childContext() {
      var context_values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var ctx = new Context(this);
      ctx.context_values = context_values;
      return ctx;
    }
  }, {
    key: "getLibraryContext",
    value: function getLibraryContext(library) {
      return this.parent && this.parent.getLibraryContext(library);
    }
  }, {
    key: "getLocalIdContext",
    value: function getLocalIdContext(localId) {
      return this.parent && this.parent.getLocalIdContext(localId);
    }
  }, {
    key: "getParameter",
    value: function getParameter(name) {
      return this.parent && this.parent.getParameter(name);
    }
  }, {
    key: "getParentParameter",
    value: function getParentParameter(name) {
      if (this.parent) {
        if (this.parent.parameters[name] != null) {
          return this.parent.parameters[name];
        } else {
          return this.parent.getParentParameter(name);
        }
      }
    }
  }, {
    key: "getTimezoneOffset",
    value: function getTimezoneOffset() {
      if (this.executionDateTime != null) {
        return this.executionDateTime.timezoneOffset;
      } else if (this.parent && this.parent.getTimezoneOffset != null) {
        return this.parent.getTimezoneOffset();
      } else {
        throw new Exception('No Timezone Offset has been set');
      }
    }
  }, {
    key: "getExecutionDateTime",
    value: function getExecutionDateTime() {
      if (this.executionDateTime != null) {
        return this.executionDateTime;
      } else if (this.parent && this.parent.getExecutionDateTime != null) {
        return this.parent.getExecutionDateTime();
      } else {
        throw new Exception('No Execution DateTime has been set');
      }
    }
  }, {
    key: "getValueSet",
    value: function getValueSet(name, library) {
      return this.parent && this.parent.getValueSet(name, library);
    }
  }, {
    key: "getCodeSystem",
    value: function getCodeSystem(name) {
      return this.parent && this.parent.getCodeSystem(name);
    }
  }, {
    key: "getCode",
    value: function getCode(name) {
      return this.parent && this.parent.getCode(name);
    }
  }, {
    key: "getConcept",
    value: function getConcept(name) {
      return this.parent && this.parent.getConcept(name);
    }
  }, {
    key: "get",
    value: function get(identifier) {
      // Check for undefined because if its null, we actually *do* want to return null (rather than
      // looking at parent), but if it's really undefined, *then* look at the parent
      if (typeof this.context_values[identifier] !== 'undefined') {
        return this.context_values[identifier];
      } else if (identifier === '$this') {
        return this.context_values;
      } else {
        return this.parent != null && this.parent.get(identifier);
      }
    }
  }, {
    key: "set",
    value: function set(identifier, value) {
      this.context_values[identifier] = value;
    }
  }, {
    key: "setLocalIdWithResult",
    value: function setLocalIdWithResult(localId, value) {
      // Temporary fix. Real fix will be to return a list of all result values for a given localId.
      var ctx = this.localId_context[localId];

      if (ctx === false || ctx === null || ctx === undefined || ctx.length === 0) {
        this.localId_context[localId] = value;
      }
    }
  }, {
    key: "getLocalIdResult",
    value: function getLocalIdResult(localId) {
      return this.localId_context[localId];
    } // Returns an object of objects containing each library name
    // with the localIds and result values

  }, {
    key: "getAllLocalIds",
    value: function getAllLocalIds() {
      var localIdResults = {}; // Add the localIds and result values from the main library

      localIdResults[this.parent.source.library.identifier.id] = {};
      localIdResults[this.parent.source.library.identifier.id] = this.localId_context; // Iterate over support libraries and store localIds

      for (var libName in this.library_context) {
        var lib = this.library_context[libName];
        this.supportLibraryLocalIds(lib, localIdResults);
      }

      return localIdResults;
    } // Recursive function that will grab nested support library localId results

  }, {
    key: "supportLibraryLocalIds",
    value: function supportLibraryLocalIds(lib, localIdResults) {
      var _this = this;

      // Set library identifier name as the key and the object of localIds with their results as the value
      // if it already exists then we need to merge the results instead of overwriting
      if (localIdResults[lib.library.source.library.identifier.id] != null) {
        this.mergeLibraryLocalIdResults(localIdResults, lib.library.source.library.identifier.id, lib.localId_context);
      } else {
        localIdResults[lib.library.source.library.identifier.id] = lib.localId_context;
      } // Iterate over any support libraries in the current support library


      Object.values(lib.library_context).forEach(function (supportLib) {
        _this.supportLibraryLocalIds(supportLib, localIdResults);
      });
    } // Merges the localId results for a library into the already collected results. The logic used for which result
    // to keep is the same as the logic used above in setLocalIdWithResult, "falsey" results are always replaced.

  }, {
    key: "mergeLibraryLocalIdResults",
    value: function mergeLibraryLocalIdResults(localIdResults, libraryId, libraryResults) {
      for (var localId in libraryResults) {
        var localIdResult = libraryResults[localId];
        var existingResult = localIdResults[libraryId][localId]; // overwite this localid result if the existing result is "falsey". future work could track all results for each localid

        if (existingResult === false || existingResult === null || existingResult === undefined || existingResult.length === 0) {
          localIdResults[libraryId][localId] = localIdResult;
        }
      }
    }
  }, {
    key: "checkParameters",
    value: function checkParameters(params) {
      for (var pName in params) {
        var pVal = params[pName];
        var pDef = this.getParameter(pName);

        if (pVal == null) {
          return; // Null can theoretically be any type
        }

        if (typeof pDef === 'undefined') {
          return; // This will happen if the parameter is declared in a different (included) library
        } else if (pDef.parameterTypeSpecifier != null && !this.matchesTypeSpecifier(pVal, pDef.parameterTypeSpecifier)) {
          throw new Error("Passed in parameter '".concat(pName, "' is wrong type"));
        } else if (pDef['default'] != null && !this.matchesInstanceType(pVal, pDef['default'])) {
          throw new Error("Passed in parameter '".concat(pName, "' is wrong type"));
        }
      }

      return true;
    }
  }, {
    key: "matchesTypeSpecifier",
    value: function matchesTypeSpecifier(val, spec) {
      switch (spec.type) {
        case 'NamedTypeSpecifier':
          return this.matchesNamedTypeSpecifier(val, spec);

        case 'ListTypeSpecifier':
          return this.matchesListTypeSpecifier(val, spec);

        case 'TupleTypeSpecifier':
          return this.matchesTupleTypeSpecifier(val, spec);

        case 'IntervalTypeSpecifier':
          return this.matchesIntervalTypeSpecifier(val, spec);

        case 'ChoiceTypeSpecifier':
          return this.matchesChoiceTypeSpecifier(val, spec);

        default:
          return true;
        // default to true when we don't know
      }
    }
  }, {
    key: "matchesListTypeSpecifier",
    value: function matchesListTypeSpecifier(val, spec) {
      var _this2 = this;

      return typeIsArray(val) && val.every(function (x) {
        return _this2.matchesTypeSpecifier(x, spec.elementType);
      });
    }
  }, {
    key: "matchesTupleTypeSpecifier",
    value: function matchesTupleTypeSpecifier(val, spec) {
      var _this3 = this;

      // TODO: Spec is not clear about exactly how tuples should be matched
      return val != null && _typeof(val) === 'object' && !typeIsArray(val) && !val.isInterval && !val.isConcept && !val.isCode && !val.isDateTime && !val.isDate && !val.isQuantity && spec.element.every(function (x) {
        return typeof val[x.name] === 'undefined' || _this3.matchesTypeSpecifier(val[x.name], x.elementType);
      });
    }
  }, {
    key: "matchesIntervalTypeSpecifier",
    value: function matchesIntervalTypeSpecifier(val, spec) {
      return val.isInterval && (val.low == null || this.matchesTypeSpecifier(val.low, spec.pointType)) && (val.high == null || this.matchesTypeSpecifier(val.high, spec.pointType));
    }
  }, {
    key: "matchesChoiceTypeSpecifier",
    value: function matchesChoiceTypeSpecifier(val, spec) {
      var _this4 = this;

      return spec.choice.some(function (c) {
        return _this4.matchesTypeSpecifier(val, c);
      });
    }
  }, {
    key: "matchesNamedTypeSpecifier",
    value: function matchesNamedTypeSpecifier(val, spec) {
      if (val == null) {
        return true;
      }

      switch (spec.name) {
        case '{urn:hl7-org:elm-types:r1}Boolean':
          return typeof val === 'boolean';

        case '{urn:hl7-org:elm-types:r1}Decimal':
          return typeof val === 'number';

        case '{urn:hl7-org:elm-types:r1}Integer':
          return typeof val === 'number' && Math.floor(val) === val;

        case '{urn:hl7-org:elm-types:r1}String':
          return typeof val === 'string';

        case '{urn:hl7-org:elm-types:r1}Concept':
          return val && val.isConcept;

        case '{urn:hl7-org:elm-types:r1}Code':
          return val && val.isCode;

        case '{urn:hl7-org:elm-types:r1}DateTime':
          return val && val.isDateTime;

        case '{urn:hl7-org:elm-types:r1}Date':
          return val && val.isDate;

        case '{urn:hl7-org:elm-types:r1}Quantity':
          return val && val.isQuantity;

        case '{urn:hl7-org:elm-types:r1}Time':
          return val && val.isTime && val.isTime();

        default:
          // Use the data model's implementation of _is, if it is available
          if (typeof val._is === 'function') {
            return val._is(spec);
          } // If the value is an array or interval, then we assume it cannot be cast to a
          // named type. Technically, this is not 100% true because a modelinfo can define
          // a named type whose base type is a list or interval.  But none of our models
          // (FHIR, QDM, QICore) do that, so for those models, this approach will always be
          // correct.


          if (Array.isArray(val) || val.isInterval) {
            return false;
          } // Otherwise just default to true to match legacy behavior.
          //
          // NOTE: This is also where arbitrary tuples land because they will not have
          // an "is" function and we don't encode the type information into the runtime
          // objects so we can't easily determine their type. We can't reject them,
          // else things like `Encounter{ id: "1" } is Encounter` would return false.
          // So for now we allow false positives in order to avoid false negatives.


          return true;
      }
    }
  }, {
    key: "matchesInstanceType",
    value: function matchesInstanceType(val, inst) {
      if (inst.isBooleanLiteral) {
        return typeof val === 'boolean';
      } else if (inst.isDecimalLiteral) {
        return typeof val === 'number';
      } else if (inst.isIntegerLiteral) {
        return typeof val === 'number' && Math.floor(val) === val;
      } else if (inst.isStringLiteral) {
        return typeof val === 'string';
      } else if (inst.isCode) {
        return val && val.isCode;
      } else if (inst.isConcept) {
        return val && val.isConcept;
      } else if (inst.isTime && inst.isTime()) {
        return val && val.isTime && val.isTime();
      } else if (inst.isDate) {
        return val && val.isDate;
      } else if (inst.isDateTime) {
        return val && val.isDateTime;
      } else if (inst.isQuantity) {
        return val && val.isQuantity;
      } else if (inst.isList) {
        return this.matchesListInstanceType(val, inst);
      } else if (inst.isTuple) {
        return this.matchesTupleInstanceType(val, inst);
      } else if (inst.isInterval) {
        return this.matchesIntervalInstanceType(val, inst);
      }

      return true; // default to true when we don't know for sure
    }
  }, {
    key: "matchesListInstanceType",
    value: function matchesListInstanceType(val, list) {
      var _this5 = this;

      return typeIsArray(val) && val.every(function (x) {
        return _this5.matchesInstanceType(x, list.elements[0]);
      });
    }
  }, {
    key: "matchesTupleInstanceType",
    value: function matchesTupleInstanceType(val, tpl) {
      var _this6 = this;

      return _typeof(val) === 'object' && !typeIsArray(val) && tpl.elements.every(function (x) {
        return typeof val[x.name] === 'undefined' || _this6.matchesInstanceType(val[x.name], x.value);
      });
    }
  }, {
    key: "matchesIntervalInstanceType",
    value: function matchesIntervalInstanceType(val, ivl) {
      var pointType = ivl.low != null ? ivl.low : ivl.high;
      return val.isInterval && (val.low == null || this.matchesInstanceType(val.low, pointType)) && (val.high == null || this.matchesInstanceType(val.high, pointType));
    }
  }, {
    key: "parameters",
    get: function get() {
      return this._parameters || this.parent && this.parent.parameters;
    },
    set: function set(params) {
      this.checkParameters(params);
      this._parameters = params;
    }
  }, {
    key: "codeService",
    get: function get() {
      return this._codeService || this.parent && this.parent.codeService;
    },
    set: function set(cs) {
      this._codeService = cs;
    }
  }]);

  return Context;
}();

var PatientContext = /*#__PURE__*/function (_Context) {
  _inherits(PatientContext, _Context);

  var _super = _createSuper(PatientContext);

  function PatientContext(library, patient, codeService, parameters) {
    var _this7;

    var executionDateTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : dt.DateTime.fromJSDate(new Date());

    _classCallCheck(this, PatientContext);

    _this7 = _super.call(this, library, codeService, parameters);
    _this7.library = library;
    _this7.patient = patient;
    _this7.executionDateTime = executionDateTime;
    return _this7;
  }

  _createClass(PatientContext, [{
    key: "rootContext",
    value: function rootContext() {
      return this;
    }
  }, {
    key: "getLibraryContext",
    value: function getLibraryContext(library) {
      if (this.library_context[library] == null) {
        this.library_context[library] = new PatientContext(this.get(library), this.patient, this.codeService, this.parameters, this.executionDateTime);
      }

      return this.library_context[library];
    }
  }, {
    key: "getLocalIdContext",
    value: function getLocalIdContext(localId) {
      if (this.localId_context[localId] == null) {
        this.localId_context[localId] = new PatientContext(this.get(localId), this.patient, this.codeService, this.parameters, this.executionDateTime);
      }

      return this.localId_context[localId];
    }
  }, {
    key: "findRecords",
    value: function findRecords(profile) {
      return this.patient && this.patient.findRecords(profile);
    }
  }]);

  return PatientContext;
}(Context);

var UnfilteredContext = /*#__PURE__*/function (_Context2) {
  _inherits(UnfilteredContext, _Context2);

  var _super2 = _createSuper(UnfilteredContext);

  function UnfilteredContext(library, results, codeService, parameters) {
    var _this8;

    var executionDateTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : dt.DateTime.fromJSDate(new Date());

    _classCallCheck(this, UnfilteredContext);

    _this8 = _super2.call(this, library, codeService, parameters);
    _this8.library = library;
    _this8.results = results;
    _this8.executionDateTime = executionDateTime;
    return _this8;
  }

  _createClass(UnfilteredContext, [{
    key: "rootContext",
    value: function rootContext() {
      return this;
    }
  }, {
    key: "findRecords",
    value: function findRecords(template) {
      throw new Exception('Retreives are not currently supported in Unfiltered Context');
    }
  }, {
    key: "getLibraryContext",
    value: function getLibraryContext(library) {
      throw new Exception('Library expressions are not currently supported in Unfiltered Context');
    }
  }, {
    key: "get",
    value: function get(identifier) {
      //First check to see if the identifier is a unfiltered context expression that has already been cached
      if (this.context_values[identifier]) {
        return this.context_values[identifier];
      } //if not look to see if the library has a unfiltered expression of that identifier


      if (this.library[identifier] && this.library[identifier].context === 'Unfiltered') {
        return this.library.expressions[identifier];
      } //lastley attempt to gather all patient level results that have that identifier
      // should this compact null values before return ?


      return Object.values(this.results.patientResults).map(function (pr) {
        return pr[identifier];
      });
    }
  }]);

  return UnfilteredContext;
}(Context);

module.exports = {
  Context: Context,
  PatientContext: PatientContext,
  UnfilteredContext: UnfilteredContext
};
},{"../datatypes/datatypes":6,"../datatypes/exception":8,"../util/util":48}],42:[function(require,module,exports){
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./results'),
    Results = _require.Results;

var _require2 = require('./context'),
    UnfilteredContext = _require2.UnfilteredContext,
    PatientContext = _require2.PatientContext;

var Executor = /*#__PURE__*/function () {
  function Executor(library, codeService, parameters) {
    _classCallCheck(this, Executor);

    this.library = library;
    this.codeService = codeService;
    this.parameters = parameters;
  }

  _createClass(Executor, [{
    key: "withLibrary",
    value: function withLibrary(lib) {
      this.library = lib;
      return this;
    }
  }, {
    key: "withParameters",
    value: function withParameters(params) {
      this.parameters = params != null ? params : {};
      return this;
    }
  }, {
    key: "withCodeService",
    value: function withCodeService(cs) {
      this.codeService = cs;
      return this;
    }
  }, {
    key: "exec_expression",
    value: function exec_expression(expression, patientSource) {
      var r = new Results();
      var expr = this.library.expressions[expression];

      if (expr != null) {
        while (patientSource.currentPatient()) {
          var patient_ctx = new PatientContext(this.library, patientSource.currentPatient(), this.codeService, this.parameters);
          r.recordPatientResults(patient_ctx, _defineProperty({}, expression, expr.execute(patient_ctx)));
          patientSource.nextPatient();
        }
      }

      return r;
    }
  }, {
    key: "exec",
    value: function exec(patientSource, executionDateTime) {
      var r = this.exec_patient_context(patientSource, executionDateTime);
      var unfilteredContext = new UnfilteredContext(this.library, r, this.codeService, this.parameters);
      var resultMap = {};

      for (var key in this.library.expressions) {
        var expr = this.library.expressions[key];

        if (expr.context === 'Unfiltered') {
          resultMap[key] = expr.exec(unfilteredContext);
        }
      }

      r.recordUnfilteredResults(resultMap);
      return r;
    }
  }, {
    key: "exec_patient_context",
    value: function exec_patient_context(patientSource, executionDateTime) {
      var r = new Results();

      while (patientSource.currentPatient()) {
        var patient_ctx = new PatientContext(this.library, patientSource.currentPatient(), this.codeService, this.parameters, executionDateTime);
        var resultMap = {};

        for (var key in this.library.expressions) {
          var expr = this.library.expressions[key];

          if (expr.context === 'Patient') {
            resultMap[key] = expr.execute(patient_ctx);
          }
        }

        r.recordPatientResults(patient_ctx, resultMap);
        patientSource.nextPatient();
      }

      return r;
    }
  }]);

  return Executor;
}();

module.exports = {
  Executor: Executor
};
},{"./context":41,"./results":44}],43:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('../elm/library'),
    Library = _require.Library;

var Repository = /*#__PURE__*/function () {
  function Repository(data) {
    _classCallCheck(this, Repository);

    this.data = data;
    this.libraries = Array.from(Object.values(data));
  }

  _createClass(Repository, [{
    key: "resolve",
    value: function resolve(library, version) {
      var _iterator = _createForOfIteratorHelper(this.libraries),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var lib = _step.value;

          if (lib.library && lib.library.identifier) {
            var id = lib.library.identifier;

            if (id.id === library && id.version === version) {
              return new Library(lib, this);
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);

  return Repository;
}();

module.exports = {
  Repository: Repository
};
},{"../elm/library":27}],44:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Results = /*#__PURE__*/function () {
  function Results() {
    _classCallCheck(this, Results);

    this.patientResults = {};
    this.unfilteredResults = {};
    this.localIdPatientResultsMap = {};
    this.patientEvaluatedRecords = {};
  } // Expose an evaluatedRecords array for backwards compatibility


  _createClass(Results, [{
    key: "recordPatientResults",
    value: function recordPatientResults(patient_ctx, resultMap) {
      var _this = this;

      var p = patient_ctx.patient; // NOTE: From now on prefer getId() over id() because some data models may have an id property
      // that is not a string (e.g., FHIR) -- so reserve getId() for the API (and expect a string
      // representation) but leave id() for data-model specific formats.

      var patientId = typeof p.getId === 'function' ? p.getId() : p.id(); // Record the results

      this.patientResults[patientId] = resultMap; // Record the local IDs

      this.localIdPatientResultsMap[patientId] = patient_ctx.getAllLocalIds(); // Record the evaluatedRecords, merging with an aggregated array across all libraries

      this.patientEvaluatedRecords[patientId] = _toConsumableArray(patient_ctx.evaluatedRecords);
      Object.values(patient_ctx.library_context).forEach(function (ctx) {
        var _this$patientEvaluate;

        (_this$patientEvaluate = _this.patientEvaluatedRecords[patientId]).push.apply(_this$patientEvaluate, _toConsumableArray(ctx.evaluatedRecords));
      });
    }
  }, {
    key: "recordUnfilteredResults",
    value: function recordUnfilteredResults(resultMap) {
      this.unfilteredResults = resultMap;
    }
  }, {
    key: "evaluatedRecords",
    get: function get() {
      var _ref;

      return (_ref = []).concat.apply(_ref, _toConsumableArray(Object.values(this.patientEvaluatedRecords)));
    }
  }]);

  return Results;
}();

module.exports = {
  Results: Results
};
},{}],45:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('../datatypes/uncertainty'),
    Uncertainty = _require.Uncertainty;

function areNumbers(a, b) {
  return typeof a === 'number' && typeof b === 'number';
}

function areStrings(a, b) {
  return typeof a === 'string' && typeof b === 'string';
}

function areDateTimesOrQuantities(a, b) {
  return a && a.isDateTime && b && b.isDateTime || a && a.isDate && b && b.isDate || a && a.isQuantity && b && b.isQuantity;
}

function isUncertainty(x) {
  return x instanceof Uncertainty;
}

function lessThan(a, b, precision) {
  if (areNumbers(a, b) || areStrings(a, b)) {
    return a < b;
  } else if (areDateTimesOrQuantities(a, b)) {
    return a.before(b, precision);
  } else if (isUncertainty(a)) {
    return a.lessThan(b);
  } else if (isUncertainty(b)) {
    return Uncertainty.from(a).lessThan(b);
  } else {
    return null;
  }
}

function lessThanOrEquals(a, b, precision) {
  if (areNumbers(a, b) || areStrings(a, b)) {
    return a <= b;
  } else if (areDateTimesOrQuantities(a, b)) {
    return a.sameOrBefore(b, precision);
  } else if (isUncertainty(a)) {
    return a.lessThanOrEquals(b);
  } else if (isUncertainty(b)) {
    return Uncertainty.from(a).lessThanOrEquals(b);
  } else {
    return null;
  }
}

function greaterThan(a, b, precision) {
  if (areNumbers(a, b) || areStrings(a, b)) {
    return a > b;
  } else if (areDateTimesOrQuantities(a, b)) {
    return a.after(b, precision);
  } else if (isUncertainty(a)) {
    return a.greaterThan(b);
  } else if (isUncertainty(b)) {
    return Uncertainty.from(a).greaterThan(b);
  } else {
    return null;
  }
}

function greaterThanOrEquals(a, b, precision) {
  if (areNumbers(a, b) || areStrings(a, b)) {
    return a >= b;
  } else if (areDateTimesOrQuantities(a, b)) {
    return a.sameOrAfter(b, precision);
  } else if (isUncertainty(a)) {
    return a.greaterThanOrEquals(b);
  } else if (isUncertainty(b)) {
    return Uncertainty.from(a).greaterThanOrEquals(b);
  } else {
    return null;
  }
}

function equivalent(a, b) {
  if (a == null && b == null) {
    return true;
  }

  if (a == null || b == null) {
    return false;
  }

  if (isCode(a)) {
    return codesAreEquivalent(a, b);
  } // Quantity equivalence is the same as Quantity equality


  if (a.isQuantity) {
    return a.equals(b);
  } // Use overloaded 'equivalent' function if it is available


  if (typeof a.equivalent === 'function') {
    return a.equivalent(b);
  }

  var _getClassOfObjects = getClassOfObjects(a, b),
      _getClassOfObjects2 = _slicedToArray(_getClassOfObjects, 2),
      aClass = _getClassOfObjects2[0],
      bClass = _getClassOfObjects2[1];

  switch (aClass) {
    case '[object Array]':
      return compareEveryItemInArrays(a, b, equivalent);

    case '[object Object]':
      return compareObjects(a, b, equivalent);

    case '[object String]':
      // Make sure b is also a string
      if (bClass === '[object String]') {
        // String equivalence is case- and locale insensitive
        a = a.replace(/\s/g, ' ');
        b = b.replace(/\s/g, ' ');
        return a.localeCompare(b, 'en', {
          sensitivity: 'base'
        }) === 0;
      }

      break;
  }

  return equals(a, b);
}

function isCode(object) {
  return object.hasMatch && typeof object.hasMatch === 'function';
}

function codesAreEquivalent(code1, code2) {
  return code1.hasMatch(code2);
}

function getClassOfObjects(object1, object2) {
  return [object1, object2].map(function (obj) {
    return {}.toString.call(obj);
  });
}

function compareEveryItemInArrays(array1, array2, comparisonFunction) {
  return array1.length === array2.length && array1.every(function (item, i) {
    return comparisonFunction(item, array2[i]);
  });
}

function compareObjects(a, b, comparisonFunction) {
  if (!classesEqual(a, b)) {
    return false;
  }

  return deepCompareKeysAndValues(a, b, comparisonFunction);
}

function classesEqual(object1, object2) {
  return object2 instanceof object1.constructor && object1 instanceof object2.constructor;
}

function deepCompareKeysAndValues(a, b, comparisonFunction) {
  var finalComparisonResult;
  var aKeys = getKeysFromObject(a).sort();
  var bKeys = getKeysFromObject(b).sort(); // Array.every() will only return true or false, so set a flag for if we should return null

  var shouldReturnNull = false; // Check if both arrays of keys are the same length and key names match

  if (aKeys.length === bKeys.length && aKeys.every(function (value, index) {
    return value === bKeys[index];
  })) {
    finalComparisonResult = aKeys.every(function (key) {
      // if both are null we should return true to satisfy ignoring empty values in tuples
      if (a[key] == null && b[key] == null) {
        return true;
      }

      var comparisonResult = comparisonFunction(a[key], b[key]);

      if (comparisonResult === null) {
        shouldReturnNull = true;
      }

      return comparisonResult;
    });
  } else {
    finalComparisonResult = false;
  }

  if (shouldReturnNull) {
    return null;
  }

  return finalComparisonResult;
}

function getKeysFromObject(object) {
  return Object.keys(object).filter(function (k) {
    return !isFunction(object[k]);
  });
}

function isFunction(input) {
  return input instanceof Function || {}.toString.call(input) === '[object Function]';
}

function equals(a, b) {
  // Handle null cases first: spec says if either is null, return null
  if (a == null || b == null) {
    return null;
  } // If one is a Quantity, use the Quantity equals function


  if (a && a.isQuantity) {
    return a.equals(b);
  } // If one is a Ratio, use the ratio equals function


  if (a && a.isRatio) {
    return a.equals(b);
  } // If one is an Uncertainty, convert the other to an Uncertainty


  if (a instanceof Uncertainty) {
    b = Uncertainty.from(b);
  } else if (b instanceof Uncertainty) {
    a = Uncertainty.from(a);
  } // Use overloaded 'equals' function if it is available


  if (typeof a.equals === 'function') {
    return a.equals(b);
  } // Return true of the objects are primitives and are strictly equal


  if (_typeof(a) === _typeof(b) && typeof a === 'string' || typeof a === 'number' || typeof a === 'boolean') {
    return a === b;
  } // Return false if they are instances of different classes


  var _getClassOfObjects3 = getClassOfObjects(a, b),
      _getClassOfObjects4 = _slicedToArray(_getClassOfObjects3, 2),
      aClass = _getClassOfObjects4[0],
      bClass = _getClassOfObjects4[1];

  if (aClass !== bClass) {
    return false;
  }

  switch (aClass) {
    case '[object Date]':
      // Compare the ms since epoch
      return a.getTime() === b.getTime();

    case '[object RegExp]':
      // Compare the components of the regular expression
      return ['source', 'global', 'ignoreCase', 'multiline'].every(function (p) {
        return a[p] === b[p];
      });

    case '[object Array]':
      if (a.indexOf(null) >= 0 || a.indexOf(undefined) >= 0 || b.indexOf(null) >= 0 || b.indexOf(undefined) >= 0) {
        return null;
      }

      return compareEveryItemInArrays(a, b, equals);

    case '[object Object]':
      return compareObjects(a, b, equals);

    case '[object Function]':
      return a.toString() === b.toString();
  } // If we made it this far, we can't handle it


  return false;
}

module.exports = {
  lessThan: lessThan,
  lessThanOrEquals: lessThanOrEquals,
  greaterThan: greaterThan,
  greaterThanOrEquals: greaterThanOrEquals,
  equivalent: equivalent,
  equals: equals
};
},{"../datatypes/uncertainty":13}],46:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('../datatypes/exception'),
    Exception = _require.Exception;

var _require2 = require('../datatypes/datetime'),
    MIN_DATETIME_VALUE = _require2.MIN_DATETIME_VALUE,
    MAX_DATETIME_VALUE = _require2.MAX_DATETIME_VALUE,
    MIN_DATE_VALUE = _require2.MIN_DATE_VALUE,
    MAX_DATE_VALUE = _require2.MAX_DATE_VALUE,
    MIN_TIME_VALUE = _require2.MIN_TIME_VALUE,
    MAX_TIME_VALUE = _require2.MAX_TIME_VALUE;

var _require3 = require('../datatypes/uncertainty'),
    Uncertainty = _require3.Uncertainty;

var MAX_INT_VALUE = Math.pow(2, 31) - 1;
var MIN_INT_VALUE = Math.pow(-2, 31);
var MAX_FLOAT_VALUE = 99999999999999999999.99999999;
var MIN_FLOAT_VALUE = -99999999999999999999.99999999;
var MIN_FLOAT_PRECISION_VALUE = Math.pow(10, -8);

function overflowsOrUnderflows(value) {
  if (value == null) {
    return false;
  }

  if (value.isQuantity) {
    if (!isValidDecimal(value.value)) {
      return true;
    }
  } else if (value.isTime && value.isTime()) {
    if (value.after(MAX_TIME_VALUE)) {
      return true;
    }

    if (value.before(MIN_TIME_VALUE)) {
      return true;
    }
  } else if (value.isDateTime) {
    if (value.after(MAX_DATETIME_VALUE)) {
      return true;
    }

    if (value.before(MIN_DATETIME_VALUE)) {
      return true;
    }
  } else if (value.isDate) {
    if (value.after(MAX_DATE_VALUE)) {
      return true;
    }

    if (value.before(MIN_DATE_VALUE)) {
      return true;
    }
  } else if (Number.isInteger(value)) {
    if (!isValidInteger(value)) {
      return true;
    }
  } else if (value.isUncertainty) {
    return overflowsOrUnderflows(value.low) || overflowsOrUnderflows(value.high);
  } else {
    if (!isValidDecimal(value)) {
      return true;
    }
  }

  return false;
}

function isValidInteger(integer) {
  if (isNaN(integer)) {
    return false;
  }

  if (integer > MAX_INT_VALUE) {
    return false;
  }

  if (integer < MIN_INT_VALUE) {
    return false;
  }

  return true;
}

function isValidDecimal(decimal) {
  if (isNaN(decimal)) {
    return false;
  }

  if (decimal > MAX_FLOAT_VALUE) {
    return false;
  }

  if (decimal < MIN_FLOAT_VALUE) {
    return false;
  }

  return true;
}

function limitDecimalPrecision(decimal) {
  var decimalString = decimal.toString(); // For decimals so large that they are represented in scientific notation, javascript has already limited
  // the decimal to its own constraints, so we can't determine the original precision.  Leave as-is unless
  // this becomes problematic, in which case we would need our own parseFloat.

  if (decimalString.indexOf('e') !== -1) {
    return decimal;
  }

  var splitDecimalString = decimalString.split('.');
  var decimalPoints = splitDecimalString[1];

  if (decimalPoints != null && decimalPoints.length > 8) {
    decimalString = splitDecimalString[0] + '.' + splitDecimalString[1].substring(0, 8);
  }

  return parseFloat(decimalString);
}

var OverFlowException = /*#__PURE__*/function (_Exception) {
  _inherits(OverFlowException, _Exception);

  var _super = _createSuper(OverFlowException);

  function OverFlowException() {
    _classCallCheck(this, OverFlowException);

    return _super.apply(this, arguments);
  }

  return OverFlowException;
}(Exception);

function successor(val) {
  if (typeof val === 'number') {
    if (parseInt(val) === val) {
      if (val >= MAX_INT_VALUE) {
        throw new OverFlowException();
      } else {
        return val + 1;
      }
    } else {
      if (val >= MAX_FLOAT_VALUE) {
        throw new OverFlowException();
      } else {
        return val + MIN_FLOAT_PRECISION_VALUE;
      }
    }
  } else if (val && val.isTime && val.isTime()) {
    if (val.sameAs(MAX_TIME_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.successor();
    }
  } else if (val && val.isDateTime) {
    if (val.sameAs(MAX_DATETIME_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.successor();
    }
  } else if (val && val.isDate) {
    if (val.sameAs(MAX_DATE_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.successor();
    }
  } else if (val && val.isUncertainty) {
    // For uncertainties, if the high is the max val, don't increment it
    var high = function () {
      try {
        return successor(val.high);
      } catch (e) {
        return val.high;
      }
    }();

    return new Uncertainty(successor(val.low), high);
  } else if (val && val.isQuantity) {
    var succ = val.clone();
    succ.value = successor(val.value);
    return succ;
  } else if (val == null) {
    return null;
  }
}

function predecessor(val) {
  if (typeof val === 'number') {
    if (parseInt(val) === val) {
      if (val <= MIN_INT_VALUE) {
        throw new OverFlowException();
      } else {
        return val - 1;
      }
    } else {
      if (val <= MIN_FLOAT_VALUE) {
        throw new OverFlowException();
      } else {
        return val - MIN_FLOAT_PRECISION_VALUE;
      }
    }
  } else if (val && val.isTime && val.isTime()) {
    if (val.sameAs(MIN_TIME_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.predecessor();
    }
  } else if (val && val.isDateTime) {
    if (val.sameAs(MIN_DATETIME_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.predecessor();
    }
  } else if (val && val.isDate) {
    if (val.sameAs(MIN_DATE_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.predecessor();
    }
  } else if (val && val.isUncertainty) {
    // For uncertainties, if the low is the min val, don't decrement it
    var low = function () {
      try {
        return predecessor(val.low);
      } catch (e) {
        return val.low;
      }
    }();

    return new Uncertainty(low, predecessor(val.high));
  } else if (val && val.isQuantity) {
    var pred = val.clone();
    pred.value = predecessor(val.value);
    return pred;
  } else if (val == null) {
    return null;
  }
}

function maxValueForInstance(val) {
  if (typeof val === 'number') {
    if (parseInt(val) === val) {
      return MAX_INT_VALUE;
    } else {
      return MAX_FLOAT_VALUE;
    }
  } else if (val && val.isTime && val.isTime()) {
    return MAX_TIME_VALUE.copy();
  } else if (val && val.isDateTime) {
    return MAX_DATETIME_VALUE.copy();
  } else if (val && val.isDate) {
    return MAX_DATE_VALUE.copy();
  } else if (val && val.isQuantity) {
    var val2 = val.clone();
    val2.value = maxValueForInstance(val2.value);
    return val2;
  } else {
    return null;
  }
}

function maxValueForType(type, quantityInstance) {
  switch (type) {
    case '{urn:hl7-org:elm-types:r1}Integer':
      return MAX_INT_VALUE;

    case '{urn:hl7-org:elm-types:r1}Decimal':
      return MAX_FLOAT_VALUE;

    case '{urn:hl7-org:elm-types:r1}DateTime':
      return MAX_DATETIME_VALUE.copy();

    case '{urn:hl7-org:elm-types:r1}Date':
      return MAX_DATE_VALUE.copy();

    case '{urn:hl7-org:elm-types:r1}Time':
      return MAX_TIME_VALUE.copy();

    case '{urn:hl7-org:elm-types:r1}Quantity':
      {
        if (quantityInstance == null) {
          // can't infer a quantity unit type from nothing]
          return null;
        }

        var maxQty = quantityInstance.clone();
        maxQty.value = maxValueForInstance(maxQty.value);
        return maxQty;
      }
  }

  return null;
}

function minValueForInstance(val) {
  if (typeof val === 'number') {
    if (parseInt(val) === val) {
      return MIN_INT_VALUE;
    } else {
      return MIN_FLOAT_VALUE;
    }
  } else if (val && val.isTime && val.isTime()) {
    return MIN_TIME_VALUE.copy();
  } else if (val && val.isDateTime) {
    return MIN_DATETIME_VALUE.copy();
  } else if (val && val.isDate) {
    return MIN_DATE_VALUE.copy();
  } else if (val && val.isQuantity) {
    var val2 = val.clone();
    val2.value = minValueForInstance(val2.value);
    return val2;
  } else {
    return null;
  }
}

function minValueForType(type, quantityInstance) {
  switch (type) {
    case '{urn:hl7-org:elm-types:r1}Integer':
      return MIN_INT_VALUE;

    case '{urn:hl7-org:elm-types:r1}Decimal':
      return MIN_FLOAT_VALUE;

    case '{urn:hl7-org:elm-types:r1}DateTime':
      return MIN_DATETIME_VALUE.copy();

    case '{urn:hl7-org:elm-types:r1}Date':
      return MIN_DATE_VALUE.copy();

    case '{urn:hl7-org:elm-types:r1}Time':
      return MIN_TIME_VALUE.copy();

    case '{urn:hl7-org:elm-types:r1}Quantity':
      {
        if (quantityInstance == null) {
          // can't infer a quantity unit type from nothing]
          return null;
        }

        var minQty = quantityInstance.clone();
        minQty.value = minValueForInstance(minQty.value);
        return minQty;
      }
  }

  return null;
}

function decimalAdjust(type, value, exp) {
  //If the exp is undefined or zero...
  if (typeof exp === 'undefined' || +exp === 0) {
    return Math[type](value);
  }

  value = +value;
  exp = +exp; //If the value is not a number or the exp is not an integer...

  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
    return NaN;
  } //Shift


  value = value.toString().split('e');
  var v = value[1] ? +value[1] - exp : -exp;
  value = Math[type](+(value[0] + 'e' + v)); //Shift back

  value = value.toString().split('e');
  v = value[1] ? +value[1] + exp : exp;
  return +(value[0] + 'e' + v);
}

function decimalOrNull(value) {
  return isValidDecimal(value) ? value : null;
}

module.exports = {
  MAX_INT_VALUE: MAX_INT_VALUE,
  MIN_INT_VALUE: MIN_INT_VALUE,
  MAX_FLOAT_VALUE: MAX_FLOAT_VALUE,
  MIN_FLOAT_VALUE: MIN_FLOAT_VALUE,
  MIN_FLOAT_PRECISION_VALUE: MIN_FLOAT_PRECISION_VALUE,
  MIN_DATETIME_VALUE: MIN_DATETIME_VALUE,
  MAX_DATETIME_VALUE: MAX_DATETIME_VALUE,
  MIN_DATE_VALUE: MIN_DATE_VALUE,
  MAX_DATE_VALUE: MAX_DATE_VALUE,
  MIN_TIME_VALUE: MIN_TIME_VALUE,
  MAX_TIME_VALUE: MAX_TIME_VALUE,
  overflowsOrUnderflows: overflowsOrUnderflows,
  isValidInteger: isValidInteger,
  isValidDecimal: isValidDecimal,
  limitDecimalPrecision: limitDecimalPrecision,
  OverFlowException: OverFlowException,
  successor: successor,
  predecessor: predecessor,
  maxValueForInstance: maxValueForInstance,
  minValueForInstance: minValueForInstance,
  maxValueForType: maxValueForType,
  minValueForType: minValueForType,
  decimalAdjust: decimalAdjust,
  decimalOrNull: decimalOrNull
};
},{"../datatypes/datetime":7,"../datatypes/exception":8,"../datatypes/uncertainty":13}],47:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ucum = require('@lhncbc/ucum-lhc');

var _require = require('./math'),
    decimalAdjust = _require.decimalAdjust;

var utils = ucum.UcumLhcUtils.getInstance(); // Cache Map<string, boolean> for unit validity results so we dont have to go to ucum-lhc for every check.

var unitValidityCache = new Map();

function checkUnit(unit) {
  var allowEmptyUnits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var allowCQLDateUnits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (allowEmptyUnits) {
    unit = fixEmptyUnit(unit);
  }

  if (allowCQLDateUnits) {
    unit = fixCQLDateUnit(unit);
  }

  if (!unitValidityCache.has(unit)) {
    var result = utils.validateUnitString(unit, true);

    if (result.status === 'valid') {
      unitValidityCache.set(unit, {
        valid: true
      });
    } else {
      var msg = "Invalid UCUM unit: '".concat(unit, "'.");

      if (result.ucumCode != null) {
        msg += " Did you mean '".concat(result.ucumCode, "'?");
      }

      unitValidityCache.set(unit, {
        valid: false,
        message: msg
      });
    }
  }

  return unitValidityCache.get(unit);
}

function convertUnit(fromVal, fromUnit, toUnit) {
  var adjustPrecision = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  var _map = [fromUnit, toUnit].map(fixUnit);

  var _map2 = _slicedToArray(_map, 2);

  fromUnit = _map2[0];
  toUnit = _map2[1];
  var result = utils.convertUnitTo(fixUnit(fromUnit), fromVal, fixUnit(toUnit));

  if (result.status !== 'succeeded') {
    return;
  }

  return adjustPrecision ? decimalAdjust('round', result.toVal, -8) : result.toVal;
}

function normalizeUnitsWhenPossible(val1, unit1, val2, unit2) {
  // If both units are CQL date units, return CQL date units
  var useCQLDateUnits = CQL_TO_UCUM_DATE_UNITS[unit1] != null && CQL_TO_UCUM_DATE_UNITS[unit2] != null;

  var resultConverter = function resultConverter(unit) {
    return useCQLDateUnits ? convertToCQLDateUnit(unit) : unit;
  };

  var _map3 = [unit1, unit2].map(fixUnit);

  var _map4 = _slicedToArray(_map3, 2);

  unit1 = _map4[0];
  unit2 = _map4[1];

  if (unit1 === unit2) {
    return [val1, unit1, val2, unit2];
  }

  var baseUnit1 = getBaseUnitAndPower(unit1)[0];
  var baseUnit2 = getBaseUnitAndPower(unit2)[0];

  var _convertToBaseUnit = convertToBaseUnit(val2, unit2, baseUnit1),
      _convertToBaseUnit2 = _slicedToArray(_convertToBaseUnit, 2),
      newVal2 = _convertToBaseUnit2[0],
      newUnit2 = _convertToBaseUnit2[1];

  if (newVal2 == null) {
    // it was not convertible, so just return the quantities as-is
    return [val1, resultConverter(unit1), val2, resultConverter(unit2)];
  } // If the new val2 > old val2, return since we prefer conversion to smaller units


  if (newVal2 >= val2) {
    return [val1, resultConverter(unit1), newVal2, resultConverter(newUnit2)];
  } // else it was a conversion to a larger unit, so go the other way around


  var _convertToBaseUnit3 = convertToBaseUnit(val1, unit1, baseUnit2),
      _convertToBaseUnit4 = _slicedToArray(_convertToBaseUnit3, 2),
      newVal1 = _convertToBaseUnit4[0],
      newUnit1 = _convertToBaseUnit4[1];

  if (newVal1 == null) {
    // this should not happen since we established they are convertible, but just in case...
    return [val1, resultConverter(unit1), newVal2, resultConverter(newUnit2)];
  }

  return [newVal1, resultConverter(newUnit1), val2, resultConverter(unit2)];
}

function convertToCQLDateUnit(unit) {
  if (CQL_TO_UCUM_DATE_UNITS[unit]) {
    // it's already a CQL unit, so return it as-is, removing trailing 's' if necessary (e.g., years -> year)
    return unit.replace(/s$/, '');
  }

  return UCUM_TO_CQL_DATE_UNITS[unit];
}

function compareUnits(unit1, unit2) {
  try {
    var c = convertUnit(1, unit1, unit2);

    if (c > 1) {
      // unit1 is bigger (less precise)
      return 1;
    } else if (c < 1) {
      // unit1 is smaller
      return -1;
    } //units are the same


    return 0;
  } catch (e) {
    return null;
  }
}

function getProductOfUnits(unit1, unit2) {
  var _map5 = [unit1, unit2].map(fixEmptyUnit);

  var _map6 = _slicedToArray(_map5, 2);

  unit1 = _map6[0];
  unit2 = _map6[1];

  if (!checkUnit(unit1).valid || !checkUnit(unit2).valid) {
    return null;
  } // If either unit contains a divisor,combine the numerators and denominators, then divide


  if (unit1.indexOf('/') >= 0 || unit2.indexOf('/') >= 0) {
    // NOTE: We're not trying to get perfection on unit simplification, but doing what is reasonable
    var match1 = unit1.match(/([^/]*)(\/(.*))?/);
    var match2 = unit2.match(/([^/]*)(\/(.*))?/); // In the previous regexes, numerator is match[1], denominator is match[3]

    var newNum = getProductOfUnits(match1[1], match2[1]);
    var newDen = getProductOfUnits(match1[3], match2[3]);
    return getQuotientOfUnits(newNum, newDen);
  } // Get all the individual units being combined, accounting for multipliers (e.g., 'm.L'),
  // and then group like base units to combine powers (and remove '1's since they are no-ops)
  // e.g., 'm.L' * 'm' ==> { m: 2, L: 1}; 'm.L' * '1' ==> { m: 1, L: 1 }; '1' : '1' ==> { }


  var factorPowerMap = new Map();
  var factors = [].concat(_toConsumableArray(unit1.split('.')), _toConsumableArray(unit2.split('.')));
  factors.forEach(function (factor) {
    var _getBaseUnitAndPower = getBaseUnitAndPower(factor),
        _getBaseUnitAndPower2 = _slicedToArray(_getBaseUnitAndPower, 2),
        baseUnit = _getBaseUnitAndPower2[0],
        power = _getBaseUnitAndPower2[1];

    if (baseUnit === '1' || power === 0) {
      // skip factors that are 1 since 1 * N is N.
      return;
    }

    var accumulatedPower = (factorPowerMap.get(baseUnit) || 0) + power;
    factorPowerMap.set(baseUnit, accumulatedPower);
  }); // Loop through the factor map, rebuilding each factor w/ combined power and join them all
  // back via the multiplier '.', treating a final '' (no non-1 units) as '1'
  // e.g.,  { m: 2, L: 1 } ==> 'm2.L'

  return fixUnit(Array.from(factorPowerMap.entries()).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        base = _ref2[0],
        power = _ref2[1];

    return "".concat(base).concat(power > 1 ? power : '');
  }).join('.'));
}

function getQuotientOfUnits(unit1, unit2) {
  var _map7 = [unit1, unit2].map(fixEmptyUnit);

  var _map8 = _slicedToArray(_map7, 2);

  unit1 = _map8[0];
  unit2 = _map8[1];

  if (!checkUnit(unit1).valid || !checkUnit(unit2).valid) {
    return null;
  } // Try to simplify division when neither unit contains a divisor itself


  if (unit1.indexOf('/') === -1 && unit2.indexOf('/') === -1) {
    // Get all the individual units in numerator and denominator accounting for multipliers
    // (e.g., 'm.L'), and then group like base units to combine powers, inversing denominator
    // powers since they are being divided.
    // e.g., 'm3.L' / 'm' ==> { m: 2, L: -1}; 'm.L' / '1' ==> { m: 1, L: 1 }; '1' / '1' ==> { 1: 0 }
    var factorPowerMap = new Map();
    unit1.split('.').forEach(function (factor) {
      var _getBaseUnitAndPower3 = getBaseUnitAndPower(factor),
          _getBaseUnitAndPower4 = _slicedToArray(_getBaseUnitAndPower3, 2),
          baseUnit = _getBaseUnitAndPower4[0],
          power = _getBaseUnitAndPower4[1];

      var accumulatedPower = (factorPowerMap.get(baseUnit) || 0) + power;
      factorPowerMap.set(baseUnit, accumulatedPower);
    });
    unit2.split('.').forEach(function (factor) {
      var _getBaseUnitAndPower5 = getBaseUnitAndPower(factor),
          _getBaseUnitAndPower6 = _slicedToArray(_getBaseUnitAndPower5, 2),
          baseUnit = _getBaseUnitAndPower6[0],
          power = _getBaseUnitAndPower6[1];

      var accumulatedPower = (factorPowerMap.get(baseUnit) || 0) - power;
      factorPowerMap.set(baseUnit, accumulatedPower);
    }); // Construct the numerator from factors with positive power, and denominator from factors
    // with negative power, filtering out base `1` and power 0 (which is also 1).
    // e.g. numerator:   { m: 2, L: -2 } ==> 'm2'; { 1: 1, L: -1 } => ''
    // e.g. denominator: { m: 2, L: -2 } ==> 'L2'; { 1: 1, L: -1 } => 'L'

    var numerator = Array.from(factorPowerMap.entries()).filter(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          base = _ref4[0],
          power = _ref4[1];

      return base !== '1' && power > 0;
    }).map(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 2),
          base = _ref6[0],
          power = _ref6[1];

      return "".concat(base).concat(power > 1 ? power : '');
    }).join('.');
    var denominator = Array.from(factorPowerMap.entries()).filter(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
          base = _ref8[0],
          power = _ref8[1];

      return base !== '1' && power < 0;
    }).map(function (_ref9) {
      var _ref10 = _slicedToArray(_ref9, 2),
          base = _ref10[0],
          power = _ref10[1];

      return "".concat(base).concat(power < -1 ? power * -1 : '');
    }).join('.'); // wrap the denominator in parentheses if necessary

    denominator = /[.]/.test(denominator) ? "(".concat(denominator, ")") : denominator;
    return fixUnit("".concat(numerator).concat(denominator !== '' ? '/' + denominator : ''));
  } // One of the units had a divisor, so don't try to be too smart; just construct it from the parts


  if (unit1 === unit2) {
    // e.g. 'm/g' / 'm/g' ==> '1'
    return '1';
  } else if (unit2 === '1') {
    // e.g., 'm/g' / '1' ==> 'm/g/'
    return unit1;
  } else {
    // denominator is unit2, wrapped in parentheses if necessary
    var _denominator = /[./]/.test(unit2) ? "(".concat(unit2, ")") : unit2;

    if (unit1 === '1') {
      // e.g., '1' / 'm' ==> '/m'; '1' / 'm.g' ==> '/(m.g)'
      return "/".concat(_denominator);
    } // e.g., 'L' / 'm' ==> 'L/m'; 'L' / 'm.g' ==> 'L/(m.g)'


    return "".concat(unit1, "/").concat(_denominator);
  }
} // UNEXPORTED FUNCTIONS


function convertToBaseUnit(fromVal, fromUnit, toBaseUnit) {
  var fromPower = getBaseUnitAndPower(fromUnit)[1];
  var toUnit = fromPower === 1 ? toBaseUnit : "".concat(toBaseUnit).concat(fromPower);
  var newVal = convertUnit(fromVal, fromUnit, toUnit);
  return newVal != null ? [newVal, toUnit] : [];
}

function getBaseUnitAndPower(unit) {
  // don't try to extract power from complex units (containing multipliers or divisors)
  if (/[./]/.test(unit)) {
    return [unit, 1];
  }

  unit = fixUnit(unit);

  var _unit$match$slice = unit.match(/^(.*[^-\d])?([-]?\d*)$/).slice(1),
      _unit$match$slice2 = _slicedToArray(_unit$match$slice, 2),
      term = _unit$match$slice2[0],
      power = _unit$match$slice2[1];

  if (term == null || term === '') {
    term = power;
    power = '1';
  } else if (power == null || power === '') {
    power = '1';
  }

  return [term, parseInt(power)];
} // The CQL specification says that dates are based on the Gregorian calendar, so CQL-based year and month
// identifiers will be matched to the UCUM gregorian units. See http://unitsofmeasure.org/ucum.html#para-31


var CQL_TO_UCUM_DATE_UNITS = {
  years: 'a_g',
  year: 'a_g',
  months: 'mo_g',
  month: 'mo_g',
  weeks: 'wk',
  week: 'wk',
  days: 'd',
  day: 'd',
  hours: 'h',
  hour: 'h',
  minutes: 'min',
  minute: 'min',
  seconds: 's',
  second: 's',
  milliseconds: 'ms',
  millisecond: 'ms'
};
var UCUM_TO_CQL_DATE_UNITS = {
  a: 'year',
  a_j: 'year',
  a_g: 'year',
  mo: 'month',
  mo_j: 'month',
  mo_g: 'month',
  wk: 'week',
  d: 'day',
  h: 'hour',
  min: 'minute',
  s: 'second',
  ms: 'millisecond'
};

function fixEmptyUnit(unit) {
  if (unit == null || unit.trim && unit.trim() === '') {
    return '1';
  }

  return unit;
}

function fixCQLDateUnit(unit) {
  return CQL_TO_UCUM_DATE_UNITS[unit] || unit;
}

function fixUnit(unit) {
  return fixCQLDateUnit(fixEmptyUnit(unit));
}

module.exports = {
  checkUnit: checkUnit,
  convertUnit: convertUnit,
  normalizeUnitsWhenPossible: normalizeUnitsWhenPossible,
  convertToCQLDateUnit: convertToCQLDateUnit,
  compareUnits: compareUnits,
  getProductOfUnits: getProductOfUnits,
  getQuotientOfUnits: getQuotientOfUnits
};
},{"./math":46,"@lhncbc/ucum-lhc":59}],48:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function removeNulls(things) {
  return things.filter(function (x) {
    return x != null;
  });
}

function numerical_sort(things, direction) {
  return things.sort(function (a, b) {
    if (direction == null || direction === 'asc') {
      return a - b;
    } else {
      return b - a;
    }
  });
}

function isNull(value) {
  return value === null;
}

var typeIsArray = Array.isArray || function (value) {
  return {}.toString.call(value) === '[object Array]';
};

function allTrue(things) {
  if (typeIsArray(things)) {
    return things.every(function (x) {
      return x;
    });
  } else {
    return things;
  }
}

function anyTrue(things) {
  if (typeIsArray(things)) {
    return things.some(function (x) {
      return x;
    });
  } else {
    return things;
  }
} //The export below is to make it easier if js Date is overwritten with CQL Date


var jsDate = Date;

function normalizeMillisecondsFieldInString(string, msString) {
  // TODO: verify we are only removing numeral digits
  var timezoneField;
  msString = normalizeMillisecondsField(msString);

  var _string$split = string.split('.'),
      _string$split2 = _slicedToArray(_string$split, 2),
      beforeMs = _string$split2[0],
      msAndAfter = _string$split2[1];

  var timezoneSeparator = getTimezoneSeparatorFromString(msAndAfter);

  if (timezoneSeparator) {
    timezoneField = msAndAfter != null ? msAndAfter.split(timezoneSeparator)[1] : undefined;
  }

  if (timezoneField == null) {
    timezoneField = '';
  }

  return string = beforeMs + '.' + msString + timezoneSeparator + timezoneField;
}

function normalizeMillisecondsField(msString) {
  // fix up milliseconds by padding zeros and/or truncating (5 --> 500, 50 --> 500, 54321 --> 543, etc.)
  return msString = (msString + '00').substring(0, 3);
}

function getTimezoneSeparatorFromString(string) {
  if (string != null) {
    var matches = string.match(/-/);

    if (matches && matches.length === 1) {
      return '-';
    }

    matches = string.match(/\+/);

    if (matches && matches.length === 1) {
      return '+';
    }
  }

  return '';
}

module.exports = {
  removeNulls: removeNulls,
  numerical_sort: numerical_sort,
  isNull: isNull,
  typeIsArray: typeIsArray,
  allTrue: allTrue,
  anyTrue: anyTrue,
  jsDate: jsDate,
  normalizeMillisecondsFieldInString: normalizeMillisecondsFieldInString,
  normalizeMillisecondsField: normalizeMillisecondsField,
  getTimezoneSeparatorFromString: getTimezoneSeparatorFromString
};
},{}],49:[function(require,module,exports){
module.exports={"license":"The following data (prefixes and units) was generated by the UCUM LHC code from the UCUM data and selected LOINC combinations of UCUM units.  The license for the UCUM LHC code (demo and library code as well as the combined units) is located at https://github.com/lhncbc/ucum-lhc/blob/LICENSE.md.","prefixes":{"config":["code_","ciCode_","name_","printSymbol_","value_","exp_"],"data":[["E","EX","exa","E",1000000000000000000,"18"],["G","GA","giga","G",1000000000,"9"],["Gi","GIB","gibi","Gi",1073741824,null],["Ki","KIB","kibi","Ki",1024,null],["M","MA","mega","M",1000000,"6"],["Mi","MIB","mebi","Mi",1048576,null],["P","PT","peta","P",1000000000000000,"15"],["T","TR","tera","T",1000000000000,"12"],["Ti","TIB","tebi","Ti",1099511627776,null],["Y","YA","yotta","Y",1e+24,"24"],["Z","ZA","zetta","Z",1e+21,"21"],["a","A","atto","a",1e-18,"-18"],["c","C","centi","c",0.01,"-2"],["d","D","deci","d",0.1,"-1"],["da","DA","deka","da",10,"1"],["f","F","femto","f",1e-15,"-15"],["h","H","hecto","h",100,"2"],["k","K","kilo","k",1000,"3"],["m","M","milli","m",0.001,"-3"],["n","N","nano","n",1e-9,"-9"],["p","P","pico","p",1e-12,"-12"],["u","U","micro","μ",0.000001,"-6"],["y","YO","yocto","y",1.0000000000000001e-24,"-24"],["z","ZO","zepto","z",1e-21,"-21"]]},"units":{"config":["isBase_","name_","csCode_","ciCode_","property_","magnitude_",["dim_","dimVec_"],"printSymbol_","class_","isMetric_","variable_","cnv_","cnvPfx_","isSpecial_","isArbitrary_","moleExp_","synonyms_","source_","loincProperty_","category_","guidance_","csUnitString_","ciUnitString_","baseFactorStr_","baseFactor_","defError_"],"data":[[true,"meter","m","M","length",1,[1,0,0,0,0,0,0],"m",null,false,"L",null,1,false,false,0,"meters; metres; distance","UCUM","Len","Clinical","unit of length = 1.09361 yards",null,null,null,null,false],[true,"second - time","s","S","time",1,[0,1,0,0,0,0,0],"s",null,false,"T",null,1,false,false,0,"seconds","UCUM","Time","Clinical","",null,null,null,null,false],[true,"gram","g","G","mass",1,[0,0,1,0,0,0,0],"g",null,false,"M",null,1,false,false,0,"grams; gm","UCUM","Mass","Clinical","",null,null,null,null,false],[true,"radian","rad","RAD","plane angle",1,[0,0,0,1,0,0,0],"rad",null,false,"A",null,1,false,false,0,"radians","UCUM","Angle","Clinical","unit of angular measure where 1 radian = 1/2π turn =  57.296 degrees. ",null,null,null,null,false],[true,"degree Kelvin","K","K","temperature",1,[0,0,0,0,1,0,0],"K",null,false,"C",null,1,false,false,0,"Kelvin; degrees","UCUM","Temp","Clinical","absolute, thermodynamic temperature scale ",null,null,null,null,false],[true,"coulomb","C","C","electric charge",1,[0,0,0,0,0,1,0],"C",null,false,"Q",null,1,false,false,0,"coulombs","UCUM","","Clinical","defined as amount of 1 electron charge = 6.2415093×10^18 e, and equivalent to 1 Ampere-second",null,null,null,null,false],[true,"candela","cd","CD","luminous intensity",1,[0,0,0,0,0,0,1],"cd",null,false,"F",null,1,false,false,0,"candelas","UCUM","","Clinical","SI base unit of luminous intensity",null,null,null,null,false],[false,"the number ten for arbitrary powers","10*","10*","number",10,[0,0,0,0,0,0,0],"10","dimless",false,null,null,1,false,false,0,"10^; 10 to the arbitrary powers","UCUM","Num","Clinical","10* by itself is the same as 10, but users can add digits after the *. For example, 10*3 = 1000.","1","1","10",10,false],[false,"the number ten for arbitrary powers","10^","10^","number",10,[0,0,0,0,0,0,0],"10","dimless",false,null,null,1,false,false,0,"10*; 10 to the arbitrary power","UCUM","Num","Clinical","10* by itself is the same as 10, but users can add digits after the *. For example, 10*3 = 1000.","1","1","10",10,false],[false,"the number pi","[pi]","[PI]","number",3.141592653589793,[0,0,0,0,0,0,0],"π","dimless",false,null,null,1,false,false,0,"π","UCUM","","Constant","a mathematical constant; the ratio of a circle's circumference to its diameter ≈ 3.14159","1","1","3.1415926535897932384626433832795028841971693993751058209749445923",3.141592653589793,false],[false,"","%","%","fraction",0.01,[0,0,0,0,0,0,0],"%","dimless",false,null,null,1,false,false,0,"percents","UCUM","FR; NFR; MFR; CFR; SFR Rto; etc. ","Clinical","","10*-2","10*-2","1",1,false],[false,"parts per thousand","[ppth]","[PPTH]","fraction",0.001,[0,0,0,0,0,0,0],"ppth","dimless",false,null,null,1,false,false,0,"ppth; 10^-3","UCUM","MCnc; MCnt","Clinical","[ppth] is often used in solution concentrations as 1 g/L or 1 g/kg.\n\nCan be ambigous and would be better if the metric units was used directly. ","10*-3","10*-3","1",1,false],[false,"parts per million","[ppm]","[PPM]","fraction",0.000001,[0,0,0,0,0,0,0],"ppm","dimless",false,null,null,1,false,false,0,"ppm; 10^-6","UCUM","MCnt; MCnc; SFr","Clinical","[ppm] is often used in solution concentrations as 1 mg/L  or 1 mg/kg. Also used to express mole fractions as 1 mmol/mol.\n\n[ppm] is also used in nuclear magnetic resonance (NMR) to represent chemical shift - the difference of a measured frequency in parts per million from the reference frequency.\n\nCan be ambigous and would be better if the metric units was used directly. ","10*-6","10*-6","1",1,false],[false,"parts per billion","[ppb]","[PPB]","fraction",1e-9,[0,0,0,0,0,0,0],"ppb","dimless",false,null,null,1,false,false,0,"ppb; 10^-9","UCUM","MCnt; MCnc; SFr","Clinical","[ppb] is often used in solution concentrations as 1 ug/L  or 1 ug/kg. Also used to express mole fractions as 1 umol/mol.\n\nCan be ambigous and would be better if the metric units was used directly. ","10*-9","10*-9","1",1,false],[false,"parts per trillion","[pptr]","[PPTR]","fraction",1e-12,[0,0,0,0,0,0,0],"pptr","dimless",false,null,null,1,false,false,0,"pptr; 10^-12","UCUM","MCnt; MCnc; SFr","Clinical","[pptr] is often used in solution concentrations as 1 ng/L or 1 ng/kg. Also used to express mole fractions as 1 nmol/mol.\n\nCan be ambigous and would be better if the metric units was used directly. ","10*-12","10*-12","1",1,false],[false,"mole","mol","MOL","amount of substance",6.0221367e+23,[0,0,0,0,0,0,0],"mol","si",true,null,null,1,false,false,1,"moles","UCUM","Sub","Clinical","Measure the number of molecules ","10*23","10*23","6.0221367",6.0221367,false],[false,"steradian - solid angle","sr","SR","solid angle",1,[0,0,0,2,0,0,0],"sr","si",true,null,null,1,false,false,0,"square radian; rad2; rad^2","UCUM","Angle","Clinical","unit of solid angle in three-dimensional geometry analagous to radian; used in photometry which measures the perceived brightness of object by human eye (e.g. radiant intensity = watt/steradian)","rad2","RAD2","1",1,false],[false,"hertz","Hz","HZ","frequency",1,[0,-1,0,0,0,0,0],"Hz","si",true,null,null,1,false,false,0,"Herz; frequency; frequencies","UCUM","Freq; Num","Clinical","equal to one cycle per second","s-1","S-1","1",1,false],[false,"newton","N","N","force",1000,[1,-2,1,0,0,0,0],"N","si",true,null,null,1,false,false,0,"Newtons","UCUM","Force","Clinical","unit of force with base units kg.m/s2","kg.m/s2","KG.M/S2","1",1,false],[false,"pascal","Pa","PAL","pressure",1000,[-1,-2,1,0,0,0,0],"Pa","si",true,null,null,1,false,false,0,"pascals","UCUM","Pres","Clinical","standard unit of pressure equal to 1 newton per square meter (N/m2)","N/m2","N/M2","1",1,false],[false,"joule","J","J","energy",1000,[2,-2,1,0,0,0,0],"J","si",true,null,null,1,false,false,0,"joules","UCUM","Enrg","Clinical","unit of energy defined as the work required to move an object 1 m with a force of 1 N (N.m) or an electric charge of 1 C through 1 V (C.V), or to produce 1 W for 1 s (W.s) ","N.m","N.M","1",1,false],[false,"watt","W","W","power",1000,[2,-3,1,0,0,0,0],"W","si",true,null,null,1,false,false,0,"watts","UCUM","EngRat","Clinical","unit of power equal to 1 Joule per second (J/s) =  kg⋅m2⋅s−3","J/s","J/S","1",1,false],[false,"Ampere","A","A","electric current",1,[0,-1,0,0,0,1,0],"A","si",true,null,null,1,false,false,0,"Amperes","UCUM","ElpotRat","Clinical","unit of electric current equal to flow rate of electrons equal to 16.2415×10^18 elementary charges moving past a boundary in one second or 1 Coulomb/second","C/s","C/S","1",1,false],[false,"volt","V","V","electric potential",1000,[2,-2,1,0,0,-1,0],"V","si",true,null,null,1,false,false,0,"volts","UCUM","Elpot","Clinical","unit of electric potential (voltage) = 1 Joule per Coulomb (J/C)","J/C","J/C","1",1,false],[false,"farad","F","F","electric capacitance",0.001,[-2,2,-1,0,0,2,0],"F","si",true,null,null,1,false,false,0,"farads; electric capacitance","UCUM","","Clinical","CGS unit of electric capacitance with base units C/V (Coulomb per Volt)","C/V","C/V","1",1,false],[false,"ohm","Ohm","OHM","electric resistance",1000,[2,-1,1,0,0,-2,0],"Ω","si",true,null,null,1,false,false,0,"Ω; resistance; ohms","UCUM","","Clinical","unit of electrical resistance with units of Volt per Ampere","V/A","V/A","1",1,false],[false,"siemens","S","SIE","electric conductance",0.001,[-2,1,-1,0,0,2,0],"S","si",true,null,null,1,false,false,0,"Reciprocal ohm; mho; Ω−1; conductance","UCUM","","Clinical","unit of electric conductance (the inverse of electrical resistance) equal to ohm^-1","Ohm-1","OHM-1","1",1,false],[false,"weber","Wb","WB","magnetic flux",1000,[2,-1,1,0,0,-1,0],"Wb","si",true,null,null,1,false,false,0,"magnetic flux; webers","UCUM","","Clinical","unit of magnetic flux equal to Volt second","V.s","V.S","1",1,false],[false,"degree Celsius","Cel","CEL","temperature",1,[0,0,0,0,1,0,0],"°C","si",true,null,"Cel",1,true,false,0,"°C; degrees","UCUM","Temp","Clinical","","K",null,null,1,false],[false,"tesla","T","T","magnetic flux density",1000,[0,-1,1,0,0,-1,0],"T","si",true,null,null,1,false,false,0,"Teslas; magnetic field","UCUM","","Clinical","SI unit of magnetic field strength for magnetic field B equal to 1 Weber/square meter =  1 kg/(s2*A)","Wb/m2","WB/M2","1",1,false],[false,"henry","H","H","inductance",1000,[2,0,1,0,0,-2,0],"H","si",true,null,null,1,false,false,0,"henries; inductance","UCUM","","Clinical","unit of electrical inductance; usually expressed in millihenrys (mH) or microhenrys (uH).","Wb/A","WB/A","1",1,false],[false,"lumen","lm","LM","luminous flux",1,[0,0,0,2,0,0,1],"lm","si",true,null,null,1,false,false,0,"luminous flux; lumens","UCUM","","Clinical","unit of luminous flux defined as 1 lm = 1 cd⋅sr (candela times sphere)","cd.sr","CD.SR","1",1,false],[false,"lux","lx","LX","illuminance",1,[-2,0,0,2,0,0,1],"lx","si",true,null,null,1,false,false,0,"illuminance; luxes","UCUM","","Clinical","unit of illuminance equal to one lumen per square meter. ","lm/m2","LM/M2","1",1,false],[false,"becquerel","Bq","BQ","radioactivity",1,[0,-1,0,0,0,0,0],"Bq","si",true,null,null,1,false,false,0,"activity; radiation; becquerels","UCUM","","Clinical","measure of the atomic radiation rate with units s^-1","s-1","S-1","1",1,false],[false,"gray","Gy","GY","energy dose",1,[2,-2,0,0,0,0,0],"Gy","si",true,null,null,1,false,false,0,"absorbed doses; ionizing radiation doses; kerma; grays","UCUM","EngCnt","Clinical","unit of ionizing radiation dose with base units of 1 joule of radiation energy per kilogram of matter","J/kg","J/KG","1",1,false],[false,"sievert","Sv","SV","dose equivalent",1,[2,-2,0,0,0,0,0],"Sv","si",true,null,null,1,false,false,0,"sieverts; radiation dose quantities; equivalent doses; effective dose; operational dose; committed dose","UCUM","","Clinical","SI unit for radiation dose equivalent equal to 1 Joule/kilogram.","J/kg","J/KG","1",1,false],[false,"degree - plane angle","deg","DEG","plane angle",0.017453292519943295,[0,0,0,1,0,0,0],"°","iso1000",false,null,null,1,false,false,0,"°; degree of arc; arc degree; arcdegree; angle","UCUM","Angle","Clinical","one degree is equivalent to π/180 radians.","[pi].rad/360","[PI].RAD/360","2",2,false],[false,"gon","gon","GON","plane angle",0.015707963267948967,[0,0,0,1,0,0,0],"□<sup>g</sup>","iso1000",false,null,null,1,false,false,0,"gon (grade); gons","UCUM","Angle","Nonclinical","unit of plane angle measurement equal to 1/400 circle","deg","DEG","0.9",0.9,false],[false,"arc minute","'","'","plane angle",0.0002908882086657216,[0,0,0,1,0,0,0],"'","iso1000",false,null,null,1,false,false,0,"arcminutes; arcmin; arc minutes; arc mins","UCUM","Angle","Clinical","equal to 1/60 degree; used in optometry and opthamology (e.g. visual acuity tests)","deg/60","DEG/60","1",1,false],[false,"arc second","''","''","plane angle",0.00000484813681109536,[0,0,0,1,0,0,0],"''","iso1000",false,null,null,1,false,false,0,"arcseconds; arcsecs","UCUM","Angle","Clinical","equal to 1/60 arcminute = 1/3600 degree; used in optometry and opthamology (e.g. visual acuity tests)","'/60","'/60","1",1,false],[false,"Liters","l","L","volume",0.001,[3,0,0,0,0,0,0],"l","iso1000",true,null,null,1,false,false,0,"cubic decimeters; decimeters cubed; decimetres; dm3; dm^3; litres; liters, LT ","UCUM","Vol","Clinical","Because lower case \"l\" can be read as the number \"1\", though this is a valid UCUM units. UCUM strongly reccomends using  \"L\"","dm3","DM3","1",1,false],[false,"Liters","L","L","volume",0.001,[3,0,0,0,0,0,0],"L","iso1000",true,null,null,1,false,false,0,"cubic decimeters; decimeters cubed; decimetres; dm3; dm^3; litres; liters, LT ","UCUM","Vol","Clinical","Because lower case \"l\" can be read as the number \"1\", though this is a valid UCUM units. UCUM strongly reccomends using  \"L\"","l",null,"1",1,false],[false,"are","ar","AR","area",100,[2,0,0,0,0,0,0],"a","iso1000",true,null,null,1,false,false,0,"100 m2; 100 m^2; 100 square meter; meters squared; metres","UCUM","Area","Clinical","metric base unit for area defined as 100 m^2","m2","M2","100",100,false],[false,"minute","min","MIN","time",60,[0,1,0,0,0,0,0],"min","iso1000",false,null,null,1,false,false,0,"minutes","UCUM","Time","Clinical","","s","S","60",60,false],[false,"hour","h","HR","time",3600,[0,1,0,0,0,0,0],"h","iso1000",false,null,null,1,false,false,0,"hours; hrs; age","UCUM","Time","Clinical","","min","MIN","60",60,false],[false,"day","d","D","time",86400,[0,1,0,0,0,0,0],"d","iso1000",false,null,null,1,false,false,0,"days; age; dy; 24 hours; 24 hrs","UCUM","Time","Clinical","","h","HR","24",24,false],[false,"tropical year","a_t","ANN_T","time",31556925.216,[0,1,0,0,0,0,0],"a<sub>t</sub>","iso1000",false,null,null,1,false,false,0,"solar years; a tropical; years","UCUM","Time","Clinical","has an average of 365.242181 days but is constantly changing.","d","D","365.24219",365.24219,false],[false,"mean Julian year","a_j","ANN_J","time",31557600,[0,1,0,0,0,0,0],"a<sub>j</sub>","iso1000",false,null,null,1,false,false,0,"mean Julian yr; a julian; years","UCUM","Time","Clinical","has an average of 365.25 days, and in everyday use, has been replaced by the Gregorian year. However, this unit is used in astronomy to calculate light year. ","d","D","365.25",365.25,false],[false,"mean Gregorian year","a_g","ANN_G","time",31556952,[0,1,0,0,0,0,0],"a<sub>g</sub>","iso1000",false,null,null,1,false,false,0,"mean Gregorian yr; a gregorian; years","UCUM","Time","Clinical","has an average of 365.2425 days and is the most internationally used civil calendar.","d","D","365.2425",365.2425,false],[false,"year","a","ANN","time",31557600,[0,1,0,0,0,0,0],"a","iso1000",false,null,null,1,false,false,0,"years; a; yr, yrs; annum","UCUM","Time","Clinical","","a_j","ANN_J","1",1,false],[false,"week","wk","WK","time",604800,[0,1,0,0,0,0,0],"wk","iso1000",false,null,null,1,false,false,0,"weeks; wks","UCUM","Time","Clinical","","d","D","7",7,false],[false,"synodal month","mo_s","MO_S","time",2551442.976,[0,1,0,0,0,0,0],"mo<sub>s</sub>","iso1000",false,null,null,1,false,false,0,"Moon; synodic month; lunar month; mo-s; mo s; months; moons","UCUM","Time","Nonclinical","has an average of 29.53 days per month, unit used in astronomy","d","D","29.53059",29.53059,false],[false,"mean Julian month","mo_j","MO_J","time",2629800,[0,1,0,0,0,0,0],"mo<sub>j</sub>","iso1000",false,null,null,1,false,false,0,"mo-julian; mo Julian; months","UCUM","Time","Clinical","has an average of 30.435 days per month","a_j/12","ANN_J/12","1",1,false],[false,"mean Gregorian month","mo_g","MO_G","time",2629746,[0,1,0,0,0,0,0],"mo<sub>g</sub>","iso1000",false,null,null,1,false,false,0,"months; month-gregorian; mo-gregorian","UCUM","Time","Clinical","has an average 30.436875 days per month and is from the most internationally used civil calendar.","a_g/12","ANN_G/12","1",1,false],[false,"month","mo","MO","time",2629800,[0,1,0,0,0,0,0],"mo","iso1000",false,null,null,1,false,false,0,"months; duration","UCUM","Time","Clinical","based on Julian calendar which has an average of 30.435 days per month (this unit is used in astronomy but not in everyday life - see mo_g)","mo_j","MO_J","1",1,false],[false,"metric ton","t","TNE","mass",1000000,[0,0,1,0,0,0,0],"t","iso1000",true,null,null,1,false,false,0,"tonnes; megagrams; tons","UCUM","Mass","Nonclinical","equal to 1000 kg used in the US (recognized by NIST as metric ton), and internationally (recognized as tonne)","kg","KG","1e3",1000,false],[false,"bar","bar","BAR","pressure",100000000,[-1,-2,1,0,0,0,0],"bar","iso1000",true,null,null,1,false,false,0,"bars","UCUM","Pres","Nonclinical","unit of pressure equal to 10^5 Pascals, primarily used by meteorologists and in weather forecasting","Pa","PAL","1e5",100000,false],[false,"unified atomic mass unit","u","AMU","mass",1.6605402e-24,[0,0,1,0,0,0,0],"u","iso1000",true,null,null,1,false,false,0,"unified atomic mass units; amu; Dalton; Da","UCUM","Mass","Clinical","the mass of 1/12 of an unbound Carbon-12 atom nuclide equal to 1.6606x10^-27 kg ","g","G","1.6605402e-24",1.6605402e-24,false],[false,"astronomic unit","AU","ASU","length",149597870691,[1,0,0,0,0,0,0],"AU","iso1000",false,null,null,1,false,false,0,"AU; units","UCUM","Len","Clinical","unit of length used in astronomy for measuring distance in Solar system","Mm","MAM","149597.870691",149597.870691,false],[false,"parsec","pc","PRS","length",30856780000000000,[1,0,0,0,0,0,0],"pc","iso1000",true,null,null,1,false,false,0,"parsecs","UCUM","Len","Clinical","unit of length equal to 3.26 light years, nad used to measure large distances to objects outside our Solar System","m","M","3.085678e16",30856780000000000,false],[false,"velocity of light in a vacuum","[c]","[C]","velocity",299792458,[1,-1,0,0,0,0,0],"<i>c</i>","const",true,null,null,1,false,false,0,"speed of light","UCUM","Vel","Constant","equal to 299792458 m/s (approximately 3 x 10^8 m/s)","m/s","M/S","299792458",299792458,false],[false,"Planck constant","[h]","[H]","action",6.6260755e-31,[2,-1,1,0,0,0,0],"<i>h</i>","const",true,null,null,1,false,false,0,"Planck's constant","UCUM","","Constant","constant = 6.62607004 × 10-34 m2.kg/s; defined as quantum of action","J.s","J.S","6.6260755e-34",6.6260755e-34,false],[false,"Boltzmann constant","[k]","[K]","(unclassified)",1.380658e-20,[2,-2,1,0,-1,0,0],"<i>k</i>","const",true,null,null,1,false,false,0,"k; kB","UCUM","","Constant","physical constant relating energy at the individual particle level with temperature = 1.38064852 ×10^−23 J/K","J/K","J/K","1.380658e-23",1.380658e-23,false],[false,"permittivity of vacuum - electric","[eps_0]","[EPS_0]","electric permittivity",8.854187817000001e-15,[-3,2,-1,0,0,2,0],"<i>ε<sub><r>0</r></sub></i>","const",true,null,null,1,false,false,0,"ε0; Electric Constant; vacuum permittivity; permittivity of free space ","UCUM","","Constant","approximately equal to 8.854 × 10^−12 F/m (farads per meter)","F/m","F/M","8.854187817e-12",8.854187817e-12,false],[false,"permeability of vacuum - magnetic","[mu_0]","[MU_0]","magnetic permeability",0.0012566370614359172,[1,0,1,0,0,-2,0],"<i>μ<sub><r>0</r></sub></i>","const",true,null,null,1,false,false,0,"μ0; vacuum permeability; permeability of free space; magnetic constant","UCUM","","Constant","equal to 4π×10^−7 N/A2 (Newtons per square ampere) ≈ 1.2566×10^−6 H/m (Henry per meter)","N/A2","4.[PI].10*-7.N/A2","1",0.0000012566370614359173,false],[false,"elementary charge","[e]","[E]","electric charge",1.60217733e-19,[0,0,0,0,0,1,0],"<i>e</i>","const",true,null,null,1,false,false,0,"e; q; electric charges","UCUM","","Constant","the magnitude of the electric charge carried by a single electron or proton ≈ 1.60217×10^-19 Coulombs","C","C","1.60217733e-19",1.60217733e-19,false],[false,"electronvolt","eV","EV","energy",1.60217733e-16,[2,-2,1,0,0,0,0],"eV","iso1000",true,null,null,1,false,false,0,"Electron Volts; electronvolts","UCUM","Eng","Clinical","unit of kinetic energy = 1 V * 1.602×10^−19 C = 1.6×10−19 Joules","[e].V","[E].V","1",1,false],[false,"electron mass","[m_e]","[M_E]","mass",9.1093897e-28,[0,0,1,0,0,0,0],"<i>m<sub><r>e</r></sub></i>","const",true,null,null,1,false,false,0,"electron rest mass; me","UCUM","Mass","Constant","approximately equal to 9.10938356 × 10-31 kg; defined as the mass of a stationary electron","g","g","9.1093897e-28",9.1093897e-28,false],[false,"proton mass","[m_p]","[M_P]","mass",1.6726231e-24,[0,0,1,0,0,0,0],"<i>m<sub><r>p</r></sub></i>","const",true,null,null,1,false,false,0,"mp; masses","UCUM","Mass","Constant","approximately equal to 1.672622×10−27 kg","g","g","1.6726231e-24",1.6726231e-24,false],[false,"Newtonian constant of gravitation","[G]","[GC]","(unclassified)",6.67259e-14,[3,-2,-1,0,0,0,0],"<i>G</i>","const",true,null,null,1,false,false,0,"G; gravitational constant; Newton's constant","UCUM","","Constant","gravitational constant = 6.674×10−11 N⋅m2/kg2","m3.kg-1.s-2","M3.KG-1.S-2","6.67259e-11",6.67259e-11,false],[false,"standard acceleration of free fall","[g]","[G]","acceleration",9.80665,[1,-2,0,0,0,0,0],"<i>g<sub>n</sub></i>","const",true,null,null,1,false,false,0,"standard gravity; g; ɡ0; ɡn","UCUM","Accel","Constant","defined by standard = 9.80665 m/s2","m/s2","M/S2","980665e-5",9.80665,false],[false,"Torr","Torr","Torr","pressure",133322,[-1,-2,1,0,0,0,0],"Torr","const",false,null,null,1,false,false,0,"torrs","UCUM","Pres","Clinical","1 torr = 1 mmHg; unit used to measure blood pressure","Pa","PAL","133.322",133.322,false],[false,"standard atmosphere","atm","ATM","pressure",101325000,[-1,-2,1,0,0,0,0],"atm","const",false,null,null,1,false,false,0,"reference pressure; atmos; std atmosphere","UCUM","Pres","Clinical","defined as being precisely equal to 101,325 Pa","Pa","PAL","101325",101325,false],[false,"light-year","[ly]","[LY]","length",9460730472580800,[1,0,0,0,0,0,0],"l.y.","const",true,null,null,1,false,false,0,"light years; ly","UCUM","Len","Constant","unit of astronomal distance = 5.88×10^12 mi","[c].a_j","[C].ANN_J","1",1,false],[false,"gram-force","gf","GF","force",9.80665,[1,-2,1,0,0,0,0],"gf","const",true,null,null,1,false,false,0,"Newtons; gram forces","UCUM","Force","Clinical","May be specific to unit related to cardiac output","g.[g]","G.[G]","1",1,false],[false,"Kayser","Ky","KY","lineic number",100,[-1,0,0,0,0,0,0],"K","cgs",true,null,null,1,false,false,0,"wavenumbers; kaysers","UCUM","InvLen","Clinical","unit of wavelength equal to cm^-1","cm-1","CM-1","1",1,false],[false,"Gal","Gal","GL","acceleration",0.01,[1,-2,0,0,0,0,0],"Gal","cgs",true,null,null,1,false,false,0,"galileos; Gals","UCUM","Accel","Clinical","unit of acceleration used in gravimetry; equivalent to cm/s2 ","cm/s2","CM/S2","1",1,false],[false,"dyne","dyn","DYN","force",0.01,[1,-2,1,0,0,0,0],"dyn","cgs",true,null,null,1,false,false,0,"dynes","UCUM","Force","Clinical","unit of force equal to 10^-5 Newtons","g.cm/s2","G.CM/S2","1",1,false],[false,"erg","erg","ERG","energy",0.0001,[2,-2,1,0,0,0,0],"erg","cgs",true,null,null,1,false,false,0,"10^-7 Joules, 10-7 Joules; 100 nJ; 100 nanoJoules; 1 dyne cm; 1 g.cm2/s2","UCUM","Eng","Clinical","unit of energy = 1 dyne centimeter = 10^-7 Joules","dyn.cm","DYN.CM","1",1,false],[false,"Poise","P","P","dynamic viscosity",100,[-1,-1,1,0,0,0,0],"P","cgs",true,null,null,1,false,false,0,"dynamic viscosity; poises","UCUM","Visc","Clinical","unit of dynamic viscosity where 1 Poise = 1/10 Pascal second","dyn.s/cm2","DYN.S/CM2","1",1,false],[false,"Biot","Bi","BI","electric current",10,[0,-1,0,0,0,1,0],"Bi","cgs",true,null,null,1,false,false,0,"Bi; abamperes; abA","UCUM","ElpotRat","Clinical","equal to 10 amperes","A","A","10",10,false],[false,"Stokes","St","ST","kinematic viscosity",0.0001,[2,-1,0,0,0,0,0],"St","cgs",true,null,null,1,false,false,0,"kinematic viscosity","UCUM","Visc","Clinical","unit of kimematic viscosity with units cm2/s","cm2/s","CM2/S","1",1,false],[false,"Maxwell","Mx","MX","flux of magnetic induction",0.00001,[2,-1,1,0,0,-1,0],"Mx","cgs",true,null,null,1,false,false,0,"magnetix flux; Maxwells","UCUM","","Clinical","unit of magnetic flux","Wb","WB","1e-8",1e-8,false],[false,"Gauss","G","GS","magnetic flux density",0.1,[0,-1,1,0,0,-1,0],"Gs","cgs",true,null,null,1,false,false,0,"magnetic fields; magnetic flux density; induction; B","UCUM","magnetic","Clinical","CGS unit of magnetic flux density, known as magnetic field B; defined as one maxwell unit per square centimeter (see Oersted for CGS unit for H field)","T","T","1e-4",0.0001,false],[false,"Oersted","Oe","OE","magnetic field intensity",79.57747154594767,[-1,-1,0,0,0,1,0],"Oe","cgs",true,null,null,1,false,false,0,"H magnetic B field; Oersteds","UCUM","","Clinical","CGS unit of the auxiliary magnetic field H defined as 1 dyne per unit pole = 1000/4π amperes per meter (see Gauss for CGS unit for B field)","A/m","/[PI].A/M","250",79.57747154594767,false],[false,"Gilbert","Gb","GB","magnetic tension",0.7957747154594768,[0,-1,0,0,0,1,0],"Gb","cgs",true,null,null,1,false,false,0,"Gi; magnetomotive force; Gilberts","UCUM","","Clinical","unit of magnetomotive force (magnetic potential)","Oe.cm","OE.CM","1",1,false],[false,"stilb","sb","SB","lum. intensity density",10000,[-2,0,0,0,0,0,1],"sb","cgs",true,null,null,1,false,false,0,"stilbs","UCUM","","Obsolete","unit of luminance; equal to and replaced by unit candela per square centimeter (cd/cm2)","cd/cm2","CD/CM2","1",1,false],[false,"Lambert","Lmb","LMB","brightness",3183.098861837907,[-2,0,0,0,0,0,1],"L","cgs",true,null,null,1,false,false,0,"luminance; lamberts","UCUM","","Clinical","unit of luminance defined as 1 lambert = 1/ π candela per square meter","cd/cm2/[pi]","CD/CM2/[PI]","1",1,false],[false,"phot","ph","PHT","illuminance",0.0001,[-2,0,0,2,0,0,1],"ph","cgs",true,null,null,1,false,false,0,"phots","UCUM","","Clinical","CGS photometric unit of illuminance, or luminous flux through an area equal to 10000 lumens per square meter = 10000 lux","lx","LX","1e-4",0.0001,false],[false,"Curie","Ci","CI","radioactivity",37000000000,[0,-1,0,0,0,0,0],"Ci","cgs",true,null,null,1,false,false,0,"curies","UCUM","","Obsolete","unit for measuring atomic disintegration rate; replaced by the Bequerel (Bq) unit","Bq","BQ","37e9",37000000000,false],[false,"Roentgen","R","ROE","ion dose",2.58e-7,[0,0,-1,0,0,1,0],"R","cgs",true,null,null,1,false,false,0,"röntgen; Roentgens","UCUM","","Clinical","unit of exposure of X-rays and gamma rays in air; unit used primarily in the US but strongly discouraged by NIST","C/kg","C/KG","2.58e-4",0.000258,false],[false,"radiation absorbed dose","RAD","[RAD]","energy dose",0.01,[2,-2,0,0,0,0,0],"RAD","cgs",true,null,null,1,false,false,0,"doses","UCUM","","Clinical","unit of radiation absorbed dose used primarily in the US with base units 100 ergs per gram of material. Also see the SI unit Gray (Gy).","erg/g","ERG/G","100",100,false],[false,"radiation equivalent man","REM","[REM]","dose equivalent",0.01,[2,-2,0,0,0,0,0],"REM","cgs",true,null,null,1,false,false,0,"Roentgen Equivalent in Man; rems; dose equivalents","UCUM","","Clinical","unit of equivalent dose which measures the effect of radiation on humans equal to 0.01 sievert. Used primarily in the US. Also see SI unit Sievert (Sv)","RAD","[RAD]","1",1,false],[false,"inch","[in_i]","[IN_I]","length",0.025400000000000002,[1,0,0,0,0,0,0],"in","intcust",false,null,null,1,false,false,0,"inches; in; international inch; body height","UCUM","Len","Clinical","standard unit for inch in the US and internationally","cm","CM","254e-2",2.54,false],[false,"foot","[ft_i]","[FT_I]","length",0.3048,[1,0,0,0,0,0,0],"ft","intcust",false,null,null,1,false,false,0,"ft; fts; foot; international foot; feet; international feet; height","UCUM","Len","Clinical","unit used in the US and internationally","[in_i]","[IN_I]","12",12,false],[false,"yard","[yd_i]","[YD_I]","length",0.9144000000000001,[1,0,0,0,0,0,0],"yd","intcust",false,null,null,1,false,false,0,"international yards; yds; distance","UCUM","Len","Clinical","standard unit used in the US and internationally","[ft_i]","[FT_I]","3",3,false],[false,"mile","[mi_i]","[MI_I]","length",1609.344,[1,0,0,0,0,0,0],"mi","intcust",false,null,null,1,false,false,0,"international miles; mi I; statute mile","UCUM","Len","Clinical","standard unit used in the US and internationally","[ft_i]","[FT_I]","5280",5280,false],[false,"fathom","[fth_i]","[FTH_I]","depth of water",1.8288000000000002,[1,0,0,0,0,0,0],"fth","intcust",false,null,null,1,false,false,0,"international fathoms","UCUM","Len","Nonclinical","unit used in the US and internationally to measure depth of water; same length as the US fathom","[ft_i]","[FT_I]","6",6,false],[false,"nautical mile","[nmi_i]","[NMI_I]","length",1852,[1,0,0,0,0,0,0],"n.mi","intcust",false,null,null,1,false,false,0,"nautical mile; nautical miles; international nautical mile; international nautical miles; nm; n.m.; nmi","UCUM","Len","Nonclinical","standard unit used in the US and internationally","m","M","1852",1852,false],[false,"knot","[kn_i]","[KN_I]","velocity",0.5144444444444445,[1,-1,0,0,0,0,0],"knot","intcust",false,null,null,1,false,false,0,"kn; kt; international knots","UCUM","Vel","Nonclinical","defined as equal to one nautical mile (1.852 km) per hour","[nmi_i]/h","[NMI_I]/H","1",1,false],[false,"square inch","[sin_i]","[SIN_I]","area",0.0006451600000000001,[2,0,0,0,0,0,0],null,"intcust",false,null,null,1,false,false,0,"in2; in^2; inches squared; sq inch; inches squared; international","UCUM","Area","Clinical","standard unit used in the US and internationally","[in_i]2","[IN_I]2","1",1,false],[false,"square foot","[sft_i]","[SFT_I]","area",0.09290304,[2,0,0,0,0,0,0],null,"intcust",false,null,null,1,false,false,0,"ft2; ft^2; ft squared; sq ft; feet; international","UCUM","Area","Clinical","standard unit used in the US and internationally","[ft_i]2","[FT_I]2","1",1,false],[false,"square yard","[syd_i]","[SYD_I]","area",0.8361273600000002,[2,0,0,0,0,0,0],null,"intcust",false,null,null,1,false,false,0,"yd2; yd^2; sq. yds; yards squared; international","UCUM","Area","Clinical","standard unit used in the US and internationally","[yd_i]2","[YD_I]2","1",1,false],[false,"cubic inch","[cin_i]","[CIN_I]","volume",0.000016387064000000003,[3,0,0,0,0,0,0],null,"intcust",false,null,null,1,false,false,0,"in3; in^3; in*3; inches^3; inches*3; cu. in; cu in; cubic inches; inches cubed; cin","UCUM","Vol","Clinical","standard unit used in the US and internationally","[in_i]3","[IN_I]3","1",1,false],[false,"cubic foot","[cft_i]","[CFT_I]","volume",0.028316846592000004,[3,0,0,0,0,0,0],null,"intcust",false,null,null,1,false,false,0,"ft3; ft^3; ft*3; cu. ft; cubic feet; cubed; [ft_i]3; international","UCUM","Vol","Clinical","","[ft_i]3","[FT_I]3","1",1,false],[false,"cubic yard","[cyd_i]","[CYD_I]","volume",0.7645548579840002,[3,0,0,0,0,0,0],"cu.yd","intcust",false,null,null,1,false,false,0,"cubic yards; cubic yds; cu yards; CYs; yards^3; yd^3; yds^3; yd3; yds3","UCUM","Vol","Nonclinical","standard unit used in the US and internationally","[yd_i]3","[YD_I]3","1",1,false],[false,"board foot","[bf_i]","[BF_I]","volume",0.002359737216,[3,0,0,0,0,0,0],null,"intcust",false,null,null,1,false,false,0,"BDFT; FBM; BF; board feet; international","UCUM","Vol","Nonclinical","unit of volume used to measure lumber","[in_i]3","[IN_I]3","144",144,false],[false,"cord","[cr_i]","[CR_I]","volume",3.6245563637760005,[3,0,0,0,0,0,0],null,"intcust",false,null,null,1,false,false,0,"crd I; international cords","UCUM","Vol","Nonclinical","unit of measure of dry volume used to measure firewood equal 128 ft3","[ft_i]3","[FT_I]3","128",128,false],[false,"mil","[mil_i]","[MIL_I]","length",0.000025400000000000004,[1,0,0,0,0,0,0],"mil","intcust",false,null,null,1,false,false,0,"thou, thousandth; mils; international","UCUM","Len","Clinical","equal to 0.001 international inch","[in_i]","[IN_I]","1e-3",0.001,false],[false,"circular mil","[cml_i]","[CML_I]","area",5.067074790974979e-10,[2,0,0,0,0,0,0],"circ.mil","intcust",false,null,null,1,false,false,0,"circular mils; cml I; international","UCUM","Area","Clinical","","[pi]/4.[mil_i]2","[PI]/4.[MIL_I]2","1",1,false],[false,"hand","[hd_i]","[HD_I]","height of horses",0.10160000000000001,[1,0,0,0,0,0,0],"hd","intcust",false,null,null,1,false,false,0,"hands; international","UCUM","Len","Nonclinical","used to measure horse height","[in_i]","[IN_I]","4",4,false],[false,"foot - US","[ft_us]","[FT_US]","length",0.3048006096012192,[1,0,0,0,0,0,0],"ft<sub>us</sub>","us-lengths",false,null,null,1,false,false,0,"US foot; foot US; us ft; ft us; height; visual distance; feet","UCUM","Len","Obsolete","Better to use [ft_i] which refers to the length used worldwide, including in the US;  [ft_us] may be confused with land survey units. ","m/3937","M/3937","1200",1200,false],[false,"yard - US","[yd_us]","[YD_US]","length",0.9144018288036575,[1,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"US yards; us yds; distance","UCUM","Len; Nrat","Obsolete","Better to use [yd_i] which refers to the length used worldwide, including in the US; [yd_us] refers to unit used in land surveys in the US","[ft_us]","[FT_US]","3",3,false],[false,"inch - US","[in_us]","[IN_US]","length",0.0254000508001016,[1,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"US inches; in us; us in; inch US","UCUM","Len","Obsolete","Better to use [in_i] which refers to the length used worldwide, including in the US","[ft_us]/12","[FT_US]/12","1",1,false],[false,"rod - US","[rd_us]","[RD_US]","length",5.029210058420117,[1,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"US rod; US rods; rd US; US rd","UCUM","Len","Obsolete","","[ft_us]","[FT_US]","16.5",16.5,false],[false,"Gunter's chain - US","[ch_us]","[CH_US]","length",20.116840233680467,[1,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"surveyor's chain; Surveyor's chain USA; Gunter’s measurement; surveyor’s measurement; Gunter's Chain USA","UCUM","Len","Obsolete","historical unit used for land survey used only in the US","[rd_us]","[RD_US]","4",4,false],[false,"link for Gunter's chain - US","[lk_us]","[LK_US]","length",0.20116840233680466,[1,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"Links for Gunter's Chain USA","UCUM","Len","Obsolete","","[ch_us]/100","[CH_US]/100","1",1,false],[false,"Ramden's chain - US","[rch_us]","[RCH_US]","length",30.480060960121918,[1,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"Ramsden's chain; engineer's chains","UCUM","Len","Obsolete","distance measuring device used for land survey","[ft_us]","[FT_US]","100",100,false],[false,"link for Ramden's chain - US","[rlk_us]","[RLK_US]","length",0.3048006096012192,[1,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"links for Ramsden's chain","UCUM","Len","Obsolete","","[rch_us]/100","[RCH_US]/100","1",1,false],[false,"fathom - US","[fth_us]","[FTH_US]","length",1.828803657607315,[1,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"US fathoms; fathom USA; fth us","UCUM","Len","Obsolete","same length as the international fathom - better to use international fathom ([fth_i])","[ft_us]","[FT_US]","6",6,false],[false,"furlong - US","[fur_us]","[FUR_US]","length",201.16840233680466,[1,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"US furlongs; fur us","UCUM","Len","Nonclinical","distance unit in horse racing","[rd_us]","[RD_US]","40",40,false],[false,"mile - US","[mi_us]","[MI_US]","length",1609.3472186944373,[1,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"U.S. Survey Miles; US statute miles; survey mi; US mi; distance","UCUM","Len","Nonclinical","Better to use [mi_i] which refers to the length used worldwide, including in the US","[fur_us]","[FUR_US]","8",8,false],[false,"acre - US","[acr_us]","[ACR_US]","area",4046.872609874252,[2,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"Acre USA Survey; Acre USA; survey acres","UCUM","Area","Nonclinical","an older unit based on pre 1959 US statute lengths that is still sometimes used in the US only for land survey purposes. ","[rd_us]2","[RD_US]2","160",160,false],[false,"square rod - US","[srd_us]","[SRD_US]","area",25.292953811714074,[2,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"rod2; rod^2; sq. rod; rods squared","UCUM","Area","Nonclinical","Used only in the US to measure land area, based on US statute land survey length units","[rd_us]2","[RD_US]2","1",1,false],[false,"square mile - US","[smi_us]","[SMI_US]","area",2589998.470319521,[2,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"mi2; mi^2; sq mi; miles squared","UCUM","Area","Nonclinical","historical unit used only in the US for land survey purposes (based on the US survey mile), not the internationally recognized [mi_i]","[mi_us]2","[MI_US]2","1",1,false],[false,"section","[sct]","[SCT]","area",2589998.470319521,[2,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"sct; sections","UCUM","Area","Nonclinical","tract of land approximately equal to 1 mile square containing 640 acres","[mi_us]2","[MI_US]2","1",1,false],[false,"township","[twp]","[TWP]","area",93239944.93150276,[2,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"twp; townships","UCUM","Area","Nonclinical","land measurement equal to 6 mile square","[sct]","[SCT]","36",36,false],[false,"mil - US","[mil_us]","[MIL_US]","length",0.0000254000508001016,[1,0,0,0,0,0,0],null,"us-lengths",false,null,null,1,false,false,0,"thou, thousandth; mils","UCUM","Len","Obsolete","better to use [mil_i] which is based on the internationally recognized inch","[in_us]","[IN_US]","1e-3",0.001,false],[false,"inch - British","[in_br]","[IN_BR]","length",0.025399980000000003,[1,0,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"imperial inches; imp in; br in; british inches","UCUM","Len","Obsolete","","cm","CM","2.539998",2.539998,false],[false,"foot - British","[ft_br]","[FT_BR]","length",0.30479976000000003,[1,0,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"British Foot; Imperial Foot; feet; imp fts; br fts","UCUM","Len","Obsolete","","[in_br]","[IN_BR]","12",12,false],[false,"rod - British","[rd_br]","[RD_BR]","length",5.02919604,[1,0,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"British rods; br rd","UCUM","Len","Obsolete","","[ft_br]","[FT_BR]","16.5",16.5,false],[false,"Gunter's chain - British","[ch_br]","[CH_BR]","length",20.11678416,[1,0,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"Gunter's Chain British; Gunters Chain British; Surveyor's Chain British","UCUM","Len","Obsolete","historical unit used for land survey used only in Great Britain","[rd_br]","[RD_BR]","4",4,false],[false,"link for Gunter's chain - British","[lk_br]","[LK_BR]","length",0.2011678416,[1,0,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"Links for Gunter's Chain British","UCUM","Len","Obsolete","","[ch_br]/100","[CH_BR]/100","1",1,false],[false,"fathom - British","[fth_br]","[FTH_BR]","length",1.82879856,[1,0,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"British fathoms; imperial fathoms; br fth; imp fth","UCUM","Len","Obsolete","","[ft_br]","[FT_BR]","6",6,false],[false,"pace - British","[pc_br]","[PC_BR]","length",0.7619994000000001,[1,0,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"British paces; br pc","UCUM","Len","Nonclinical","traditional unit of length equal to 152.4 centimeters, or 1.52 meter. ","[ft_br]","[FT_BR]","2.5",2.5,false],[false,"yard - British","[yd_br]","[YD_BR]","length",0.91439928,[1,0,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"British yards; Br yds; distance","UCUM","Len","Obsolete","","[ft_br]","[FT_BR]","3",3,false],[false,"mile - British","[mi_br]","[MI_BR]","length",1609.3427328000002,[1,0,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"imperial miles; British miles; English statute miles; imp mi, br mi","UCUM","Len","Obsolete","","[ft_br]","[FT_BR]","5280",5280,false],[false,"nautical mile - British","[nmi_br]","[NMI_BR]","length",1853.1825408000002,[1,0,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"British nautical miles; Imperial nautical miles; Admiralty miles; n.m. br; imp nm","UCUM","Len","Obsolete","","[ft_br]","[FT_BR]","6080",6080,false],[false,"knot - British","[kn_br]","[KN_BR]","velocity",0.5147729280000001,[1,-1,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"British knots; kn br; kt","UCUM","Vel","Obsolete","based on obsolete British nautical mile ","[nmi_br]/h","[NMI_BR]/H","1",1,false],[false,"acre","[acr_br]","[ACR_BR]","area",4046.850049400269,[2,0,0,0,0,0,0],null,"brit-length",false,null,null,1,false,false,0,"Imperial acres; British; a; ac; ar; acr","UCUM","Area","Nonclinical","the standard unit for acre used in the US and internationally","[yd_br]2","[YD_BR]2","4840",4840,false],[false,"gallon - US","[gal_us]","[GAL_US]","fluid volume",0.0037854117840000006,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"US gallons; US liquid gallon; gal us; Queen Anne's wine gallon","UCUM","Vol","Nonclinical","only gallon unit used in the US; [gal_us] is only used in some other countries in South American and Africa to measure gasoline volume","[in_i]3","[IN_I]3","231",231,false],[false,"barrel - US","[bbl_us]","[BBL_US]","fluid volume",0.158987294928,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"bbl","UCUM","Vol","Nonclinical","[bbl_us] is the standard unit for oil barrel, which is a unit only used in the US to measure the volume oil. ","[gal_us]","[GAL_US]","42",42,false],[false,"quart - US","[qt_us]","[QT_US]","fluid volume",0.0009463529460000001,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"US quarts; us qts","UCUM","Vol","Clinical","Used only in the US","[gal_us]/4","[GAL_US]/4","1",1,false],[false,"pint - US","[pt_us]","[PT_US]","fluid volume",0.00047317647300000007,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"US pints; pint US; liquid pint; pt us; us pt","UCUM","Vol","Clinical","Used only in the US","[qt_us]/2","[QT_US]/2","1",1,false],[false,"gill - US","[gil_us]","[GIL_US]","fluid volume",0.00011829411825000002,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"US gills; gil us","UCUM","Vol","Nonclinical","only used in the context of alcohol volume in the US","[pt_us]/4","[PT_US]/4","1",1,false],[false,"fluid ounce - US","[foz_us]","[FOZ_US]","fluid volume",0.000029573529562500005,[3,0,0,0,0,0,0],"oz fl","us-volumes",false,null,null,1,false,false,0,"US fluid ounces; fl ozs; FO; fl. oz.; foz us","UCUM","Vol","Clinical","unit used only in the US","[gil_us]/4","[GIL_US]/4","1",1,false],[false,"fluid dram - US","[fdr_us]","[FDR_US]","fluid volume",0.0000036966911953125006,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"US fluid drams; fdr us","UCUM","Vol","Nonclinical","equal to 1/8 US fluid ounce = 3.69 mL; used informally to mean small amount of liquor, especially Scotch whiskey","[foz_us]/8","[FOZ_US]/8","1",1,false],[false,"minim - US","[min_us]","[MIN_US]","fluid volume",6.1611519921875e-8,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"min US; US min; ♏ US","UCUM","Vol","Obsolete","","[fdr_us]/60","[FDR_US]/60","1",1,false],[false,"cord - US","[crd_us]","[CRD_US]","fluid volume",3.6245563637760005,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"US cord; US cords; crd us; us crd","UCUM","Vol","Nonclinical","unit of measure of dry volume used to measure firewood equal 128 ft3 (the same as international cord [cr_i])","[ft_i]3","[FT_I]3","128",128,false],[false,"bushel - US","[bu_us]","[BU_US]","dry volume",0.03523907016688001,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"US bushels; US bsh; US bu","UCUM","Vol","Obsolete","Historical unit of dry volume that is rarely used today","[in_i]3","[IN_I]3","2150.42",2150.42,false],[false,"gallon - historical","[gal_wi]","[GAL_WI]","dry volume",0.004404883770860001,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"Corn Gallon British; Dry Gallon US; Gallons Historical; Grain Gallon British; Winchester Corn Gallon; historical winchester gallons; wi gal","UCUM","Vol","Obsolete","historical unit of dry volume no longer used","[bu_us]/8","[BU_US]/8","1",1,false],[false,"peck - US","[pk_us]","[PK_US]","dry volume",0.008809767541720002,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"US pecks; US pk","UCUM","Vol","Nonclinical","unit of dry volume rarely used today (can be used to measure volume of apples)","[bu_us]/4","[BU_US]/4","1",1,false],[false,"dry quart - US","[dqt_us]","[DQT_US]","dry volume",0.0011012209427150002,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"dry quarts; dry quart US; US dry quart; dry qt; us dry qt; dqt; dqt us","UCUM","Vol","Nonclinical","historical unit of dry volume only in the US, but is rarely used today","[pk_us]/8","[PK_US]/8","1",1,false],[false,"dry pint - US","[dpt_us]","[DPT_US]","dry volume",0.0005506104713575001,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"dry pints; dry pint US; US dry pint; dry pt; dpt; dpt us","UCUM","Vol","Nonclinical","historical unit of dry volume only in the US, but is rarely used today","[dqt_us]/2","[DQT_US]/2","1",1,false],[false,"tablespoon - US","[tbs_us]","[TBS_US]","volume",0.000014786764781250002,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"Tbs; tbsp; tbs us; US tablespoons","UCUM","Vol","Clinical","unit defined as 0.5 US fluid ounces or 3 teaspoons - used only in the US. See [tbs_m] for the unit used internationally and in the US for nutrional labelling. ","[foz_us]/2","[FOZ_US]/2","1",1,false],[false,"teaspoon - US","[tsp_us]","[TSP_US]","volume",0.0000049289215937500005,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"tsp; t; US teaspoons","UCUM","Vol","Nonclinical","unit defined as 1/6 US fluid ounces - used only in the US. See [tsp_m] for the unit used internationally and in the US for nutrional labelling. ","[tbs_us]/3","[TBS_US]/3","1",1,false],[false,"cup - US customary","[cup_us]","[CUP_US]","volume",0.00023658823650000004,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"cup us; us cups","UCUM","Vol","Nonclinical","Unit defined as 1/2 US pint or 16 US tablespoons ≈ 236.59 mL, which is not the standard unit defined by the FDA of 240 mL - see [cup_m] (metric cup)","[tbs_us]","[TBS_US]","16",16,false],[false,"fluid ounce - metric","[foz_m]","[FOZ_M]","fluid volume",0.000029999999999999997,[3,0,0,0,0,0,0],"oz fl","us-volumes",false,null,null,1,false,false,0,"metric fluid ounces; fozs m; fl ozs m","UCUM","Vol","Clinical","unit used only in the US for nutritional labelling, as set by the FDA","mL","ML","30",30,false],[false,"cup - US legal","[cup_m]","[CUP_M]","volume",0.00023999999999999998,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"cup m; metric cups","UCUM","Vol","Clinical","standard unit equal to 240 mL used in the US for nutritional labelling, as defined by the FDA. Note that this is different from the US customary cup (236.59 mL) and the metric cup used in Commonwealth nations (250 mL).","mL","ML","240",240,false],[false,"teaspoon - metric","[tsp_m]","[TSP_M]","volume",0.0000049999999999999996,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"tsp; t; metric teaspoons","UCUM","Vol","Clinical","standard unit used in the US and internationally","mL","mL","5",5,false],[false,"tablespoon - metric","[tbs_m]","[TBS_M]","volume",0.000014999999999999999,[3,0,0,0,0,0,0],null,"us-volumes",false,null,null,1,false,false,0,"metric tablespoons; Tbs; tbsp; T; tbs m","UCUM","Vol","Clinical","standard unit used in the US and internationally","mL","mL","15",15,false],[false,"gallon- British","[gal_br]","[GAL_BR]","volume",0.004546090000000001,[3,0,0,0,0,0,0],null,"brit-volumes",false,null,null,1,false,false,0,"imperial gallons, UK gallons; British gallons; br gal; imp gal","UCUM","Vol","Nonclinical","Used only in Great Britain and other Commonwealth countries","l","L","4.54609",4.54609,false],[false,"peck - British","[pk_br]","[PK_BR]","volume",0.009092180000000002,[3,0,0,0,0,0,0],null,"brit-volumes",false,null,null,1,false,false,0,"imperial pecks; British pecks; br pk; imp pk","UCUM","Vol","Nonclinical","unit of dry volume rarely used today (can be used to measure volume of apples)","[gal_br]","[GAL_BR]","2",2,false],[false,"bushel - British","[bu_br]","[BU_BR]","volume",0.03636872000000001,[3,0,0,0,0,0,0],null,"brit-volumes",false,null,null,1,false,false,0,"British bushels; imperial; br bsh; br bu; imp","UCUM","Vol","Obsolete","Historical unit of dry volume that is rarely used today","[pk_br]","[PK_BR]","4",4,false],[false,"quart - British","[qt_br]","[QT_BR]","volume",0.0011365225000000002,[3,0,0,0,0,0,0],null,"brit-volumes",false,null,null,1,false,false,0,"British quarts; imperial quarts; br qts","UCUM","Vol","Clinical","Used only in Great Britain and other Commonwealth countries","[gal_br]/4","[GAL_BR]/4","1",1,false],[false,"pint - British","[pt_br]","[PT_BR]","volume",0.0005682612500000001,[3,0,0,0,0,0,0],null,"brit-volumes",false,null,null,1,false,false,0,"British pints; imperial pints; pt br; br pt; imp pt; pt imp","UCUM","Vol","Clinical","Used only in Great Britain and other Commonwealth countries","[qt_br]/2","[QT_BR]/2","1",1,false],[false,"gill - British","[gil_br]","[GIL_BR]","volume",0.00014206531250000003,[3,0,0,0,0,0,0],null,"brit-volumes",false,null,null,1,false,false,0,"imperial gills; British gills; imp gill, br gill","UCUM","Vol","Nonclinical","only used in the context of alcohol volume in Great Britain","[pt_br]/4","[PT_BR]/4","1",1,false],[false,"fluid ounce - British","[foz_br]","[FOZ_BR]","volume",0.000028413062500000005,[3,0,0,0,0,0,0],null,"brit-volumes",false,null,null,1,false,false,0,"British fluid ounces; Imperial fluid ounces; br fozs; imp fozs; br fl ozs","UCUM","Vol","Clinical","Used only in Great Britain and other Commonwealth countries","[gil_br]/5","[GIL_BR]/5","1",1,false],[false,"fluid dram - British","[fdr_br]","[FDR_BR]","volume",0.0000035516328125000006,[3,0,0,0,0,0,0],null,"brit-volumes",false,null,null,1,false,false,0,"British fluid drams; fdr br","UCUM","Vol","Nonclinical","equal to 1/8 Imperial fluid ounce = 3.55 mL; used informally to mean small amount of liquor, especially Scotch whiskey","[foz_br]/8","[FOZ_BR]/8","1",1,false],[false,"minim - British","[min_br]","[MIN_BR]","volume",5.919388020833334e-8,[3,0,0,0,0,0,0],null,"brit-volumes",false,null,null,1,false,false,0,"min br; br min; ♏ br","UCUM","Vol","Obsolete","","[fdr_br]/60","[FDR_BR]/60","1",1,false],[false,"grain","[gr]","[GR]","mass",0.06479891,[0,0,1,0,0,0,0],null,"avoirdupois",false,null,null,1,false,false,0,"gr; grains","UCUM","Mass","Nonclinical","an apothecary measure of mass rarely used today","mg","MG","64.79891",64.79891,false],[false,"pound","[lb_av]","[LB_AV]","mass",453.59237,[0,0,1,0,0,0,0],"lb","avoirdupois",false,null,null,1,false,false,0,"avoirdupois pounds, international pounds; av lbs; pounds","UCUM","Mass","Clinical","standard unit used in the US and internationally","[gr]","[GR]","7000",7000,false],[false,"pound force - US","[lbf_av]","[LBF_AV]","force",4448.2216152605,[1,-2,1,0,0,0,0],"lbf","const",false,null,null,1,false,false,0,"lbfs; US lbf; US pound forces","UCUM","Force","Clinical","only rarely needed in health care - see [lb_av] which is the more common unit to express weight","[lb_av].[g]","[LB_AV].[G]","1",1,false],[false,"ounce","[oz_av]","[OZ_AV]","mass",28.349523125,[0,0,1,0,0,0,0],"oz","avoirdupois",false,null,null,1,false,false,0,"ounces; international ounces; avoirdupois ounces; av ozs","UCUM","Mass","Clinical","standard unit used in the US and internationally","[lb_av]/16","[LB_AV]/16","1",1,false],[false,"Dram mass unit","[dr_av]","[DR_AV]","mass",1.7718451953125,[0,0,1,0,0,0,0],null,"avoirdupois",false,null,null,1,false,false,0,"Dram; drams avoirdupois; avoidupois dram; international dram","UCUM","Mass","Clinical","unit from the avoirdupois system, which is used in the US and internationally","[oz_av]/16","[OZ_AV]/16","1",1,false],[false,"short hundredweight","[scwt_av]","[SCWT_AV]","mass",45359.237,[0,0,1,0,0,0,0],null,"avoirdupois",false,null,null,1,false,false,0,"hundredweights; s cwt; scwt; avoirdupois","UCUM","Mass","Nonclinical","Used only in the US to equal 100 pounds","[lb_av]","[LB_AV]","100",100,false],[false,"long hundredweight","[lcwt_av]","[LCWT_AV]","mass",50802.345440000005,[0,0,1,0,0,0,0],null,"avoirdupois",false,null,null,1,false,false,0,"imperial hundredweights; imp cwt; lcwt; avoirdupois","UCUM","Mass","Obsolete","","[lb_av]","[LB_AV]","112",112,false],[false,"short ton - US","[ston_av]","[STON_AV]","mass",907184.74,[0,0,1,0,0,0,0],null,"avoirdupois",false,null,null,1,false,false,0,"ton; US tons; avoirdupois tons","UCUM","Mass","Clinical","Used only in the US","[scwt_av]","[SCWT_AV]","20",20,false],[false,"long ton - British","[lton_av]","[LTON_AV]","mass",1016046.9088000001,[0,0,1,0,0,0,0],null,"avoirdupois",false,null,null,1,false,false,0,"imperial tons; weight tons; British long tons; long ton avoirdupois","UCUM","Mass","Nonclinical","Used only in Great Britain and other Commonwealth countries","[lcwt_av]","[LCWT_AV]","20",20,false],[false,"stone - British","[stone_av]","[STONE_AV]","mass",6350.293180000001,[0,0,1,0,0,0,0],null,"avoirdupois",false,null,null,1,false,false,0,"British stones; avoirdupois","UCUM","Mass","Nonclinical","Used primarily in the UK and Ireland to measure body weight","[lb_av]","[LB_AV]","14",14,false],[false,"pennyweight - troy","[pwt_tr]","[PWT_TR]","mass",1.5551738400000001,[0,0,1,0,0,0,0],null,"troy",false,null,null,1,false,false,0,"dwt; denarius weights","UCUM","Mass","Obsolete","historical unit used to measure mass and cost of precious metals","[gr]","[GR]","24",24,false],[false,"ounce - troy","[oz_tr]","[OZ_TR]","mass",31.103476800000003,[0,0,1,0,0,0,0],null,"troy",false,null,null,1,false,false,0,"troy ounces; tr ozs","UCUM","Mass","Nonclinical","unit of mass for precious metals and gemstones only","[pwt_tr]","[PWT_TR]","20",20,false],[false,"pound - troy","[lb_tr]","[LB_TR]","mass",373.2417216,[0,0,1,0,0,0,0],null,"troy",false,null,null,1,false,false,0,"troy pounds; tr lbs","UCUM","Mass","Nonclinical","only used for weighing precious metals","[oz_tr]","[OZ_TR]","12",12,false],[false,"scruple","[sc_ap]","[SC_AP]","mass",1.2959782,[0,0,1,0,0,0,0],null,"apoth",false,null,null,1,false,false,0,"scruples; sc ap","UCUM","Mass","Obsolete","","[gr]","[GR]","20",20,false],[false,"dram - apothecary","[dr_ap]","[DR_AP]","mass",3.8879346,[0,0,1,0,0,0,0],null,"apoth",false,null,null,1,false,false,0,"ʒ; drachm; apothecaries drams; dr ap; dram ap","UCUM","Mass","Nonclinical","unit still used in the US occasionally to measure amount of drugs in pharmacies","[sc_ap]","[SC_AP]","3",3,false],[false,"ounce - apothecary","[oz_ap]","[OZ_AP]","mass",31.1034768,[0,0,1,0,0,0,0],null,"apoth",false,null,null,1,false,false,0,"apothecary ounces; oz ap; ap ozs; ozs ap","UCUM","Mass","Obsolete","","[dr_ap]","[DR_AP]","8",8,false],[false,"pound - apothecary","[lb_ap]","[LB_AP]","mass",373.2417216,[0,0,1,0,0,0,0],null,"apoth",false,null,null,1,false,false,0,"apothecary pounds; apothecaries pounds; ap lb; lb ap; ap lbs; lbs ap","UCUM","Mass","Obsolete","","[oz_ap]","[OZ_AP]","12",12,false],[false,"ounce - metric","[oz_m]","[OZ_M]","mass",28,[0,0,1,0,0,0,0],null,"apoth",false,null,null,1,false,false,0,"metric ounces; m ozs","UCUM","Mass","Clinical","see [oz_av] (the avoirdupois ounce) for the standard ounce used internationally; [oz_m] is equal to 28 grams and is based on the apothecaries' system of mass units which is used in some US pharmacies. ","g","g","28",28,false],[false,"line","[lne]","[LNE]","length",0.002116666666666667,[1,0,0,0,0,0,0],null,"typeset",false,null,null,1,false,false,0,"British lines; br L; L; l","UCUM","Len","Obsolete","","[in_i]/12","[IN_I]/12","1",1,false],[false,"point (typography)","[pnt]","[PNT]","length",0.0003527777777777778,[1,0,0,0,0,0,0],null,"typeset",false,null,null,1,false,false,0,"DTP points; desktop publishing point; pt; pnt","UCUM","Len","Nonclinical","typography unit for typesetter's length","[lne]/6","[LNE]/6","1",1,false],[false,"pica (typography)","[pca]","[PCA]","length",0.004233333333333334,[1,0,0,0,0,0,0],null,"typeset",false,null,null,1,false,false,0,"picas","UCUM","Len","Nonclinical","typography unit for typesetter's length","[pnt]","[PNT]","12",12,false],[false,"Printer's point (typography)","[pnt_pr]","[PNT_PR]","length",0.00035145980000000004,[1,0,0,0,0,0,0],null,"typeset",false,null,null,1,false,false,0,"pnt pr","UCUM","Len","Nonclinical","typography unit for typesetter's length","[in_i]","[IN_I]","0.013837",0.013837,false],[false,"Printer's pica  (typography)","[pca_pr]","[PCA_PR]","length",0.004217517600000001,[1,0,0,0,0,0,0],null,"typeset",false,null,null,1,false,false,0,"pca pr; Printer's picas","UCUM","Len","Nonclinical","typography unit for typesetter's length","[pnt_pr]","[PNT_PR]","12",12,false],[false,"pied","[pied]","[PIED]","length",0.3248,[1,0,0,0,0,0,0],null,"typeset",false,null,null,1,false,false,0,"pieds du roi; Paris foot; royal; French; feet","UCUM","Len","Obsolete","","cm","CM","32.48",32.48,false],[false,"pouce","[pouce]","[POUCE]","length",0.027066666666666666,[1,0,0,0,0,0,0],null,"typeset",false,null,null,1,false,false,0,"historical French inches; French royal inches","UCUM","Len","Obsolete","","[pied]/12","[PIED]/12","1",1,false],[false,"ligne","[ligne]","[LIGNE]","length",0.0022555555555555554,[1,0,0,0,0,0,0],null,"typeset",false,null,null,1,false,false,0,"Paris lines; lignes","UCUM","Len","Obsolete","","[pouce]/12","[POUCE]/12","1",1,false],[false,"didot","[didot]","[DIDOT]","length",0.0003759259259259259,[1,0,0,0,0,0,0],null,"typeset",false,null,null,1,false,false,0,"Didot point; dd; Didots Point; didots; points","UCUM","Len","Obsolete","typography unit for typesetter's length","[ligne]/6","[LIGNE]/6","1",1,false],[false,"cicero","[cicero]","[CICERO]","length",0.004511111111111111,[1,0,0,0,0,0,0],null,"typeset",false,null,null,1,false,false,0,"Didot's pica; ciceros; picas","UCUM","Len","Obsolete","typography unit for typesetter's length","[didot]","[DIDOT]","12",12,false],[false,"degrees Fahrenheit","[degF]","[DEGF]","temperature",0.5555555555555556,[0,0,0,0,1,0,0],"°F","heat",false,null,"degF",1,true,false,0,"°F; deg F","UCUM","Temp","Clinical","","K",null,null,0.5555555555555556,false],[false,"degrees Rankine","[degR]","[degR]","temperature",0.5555555555555556,[0,0,0,0,1,0,0],"°R","heat",false,null,null,1,false,false,0,"°R; °Ra; Rankine","UCUM","Temp","Obsolete","Replaced by Kelvin","K/9","K/9","5",5,false],[false,"degrees Réaumur","[degRe]","[degRe]","temperature",1.25,[0,0,0,0,1,0,0],"°Ré","heat",false,null,"degRe",1,true,false,0,"°Ré, °Re, °r; Réaumur; degree Reaumur; Reaumur","UCUM","Temp","Obsolete","replaced by Celsius","K",null,null,1.25,false],[false,"calorie at 15°C","cal_[15]","CAL_[15]","energy",4185.8,[2,-2,1,0,0,0,0],"cal<sub>15°C</sub>","heat",true,null,null,1,false,false,0,"calorie 15 C; cals 15 C; calories at 15 C","UCUM","Enrg","Nonclinical","equal to 4.1855 joules; calorie most often used in engineering","J","J","4.18580",4.1858,false],[false,"calorie at 20°C","cal_[20]","CAL_[20]","energy",4181.9,[2,-2,1,0,0,0,0],"cal<sub>20°C</sub>","heat",true,null,null,1,false,false,0,"calorie 20 C; cal 20 C; calories at 20 C","UCUM","Enrg","Clinical","equal to 4.18190  joules. ","J","J","4.18190",4.1819,false],[false,"mean calorie","cal_m","CAL_M","energy",4190.0199999999995,[2,-2,1,0,0,0,0],"cal<sub>m</sub>","heat",true,null,null,1,false,false,0,"mean cals; mean calories","UCUM","Enrg","Clinical","equal to 4.19002 joules. ","J","J","4.19002",4.19002,false],[false,"international table calorie","cal_IT","CAL_IT","energy",4186.8,[2,-2,1,0,0,0,0],"cal<sub>IT</sub>","heat",true,null,null,1,false,false,0,"calories IT; IT cals; international steam table calories","UCUM","Enrg","Nonclinical","used in engineering steam tables and defined as 1/860 international watt-hour; equal to 4.1868 joules","J","J","4.1868",4.1868,false],[false,"thermochemical calorie","cal_th","CAL_TH","energy",4184,[2,-2,1,0,0,0,0],"cal<sub>th</sub>","heat",true,null,null,1,false,false,0,"thermochemical calories; th cals","UCUM","Enrg","Clinical","equal to 4.184 joules; used as the unit in medicine and biochemistry (equal to cal)","J","J","4.184",4.184,false],[false,"calorie","cal","CAL","energy",4184,[2,-2,1,0,0,0,0],"cal","heat",true,null,null,1,false,false,0,"gram calories; small calories","UCUM","Enrg","Clinical","equal to 4.184 joules (the same value as the thermochemical calorie, which is the most common calorie used in medicine and biochemistry)","cal_th","CAL_TH","1",1,false],[false,"nutrition label Calories","[Cal]","[CAL]","energy",4184000,[2,-2,1,0,0,0,0],"Cal","heat",false,null,null,1,false,false,0,"food calories; Cal; kcal","UCUM","Eng","Clinical","","kcal_th","KCAL_TH","1",1,false],[false,"British thermal unit at 39°F","[Btu_39]","[BTU_39]","energy",1059670,[2,-2,1,0,0,0,0],"Btu<sub>39°F</sub>","heat",false,null,null,1,false,false,0,"BTU 39F; BTU 39 F; B.T.U. 39 F; B.Th.U. 39 F; BThU 39 F; British thermal units","UCUM","Eng","Nonclinical","equal to 1.05967 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries","kJ","kJ","1.05967",1.05967,false],[false,"British thermal unit at 59°F","[Btu_59]","[BTU_59]","energy",1054800,[2,-2,1,0,0,0,0],"Btu<sub>59°F</sub>","heat",false,null,null,1,false,false,0,"BTU 59 F; BTU 59F; B.T.U. 59 F; B.Th.U. 59 F; BThU 59F; British thermal units","UCUM","Eng","Nonclinical","equal to  1.05480 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries","kJ","kJ","1.05480",1.0548,false],[false,"British thermal unit at 60°F","[Btu_60]","[BTU_60]","energy",1054680,[2,-2,1,0,0,0,0],"Btu<sub>60°F</sub>","heat",false,null,null,1,false,false,0,"BTU 60 F; BTU 60F; B.T.U. 60 F; B.Th.U. 60 F; BThU 60 F; British thermal units 60 F","UCUM","Eng","Nonclinical","equal to 1.05468 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries","kJ","kJ","1.05468",1.05468,false],[false,"mean British thermal unit","[Btu_m]","[BTU_M]","energy",1055870,[2,-2,1,0,0,0,0],"Btu<sub>m</sub>","heat",false,null,null,1,false,false,0,"BTU mean; B.T.U. mean; B.Th.U. mean; BThU mean; British thermal units mean; ","UCUM","Eng","Nonclinical","equal to 1.05587 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries","kJ","kJ","1.05587",1.05587,false],[false,"international table British thermal unit","[Btu_IT]","[BTU_IT]","energy",1055055.85262,[2,-2,1,0,0,0,0],"Btu<sub>IT</sub>","heat",false,null,null,1,false,false,0,"BTU IT; B.T.U. IT; B.Th.U. IT; BThU IT; British thermal units IT","UCUM","Eng","Nonclinical","equal to 1.055 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries","kJ","kJ","1.05505585262",1.05505585262,false],[false,"thermochemical British thermal unit","[Btu_th]","[BTU_TH]","energy",1054350,[2,-2,1,0,0,0,0],"Btu<sub>th</sub>","heat",false,null,null,1,false,false,0,"BTU Th; B.T.U. Th; B.Th.U. Th; BThU Th; thermochemical British thermal units","UCUM","Eng","Nonclinical","equal to 1.054350 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries","kJ","kJ","1.054350",1.05435,false],[false,"British thermal unit","[Btu]","[BTU]","energy",1054350,[2,-2,1,0,0,0,0],"btu","heat",false,null,null,1,false,false,0,"BTU; B.T.U. ; B.Th.U.; BThU; British thermal units","UCUM","Eng","Nonclinical","equal to the thermochemical British thermal unit equal to 1.054350 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries","[Btu_th]","[BTU_TH]","1",1,false],[false,"horsepower - mechanical","[HP]","[HP]","power",745699.8715822703,[2,-3,1,0,0,0,0],null,"heat",false,null,null,1,false,false,0,"imperial horsepowers","UCUM","EngRat","Nonclinical","refers to mechanical horsepower, which is unit used to measure engine power primarily in the US. ","[ft_i].[lbf_av]/s","[FT_I].[LBF_AV]/S","550",550,false],[false,"tex","tex","TEX","linear mass density (of textile thread)",0.001,[-1,0,1,0,0,0,0],"tex","heat",true,null,null,1,false,false,0,"linear mass density; texes","UCUM","","Clinical","unit of linear mass density for fibers equal to gram per 1000 meters","g/km","G/KM","1",1,false],[false,"Denier (linear mass density)","[den]","[DEN]","linear mass density (of textile thread)",0.0001111111111111111,[-1,0,1,0,0,0,0],"den","heat",false,null,null,1,false,false,0,"den; deniers","UCUM","","Nonclinical","equal to the mass in grams per 9000 meters of the fiber (1 denier = 1 strand of silk)","g/9/km","G/9/KM","1",1,false],[false,"meter of water column","m[H2O]","M[H2O]","pressure",9806650,[-1,-2,1,0,0,0,0],"m HO<sub><r>2</r></sub>","clinical",true,null,null,1,false,false,0,"mH2O; m H2O; meters of water column; metres; pressure","UCUM","Pres","Clinical","","kPa","KPAL","980665e-5",9.80665,false],[false,"meter of mercury column","m[Hg]","M[HG]","pressure",133322000,[-1,-2,1,0,0,0,0],"m Hg","clinical",true,null,null,1,false,false,0,"mHg; m Hg; meters of mercury column; metres; pressure","UCUM","Pres","Clinical","","kPa","KPAL","133.3220",133.322,false],[false,"inch of water column","[in_i'H2O]","[IN_I'H2O]","pressure",249088.91000000003,[-1,-2,1,0,0,0,0],"in HO<sub><r>2</r></sub>","clinical",false,null,null,1,false,false,0,"inches WC; inAq; in H2O; inch of water gauge; iwg; pressure","UCUM","Pres","Clinical","unit of pressure, especially in respiratory and ventilation care","m[H2O].[in_i]/m","M[H2O].[IN_I]/M","1",1,false],[false,"inch of mercury column","[in_i'Hg]","[IN_I'HG]","pressure",3386378.8000000003,[-1,-2,1,0,0,0,0],"in Hg","clinical",false,null,null,1,false,false,0,"inHg; in Hg; pressure; inches","UCUM","Pres","Clinical","unit of pressure used in US to measure barometric pressure and occasionally blood pressure (see mm[Hg] for unit used internationally)","m[Hg].[in_i]/m","M[HG].[IN_I]/M","1",1,false],[false,"peripheral vascular resistance unit","[PRU]","[PRU]","fluid resistance",133322000000,[-4,-1,1,0,0,0,0],"P.R.U.","clinical",false,null,null,1,false,false,0,"peripheral vascular resistance units; peripheral resistance unit; peripheral resistance units; PRU","UCUM","FldResist","Clinical","used to assess blood flow in the capillaries; equal to 1 mmH.min/mL = 133.3 Pa·min/mL","mm[Hg].s/ml","MM[HG].S/ML","1",1,false],[false,"Wood unit","[wood'U]","[WOOD'U]","fluid resistance",7999320000,[-4,-1,1,0,0,0,0],"Wood U.","clinical",false,null,null,1,false,false,0,"hybrid reference units; HRU; mmHg.min/L; vascular resistance","UCUM","Pres","Clinical","simplified unit of measurement for for measuring pulmonary vascular resistance that uses pressure; equal to mmHg.min/L","mm[Hg].min/L","MM[HG].MIN/L","1",1,false],[false,"diopter (lens)","[diop]","[DIOP]","refraction of a lens",1,[1,0,0,0,0,0,0],"dpt","clinical",false,null,"inv",1,false,false,0,"diopters; diop; dioptre; dpt; refractive power","UCUM","InvLen","Clinical","unit of optical power of lens represented by inverse meters (m^-1)","m","/M","1",1,false],[false,"prism diopter (magnifying power)","[p'diop]","[P'DIOP]","refraction of a prism",1,[0,0,0,1,0,0,0],"PD","clinical",false,null,"tanTimes100",1,true,false,0,"diopters; dioptres; p diops; pdiop; dpt; pdptr; Δ; cm/m; centimeter per meter; centimetre; metre","UCUM","Angle","Clinical","unit for prism correction in eyeglass prescriptions","rad",null,null,1,false],[false,"percent of slope","%[slope]","%[SLOPE]","slope",0.017453292519943295,[0,0,0,1,0,0,0],"%","clinical",false,null,"100tan",1,true,false,0,"% slope; %slope; percents slopes","UCUM","VelFr; ElpotRatFr; VelRtoFr; AccelFr","Clinical","","deg",null,null,1,false],[false,"mesh","[mesh_i]","[MESH_I]","lineic number",0.025400000000000002,[1,0,0,0,0,0,0],null,"clinical",false,null,"inv",1,false,false,0,"meshes","UCUM","NLen (lineic number)","Clinical","traditional unit of length defined as the number of strands or particles per inch","[in_i]","/[IN_I]","1",1,false],[false,"French (catheter gauge) ","[Ch]","[CH]","gauge of catheters",0.0003333333333333333,[1,0,0,0,0,0,0],"Ch","clinical",false,null,null,1,false,false,0,"Charrières, French scales; French gauges; Fr, Fg, Ga, FR, Ch","UCUM","Len; Circ; Diam","Clinical","","mm/3","MM/3","1",1,false],[false,"drop - metric (1/20 mL)","[drp]","[DRP]","volume",5e-8,[3,0,0,0,0,0,0],"drp","clinical",false,null,null,1,false,false,0,"drop dosing units; metric drops; gtt","UCUM","Vol","Clinical","standard unit used in the US and internationally for clinical medicine but note that although [drp] is defined as 1/20 milliliter, in practice, drop sizes will vary due to external factors","ml/20","ML/20","1",1,false],[false,"Hounsfield unit","[hnsf'U]","[HNSF'U]","x-ray attenuation",1,[0,0,0,0,0,0,0],"HF","clinical",false,null,null,1,false,false,0,"HU; units","UCUM","","Clinical","used to measure X-ray attenuation, especially in CT scans.","1","1","1",1,false],[false,"Metabolic Equivalent of Task ","[MET]","[MET]","metabolic cost of physical activity",5.833333333333334e-11,[3,-1,-1,0,0,0,0],"MET","clinical",false,null,null,1,false,false,0,"metabolic equivalents","UCUM","RelEngRat","Clinical","unit used to measure rate of energy expenditure per power in treadmill and other functional tests","mL/min/kg","ML/MIN/KG","3.5",3.5,false],[false,"homeopathic potency of decimal series (retired)","[hp'_X]","[HP'_X]","homeopathic potency (retired)",1,[0,0,0,0,0,0,0],"X","clinical",false,null,"hpX",1,true,false,0,null,"UCUM",null,null,null,"1",null,null,1,false],[false,"homeopathic potency of centesimal series (retired)","[hp'_C]","[HP'_C]","homeopathic potency (retired)",1,[0,0,0,0,0,0,0],"C","clinical",false,null,"hpC",1,true,false,0,null,"UCUM",null,null,null,"1",null,null,1,false],[false,"homeopathic potency of millesimal series (retired)","[hp'_M]","[HP'_M]","homeopathic potency (retired)",1,[0,0,0,0,0,0,0],"M","clinical",false,null,"hpM",1,true,false,0,null,"UCUM",null,null,null,"1",null,null,1,false],[false,"homeopathic potency of quintamillesimal series (retired)","[hp'_Q]","[HP'_Q]","homeopathic potency (retired)",1,[0,0,0,0,0,0,0],"Q","clinical",false,null,"hpQ",1,true,false,0,null,"UCUM",null,null,null,"1",null,null,1,false],[false,"homeopathic potency of decimal hahnemannian series","[hp_X]","[HP_X]","homeopathic potency (Hahnemann)",1,[0,0,0,0,0,0,0],"X","clinical",false,null,null,1,false,true,0,null,"UCUM",null,null,null,"1","1","1",1,false],[false,"homeopathic potency of centesimal hahnemannian series","[hp_C]","[HP_C]","homeopathic potency (Hahnemann)",1,[0,0,0,0,0,0,0],"C","clinical",false,null,null,1,false,true,0,null,"UCUM",null,null,null,"1","1","1",1,false],[false,"homeopathic potency of millesimal hahnemannian series","[hp_M]","[HP_M]","homeopathic potency (Hahnemann)",1,[0,0,0,0,0,0,0],"M","clinical",false,null,null,1,false,true,0,null,"UCUM",null,null,null,"1","1","1",1,false],[false,"homeopathic potency of quintamillesimal hahnemannian series","[hp_Q]","[HP_Q]","homeopathic potency (Hahnemann)",1,[0,0,0,0,0,0,0],"Q","clinical",false,null,null,1,false,true,0,null,"UCUM",null,null,null,"1","1","1",1,false],[false,"homeopathic potency of decimal korsakovian series","[kp_X]","[KP_X]","homeopathic potency (Korsakov)",1,[0,0,0,0,0,0,0],"X","clinical",false,null,null,1,false,true,0,null,"UCUM",null,null,null,"1","1","1",1,false],[false,"homeopathic potency of centesimal korsakovian series","[kp_C]","[KP_C]","homeopathic potency (Korsakov)",1,[0,0,0,0,0,0,0],"C","clinical",false,null,null,1,false,true,0,null,"UCUM",null,null,null,"1","1","1",1,false],[false,"homeopathic potency of millesimal korsakovian series","[kp_M]","[KP_M]","homeopathic potency (Korsakov)",1,[0,0,0,0,0,0,0],"M","clinical",false,null,null,1,false,true,0,null,"UCUM",null,null,null,"1","1","1",1,false],[false,"homeopathic potency of quintamillesimal korsakovian series","[kp_Q]","[KP_Q]","homeopathic potency (Korsakov)",1,[0,0,0,0,0,0,0],"Q","clinical",false,null,null,1,false,true,0,null,"UCUM",null,null,null,"1","1","1",1,false],[false,"equivalent","eq","EQ","amount of substance",6.0221367e+23,[0,0,0,0,0,0,0],"eq","chemical",true,null,null,1,false,false,1,"equivalents","UCUM","Sub","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"osmole","osm","OSM","amount of substance (dissolved particles)",6.0221367e+23,[0,0,0,0,0,0,0],"osm","chemical",true,null,null,1,false,false,1,"osmoles; osmols","UCUM","Osmol","Clinical","the number of moles of solute that contribute to the osmotic pressure of a solution","mol","MOL","1",1,false],[false,"pH","[pH]","[PH]","acidity",6.0221366999999994e+26,[-3,0,0,0,0,0,0],"pH","chemical",false,null,"pH",1,true,false,0,"pH scale","UCUM","LogCnc","Clinical","Log concentration of H+","mol/l",null,null,1,false],[false,"gram percent","g%","G%","mass concentration",10000,[-3,0,1,0,0,0,0],"g%","chemical",true,null,null,1,false,false,0,"gram %; gram%; grams per deciliter; g/dL; gm per dL; gram percents","UCUM","MCnc","Clinical","equivalent to unit gram per deciliter (g/dL), a unit often used in medical tests to represent solution concentrations","g/dl","G/DL","1",1,false],[false,"Svedberg unit","[S]","[S]","sedimentation coefficient",1e-13,[0,1,0,0,0,0,0],"S","chemical",false,null,null,1,false,false,0,"Sv; 10^-13 seconds; 100 fs; 100 femtoseconds","UCUM","Time","Clinical","unit of time used in measuring particle's sedimentation rate, usually after centrifugation. ","s","10*-13.S","1",1e-13,false],[false,"high power field (microscope)","[HPF]","[HPF]","view area in microscope",1,[0,0,0,0,0,0,0],"HPF","chemical",false,null,null,1,false,false,0,"HPF","UCUM","Area","Clinical","area visible under the maximum magnification power of the objective in microscopy (usually 400x)\n","1","1","1",1,false],[false,"low power field (microscope)","[LPF]","[LPF]","view area in microscope",1,[0,0,0,0,0,0,0],"LPF","chemical",false,null,null,1,false,false,0,"LPF; fields","UCUM","Area","Clinical","area visible under the low magnification of the objective in microscopy (usually 100 x)\n","1","1","100",100,false],[false,"katal","kat","KAT","catalytic activity",6.0221367e+23,[0,-1,0,0,0,0,0],"kat","chemical",true,null,null,1,false,false,1,"mol/secs; moles per second; mol*sec-1; mol*s-1; mol.s-1; katals; catalytic activity; enzymatic; enzyme units; activities","UCUM","CAct","Clinical","kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.","mol/s","MOL/S","1",1,false],[false,"enzyme unit","U","U","catalytic activity",10036894500000000,[0,-1,0,0,0,0,0],"U","chemical",true,null,null,1,false,false,1,"micromoles per minute; umol/min; umol per minute; umol min-1; enzymatic activity; enzyme activity","UCUM","CAct","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"international unit - arbitrary","[iU]","[IU]","arbitrary",1,[0,0,0,0,0,0,0],"IU","chemical",true,null,null,1,false,true,0,"international units; IE; F2","UCUM","Arb","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","1","1","1",1,false],[false,"international unit - arbitrary","[IU]","[IU]","arbitrary",1,[0,0,0,0,0,0,0],"i.U.","chemical",true,null,null,1,false,true,0,"international units; IE; F2","UCUM","Arb","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"arbitary unit","[arb'U]","[ARB'U]","arbitrary",1,[0,0,0,0,0,0,0],"arb. U","chemical",false,null,null,1,false,true,0,"arbitary units; arb units; arbU","UCUM","Arb","Clinical","relative unit of measurement to show the ratio of test measurement to reference measurement","1","1","1",1,false],[false,"United States Pharmacopeia unit","[USP'U]","[USP'U]","arbitrary",1,[0,0,0,0,0,0,0],"U.S.P.","chemical",false,null,null,1,false,true,0,"USP U; USP'U","UCUM","Arb","Clinical","a dose unit to express potency of drugs and vitamins defined by the United States Pharmacopoeia; usually 1 USP = 1 IU","1","1","1",1,false],[false,"GPL unit","[GPL'U]","[GPL'U]","biologic activity of anticardiolipin IgG",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"GPL Units; GPL U; IgG anticardiolipin units; IgG Phospholipid","UCUM","ACnc; AMass","Clinical","Units for an antiphospholipid test","1","1","1",1,false],[false,"MPL unit","[MPL'U]","[MPL'U]","biologic activity of anticardiolipin IgM",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"MPL units; MPL U; MPL'U; IgM anticardiolipin units; IgM Phospholipid Units ","UCUM","ACnc","Clinical","units for antiphospholipid test","1","1","1",1,false],[false,"APL unit","[APL'U]","[APL'U]","biologic activity of anticardiolipin IgA",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"APL units; APL U; IgA anticardiolipin; IgA Phospholipid; biologic activity of","UCUM","AMass; ACnc","Clinical","Units for an anti phospholipid syndrome test","1","1","1",1,false],[false,"Bethesda unit","[beth'U]","[BETH'U]","biologic activity of factor VIII inhibitor",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"BU","UCUM","ACnc","Clinical","measures of blood coagulation inhibitior for many blood factors","1","1","1",1,false],[false,"anti factor Xa unit","[anti'Xa'U]","[ANTI'XA'U]","biologic activity of factor Xa inhibitor (heparin)",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"units","UCUM","ACnc","Clinical","[anti'Xa'U] unit is equivalent to and can be converted to IU/mL. ","1","1","1",1,false],[false,"Todd unit","[todd'U]","[TODD'U]","biologic activity antistreptolysin O",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"units","UCUM","InvThres; RtoThres","Clinical","the unit for the results of the testing for antistreptolysin O (ASO)","1","1","1",1,false],[false,"Dye unit","[dye'U]","[DYE'U]","biologic activity of amylase",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"units","UCUM","CCnc","Obsolete","equivalent to the Somogyi unit, which is an enzyme unit for amylase but better to use U, the standard enzyme unit for measuring catalytic activity","1","1","1",1,false],[false,"Somogyi unit","[smgy'U]","[SMGY'U]","biologic activity of amylase",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"Somogyi units; smgy U","UCUM","CAct","Clinical","measures the enzymatic activity of amylase in blood serum - better to use base units mg/mL ","1","1","1",1,false],[false,"Bodansky unit","[bdsk'U]","[BDSK'U]","biologic activity of phosphatase",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"","UCUM","ACnc","Obsolete","Enzyme unit specific to alkaline phosphatase - better to use standard enzyme unit of U","1","1","1",1,false],[false,"King-Armstrong unit","[ka'U]","[KA'U]","biologic activity of phosphatase",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"King-Armstrong Units; King units","UCUM","AMass","Obsolete","enzyme units for acid phosphatase - better to use enzyme unit [U]","1","1","1",1,false],[false,"Kunkel unit","[knk'U]","[KNK'U]","arbitrary biologic activity",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,null,"UCUM",null,null,null,"1","1","1",1,false],[false,"Mac Lagan unit","[mclg'U]","[MCLG'U]","arbitrary biologic activity",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"galactose index; galactose tolerance test; thymol turbidity test unit; mclg U; units; indexes","UCUM","ACnc","Obsolete","unit for liver tests - previously used in thymol turbidity tests for liver disease diagnoses, and now is sometimes referred to in the oral galactose tolerance test","1","1","1",1,false],[false,"tuberculin unit","[tb'U]","[TB'U]","biologic activity of tuberculin",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"TU; units","UCUM","Arb","Clinical","amount of tuberculin antigen -usually in reference to a TB skin test ","1","1","1",1,false],[false,"50% cell culture infectious dose","[CCID_50]","[CCID_50]","biologic activity (infectivity) of an infectious agent preparation",1,[0,0,0,0,0,0,0],"CCID<sub>50</sub>","chemical",false,null,null,1,false,true,0,"CCID50; 50% cell culture infective doses","UCUM","NumThres","Clinical","","1","1","1",1,false],[false,"50% tissue culture infectious dose","[TCID_50]","[TCID_50]","biologic activity (infectivity) of an infectious agent preparation",1,[0,0,0,0,0,0,0],"TCID<sub>50</sub>","chemical",false,null,null,1,false,true,0,"TCID50; 50% tissue culture infective dose","UCUM","NumThres","Clinical","","1","1","1",1,false],[false,"50% embryo infectious dose","[EID_50]","[EID_50]","biologic activity (infectivity) of an infectious agent preparation",1,[0,0,0,0,0,0,0],"EID<sub>50</sub>","chemical",false,null,null,1,false,true,0,"EID50; 50% embryo infective doses; EID50 Egg Infective Dosage","UCUM","thresNum","Clinical","","1","1","1",1,false],[false,"plaque forming units","[PFU]","[PFU]","amount of an infectious agent",1,[0,0,0,0,0,0,0],"PFU","chemical",false,null,null,1,false,true,0,"PFU","UCUM","ACnc","Clinical","tests usually report unit as number of PFU per unit volume","1","1","1",1,false],[false,"focus forming units (cells)","[FFU]","[FFU]","amount of an infectious agent",1,[0,0,0,0,0,0,0],"FFU","chemical",false,null,null,1,false,true,0,"FFU","UCUM","EntNum","Clinical","","1","1","1",1,false],[false,"colony forming units","[CFU]","[CFU]","amount of a proliferating organism",1,[0,0,0,0,0,0,0],"CFU","chemical",false,null,null,1,false,true,0,"CFU","UCUM","Num","Clinical","","1","1","1",1,false],[false,"index of reactivity (allergen)","[IR]","[IR]","amount of an allergen callibrated through in-vivo testing using the Stallergenes® method.",1,[0,0,0,0,0,0,0],"IR","chemical",false,null,null,1,false,true,0,"IR; indexes","UCUM","Acnc","Clinical","amount of an allergen callibrated through in-vivo testing using the Stallergenes method. Usually reported in tests as IR/mL","1","1","1",1,false],[false,"bioequivalent allergen unit","[BAU]","[BAU]","amount of an allergen callibrated through in-vivo testing based on the ID50EAL method of (intradermal dilution for 50mm sum of erythema diameters",1,[0,0,0,0,0,0,0],"BAU","chemical",false,null,null,1,false,true,0,"BAU; Bioequivalent Allergy Units; bioequivalent allergen units","UCUM","Arb","Clinical","","1","1","1",1,false],[false,"allergy unit","[AU]","[AU]","procedure defined amount of an allergen using some reference standard",1,[0,0,0,0,0,0,0],"AU","chemical",false,null,null,1,false,true,0,"allergy units; allergen units; AU","UCUM","Arb","Clinical","Most standard test allergy units are reported as [IU] or as %. ","1","1","1",1,false],[false,"allergen unit for Ambrosia artemisiifolia","[Amb'a'1'U]","[AMB'A'1'U]","procedure defined amount of the major allergen of ragweed.",1,[0,0,0,0,0,0,0],"Amb a 1 U","chemical",false,null,null,1,false,true,0,"Amb a 1 unit; Antigen E; AgE U; allergen units","UCUM","Arb","Clinical","Amb a 1 is the major allergen in short ragweed, and can be converted Bioequivalent allergen units (BAU) where 350 Amb a 1 U/mL = 100,000 BAU/mL","1","1","1",1,false],[false,"protein nitrogen unit (allergen testing)","[PNU]","[PNU]","procedure defined amount of a protein substance",1,[0,0,0,0,0,0,0],"PNU","chemical",false,null,null,1,false,true,0,"protein nitrogen units; PNU","UCUM","Mass","Clinical","defined as 0.01 ug of phosphotungstic acid-precipitable protein nitrogen. Being replaced by bioequivalent allergy units (BAU).","1","1","1",1,false],[false,"Limit of flocculation","[Lf]","[LF]","procedure defined amount of an antigen substance",1,[0,0,0,0,0,0,0],"Lf","chemical",false,null,null,1,false,true,0,"Lf doses","UCUM","Arb","Clinical","the antigen content  forming 1:1 ratio against 1 unit of antitoxin","1","1","1",1,false],[false,"D-antigen unit (polio)","[D'ag'U]","[D'AG'U]","procedure defined amount of a poliomyelitis d-antigen substance",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"DAgU; units","UCUM","Acnc","Clinical","unit of potency of poliovirus vaccine used for poliomyelitis prevention reported as D antigen units/mL. The unit is poliovirus type-specific.","1","1","1",1,false],[false,"fibrinogen equivalent units","[FEU]","[FEU]","amount of fibrinogen broken down into the measured d-dimers",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"FEU","UCUM","MCnc","Clinical","Note both the FEU and DDU units are used to report D-dimer measurements. 1 DDU = 1/2 FFU","1","1","1",1,false],[false,"ELISA unit","[ELU]","[ELU]","arbitrary ELISA unit",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"Enzyme-Linked Immunosorbent Assay Units; ELU; EL. U","UCUM","ACnc","Clinical","","1","1","1",1,false],[false,"Ehrlich units (urobilinogen)","[EU]","[EU]","Ehrlich unit",1,[0,0,0,0,0,0,0],null,"chemical",false,null,null,1,false,true,0,"EU/dL; mg{urobilinogen}/dL","UCUM","ACnc","Clinical","","1","1","1",1,false],[false,"neper","Np","NEP","level",1,[0,0,0,0,0,0,0],"Np","levels",true,null,"ln",1,true,false,0,"nepers","UCUM","LogRto","Clinical","logarithmic unit for ratios of measurements of physical field and power quantities, such as gain and loss of electronic signals","1",null,null,1,false],[false,"bel","B","B","level",1,[0,0,0,0,0,0,0],"B","levels",true,null,"lg",1,true,false,0,"bels","UCUM","LogRto","Clinical","Logarithm of the ratio of power- or field-type quantities; usually expressed in decibels ","1",null,null,1,false],[false,"bel sound pressure","B[SPL]","B[SPL]","pressure level",0.02,[-1,-2,1,0,0,0,0],"B(SPL)","levels",true,null,"lgTimes2",1,true,false,0,"bel SPL; B SPL; sound pressure bels","UCUM","LogRto","Clinical","used to measure sound level in acoustics","Pa",null,null,0.00002,false],[false,"bel volt","B[V]","B[V]","electric potential level",1000,[2,-2,1,0,0,-1,0],"B(V)","levels",true,null,"lgTimes2",1,true,false,0,"bel V; B V; volts bels","UCUM","LogRtoElp","Clinical","used to express power gain in electrical circuits","V",null,null,1,false],[false,"bel millivolt","B[mV]","B[MV]","electric potential level",1,[2,-2,1,0,0,-1,0],"B(mV)","levels",true,null,"lgTimes2",1,true,false,0,"bel mV; B mV; millivolt bels; 10^-3V bels; 10*-3V ","UCUM","LogRtoElp","Clinical","used to express power gain in electrical circuits","mV",null,null,1,false],[false,"bel microvolt","B[uV]","B[UV]","electric potential level",0.001,[2,-2,1,0,0,-1,0],"B(μV)","levels",true,null,"lgTimes2",1,true,false,0,"bel uV; B uV; microvolts bels; 10^-6V bel; 10*-6V bel","UCUM","LogRto","Clinical","used to express power gain in electrical circuits","uV",null,null,1,false],[false,"bel 10 nanovolt","B[10.nV]","B[10.NV]","electric potential level",0.000010000000000000003,[2,-2,1,0,0,-1,0],"B(10 nV)","levels",true,null,"lgTimes2",1,true,false,0,"bel 10 nV; B 10 nV; 10 nanovolts bels","UCUM","LogRtoElp","Clinical","used to express power gain in electrical circuits","nV",null,null,10,false],[false,"bel watt","B[W]","B[W]","power level",1000,[2,-3,1,0,0,0,0],"B(W)","levels",true,null,"lg",1,true,false,0,"bel W; b W; b Watt; Watts bels","UCUM","LogRto","Clinical","used to express power","W",null,null,1,false],[false,"bel kilowatt","B[kW]","B[KW]","power level",1000000,[2,-3,1,0,0,0,0],"B(kW)","levels",true,null,"lg",1,true,false,0,"bel kW; B kW; kilowatt bel; kW bel; kW B","UCUM","LogRto","Clinical","used to express power","kW",null,null,1,false],[false,"stere","st","STR","volume",1,[3,0,0,0,0,0,0],"st","misc",true,null,null,1,false,false,0,"stère; m3; cubic meter; m^3; meters cubed; metre","UCUM","Vol","Nonclinical","equal to one cubic meter, usually used for measuring firewoord","m3","M3","1",1,false],[false,"Ångström","Ao","AO","length",1.0000000000000002e-10,[1,0,0,0,0,0,0],"Å","misc",false,null,null,1,false,false,0,"Å; Angstroms; Ao; Ångströms","UCUM","Len","Clinical","equal to 10^-10 meters; used to express wave lengths and atom scaled differences ","nm","NM","0.1",0.1,false],[false,"barn","b","BRN","action area",9.999999999999999e-29,[2,0,0,0,0,0,0],"b","misc",false,null,null,1,false,false,0,"barns","UCUM","Area","Clinical","used in high-energy physics to express cross-sectional areas","fm2","FM2","100",100,false],[false,"technical atmosphere","att","ATT","pressure",98066499.99999999,[-1,-2,1,0,0,0,0],"at","misc",false,null,null,1,false,false,0,"at; tech atm; tech atmosphere; kgf/cm2; atms; atmospheres","UCUM","Pres","Obsolete","non-SI unit of pressure equal to one kilogram-force per square centimeter","kgf/cm2","KGF/CM2","1",1,false],[false,"mho","mho","MHO","electric conductance",0.001,[-2,1,-1,0,0,2,0],"mho","misc",true,null,null,1,false,false,0,"siemens; ohm reciprocals; Ω^−1; Ω-1 ","UCUM","","Obsolete","unit of electric conductance (the inverse of electrical resistance) equal to ohm^-1","S","S","1",1,false],[false,"pound per square inch","[psi]","[PSI]","pressure",6894757.293168359,[-1,-2,1,0,0,0,0],"psi","misc",false,null,null,1,false,false,0,"psi; lb/in2; lb per in2","UCUM","Pres","Clinical","","[lbf_av]/[in_i]2","[LBF_AV]/[IN_I]2","1",1,false],[false,"circle - plane angle","circ","CIRC","plane angle",6.283185307179586,[0,0,0,1,0,0,0],"circ","misc",false,null,null,1,false,false,0,"angles; circles","UCUM","Angle","Clinical","","[pi].rad","[PI].RAD","2",2,false],[false,"spere - solid angle","sph","SPH","solid angle",12.566370614359172,[0,0,0,2,0,0,0],"sph","misc",false,null,null,1,false,false,0,"speres","UCUM","Angle","Clinical","equal to the solid angle of an entire sphere = 4πsr (sr = steradian) ","[pi].sr","[PI].SR","4",4,false],[false,"metric carat","[car_m]","[CAR_M]","mass",0.2,[0,0,1,0,0,0,0],"ct<sub>m</sub>","misc",false,null,null,1,false,false,0,"carats; ct; car m","UCUM","Mass","Nonclinical","unit of mass for gemstones","g","G","2e-1",0.2,false],[false,"carat of gold alloys","[car_Au]","[CAR_AU]","mass fraction",0.041666666666666664,[0,0,0,0,0,0,0],"ct<sub><r>Au</r></sub>","misc",false,null,null,1,false,false,0,"karats; k; kt; car au; carats","UCUM","MFr","Nonclinical","unit of purity for gold alloys","/24","/24","1",1,false],[false,"Smoot","[smoot]","[SMOOT]","length",1.7018000000000002,[1,0,0,0,0,0,0],null,"misc",false,null,null,1,false,false,0,"","UCUM","Len","Nonclinical","prank unit of length from MIT","[in_i]","[IN_I]","67",67,false],[false,"meter per square seconds per square root of hertz","[m/s2/Hz^(1/2)]","[M/S2/HZ^(1/2)]","amplitude spectral density",1,[2,-3,0,0,0,0,0],null,"misc",false,null,"sqrt",1,true,false,0,"m/s2/(Hz^.5); m/s2/(Hz^(1/2)); m per s2 per Hz^1/2","UCUM","","Constant","measures amplitude spectral density, and is equal to the square root of power spectral density\n ","m2/s4/Hz",null,null,1,false],[false,"bit - logarithmic","bit_s","BIT_S","amount of information",1,[0,0,0,0,0,0,0],"bit<sub>s</sub>","infotech",false,null,"ld",1,true,false,0,"bit-s; bit s; bit logarithmic","UCUM","LogA","Nonclinical","defined as the log base 2 of the number of distinct signals; cannot practically be used to express more than 1000 bits\n\nIn information theory, the definition of the amount of self-information and information entropy is often expressed with the binary logarithm (log base 2)","1",null,null,1,false],[false,"bit","bit","BIT","amount of information",1,[0,0,0,0,0,0,0],"bit","infotech",true,null,null,1,false,false,0,"bits","UCUM","","Nonclinical","dimensionless information unit of 1 used in computing and digital communications","1","1","1",1,false],[false,"byte","By","BY","amount of information",8,[0,0,0,0,0,0,0],"B","infotech",true,null,null,1,false,false,0,"bytes","UCUM","","Nonclinical","equal to 8 bits","bit","bit","8",8,false],[false,"baud","Bd","BD","signal transmission rate",1,[0,1,0,0,0,0,0],"Bd","infotech",true,null,"inv",1,false,false,0,"Bd; bauds","UCUM","Freq","Nonclinical","unit to express rate in symbols per second or pulses per second. ","s","/s","1",1,false],[false,"per twelve hour","/(12.h)","/HR","",0.000023148148148148147,[0,-1,0,0,0,0,0],"/h",null,false,null,null,1,false,false,0,"per 12 hours; 12hrs; 12 hrs; /12hrs","LOINC","Rat","Clinical","",null,null,null,null,false],[false,"per arbitrary unit","/[arb'U]","/[ARB'U]","",1,[0,0,0,0,0,0,0],"/arb/ U",null,false,null,null,1,false,true,0,"/arbU","LOINC","InvA ","Clinical","",null,null,null,null,false],[false,"per high power field","/[HPF]","/[HPF]","",1,[0,0,0,0,0,0,0],"/HPF",null,false,null,null,1,false,false,0,"/HPF; per HPF","LOINC","Naric","Clinical","",null,null,null,null,false],[false,"per international unit","/[IU]","/[IU]","",1,[0,0,0,0,0,0,0],"/i/U.",null,false,null,null,1,false,true,0,"international units; /IU; per IU","LOINC","InvA","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)",null,null,null,null,false],[false,"per low power field","/[LPF]","/[LPF]","",1,[0,0,0,0,0,0,0],"/LPF",null,false,null,null,1,false,false,0,"/LPF; per LPF","LOINC","Naric","Clinical","",null,null,null,null,false],[false,"per 10 billion  ","/10*10","/10*10","",1e-10,[0,0,0,0,0,0,0],"/10<sup>10<.sup>",null,false,null,null,1,false,false,0,"/10^10; per 10*10","LOINC","NFr","Clinical","used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator",null,null,null,null,false],[false,"per trillion ","/10*12","/10*12","",1e-12,[0,0,0,0,0,0,0],"/10<sup>12<.sup>",null,false,null,null,1,false,false,0,"/10^12; per 10*12","LOINC","NFr","Clinical","used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator",null,null,null,null,false],[false,"per thousand","/10*3","/10*3","",0.001,[0,0,0,0,0,0,0],"/10<sup>3<.sup>",null,false,null,null,1,false,false,0,"/10^3; per 10*3","LOINC","NFr","Clinical","used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator",null,null,null,null,false],[false,"per million","/10*6","/10*6","",0.000001,[0,0,0,0,0,0,0],"/10<sup>6<.sup>",null,false,null,null,1,false,false,0,"/10^6; per 10*6;","LOINC","NFr","Clinical","used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator",null,null,null,null,false],[false,"per billion","/10*9","/10*9","",1e-9,[0,0,0,0,0,0,0],"/10<sup>9<.sup>",null,false,null,null,1,false,false,0,"/10^9; per 10*9","LOINC","NFr","Clinical","used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator",null,null,null,null,false],[false,"per 100","/100","","",0.01,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,"per hundred; 10^2; 10*2","LOINC","NFr","Clinical","used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator",null,null,null,null,false],[false,"per 100 cells","/100{cells}","","",0.01,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,"/100 cells; /100cells; per hundred","LOINC","EntMass; EntNum; NFr","Clinical","",null,null,null,null,false],[false,"per 100 neutrophils","/100{neutrophils}","","",0.01,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,"/100 neutrophils; /100neutrophils; per hundred","LOINC","EntMass; EntNum; NFr","Clinical","",null,null,null,null,false],[false,"per 100 spermatozoa","/100{spermatozoa}","","",0.01,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,"/100 spermatozoa; /100spermatozoa; per hundred","LOINC","NFr","Clinical","",null,null,null,null,false],[false,"per 100 white blood cells","/100{WBCs}","","",0.01,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,"/100 WBCs; /100WBCs; per hundred","LOINC","Ratio; NFr","Clinical","",null,null,null,null,false],[false,"per year","/a","/ANN","",3.168808781402895e-8,[0,-1,0,0,0,0,0],"/a",null,false,null,null,1,false,false,0,"/Years; /yrs; yearly","LOINC","NRat","Clinical","",null,null,null,null,false],[false,"per centimeter of water","/cm[H2O]","/CM[H2O]","",0.000010197162129779282,[1,2,-1,0,0,0,0],"/cm HO<sub><r>2<.r></sub>",null,false,null,null,1,false,false,0,"/cmH2O; /cm H2O; centimeters; centimetres","LOINC","InvPress","Clinical","",null,null,null,null,false],[false,"per day","/d","/D","",0.000011574074074074073,[0,-1,0,0,0,0,0],"/d",null,false,null,null,1,false,false,0,"/dy; per day","LOINC","NRat","Clinical","",null,null,null,null,false],[false,"per deciliter","/dL","/DL","",10000,[-3,0,0,0,0,0,0],"/dL",null,false,null,null,1,false,false,0,"per dL; /deciliter; decilitre","LOINC","NCnc","Clinical","",null,null,null,null,false],[false,"per gram","/g","/G","",1,[0,0,-1,0,0,0,0],"/g",null,false,null,null,1,false,false,0,"/gm; /gram; per g","LOINC","NCnt","Clinical","",null,null,null,null,false],[false,"per hour","/h","/HR","",0.0002777777777777778,[0,-1,0,0,0,0,0],"/h",null,false,null,null,1,false,false,0,"/hr; /hour; per hr","LOINC","NRat","Clinical","",null,null,null,null,false],[false,"per kilogram","/kg","/KG","",0.001,[0,0,-1,0,0,0,0],"/kg",null,false,null,null,1,false,false,0,"per kg; per kilogram","LOINC","NCnt","Clinical","",null,null,null,null,false],[false,"per liter","/L","/L","",1000,[-3,0,0,0,0,0,0],"/L",null,false,null,null,1,false,false,0,"/liter; litre","LOINC","NCnc","Clinical","",null,null,null,null,false],[false,"per square meter","/m2","/M2","",1,[-2,0,0,0,0,0,0],"/m<sup>2<.sup>",null,false,null,null,1,false,false,0,"/m^2; /m*2; /sq. m; per square meter; meter squared; metre","LOINC","Naric","Clinical","",null,null,null,null,false],[false,"per cubic meter","/m3","/M3","",1,[-3,0,0,0,0,0,0],"/m<sup>3<.sup>",null,false,null,null,1,false,false,0,"/m^3; /m*3; /cu. m; per cubic meter; meter cubed; per m3; metre","LOINC","NCncn","Clinical","",null,null,null,null,false],[false,"per milligram","/mg","/MG","",1000,[0,0,-1,0,0,0,0],"/mg",null,false,null,null,1,false,false,0,"/milligram; per mg","LOINC","NCnt","Clinical","",null,null,null,null,false],[false,"per minute","/min","/MIN","",0.016666666666666666,[0,-1,0,0,0,0,0],"/min",null,false,null,null,1,false,false,0,"/minute; per mins; breaths beats per minute","LOINC","NRat","Clinical","",null,null,null,null,false],[false,"per milliliter","/mL","/ML","",1000000,[-3,0,0,0,0,0,0],"/mL",null,false,null,null,1,false,false,0,"/milliliter; per mL; millilitre","LOINC","NCncn","Clinical","",null,null,null,null,false],[false,"per millimeter","/mm","/MM","",1000,[-1,0,0,0,0,0,0],"/mm",null,false,null,null,1,false,false,0,"/millimeter; per mm; millimetre","LOINC","InvLen","Clinical","",null,null,null,null,false],[false,"per month","/mo","/MO","",3.802570537683474e-7,[0,-1,0,0,0,0,0],"/mo",null,false,null,null,1,false,false,0,"/month; per mo; monthly; month","LOINC","NRat","Clinical","",null,null,null,null,false],[false,"per second","/s","/S","",1,[0,-1,0,0,0,0,0],"/s",null,false,null,null,1,false,false,0,"/second; /sec; per sec; frequency; Hertz; Herz; Hz; becquerels; Bq; s-1; s^-1","LOINC","NRat","Clinical","",null,null,null,null,false],[false,"per enzyme unit","/U","/U","",9.963241120049633e-17,[0,1,0,0,0,0,0],"/U",null,false,null,null,1,false,false,-1,"/enzyme units; per U","LOINC","InvC; NCat","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)",null,null,null,null,false],[false,"per microliter","/uL","/UL","",999999999.9999999,[-3,0,0,0,0,0,0],"/μL",null,false,null,null,1,false,false,0,"/microliter; microlitre; /mcl; per uL","LOINC","ACnc","Clinical","",null,null,null,null,false],[false,"per week","/wk","/WK","",0.0000016534391534391535,[0,-1,0,0,0,0,0],"/wk",null,false,null,null,1,false,false,0,"/week; per wk; weekly, weeks","LOINC","NRat","Clinical","",null,null,null,null,false],[false,"APL unit per milliliter","[APL'U]/mL","[APL'U]/ML","biologic activity of anticardiolipin IgA",1000000,[-3,0,0,0,0,0,0],"/mL","chemical",false,null,null,1,false,true,0,"APL/mL; APL'U/mL; APL U/mL; APL/milliliter; IgA anticardiolipin units per milliliter; IgA Phospholipid Units; millilitre; biologic activity of","LOINC","ACnc","Clinical","Units for an anti phospholipid syndrome test","1","1","1",1,false],[false,"arbitrary unit per milliliter","[arb'U]/mL","[ARB'U]/ML","arbitrary",1000000,[-3,0,0,0,0,0,0],"(arb. U)/mL","chemical",false,null,null,1,false,true,0,"arb'U/mL; arbU/mL; arb U/mL; arbitrary units per milliliter; millilitre","LOINC","ACnc","Clinical","relative unit of measurement to show the ratio of test measurement to reference measurement","1","1","1",1,false],[false,"colony forming units per liter","[CFU]/L","[CFU]/L","amount of a proliferating organism",1000,[-3,0,0,0,0,0,0],"CFU/L","chemical",false,null,null,1,false,true,0,"CFU per Liter; CFU/L","LOINC","NCnc","Clinical","","1","1","1",1,false],[false,"colony forming units per milliliter","[CFU]/mL","[CFU]/ML","amount of a proliferating organism",1000000,[-3,0,0,0,0,0,0],"CFU/mL","chemical",false,null,null,1,false,true,0,"CFU per mL; CFU/mL","LOINC","NCnc","Clinical","","1","1","1",1,false],[false,"foot per foot - US","[ft_us]/[ft_us]","[FT_US]/[FT_US]","length",1,[0,0,0,0,0,0,0],"(ft<sub>us</sub>)/(ft<sub>us</sub>)","us-lengths",false,null,null,1,false,false,0,"ft/ft; ft per ft; feet per feet; visual acuity","","LenRto","Clinical","distance ratio to measure 20:20 vision","m/3937","M/3937","1200",1200,false],[false,"GPL unit per milliliter","[GPL'U]/mL","[GPL'U]/ML","biologic activity of anticardiolipin IgG",1000000,[-3,0,0,0,0,0,0],"/mL","chemical",false,null,null,1,false,true,0,"GPL U/mL; GPL'U/mL; GPL/mL; GPL U per mL; IgG Phospholipid Units per milliliters; IgG anticardiolipin units; millilitres ","LOINC","ACnc; AMass","Clinical","Units for an antiphospholipid test","1","1","1",1,false],[false,"international unit per 2 hour","[IU]/(2.h)","[IU]/HR","arbitrary",0.0001388888888888889,[0,-1,0,0,0,0,0],"(i.U.)/h","chemical",true,null,null,1,false,true,0,"IU/2hrs; IU/2 hours; IU per 2 hrs; international units per 2 hours","LOINC","ARat","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"international unit per 24 hour","[IU]/(24.h)","[IU]/HR","arbitrary",0.000011574074074074073,[0,-1,0,0,0,0,0],"(i.U.)/h","chemical",true,null,null,1,false,true,0,"IU/24hr; IU/24 hours; IU per 24 hrs; international units per 24 hours","LOINC","ARat","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"international unit per day","[IU]/d","[IU]/D","arbitrary",0.000011574074074074073,[0,-1,0,0,0,0,0],"(i.U.)/d","chemical",true,null,null,1,false,true,0,"IU/dy; IU/days; IU per dys; international units per day","LOINC","ARat","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"international unit per deciliter","[IU]/dL","[IU]/DL","arbitrary",10000,[-3,0,0,0,0,0,0],"(i.U.)/dL","chemical",true,null,null,1,false,true,0,"IU/dL; IU per dL; international units per deciliters; decilitres","LOINC","ACnc","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"international unit per gram","[IU]/g","[IU]/G","arbitrary",1,[0,0,-1,0,0,0,0],"(i.U.)/g","chemical",true,null,null,1,false,true,0,"IU/gm; IU/gram; IU per gm; IU per g; international units per gram","LOINC","ACnt","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"international unit per hour","[IU]/h","[IU]/HR","arbitrary",0.0002777777777777778,[0,-1,0,0,0,0,0],"(i.U.)/h","chemical",true,null,null,1,false,true,0,"IU/hrs; IU per hours; international units per hour","LOINC","ARat","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"international unit per kilogram","[IU]/kg","[IU]/KG","arbitrary",0.001,[0,0,-1,0,0,0,0],"(i.U.)/kg","chemical",true,null,null,1,false,true,0,"IU/kg; IU/kilogram; IU per kg; units","LOINC","ACnt","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"international unit per kilogram per day","[IU]/kg/d","[IU]/KG/D","arbitrary",1.1574074074074074e-8,[0,-1,-1,0,0,0,0],"(i.U.)/kg/d","chemical",true,null,null,1,false,true,0,"IU/kg/dy; IU/kg/day; IU/kilogram/day; IU per kg per day; units","LOINC","ACntRat","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"international unit per liter","[IU]/L","[IU]/L","arbitrary",1000,[-3,0,0,0,0,0,0],"(i.U.)/L","chemical",true,null,null,1,false,true,0,"IU/L; IU/liter; IU per liter; units; litre","LOINC","ACnc","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"international unit per minute","[IU]/min","[IU]/MIN","arbitrary",0.016666666666666666,[0,-1,0,0,0,0,0],"(i.U.)/min","chemical",true,null,null,1,false,true,0,"IU/min; IU/minute; IU per minute; international units","LOINC","ARat","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"international unit per milliliter","[IU]/mL","[IU]/ML","arbitrary",1000000,[-3,0,0,0,0,0,0],"(i.U.)/mL","chemical",true,null,null,1,false,true,0,"IU/mL; IU per mL; international units per milliliter; millilitre","LOINC","ACnc","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"MPL unit per milliliter","[MPL'U]/mL","[MPL'U]/ML","biologic activity of anticardiolipin IgM",1000000,[-3,0,0,0,0,0,0],"/mL","chemical",false,null,null,1,false,true,0,"MPL/mL; MPL U/mL; MPL'U/mL; IgM anticardiolipin units; IgM Phospholipid Units; millilitre ","LOINC","ACnc","Clinical","units for antiphospholipid test\n","1","1","1",1,false],[false,"number per high power field","{#}/[HPF]","/[HPF]","",1,[0,0,0,0,0,0,0],"/HPF",null,false,null,null,1,false,false,0,"#/HPF; # per HPF; number/HPF; numbers per high power field","LOINC","Naric","Clinical","",null,null,null,null,false],[false,"number per low power field","{#}/[LPF]","/[LPF]","",1,[0,0,0,0,0,0,0],"/LPF",null,false,null,null,1,false,false,0,"#/LPF; # per LPF; number/LPF; numbers per low power field","LOINC","Naric","Clinical","",null,null,null,null,false],[false,"IgA antiphosphatidylserine unit ","{APS'U}","","",1,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,"APS Unit; Phosphatidylserine Antibody IgA Units","LOINC","ACnc","Clinical","unit for antiphospholipid test",null,null,null,null,false],[false,"EIA index","{EIA_index}","","",1,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,"enzyme immunoassay index","LOINC","ACnc","Clinical","",null,null,null,null,false],[false,"kaolin clotting time","{KCT'U}","","",1,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,"KCT","LOINC","Time","Clinical","sensitive test to detect lupus anticoagulants; measured in seconds",null,null,null,null,false],[false,"IgM antiphosphatidylserine unit","{MPS'U}","","",1,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,"Phosphatidylserine Antibody IgM Measurement ","LOINC","ACnc","Clinical","",null,null,null,null,false],[false,"trillion per liter","10*12/L","(10*12)/L","number",1000000000000000,[-3,0,0,0,0,0,0],"(10<sup>12</sup>)/L","dimless",false,null,null,1,false,false,0,"10^12/L; 10*12 per Liter; trillion per liter; litre","LOINC","NCncn","Clinical","","1","1","10",10,false],[false,"10^3 (used for cell count)","10*3","10*3","number",1000,[0,0,0,0,0,0,0],"10<sup>3</sup>","dimless",false,null,null,1,false,false,0,"10^3; thousand","LOINC","Num","Clinical","usually used for counting entities (e.g. blood cells) per volume","1","1","10",10,false],[false,"thousand per liter","10*3/L","(10*3)/L","number",1000000,[-3,0,0,0,0,0,0],"(10<sup>3</sup>)/L","dimless",false,null,null,1,false,false,0,"10^3/L; 10*3 per liter; litre","LOINC","NCncn","Clinical","","1","1","10",10,false],[false,"thousand per milliliter","10*3/mL","(10*3)/ML","number",1000000000,[-3,0,0,0,0,0,0],"(10<sup>3</sup>)/mL","dimless",false,null,null,1,false,false,0,"10^3/mL; 10*3 per mL; thousand per milliliter; millilitre","LOINC","NCncn","Clinical","","1","1","10",10,false],[false,"thousand per microliter","10*3/uL","(10*3)/UL","number",999999999999.9999,[-3,0,0,0,0,0,0],"(10<sup>3</sup>)/μL","dimless",false,null,null,1,false,false,0,"10^3/uL; 10*3 per uL; thousand per microliter; microlitre","LOINC","NCncn","Clinical","","1","1","10",10,false],[false,"10 thousand per microliter","10*4/uL","(10*4)/UL","number",10000000000000,[-3,0,0,0,0,0,0],"(10<sup>4</sup>)/μL","dimless",false,null,null,1,false,false,0,"10^4/uL; 10*4 per uL; microlitre","LOINC","NCncn","Clinical","","1","1","10",10,false],[false,"10^5 ","10*5","10*5","number",100000,[0,0,0,0,0,0,0],"10<sup>5</sup>","dimless",false,null,null,1,false,false,0,"one hundred thousand","LOINC","Num","Clinical","","1","1","10",10,false],[false,"10^6","10*6","10*6","number",1000000,[0,0,0,0,0,0,0],"10<sup>6</sup>","dimless",false,null,null,1,false,false,0,"","LOINC","Num","Clinical","","1","1","10",10,false],[false,"million colony forming unit per liter","10*6.[CFU]/L","(10*6).[CFU]/L","number",1000000000,[-3,0,0,0,0,0,0],"(10<sup>6</sup>).CFU/L","dimless",false,null,null,1,false,true,0,"10*6 CFU/L; 10^6 CFU/L; 10^6CFU; 10^6 CFU per liter; million colony forming units; litre","LOINC","ACnc","Clinical","","1","1","10",10,false],[false,"million international unit","10*6.[IU]","(10*6).[IU]","number",1000000,[0,0,0,0,0,0,0],"(10<sup>6</sup>).(i.U.)","dimless",false,null,null,1,false,true,0,"10*6 IU; 10^6 IU; international units","LOINC","arb","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","1","1","10",10,false],[false,"million per 24 hour","10*6/(24.h)","(10*6)/HR","number",11.574074074074074,[0,-1,0,0,0,0,0],"(10<sup>6</sup>)/h","dimless",false,null,null,1,false,false,0,"10*6/24hrs; 10^6/24 hrs; 10*6 per 24 hrs; 10^6 per 24 hours","LOINC","NRat","Clinical","","1","1","10",10,false],[false,"million per kilogram","10*6/kg","(10*6)/KG","number",1000,[0,0,-1,0,0,0,0],"(10<sup>6</sup>)/kg","dimless",false,null,null,1,false,false,0,"10^6/kg; 10*6 per kg; 10*6 per kilogram; millions","LOINC","NCnt","Clinical","","1","1","10",10,false],[false,"million per liter","10*6/L","(10*6)/L","number",1000000000,[-3,0,0,0,0,0,0],"(10<sup>6</sup>)/L","dimless",false,null,null,1,false,false,0,"10^6/L; 10*6 per Liter; 10^6 per Liter; litre","LOINC","NCncn","Clinical","","1","1","10",10,false],[false,"million per milliliter","10*6/mL","(10*6)/ML","number",1000000000000,[-3,0,0,0,0,0,0],"(10<sup>6</sup>)/mL","dimless",false,null,null,1,false,false,0,"10^6/mL; 10*6 per mL; 10*6 per milliliter; millilitre","LOINC","NCncn","Clinical","","1","1","10",10,false],[false,"million per microliter","10*6/uL","(10*6)/UL","number",1000000000000000,[-3,0,0,0,0,0,0],"(10<sup>6</sup>)/μL","dimless",false,null,null,1,false,false,0,"10^6/uL; 10^6 per uL; 10^6/mcl; 10^6 per mcl; 10^6 per microliter; microlitre","LOINC","NCncn","Clinical","","1","1","10",10,false],[false,"10^8","10*8","10*8","number",100000000,[0,0,0,0,0,0,0],"10<sup>8</sup>","dimless",false,null,null,1,false,false,0,"100 million; one hundred million; 10^8","LOINC","Num","Clinical","","1","1","10",10,false],[false,"billion per liter","10*9/L","(10*9)/L","number",1000000000000,[-3,0,0,0,0,0,0],"(10<sup>9</sup>)/L","dimless",false,null,null,1,false,false,0,"10^9/L; 10*9 per Liter; litre","LOINC","NCncn","Clinical","","1","1","10",10,false],[false,"billion per milliliter","10*9/mL","(10*9)/ML","number",1000000000000000,[-3,0,0,0,0,0,0],"(10<sup>9</sup>)/mL","dimless",false,null,null,1,false,false,0,"10^9/mL; 10*9 per mL; 10^9 per mL; 10*9 per milliliter; millilitre","LOINC","NCncn","Clinical","","1","1","10",10,false],[false,"billion per microliter","10*9/uL","(10*9)/UL","number",1000000000000000000,[-3,0,0,0,0,0,0],"(10<sup>9</sup>)/μL","dimless",false,null,null,1,false,false,0,"10^9/uL; 10^9 per uL; 10^9/mcl; 10^9 per mcl; 10*9 per uL; 10*9 per mcl; 10*9/mcl; 10^9 per microliter; microlitre","LOINC","NCncn","Clinical","","1","1","10",10,false],[false,"10 liter per minute per square meter","10.L/(min.m2)","L/(MIN.M2)","",0.00016666666666666666,[1,-1,0,0,0,0,0],"L/(min.(m<sup>2</sup>))",null,false,null,null,1,false,false,0,"10 liters per minutes per square meter; 10 L per min per m2; m^2; 10 L/(min*m2); 10L/(min*m^2); litres; sq. meter; metre; meters squared","LOINC","ArVRat","Clinical","",null,null,null,null,false],[false,"10 liter per minute","10.L/min","L/MIN","",0.00016666666666666666,[3,-1,0,0,0,0,0],"L/min",null,false,null,null,1,false,false,0,"10 liters per minute; 10 L per min; 10L; 10 L/min; litre","LOINC","VRat","Clinical","",null,null,null,null,false],[false,"10 micronewton second per centimeter to the fifth power per square meter","10.uN.s/(cm5.m2)","(UN.S)/(CM5.M2)","",100000000,[-6,-1,1,0,0,0,0],"(μN.s)/(cm<sup>5</sup>).(m<sup>2</sup>)",null,false,null,null,1,false,false,0,"dyne seconds per centimeter5 and square meter; dyn.s/(cm5.m2); dyn.s/cm5/m2; cm^5; m^2","LOINC","","Clinical","unit to measure systemic vascular resistance per body surface area",null,null,null,null,false],[false,"24 hour","24.h","HR","",86400,[0,1,0,0,0,0,0],"h",null,false,null,null,1,false,false,0,"24hrs; 24 hrs; 24 hours; days; dy","LOINC","Time","Clinical","",null,null,null,null,false],[false,"ampere per meter","A/m","A/M","electric current",1,[-1,-1,0,0,0,1,0],"A/m","si",true,null,null,1,false,false,0,"A/m; amp/meter; magnetic field strength; H; B; amperes per meter; metre","LOINC","","Clinical","unit of magnetic field strength","C/s","C/S","1",1,false],[true,"centigram","cg","CG","mass",0.01,[0,0,1,0,0,0,0],"cg",null,false,"M",null,1,false,false,0,"centigrams; cg; cgm","LOINC","Mass","Clinical","",null,null,null,null,false],[false,"centiliter","cL","CL","volume",0.00001,[3,0,0,0,0,0,0],"cL","iso1000",true,null,null,1,false,false,0,"centiliters; centilitres","LOINC","Vol","Clinical","","l",null,"1",1,false],[true,"centimeter","cm","CM","length",0.01,[1,0,0,0,0,0,0],"cm",null,false,"L",null,1,false,false,0,"centimeters; centimetres","LOINC","Len","Clinical","",null,null,null,null,false],[false,"centimeter of water","cm[H2O]","CM[H2O]","pressure",98066.5,[-1,-2,1,0,0,0,0],"cm HO<sub><r>2</r></sub>","clinical",true,null,null,1,false,false,0,"cm H2O; cmH2O; centimetres; pressure","LOINC","Pres","Clinical","unit of pressure mostly applies to blood pressure","kPa","KPAL","980665e-5",9.80665,false],[false,"centimeter of water per liter per second","cm[H2O]/L/s","(CM[H2O]/L)/S","pressure",98066500,[-4,-3,1,0,0,0,0],"(cm HO<sub><r>2</r></sub>)/L/s","clinical",true,null,null,1,false,false,0,"cm[H2O]/(L/s); cm[H2O].s/L; cm H2O/L/sec; cmH2O/L/sec; cmH2O/Liter; cmH2O per L per secs; centimeters of water per liters per second; centimetres; litres; cm[H2O]/(L/s)","LOINC","PresRat","Clinical","unit used to measure mean pulmonary resistance","kPa","KPAL","980665e-5",9.80665,false],[false,"centimeter of water per second per meter","cm[H2O]/s/m","(CM[H2O]/S)/M","pressure",98066.5,[-2,-3,1,0,0,0,0],"(cm HO<sub><r>2</r></sub>)/s/m","clinical",true,null,null,1,false,false,0,"cm[H2O]/(s.m); cm H2O/s/m; cmH2O; cmH2O/sec/m; cmH2O per secs per meters; centimeters of water per seconds per meter; centimetres; metre","LOINC","PresRat","Clinical","unit used to measure pulmonary pressure time product","kPa","KPAL","980665e-5",9.80665,false],[false,"centimeter of mercury","cm[Hg]","CM[HG]","pressure",1333220,[-1,-2,1,0,0,0,0],"cm Hg","clinical",true,null,null,1,false,false,0,"centimeters of mercury; centimetres; cmHg; cm Hg","LOINC","Pres","Clinical","unit of pressure where 1 cmHg = 10 torr","kPa","KPAL","133.3220",133.322,false],[true,"square centimeter","cm2","CM2","length",0.0001,[2,0,0,0,0,0,0],"cm<sup>2</sup>",null,false,"L",null,1,false,false,0,"cm^2; sq cm; centimeters squared; square centimeters; centimetre; area","LOINC","Area","Clinical","",null,null,null,null,false],[true,"square centimeter per second","cm2/s","CM2/S","length",0.0001,[2,-1,0,0,0,0,0],"(cm<sup>2</sup>)/s",null,false,"L",null,1,false,false,0,"cm^2/sec; square centimeters per second; sq cm per sec; cm2; centimeters squared; centimetres","LOINC","AreaRat","Clinical","",null,null,null,null,false],[false,"centipoise","cP","CP","dynamic viscosity",1,[-1,-1,1,0,0,0,0],"cP","cgs",true,null,null,1,false,false,0,"cps; centiposes","LOINC","Visc","Clinical","unit of dynamic viscosity in the CGS system with base units: 10^−3 Pa.s = 1 mPa·.s (1 millipascal second)","dyn.s/cm2","DYN.S/CM2","1",1,false],[false,"centistoke","cSt","CST","kinematic viscosity",0.0000010000000000000002,[2,-1,0,0,0,0,0],"cSt","cgs",true,null,null,1,false,false,0,"centistokes","LOINC","Visc","Clinical","unit for kinematic viscosity with base units of mm^2/s (square millimeter per second)","cm2/s","CM2/S","1",1,false],[false,"dekaliter per minute","daL/min","DAL/MIN","volume",0.00016666666666666666,[3,-1,0,0,0,0,0],"daL/min","iso1000",true,null,null,1,false,false,0,"dekalitres; dekaliters per minute; per min","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"dekaliter per minute per square meter","daL/min/m2","(DAL/MIN)/M2","volume",0.00016666666666666666,[1,-1,0,0,0,0,0],"(daL/min)/(m<sup>2</sup>)","iso1000",true,null,null,1,false,false,0,"daL/min/m^2; daL/minute/m2; sq. meter; dekaliters per minutes per square meter; meter squared; dekalitres; metre","LOINC","ArVRat","Clinical","The area usually is the body surface area used to normalize cardiovascular measures for patient's size","l",null,"1",1,false],[false,"decibel","dB","DB","level",1,[0,0,0,0,0,0,0],"dB","levels",true,null,"lg",0.1,true,false,0,"decibels","LOINC","LogRto","Clinical","unit most commonly used in acoustics as unit of sound pressure level. (also see B[SPL] or bel sound pressure level). ","1",null,null,1,false],[false,"degree per second","deg/s","DEG/S","plane angle",0.017453292519943295,[0,-1,0,1,0,0,0],"°/s","iso1000",false,null,null,1,false,false,0,"deg/sec; deg per sec; °/sec; twist rate; angular speed; rotational speed","LOINC","ARat","Clinical","unit of angular (rotational) speed used to express turning rate","[pi].rad/360","[PI].RAD/360","2",2,false],[true,"decigram","dg","DG","mass",0.1,[0,0,1,0,0,0,0],"dg",null,false,"M",null,1,false,false,0,"decigrams; dgm; 0.1 grams; 1/10 gm","LOINC","Mass","Clinical","equal to 1/10 gram",null,null,null,null,false],[false,"deciliter","dL","DL","volume",0.0001,[3,0,0,0,0,0,0],"dL","iso1000",true,null,null,1,false,false,0,"deciliters; decilitres; 0.1 liters; 1/10 L","LOINC","Vol","Clinical","equal to 1/10 liter","l",null,"1",1,false],[true,"decimeter","dm","DM","length",0.1,[1,0,0,0,0,0,0],"dm",null,false,"L",null,1,false,false,0,"decimeters; decimetres; 0.1 meters; 1/10 m; 10 cm; centimeters","LOINC","Len","Clinical","equal to 1/10 meter or 10 centimeters",null,null,null,null,false],[true,"square decimeter per square second","dm2/s2","DM2/S2","length",0.010000000000000002,[2,-2,0,0,0,0,0],"(dm<sup>2</sup>)/(s<sup>2</sup>)",null,false,"L",null,1,false,false,0,"dm2 per s2; dm^2/s^2; decimeters squared per second squared; sq dm; sq sec","LOINC","EngMass (massic energy)","Clinical","units for energy per unit mass or Joules per kilogram (J/kg = kg.m2/s2/kg = m2/s2) ",null,null,null,null,false],[false,"dyne second per centimeter per square meter","dyn.s/(cm.m2)","(DYN.S)/(CM.M2)","force",1,[-2,-1,1,0,0,0,0],"(dyn.s)/(cm.(m<sup>2</sup>))","cgs",true,null,null,1,false,false,0,"(dyn*s)/(cm*m2); (dyn*s)/(cm*m^2); dyn s per cm per m2; m^2; dyne seconds per centimeters per square meter; centimetres; sq. meter; squared","LOINC","","Clinical","","g.cm/s2","G.CM/S2","1",1,false],[false,"dyne second per centimeter","dyn.s/cm","(DYN.S)/CM","force",1,[0,-1,1,0,0,0,0],"(dyn.s)/cm","cgs",true,null,null,1,false,false,0,"(dyn*s)/cm; dyn sec per cm; seconds; centimetre; dyne seconds","LOINC","","Clinical","","g.cm/s2","G.CM/S2","1",1,false],[false,"equivalent per liter","eq/L","EQ/L","amount of substance",6.0221366999999994e+26,[-3,0,0,0,0,0,0],"eq/L","chemical",true,null,null,1,false,false,1,"eq/liter; eq/litre; eqs; equivalents per liter; litre","LOINC","SCnc","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"equivalent per milliliter","eq/mL","EQ/ML","amount of substance",6.0221367e+29,[-3,0,0,0,0,0,0],"eq/mL","chemical",true,null,null,1,false,false,1,"equivalent/milliliter; equivalents per milliliter; eq per mL; millilitre","LOINC","SCnc","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"equivalent per millimole","eq/mmol","EQ/MMOL","amount of substance",1000,[0,0,0,0,0,0,0],"eq/mmol","chemical",true,null,null,1,false,false,0,"equivalent/millimole; equivalents per millimole; eq per mmol","LOINC","SRto","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"equivalent per micromole","eq/umol","EQ/UMOL","amount of substance",1000000,[0,0,0,0,0,0,0],"eq/μmol","chemical",true,null,null,1,false,false,0,"equivalent/micromole; equivalents per micromole; eq per umol","LOINC","SRto","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[true,"femtogram","fg","FG","mass",1e-15,[0,0,1,0,0,0,0],"fg",null,false,"M",null,1,false,false,0,"fg; fgm; femtograms; weight","LOINC","Mass","Clinical","equal to 10^-15 grams",null,null,null,null,false],[false,"femtoliter","fL","FL","volume",1e-18,[3,0,0,0,0,0,0],"fL","iso1000",true,null,null,1,false,false,0,"femtolitres; femtoliters","LOINC","Vol; EntVol","Clinical","equal to 10^-15 liters","l",null,"1",1,false],[true,"femtometer","fm","FM","length",1e-15,[1,0,0,0,0,0,0],"fm",null,false,"L",null,1,false,false,0,"femtometres; femtometers","LOINC","Len","Clinical","equal to 10^-15 meters",null,null,null,null,false],[false,"femtomole","fmol","FMOL","amount of substance",602213670,[0,0,0,0,0,0,0],"fmol","si",true,null,null,1,false,false,1,"femtomoles","LOINC","EntSub","Clinical","equal to 10^-15 moles","10*23","10*23","6.0221367",6.0221367,false],[false,"femtomole per gram","fmol/g","FMOL/G","amount of substance",602213670,[0,0,-1,0,0,0,0],"fmol/g","si",true,null,null,1,false,false,1,"femtomoles; fmol/gm; fmol per gm","LOINC","SCnt","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"femtomole per liter","fmol/L","FMOL/L","amount of substance",602213670000,[-3,0,0,0,0,0,0],"fmol/L","si",true,null,null,1,false,false,1,"femtomoles; fmol per liter; litre","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"femtomole per milligram","fmol/mg","FMOL/MG","amount of substance",602213670000,[0,0,-1,0,0,0,0],"fmol/mg","si",true,null,null,1,false,false,1,"fmol per mg; femtomoles","LOINC","SCnt","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"femtomole per milliliter","fmol/mL","FMOL/ML","amount of substance",602213670000000,[-3,0,0,0,0,0,0],"fmol/mL","si",true,null,null,1,false,false,1,"femtomoles; millilitre; fmol per mL; fmol per milliliter","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[true,"gram meter","g.m","G.M","mass",1,[1,0,1,0,0,0,0],"g.m",null,false,"M",null,1,false,false,0,"g*m; gxm; meters; metres","LOINC","Enrg","Clinical","Unit for measuring stroke work (heart work)",null,null,null,null,false],[true,"gram per 100 gram","g/(100.g)","G/G","mass",0.01,[0,0,0,0,0,0,0],"g/g",null,false,"M",null,1,false,false,0,"g/100 gm; 100gm; grams per 100 grams; gm per 100 gm","LOINC","MCnt","Clinical","",null,null,null,null,false],[true,"gram per 12 hour","g/(12.h)","G/HR","mass",0.000023148148148148147,[0,-1,1,0,0,0,0],"g/h",null,false,"M",null,1,false,false,0,"gm/12hrs; 12 hrs; gm per 12 hrs; 12hrs; grams per 12 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"gram per 24 hour","g/(24.h)","G/HR","mass",0.000011574074074074073,[0,-1,1,0,0,0,0],"g/h",null,false,"M",null,1,false,false,0,"gm/24hrs; gm/24 hrs; gm per 24 hrs; 24hrs; grams per 24 hours; gm/dy; gm per dy; grams per day","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"gram per 3 days","g/(3.d)","G/D","mass",0.000003858024691358025,[0,-1,1,0,0,0,0],"g/d",null,false,"M",null,1,false,false,0,"gm/3dy; gm/3 dy; gm per 3 days; grams","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"gram per 4 hour","g/(4.h)","G/HR","mass",0.00006944444444444444,[0,-1,1,0,0,0,0],"g/h",null,false,"M",null,1,false,false,0,"gm/4hrs; gm/4 hrs; gm per 4 hrs; 4hrs; grams per 4 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"gram per 48 hour","g/(48.h)","G/HR","mass",0.000005787037037037037,[0,-1,1,0,0,0,0],"g/h",null,false,"M",null,1,false,false,0,"gm/48hrs; gm/48 hrs; gm per 48 hrs; 48hrs; grams per 48 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"gram per 5 hour","g/(5.h)","G/HR","mass",0.00005555555555555556,[0,-1,1,0,0,0,0],"g/h",null,false,"M",null,1,false,false,0,"gm/5hrs; gm/5 hrs; gm per 5 hrs; 5hrs; grams per 5 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"gram per 6 hour","g/(6.h)","G/HR","mass",0.000046296296296296294,[0,-1,1,0,0,0,0],"g/h",null,false,"M",null,1,false,false,0,"gm/6hrs; gm/6 hrs; gm per 6 hrs; 6hrs; grams per 6 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"gram per 72 hour","g/(72.h)","G/HR","mass",0.000003858024691358025,[0,-1,1,0,0,0,0],"g/h",null,false,"M",null,1,false,false,0,"gm/72hrs; gm/72 hrs; gm per 72 hrs; 72hrs; grams per 72 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"gram per cubic centimeter","g/cm3","G/CM3","mass",999999.9999999999,[-3,0,1,0,0,0,0],"g/(cm<sup>3</sup>)",null,false,"M",null,1,false,false,0,"g/cm^3; gm per cm3; g per cm^3; grams per centimeter cubed; cu. cm; centimetre; g/mL; gram per milliliter; millilitre","LOINC","MCnc","Clinical","g/cm3 = g/mL",null,null,null,null,false],[true,"gram per day","g/d","G/D","mass",0.000011574074074074073,[0,-1,1,0,0,0,0],"g/d",null,false,"M",null,1,false,false,0,"gm/dy; gm per dy; grams per day; gm/24hrs; gm/24 hrs; gm per 24 hrs; 24hrs; grams per 24 hours; serving","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"gram per deciliter","g/dL","G/DL","mass",10000,[-3,0,1,0,0,0,0],"g/dL",null,false,"M",null,1,false,false,0,"gm/dL; gm per dL; grams per deciliter; decilitre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"gram per gram","g/g","G/G","mass",1,[0,0,0,0,0,0,0],"g/g",null,false,"M",null,1,false,false,0,"gm; grams","LOINC","MRto ","Clinical","",null,null,null,null,false],[true,"gram per hour","g/h","G/HR","mass",0.0002777777777777778,[0,-1,1,0,0,0,0],"g/h",null,false,"M",null,1,false,false,0,"gm/hr; gm per hr; grams; intake; output","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"gram per hour per square meter","g/h/m2","(G/HR)/M2","mass",0.0002777777777777778,[-2,-1,1,0,0,0,0],"(g/h)/(m<sup>2</sup>)",null,false,"M",null,1,false,false,0,"gm/hr/m2; gm/h/m2; /m^2; sq. m; g per hr per m2; grams per hours per square meter; meter squared; metre","LOINC","ArMRat","Clinical","",null,null,null,null,false],[true,"gram per kilogram","g/kg ","G/KG","mass",0.001,[0,0,0,0,0,0,0],"g/kg",null,false,"M",null,1,false,false,0,"g per kg; gram per kilograms","LOINC","MCnt","Clinical","",null,null,null,null,false],[true,"gram per kilogram per 8 hour ","g/kg/(8.h)","(G/KG)/HR","mass",3.472222222222222e-8,[0,-1,0,0,0,0,0],"(g/kg)/h",null,false,"M",null,1,false,false,0,"g/(8.kg.h); gm/kg/8hrs; 8 hrs; g per kg per 8 hrs; 8hrs; grams per kilograms per 8 hours; shift","LOINC","MCntRat; RelMRat","Clinical","unit often used to describe mass in grams of protein consumed in a 8 hours, divided by the subject's body weight in kilograms. Also used to measure mass dose rate per body mass",null,null,null,null,false],[true,"gram per kilogram per day","g/kg/d","(G/KG)/D","mass",1.1574074074074074e-8,[0,-1,0,0,0,0,0],"(g/kg)/d",null,false,"M",null,1,false,false,0,"g/(kg.d); gm/kg/dy; gm per kg per dy; grams per kilograms per day","LOINC","RelMRat","Clinical","unit often used to describe mass in grams of protein consumed in a day, divided by the subject's body weight in kilograms. Also used to measure mass dose rate per body mass",null,null,null,null,false],[true,"gram per kilogram per hour","g/kg/h","(G/KG)/HR","mass",2.7777777777777776e-7,[0,-1,0,0,0,0,0],"(g/kg)/h",null,false,"M",null,1,false,false,0,"g/(kg.h); g/kg/hr; g per kg per hrs; grams per kilograms per hour","LOINC","MCntRat; RelMRat","Clinical","unit used to measure mass dose rate per body mass",null,null,null,null,false],[true,"gram per kilogram per minute","g/kg/min","(G/KG)/MIN","mass",0.000016666666666666667,[0,-1,0,0,0,0,0],"(g/kg)/min",null,false,"M",null,1,false,false,0,"g/(kg.min); g/kg/min; g per kg per min; grams per kilograms per minute","LOINC","MCntRat; RelMRat","Clinical","unit used to measure mass dose rate per body mass",null,null,null,null,false],[true,"gram per liter","g/L","G/L","mass",1000,[-3,0,1,0,0,0,0],"g/L",null,false,"M",null,1,false,false,0,"gm per liter; g/liter; grams per liter; litre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"gram per square meter","g/m2","G/M2","mass",1,[-2,0,1,0,0,0,0],"g/(m<sup>2</sup>)",null,false,"M",null,1,false,false,0,"g/m^2; gram/square meter; g/sq m; g per m2; g per m^2; grams per square meter; meters squared; metre","LOINC","ArMass","Clinical","Tests measure myocardial mass (heart ventricle system) per body surface area; unit used to measure mass dose per body surface area",null,null,null,null,false],[true,"gram per milligram","g/mg","G/MG","mass",1000,[0,0,0,0,0,0,0],"g/mg",null,false,"M",null,1,false,false,0,"g per mg; grams per milligram","LOINC","MCnt; MRto","Clinical","",null,null,null,null,false],[true,"gram per minute","g/min","G/MIN","mass",0.016666666666666666,[0,-1,1,0,0,0,0],"g/min",null,false,"M",null,1,false,false,0,"g per min; grams per minute; gram/minute","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"gram per milliliter","g/mL","G/ML","mass",1000000,[-3,0,1,0,0,0,0],"g/mL",null,false,"M",null,1,false,false,0,"g per mL; grams per milliliter; millilitre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"gram per millimole","g/mmol","G/MMOL","mass",1.6605401866749388e-21,[0,0,1,0,0,0,0],"g/mmol",null,false,"M",null,1,false,false,-1,"grams per millimole; g per mmol","LOINC","Ratio","Clinical","",null,null,null,null,false],[false,"joule per liter","J/L","J/L","energy",1000000,[-1,-2,1,0,0,0,0],"J/L","si",true,null,null,1,false,false,0,"joules per liter; litre; J per L","LOINC","EngCnc","Clinical","","N.m","N.M","1",1,false],[true,"degree Kelvin per Watt","K/W","K/W","temperature",0.001,[-2,3,-1,0,1,0,0],"K/W",null,false,"C",null,1,false,false,0,"degree Kelvin/Watt; K per W; thermal ohm; thermal resistance; degrees","LOINC","TempEngRat","Clinical","unit for absolute thermal resistance equal to the reciprocal of thermal conductance. Unit used for tests to measure work of breathing",null,null,null,null,false],[false,"kilo international unit per liter","k[IU]/L","K[IU]/L","arbitrary",1000000,[-3,0,0,0,0,0,0],"(ki.U.)/L","chemical",true,null,null,1,false,true,0,"kIU/L; kIU per L; kIU per liter; kilo international units; litre; allergens; allergy units","LOINC","ACnc","Clinical","IgE has an WHO reference standard so IgE allergen testing can be reported as k[IU]/L","[iU]","[IU]","1",1,false],[false,"kilo international unit per milliliter","k[IU]/mL","K[IU]/ML","arbitrary",1000000000,[-3,0,0,0,0,0,0],"(ki.U.)/mL","chemical",true,null,null,1,false,true,0,"kIU/mL; kIU per mL; kIU per milliliter; kilo international units; millilitre; allergens; allergy units","LOINC","ACnc","Clinical","IgE has an WHO reference standard so IgE allergen testing can be reported as k[IU]/mL","[iU]","[IU]","1",1,false],[false,"katal per kilogram","kat/kg","KAT/KG","catalytic activity",602213670000000000000,[0,-1,-1,0,0,0,0],"kat/kg","chemical",true,null,null,1,false,false,1,"kat per kg; katals per kilogram; mol/s/kg; moles per seconds per kilogram","LOINC","CCnt","Clinical","kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.","mol/s","MOL/S","1",1,false],[false,"katal per liter","kat/L","KAT/L","catalytic activity",6.0221366999999994e+26,[-3,-1,0,0,0,0,0],"kat/L","chemical",true,null,null,1,false,false,1,"kat per L; katals per liter; litre; mol/s/L; moles per seconds per liter","LOINC","CCnc","Clinical","kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.","mol/s","MOL/S","1",1,false],[false,"kilocalorie","kcal","KCAL","energy",4184000,[2,-2,1,0,0,0,0],"kcal","heat",true,null,null,1,false,false,0,"kilogram calories; large calories; food calories; kcals","LOINC","EngRat","Clinical","It is equal to 1000 calories (equal to 4.184 kJ). But in practical usage, kcal refers to food calories which excludes caloric content in fiber and other constitutes that is not digestible by humans. Also see nutrition label Calories ([Cal])","cal_th","CAL_TH","1",1,false],[false,"kilocalorie per 24 hour","kcal/(24.h)","KCAL/HR","energy",48.425925925925924,[2,-3,1,0,0,0,0],"kcal/h","heat",true,null,null,1,false,false,0,"kcal/24hrs; kcal/24 hrs; kcal per 24hrs; kilocalories per 24 hours; kilojoules; kJ/24hr; kJ/(24.h); kJ/dy; kilojoules per days; intake; calories burned; metabolic rate; food calories","","EngRat","Clinical","","cal_th","CAL_TH","1",1,false],[false,"kilocalorie per ounce","kcal/[oz_av]","KCAL/[OZ_AV]","energy",147586.25679704445,[2,-2,0,0,0,0,0],"kcal/oz","heat",true,null,null,1,false,false,0,"kcal/oz; kcal per ozs; large calories per ounces; food calories; servings; international","LOINC","EngCnt","Clinical","used in nutrition to represent calorie of food","cal_th","CAL_TH","1",1,false],[false,"kilocalorie per day","kcal/d","KCAL/D","energy",48.425925925925924,[2,-3,1,0,0,0,0],"kcal/d","heat",true,null,null,1,false,false,0,"kcal/dy; kcal per day; kilocalories per days; kilojoules; kJ/dy; kilojoules per days; intake; calories burned; metabolic rate; food calories","LOINC","EngRat","Clinical","unit in nutrition for food intake (measured in calories) in a day","cal_th","CAL_TH","1",1,false],[false,"kilocalorie per hour","kcal/h","KCAL/HR","energy",1162.2222222222222,[2,-3,1,0,0,0,0],"kcal/h","heat",true,null,null,1,false,false,0,"kcal/hrs; kcals per hr; intake; kilocalories per hours; kilojoules","LOINC","EngRat","Clinical","used in nutrition to represent caloric requirement or consumption","cal_th","CAL_TH","1",1,false],[false,"kilocalorie per kilogram per 24 hour","kcal/kg/(24.h)","(KCAL/KG)/HR","energy",0.04842592592592593,[2,-3,0,0,0,0,0],"(kcal/kg)/h","heat",true,null,null,1,false,false,0,"kcal/kg/24hrs; 24 hrs; kcal per kg per 24hrs; kilocalories per kilograms per 24 hours; kilojoules","LOINC","EngCntRat","Clinical","used in nutrition to represent caloric requirement per day based on subject's body weight in kilograms","cal_th","CAL_TH","1",1,false],[true,"kilogram","kg","KG","mass",1000,[0,0,1,0,0,0,0],"kg",null,false,"M",null,1,false,false,0,"kilograms; kgs","LOINC","Mass","Clinical","",null,null,null,null,false],[true,"kilogram meter per second","kg.m/s","(KG.M)/S","mass",1000,[1,-1,1,0,0,0,0],"(kg.m)/s",null,false,"M",null,1,false,false,0,"kg*m/s; kg.m per sec; kg*m per sec; p; momentum","LOINC","","Clinical","unit for momentum =  mass times velocity",null,null,null,null,false],[true,"kilogram per second per square meter","kg/(s.m2)","KG/(S.M2)","mass",1000,[-2,-1,1,0,0,0,0],"kg/(s.(m<sup>2</sup>))",null,false,"M",null,1,false,false,0,"kg/(s*m2); kg/(s*m^2); kg per s per m2; per sec; per m^2; kilograms per seconds per square meter; meter squared; metre","LOINC","ArMRat","Clinical","",null,null,null,null,false],[true,"kilogram per hour","kg/h","KG/HR","mass",0.2777777777777778,[0,-1,1,0,0,0,0],"kg/h",null,false,"M",null,1,false,false,0,"kg/hr; kg per hr; kilograms per hour","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"kilogram per liter","kg/L","KG/L","mass",1000000,[-3,0,1,0,0,0,0],"kg/L",null,false,"M",null,1,false,false,0,"kg per liter; litre; kilograms","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"kilogram per square meter","kg/m2","KG/M2","mass",1000,[-2,0,1,0,0,0,0],"kg/(m<sup>2</sup>)",null,false,"M",null,1,false,false,0,"kg/m^2; kg/sq. m; kg per m2; per m^2; per sq. m; kilograms; meter squared; metre; BMI","LOINC","Ratio","Clinical","units for body mass index (BMI)",null,null,null,null,false],[true,"kilogram per cubic meter","kg/m3","KG/M3","mass",1000,[-3,0,1,0,0,0,0],"kg/(m<sup>3</sup>)",null,false,"M",null,1,false,false,0,"kg/m^3; kg/cu. m; kg per m3; per m^3; per cu. m; kilograms; meters cubed; metre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"kilogram per minute","kg/min","KG/MIN","mass",16.666666666666668,[0,-1,1,0,0,0,0],"kg/min",null,false,"M",null,1,false,false,0,"kilogram/minute; kg per min; kilograms per minute","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"kilogram per mole","kg/mol","KG/MOL","mass",1.6605401866749388e-21,[0,0,1,0,0,0,0],"kg/mol",null,false,"M",null,1,false,false,-1,"kilogram/mole; kg per mol; kilograms per mole","LOINC","SCnt","Clinical","",null,null,null,null,false],[true,"kilogram per second","kg/s","KG/S","mass",1000,[0,-1,1,0,0,0,0],"kg/s",null,false,"M",null,1,false,false,0,"kg/sec; kilogram/second; kg per sec; kilograms; second","LOINC","MRat","Clinical","",null,null,null,null,false],[false,"kiloliter","kL","KL","volume",1,[3,0,0,0,0,0,0],"kL","iso1000",true,null,null,1,false,false,0,"kiloliters; kilolitres; m3; m^3; meters cubed; metre","LOINC","Vol","Clinical","","l",null,"1",1,false],[true,"kilometer","km","KM","length",1000,[1,0,0,0,0,0,0],"km",null,false,"L",null,1,false,false,0,"kilometers; kilometres; distance","LOINC","Len","Clinical","",null,null,null,null,false],[false,"kilopascal","kPa","KPAL","pressure",1000000,[-1,-2,1,0,0,0,0],"kPa","si",true,null,null,1,false,false,0,"kilopascals; pressure","LOINC","Pres; PPresDiff","Clinical","","N/m2","N/M2","1",1,false],[true,"kilosecond","ks","KS","time",1000,[0,1,0,0,0,0,0],"ks",null,false,"T",null,1,false,false,0,"kiloseconds; ksec","LOINC","Time","Clinical","",null,null,null,null,false],[false,"kilo enzyme unit","kU","KU","catalytic activity",10036894500000000000,[0,-1,0,0,0,0,0],"kU","chemical",true,null,null,1,false,false,1,"units; mmol/min; millimoles per minute","LOINC","CAct","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 kU = 1 mmol/min","umol/min","UMOL/MIN","1",1,false],[false,"kilo enzyme unit per gram","kU/g","KU/G","catalytic activity",10036894500000000000,[0,-1,-1,0,0,0,0],"kU/g","chemical",true,null,null,1,false,false,1,"units per grams; kU per gm","LOINC","CCnt","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 kU = 1 mmol/min","umol/min","UMOL/MIN","1",1,false],[false,"kilo enzyme unit per liter","kU/L","KU/L","catalytic activity",1.00368945e+22,[-3,-1,0,0,0,0,0],"kU/L","chemical",true,null,null,1,false,false,1,"units per liter; litre; enzymatic activity; enzyme activity per volume; activities","LOINC","ACnc; CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 kU = 1 mmol/min","umol/min","UMOL/MIN","1",1,false],[false,"kilo enzyme unit per milliliter","kU/mL","KU/ML","catalytic activity",1.00368945e+25,[-3,-1,0,0,0,0,0],"kU/mL","chemical",true,null,null,1,false,false,1,"kU per mL; units per milliliter; millilitre; enzymatic activity per volume; enzyme activities","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 kU = 1 mmol/min","umol/min","UMOL/MIN","1",1,false],[false,"Liters per 24 hour","L/(24.h)","L/HR","volume",1.1574074074074074e-8,[3,-1,0,0,0,0,0],"L/h","iso1000",true,null,null,1,false,false,0,"L/24hrs; L/24 hrs; L per 24hrs; liters per 24 hours; day; dy; litres; volume flow rate","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"Liters per 8 hour","L/(8.h)","L/HR","volume",3.472222222222222e-8,[3,-1,0,0,0,0,0],"L/h","iso1000",true,null,null,1,false,false,0,"L/8hrs; L/8 hrs; L per 8hrs; liters per 8 hours; litres; volume flow rate; shift","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"Liters per minute per square meter","L/(min.m2) ","L/(MIN.M2)","volume",0.000016666666666666667,[1,-1,0,0,0,0,0],"L/(min.(m<sup>2</sup>))","iso1000",true,null,null,1,false,false,0,"L/(min.m2); L/min/m^2; L/min/sq. meter; L per min per m2; m^2; liters per minutes per square meter; meter squared; litres; metre ","LOINC","ArVRat","Clinical","unit for tests that measure cardiac output per body surface area (cardiac index)","l",null,"1",1,false],[false,"Liters per day","L/d","L/D","volume",1.1574074074074074e-8,[3,-1,0,0,0,0,0],"L/d","iso1000",true,null,null,1,false,false,0,"L/dy; L per day; 24hrs; 24 hrs; 24 hours; liters; litres","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"Liters per hour","L/h","L/HR","volume",2.7777777777777776e-7,[3,-1,0,0,0,0,0],"L/h","iso1000",true,null,null,1,false,false,0,"L/hr; L per hr; litres","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"Liters per kilogram","L/kg","L/KG","volume",0.000001,[3,0,-1,0,0,0,0],"L/kg","iso1000",true,null,null,1,false,false,0,"L per kg; litre","LOINC","VCnt","Clinical","","l",null,"1",1,false],[false,"Liters per liter","L/L","L/L","volume",1,[0,0,0,0,0,0,0],"L/L","iso1000",true,null,null,1,false,false,0,"L per L; liter/liter; litre","LOINC","VFr","Clinical","","l",null,"1",1,false],[false,"Liters per minute","L/min","L/MIN","volume",0.000016666666666666667,[3,-1,0,0,0,0,0],"L/min","iso1000",true,null,null,1,false,false,0,"liters per minute; litre","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"Liters per minute per square meter","L/min/m2","(L/MIN)/M2","volume",0.000016666666666666667,[1,-1,0,0,0,0,0],"(L/min)/(m<sup>2</sup>)","iso1000",true,null,null,1,false,false,0,"L/(min.m2); L/min/m^2; L/min/sq. meter; L per min per m2; m^2; liters per minutes per square meter; meter squared; litres; metre ","","ArVRat","Clinical","unit for tests that measure cardiac output per body surface area (cardiac index)","l",null,"1",1,false],[false,"Liters per second","L/s","L/S","volume",0.001,[3,-1,0,0,0,0,0],"L/s","iso1000",true,null,null,1,false,false,0,"L per sec; litres","LOINC","VRat","Clinical","unit used often to measure gas flow and peak expiratory flow","l",null,"1",1,false],[false,"Liters per second per square second","L/s/s2","(L/S)/S2","volume",0.001,[3,-3,0,0,0,0,0],"(L/s)/(s<sup>2</sup>)","iso1000",true,null,null,1,false,false,0,"L/s/s^2; L/sec/sec2; L/sec/sec^2; L/sec/sq. sec; L per s per s2; L per sec per sec2; s^2; sec^2; liters per seconds per square second; second squared; litres ","LOINC","ArVRat","Clinical","unit for tests that measure cardiac output/body surface area","l",null,"1",1,false],[false,"lumen square meter","lm.m2","LM.M2","luminous flux",1,[2,0,0,2,0,0,1],"lm.(m<sup>2</sup>)","si",true,null,null,1,false,false,0,"lm*m2; lm*m^2; lumen meters squared; lumen sq. meters; metres","LOINC","","Clinical","","cd.sr","CD.SR","1",1,false],[true,"meter per second","m/s","M/S","length",1,[1,-1,0,0,0,0,0],"m/s",null,false,"L",null,1,false,false,0,"meter/second; m per sec; meters per second; metres; velocity; speed","LOINC","Vel","Clinical","unit of velocity",null,null,null,null,false],[true,"meter per square second","m/s2","M/S2","length",1,[1,-2,0,0,0,0,0],"m/(s<sup>2</sup>)",null,false,"L",null,1,false,false,0,"m/s^2; m/sq. sec; m per s2; per s^2; meters per square second; second squared; sq second; metres; acceleration","LOINC","Accel","Clinical","unit of acceleration",null,null,null,null,false],[false,"milli international unit per liter","m[IU]/L","M[IU]/L","arbitrary",1,[-3,0,0,0,0,0,0],"(mi.U.)/L","chemical",true,null,null,1,false,true,0,"mIU/L; m IU/L; mIU per liter; units; litre","LOINC","ACnc","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"milli  international unit per milliliter","m[IU]/mL","M[IU]/ML","arbitrary",1000.0000000000001,[-3,0,0,0,0,0,0],"(mi.U.)/mL","chemical",true,null,null,1,false,true,0,"mIU/mL; m IU/mL; mIU per mL; milli international units per milliliter; millilitre","LOINC","ACnc","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[true,"square meter","m2","M2","length",1,[2,0,0,0,0,0,0],"m<sup>2</sup>",null,false,"L",null,1,false,false,0,"m^2; sq m; square meters; meters squared; metres","LOINC","Area","Clinical","unit often used to represent body surface area",null,null,null,null,false],[true,"square meter per second","m2/s","M2/S","length",1,[2,-1,0,0,0,0,0],"(m<sup>2</sup>)/s",null,false,"L",null,1,false,false,0,"m^2/sec; m2 per sec; m^2 per sec; sq m/sec; meters squared/seconds; sq m per sec; meters squared; metres","LOINC","ArRat","Clinical","",null,null,null,null,false],[true,"cubic meter per second","m3/s","M3/S","length",1,[3,-1,0,0,0,0,0],"(m<sup>3</sup>)/s",null,false,"L",null,1,false,false,0,"m^3/sec; m3 per sec; m^3 per sec; cu m/sec; cubic meters per seconds; meters cubed; metres","LOINC","VRat","Clinical","",null,null,null,null,false],[false,"milliampere","mA","MA","electric current",0.001,[0,-1,0,0,0,1,0],"mA","si",true,null,null,1,false,false,0,"mamp; milliamperes","LOINC","ElpotRat","Clinical","unit of electric current","C/s","C/S","1",1,false],[false,"millibar","mbar","MBAR","pressure",100000,[-1,-2,1,0,0,0,0],"mbar","iso1000",true,null,null,1,false,false,0,"millibars","LOINC","Pres","Clinical","unit of pressure","Pa","PAL","1e5",100000,false],[false,"millibar second per liter","mbar.s/L","(MBAR.S)/L","pressure",100000000,[-4,-1,1,0,0,0,0],"(mbar.s)/L","iso1000",true,null,null,1,false,false,0,"mbar*s/L; mbar.s per L; mbar*s per L; millibar seconds per liter; millibar second per litre","LOINC","","Clinical","unit to measure expiratory resistance","Pa","PAL","1e5",100000,false],[false,"millibar per liter per second","mbar/L/s","(MBAR/L)/S","pressure",100000000,[-4,-3,1,0,0,0,0],"(mbar/L)/s","iso1000",true,null,null,1,false,false,0,"mbar/(L.s); mbar/L/sec; mbar/liter/second; mbar per L per sec; mbar per liter per second; millibars per liters per seconds; litres","LOINC","PresCncRat","Clinical","unit to measure expiratory resistance","Pa","PAL","1e5",100000,false],[false,"milliequivalent","meq","MEQ","amount of substance",602213670000000000000,[0,0,0,0,0,0,0],"meq","chemical",true,null,null,1,false,false,1,"milliequivalents; meqs","LOINC","Sub","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"milliequivalent per 2 hour","meq/(2.h)","MEQ/HR","amount of substance",83640787500000000,[0,-1,0,0,0,0,0],"meq/h","chemical",true,null,null,1,false,false,1,"meq/2hrs; meq/2 hrs; meq per 2 hrs; milliequivalents per 2 hours","LOINC","SRat","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"milliequivalent per 24 hour","meq/(24.h)","MEQ/HR","amount of substance",6970065625000000,[0,-1,0,0,0,0,0],"meq/h","chemical",true,null,null,1,false,false,1,"meq/24hrs; meq/24 hrs; meq per 24 hrs; milliequivalents per 24 hours","LOINC","SRat","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"milliequivalent per 8 hour","meq/(8.h)","MEQ/HR","amount of substance",20910196875000000,[0,-1,0,0,0,0,0],"meq/h","chemical",true,null,null,1,false,false,1,"meq/8hrs; meq/8 hrs; meq per 8 hrs; milliequivalents per 8 hours; shift","LOINC","SRat","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"milliequivalent per day","meq/d","MEQ/D","amount of substance",6970065625000000,[0,-1,0,0,0,0,0],"meq/d","chemical",true,null,null,1,false,false,1,"meq/dy; meq per day; milliquivalents per days; meq/24hrs; meq/24 hrs; meq per 24 hrs; milliequivalents per 24 hours","LOINC","SRat","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"milliequivalent per deciliter","meq/dL","MEQ/DL","amount of substance",6.022136699999999e+24,[-3,0,0,0,0,0,0],"meq/dL","chemical",true,null,null,1,false,false,1,"meq per dL; milliequivalents per deciliter; decilitre","LOINC","SCnc","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"milliequivalent per gram","meq/g","MEQ/G","amount of substance",602213670000000000000,[0,0,-1,0,0,0,0],"meq/g","chemical",true,null,null,1,false,false,1,"mgq/gm; meq per gm; milliequivalents per gram","LOINC","MCnt","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"milliequivalent per hour","meq/h","MEQ/HR","amount of substance",167281575000000000,[0,-1,0,0,0,0,0],"meq/h","chemical",true,null,null,1,false,false,1,"meq/hrs; meq per hrs; milliequivalents per hour","LOINC","SRat","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"milliequivalent per kilogram","meq/kg","MEQ/KG","amount of substance",602213670000000000,[0,0,-1,0,0,0,0],"meq/kg","chemical",true,null,null,1,false,false,1,"meq per kg; milliequivalents per kilogram","LOINC","SCnt","Clinical","equivalence equals moles per valence; used to measure dose per patient body mass","mol","MOL","1",1,false],[false,"milliequivalent per kilogram per hour","meq/kg/h","(MEQ/KG)/HR","amount of substance",167281575000000,[0,-1,-1,0,0,0,0],"(meq/kg)/h","chemical",true,null,null,1,false,false,1,"meq/(kg.h); meq/kg/hr; meq per kg per hr; milliequivalents per kilograms per hour","LOINC","SCntRat","Clinical","equivalence equals moles per valence; unit used to measure dose rate per patient body mass","mol","MOL","1",1,false],[false,"milliequivalent per liter","meq/L","MEQ/L","amount of substance",6.0221367e+23,[-3,0,0,0,0,0,0],"meq/L","chemical",true,null,null,1,false,false,1,"milliequivalents per liter; litre; meq per l; acidity","LOINC","SCnc","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"milliequivalent per square meter","meq/m2","MEQ/M2","amount of substance",602213670000000000000,[-2,0,0,0,0,0,0],"meq/(m<sup>2</sup>)","chemical",true,null,null,1,false,false,1,"meq/m^2; meq/sq. m; milliequivalents per square meter; meter squared; metre","LOINC","ArSub","Clinical","equivalence equals moles per valence; note that the use of m2 in clinical units ofter refers to body surface area","mol","MOL","1",1,false],[false,"milliequivalent per minute","meq/min","MEQ/MIN","amount of substance",10036894500000000000,[0,-1,0,0,0,0,0],"meq/min","chemical",true,null,null,1,false,false,1,"meq per min; milliequivalents per minute","LOINC","SRat","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[false,"milliequivalent per milliliter","meq/mL","MEQ/ML","amount of substance",6.0221367e+26,[-3,0,0,0,0,0,0],"meq/mL","chemical",true,null,null,1,false,false,1,"meq per mL; milliequivalents per milliliter; millilitre","LOINC","SCnc","Clinical","equivalence equals moles per valence","mol","MOL","1",1,false],[true,"milligram","mg","MG","mass",0.001,[0,0,1,0,0,0,0],"mg",null,false,"M",null,1,false,false,0,"milligrams","LOINC","Mass","Clinical","",null,null,null,null,false],[true,"milligram per 10 hour","mg/(10.h)","MG/HR","mass",2.7777777777777777e-8,[0,-1,1,0,0,0,0],"mg/h",null,false,"M",null,1,false,false,0,"mg/10hrs; mg/10 hrs; mg per 10 hrs; milligrams per 10 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"milligram per 12 hour","mg/(12.h)","MG/HR","mass",2.3148148148148148e-8,[0,-1,1,0,0,0,0],"mg/h",null,false,"M",null,1,false,false,0,"mg/12hrs; mg/12 hrs; per 12 hrs; 12hrs; milligrams per 12 hours","LOINC","MRat","Clinical","units used for tests in urine",null,null,null,null,false],[true,"milligram per 2 hour","mg/(2.h)","MG/HR","mass",1.3888888888888888e-7,[0,-1,1,0,0,0,0],"mg/h",null,false,"M",null,1,false,false,0,"mg/2hrs; mg/2 hrs; mg per 2 hrs; 2hrs; milligrams per 2 hours","LOINC","MRat","Clinical","units used for tests in urine",null,null,null,null,false],[true,"milligram per 24 hour","mg/(24.h)","MG/HR","mass",1.1574074074074074e-8,[0,-1,1,0,0,0,0],"mg/h",null,false,"M",null,1,false,false,0,"mg/24hrs; mg/24 hrs; milligrams per 24 hours; mg/kg/dy; mg per kg per day; milligrams per kilograms per days","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"milligram per 6 hour","mg/(6.h)","MG/HR","mass",4.6296296296296295e-8,[0,-1,1,0,0,0,0],"mg/h",null,false,"M",null,1,false,false,0,"mg/6hrs; mg/6 hrs; mg per 6 hrs; 6hrs; milligrams per 6 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"milligram per 72 hour","mg/(72.h)","MG/HR","mass",3.858024691358025e-9,[0,-1,1,0,0,0,0],"mg/h",null,false,"M",null,1,false,false,0,"mg/72hrs; mg/72 hrs; 72 hrs; 72hrs; milligrams per 72 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"milligram per 8 hour","mg/(8.h)","MG/HR","mass",3.472222222222222e-8,[0,-1,1,0,0,0,0],"mg/h",null,false,"M",null,1,false,false,0,"mg/8hrs; mg/8 hrs; milligrams per 8 hours; shift","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"milligram per day","mg/d","MG/D","mass",1.1574074074074074e-8,[0,-1,1,0,0,0,0],"mg/d",null,false,"M",null,1,false,false,0,"mg/24hrs; mg/24 hrs; milligrams per 24 hours; mg/dy; mg per day; milligrams","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"milligram per deciliter","mg/dL","MG/DL","mass",10,[-3,0,1,0,0,0,0],"mg/dL",null,false,"M",null,1,false,false,0,"mg per dL; milligrams per deciliter; decilitre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"milligram per gram","mg/g","MG/G","mass",0.001,[0,0,0,0,0,0,0],"mg/g",null,false,"M",null,1,false,false,0,"mg per gm; milligrams per gram","LOINC","MCnt; MRto","Clinical","",null,null,null,null,false],[true,"milligram per hour","mg/h","MG/HR","mass",2.7777777777777776e-7,[0,-1,1,0,0,0,0],"mg/h",null,false,"M",null,1,false,false,0,"mg/hr; mg per hr; milligrams","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"milligram per kilogram","mg/kg","MG/KG","mass",0.000001,[0,0,0,0,0,0,0],"mg/kg",null,false,"M",null,1,false,false,0,"mg per kg; milligrams per kilograms","LOINC","MCnt","Clinical","",null,null,null,null,false],[true,"milligram per kilogram per 8 hour","mg/kg/(8.h)","(MG/KG)/HR","mass",3.472222222222222e-11,[0,-1,0,0,0,0,0],"(mg/kg)/h",null,false,"M",null,1,false,false,0,"mg/(8.h.kg); mg/kg/8hrs; mg/kg/8 hrs; mg per kg per 8hrs; 8 hrs; milligrams per kilograms per 8 hours; shift","LOINC","RelMRat; MCntRat","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"milligram per kilogram per day","mg/kg/d","(MG/KG)/D","mass",1.1574074074074074e-11,[0,-1,0,0,0,0,0],"(mg/kg)/d",null,false,"M",null,1,false,false,0,"mg/(kg.d); mg/(kg.24.h)mg/kg/dy; mg per kg per day; milligrams per kilograms per days; mg/kg/(24.h); mg/kg/24hrs; 24 hrs; 24 hours","LOINC","RelMRat ","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"milligram per kilogram per hour","mg/kg/h","(MG/KG)/HR","mass",2.7777777777777777e-10,[0,-1,0,0,0,0,0],"(mg/kg)/h",null,false,"M",null,1,false,false,0,"mg/(kg.h); mg/kg/hr; mg per kg per hr; milligrams per kilograms per hour","LOINC","RelMRat; MCntRat","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"milligram per kilogram per minute","mg/kg/min","(MG/KG)/MIN","mass",1.6666666666666667e-8,[0,-1,0,0,0,0,0],"(mg/kg)/min",null,false,"M",null,1,false,false,0,"mg/(kg.min); mg per kg per min; milligrams per kilograms per minute","LOINC","RelMRat; MCntRat","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"milligram per liter","mg/L","MG/L","mass",1,[-3,0,1,0,0,0,0],"mg/L",null,false,"M",null,1,false,false,0,"mg per l; milligrams per liter; litre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"milligram per square meter","mg/m2","MG/M2","mass",0.001,[-2,0,1,0,0,0,0],"mg/(m<sup>2</sup>)",null,false,"M",null,1,false,false,0,"mg/m^2; mg/sq. m; mg per m2; mg per m^2; mg per sq. milligrams; meter squared; metre","LOINC","ArMass","Clinical","",null,null,null,null,false],[true,"milligram per cubic meter","mg/m3","MG/M3","mass",0.001,[-3,0,1,0,0,0,0],"mg/(m<sup>3</sup>)",null,false,"M",null,1,false,false,0,"mg/m^3; mg/cu. m; mg per m3; milligrams per cubic meter; meter cubed; metre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"milligram per milligram","mg/mg","MG/MG","mass",1,[0,0,0,0,0,0,0],"mg/mg",null,false,"M",null,1,false,false,0,"mg per mg; milligrams; milligram/milligram","LOINC","MRto","Clinical","",null,null,null,null,false],[true,"milligram per minute","mg/min","MG/MIN","mass",0.000016666666666666667,[0,-1,1,0,0,0,0],"mg/min",null,false,"M",null,1,false,false,0,"mg per min; milligrams per minutes; milligram/minute","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"milligram per milliliter","mg/mL","MG/ML","mass",1000.0000000000001,[-3,0,1,0,0,0,0],"mg/mL",null,false,"M",null,1,false,false,0,"mg per mL; milligrams per milliliters; millilitre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"milligram per millimole","mg/mmol","MG/MMOL","mass",1.660540186674939e-24,[0,0,1,0,0,0,0],"mg/mmol",null,false,"M",null,1,false,false,-1,"mg per mmol; milligrams per millimole; ","LOINC","Ratio","Clinical","",null,null,null,null,false],[true,"milligram per week","mg/wk","MG/WK","mass",1.6534391534391535e-9,[0,-1,1,0,0,0,0],"mg/wk",null,false,"M",null,1,false,false,0,"mg/week; mg per wk; milligrams per weeks; milligram/week","LOINC","Mrat","Clinical","",null,null,null,null,false],[false,"milliliter","mL","ML","volume",0.000001,[3,0,0,0,0,0,0],"mL","iso1000",true,null,null,1,false,false,0,"milliliters; millilitres","LOINC","Vol","Clinical","","l",null,"1",1,false],[false,"milliliter per 10 hour","mL/(10.h)","ML/HR","volume",2.7777777777777777e-11,[3,-1,0,0,0,0,0],"mL/h","iso1000",true,null,null,1,false,false,0,"ml/10hrs; ml/10 hrs; mL per 10hrs; 10 hrs; milliliters per 10 hours; millilitres","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"milliliter per 12 hour","mL/(12.h)","ML/HR","volume",2.3148148148148147e-11,[3,-1,0,0,0,0,0],"mL/h","iso1000",true,null,null,1,false,false,0,"ml/12hrs; ml/12 hrs; mL per 12hrs; 12 hrs; milliliters per 12 hours; millilitres","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"milliliter per 2 hour","mL/(2.h)","ML/HR","volume",1.3888888888888888e-10,[3,-1,0,0,0,0,0],"mL/h","iso1000",true,null,null,1,false,false,0,"ml/2hrs; ml/2 hrs; mL per 2hrs; 2 hrs; milliliters per 2 hours; millilitres ","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"milliliter per 24 hour","mL/(24.h)","ML/HR","volume",1.1574074074074074e-11,[3,-1,0,0,0,0,0],"mL/h","iso1000",true,null,null,1,false,false,0,"ml/24hrs; ml/24 hrs; mL per 24hrs; 24 hrs; milliliters per 24 hours; millilitres; ml/dy; /day; ml per dy; days; fluid outputs; fluid inputs; flow rate","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"milliliter per 4 hour","mL/(4.h)","ML/HR","volume",6.944444444444444e-11,[3,-1,0,0,0,0,0],"mL/h","iso1000",true,null,null,1,false,false,0,"ml/4hrs; ml/4 hrs; mL per 4hrs; 4 hrs; milliliters per 4 hours; millilitres","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"milliliter per 5 hour","mL/(5.h)","ML/HR","volume",5.5555555555555553e-11,[3,-1,0,0,0,0,0],"mL/h","iso1000",true,null,null,1,false,false,0,"ml/5hrs; ml/5 hrs; mL per 5hrs; 5 hrs; milliliters per 5 hours; millilitres","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"milliliter per 6 hour","mL/(6.h)","ML/HR","volume",4.6296296296296294e-11,[3,-1,0,0,0,0,0],"mL/h","iso1000",true,null,null,1,false,false,0,"ml/6hrs; ml/6 hrs; mL per 6hrs; 6 hrs; milliliters per 6 hours; millilitres","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"milliliter per 72 hour","mL/(72.h)","ML/HR","volume",3.8580246913580245e-12,[3,-1,0,0,0,0,0],"mL/h","iso1000",true,null,null,1,false,false,0,"ml/72hrs; ml/72 hrs; mL per 72hrs; 72 hrs; milliliters per 72 hours; millilitres","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"milliliter per 8 hour","mL/(8.h)","ML/HR","volume",3.472222222222222e-11,[3,-1,0,0,0,0,0],"mL/h","iso1000",true,null,null,1,false,false,0,"ml/8hrs; ml/8 hrs; mL per 8hrs; 8 hrs; milliliters per 8 hours; millilitres; shift","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"milliliter per 8 hour per kilogram","mL/(8.h)/kg","(ML/HR)/KG","volume",3.472222222222222e-14,[3,-1,-1,0,0,0,0],"(mL/h)/kg","iso1000",true,null,null,1,false,false,0,"mL/kg/(8.h); ml/8h/kg; ml/8 h/kg; ml/8hr/kg; ml/8 hr/kgr; mL per 8h per kg; 8 h; 8hr; 8 hr; milliliters per 8 hours per kilogram; millilitres; shift","LOINC","VRatCnt","Clinical","unit used to measure renal excretion volume rate per body mass","l",null,"1",1,false],[false,"milliliter per square inch (international)","mL/[sin_i]","ML/[SIN_I]","volume",0.0015500031000061998,[1,0,0,0,0,0,0],"mL","iso1000",true,null,null,1,false,false,0,"mL/sin; mL/in2; mL/in^2; mL per sin; in2; in^2; sq. in; milliliters per square inch; inch squared","LOINC","ArVol","Clinical","","l",null,"1",1,false],[false,"milliliter per centimeter of water","mL/cm[H2O]","ML/CM[H2O]","volume",1.0197162129779282e-11,[4,2,-1,0,0,0,0],"mL/(cm HO<sub><r>2</r></sub>)","iso1000",true,null,null,1,false,false,0,"milliliters per centimeter of water; millilitre per centimetre of water; millilitres per centimetre of water; mL/cmH2O; mL/cm H2O; mL per cmH2O; mL per cm H2O","LOINC","Compli","Clinical","unit used to measure dynamic lung compliance","l",null,"1",1,false],[false,"milliliter per day","mL/d","ML/D","volume",1.1574074074074074e-11,[3,-1,0,0,0,0,0],"mL/d","iso1000",true,null,null,1,false,false,0,"ml/day; ml per day; milliliters per day; 24 hours; 24hrs; millilitre;","LOINC","VRat","Clinical","usually used to measure fluid output or input; flow rate","l",null,"1",1,false],[false,"milliliter per deciliter","mL/dL","ML/DL","volume",0.009999999999999998,[0,0,0,0,0,0,0],"mL/dL","iso1000",true,null,null,1,false,false,0,"mL per dL; millilitres; decilitre; milliliters","LOINC","VFr; VFrDiff","Clinical","","l",null,"1",1,false],[false,"milliliter per hour","mL/h","ML/HR","volume",2.7777777777777777e-10,[3,-1,0,0,0,0,0],"mL/h","iso1000",true,null,null,1,false,false,0,"mL/hr; mL per hr; milliliters per hour; millilitres; fluid intake; fluid output","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"milliliter per kilogram","mL/kg","ML/KG","volume",9.999999999999999e-10,[3,0,-1,0,0,0,0],"mL/kg","iso1000",true,null,null,1,false,false,0,"mL per kg; milliliters per kilogram; millilitres","LOINC","VCnt","Clinical","","l",null,"1",1,false],[false,"milliliter per kilogram per 8 hour","mL/kg/(8.h)","(ML/KG)/HR","volume",3.472222222222222e-14,[3,-1,-1,0,0,0,0],"(mL/kg)/h","iso1000",true,null,null,1,false,false,0,"mL/(8.h.kg); mL/kg/8hrs; mL/kg/8 hrs; mL per kg per 8hrs; 8 hrs; milliliters per kilograms per 8 hours; millilitres; shift","LOINC","VCntRat; RelEngRat","Clinical","unit used to measure renal excretion volume rate per body mass","l",null,"1",1,false],[false,"milliliter per kilogram per day","mL/kg/d","(ML/KG)/D","volume",1.1574074074074072e-14,[3,-1,-1,0,0,0,0],"(mL/kg)/d","iso1000",true,null,null,1,false,false,0,"mL/(kg.d); mL/kg/dy; mL per kg per day; milliliters per kilograms per day; mg/kg/24hrs; 24 hrs; per 24 hours millilitres","LOINC","VCntRat; RelEngRat","Clinical","unit used to measure renal excretion volume rate per body mass","l",null,"1",1,false],[false,"milliliter per kilogram per hour","mL/kg/h","(ML/KG)/HR","volume",2.7777777777777774e-13,[3,-1,-1,0,0,0,0],"(mL/kg)/h","iso1000",true,null,null,1,false,false,0,"mL/(kg.h); mL/kg/hr; mL per kg per hr; milliliters per kilograms per hour; millilitres","LOINC","VCntRat; RelEngRat","Clinical","unit used to measure renal excretion volume rate per body mass","l",null,"1",1,false],[false,"milliliter per kilogram per minute","mL/kg/min","(ML/KG)/MIN","volume",1.6666666666666664e-11,[3,-1,-1,0,0,0,0],"(mL/kg)/min","iso1000",true,null,null,1,false,false,0,"mL/(kg.min); mL/kg/dy; mL per kg per day; milliliters per kilograms per day; millilitres","LOINC","RelEngRat","Clinical","used for tests that measure activity metabolic rate compared to standard resting metabolic rate ","l",null,"1",1,false],[false,"milliliter per square meter","mL/m2","ML/M2","volume",0.000001,[1,0,0,0,0,0,0],"mL/(m<sup>2</sup>)","iso1000",true,null,null,1,false,false,0,"mL/m^2; mL/sq. meter; mL per m2; m^2; sq. meter; milliliters per square meter; millilitres; meter squared","LOINC","ArVol","Clinical","used for tests that relate to heart work - e.g. ventricular stroke volume; atrial volume per body surface area","l",null,"1",1,false],[false,"milliliter per millibar","mL/mbar","ML/MBAR","volume",1e-11,[4,2,-1,0,0,0,0],"mL/mbar","iso1000",true,null,null,1,false,false,0,"mL per mbar; milliliters per millibar; millilitres","LOINC","","Clinical","unit used to measure dynamic lung compliance","l",null,"1",1,false],[false,"milliliter per minute","mL/min","ML/MIN","volume",1.6666666666666667e-8,[3,-1,0,0,0,0,0],"mL/min","iso1000",true,null,null,1,false,false,0,"mL per min; milliliters; millilitres","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"milliliter per minute per square meter","mL/min/m2","(ML/MIN)/M2","volume",1.6666666666666667e-8,[1,-1,0,0,0,0,0],"(mL/min)/(m<sup>2</sup>)","iso1000",true,null,null,1,false,false,0,"ml/min/m^2; ml/min/sq. meter; mL per min per m2; m^2; sq. meter; milliliters per minutes per square meter; millilitres; metre; meter squared","LOINC","ArVRat","Clinical","unit used to measure volume per body surface area; oxygen consumption index","l",null,"1",1,false],[false,"milliliter per millimeter","mL/mm","ML/MM","volume",0.001,[2,0,0,0,0,0,0],"mL/mm","iso1000",true,null,null,1,false,false,0,"mL per mm; milliliters per millimeter; millilitres; millimetre","LOINC","Lineic Volume","Clinical","","l",null,"1",1,false],[false,"milliliter per second","mL/s","ML/S","volume",0.000001,[3,-1,0,0,0,0,0],"mL/s","iso1000",true,null,null,1,false,false,0,"ml/sec; mL per sec; milliliters per second; millilitres","LOINC","Vel; VelRat; VRat","Clinical","","l",null,"1",1,false],[true,"millimeter","mm","MM","length",0.001,[1,0,0,0,0,0,0],"mm",null,false,"L",null,1,false,false,0,"millimeters; millimetres; height; length; diameter; thickness; axis; curvature; size","LOINC","Len","Clinical","",null,null,null,null,false],[true,"millimeter per hour","mm/h","MM/HR","length",2.7777777777777776e-7,[1,-1,0,0,0,0,0],"mm/h",null,false,"L",null,1,false,false,0,"mm/hr; mm per hr; millimeters per hour; millimetres","LOINC","Vel","Clinical","unit to measure sedimentation rate",null,null,null,null,false],[true,"millimeter per minute","mm/min","MM/MIN","length",0.000016666666666666667,[1,-1,0,0,0,0,0],"mm/min",null,false,"L",null,1,false,false,0,"mm per min; millimeters per minute; millimetres","LOINC","Vel","Clinical","",null,null,null,null,false],[false,"millimeter of water","mm[H2O]","MM[H2O]","pressure",9806.65,[-1,-2,1,0,0,0,0],"mm HO<sub><r>2</r></sub>","clinical",true,null,null,1,false,false,0,"mmH2O; mm H2O; millimeters of water; millimetres","LOINC","Pres","Clinical","","kPa","KPAL","980665e-5",9.80665,false],[false,"millimeter of mercury","mm[Hg]","MM[HG]","pressure",133322,[-1,-2,1,0,0,0,0],"mm Hg","clinical",true,null,null,1,false,false,0,"mmHg; mm Hg; millimeters of mercury; millimetres","LOINC","Pres; PPres; Ratio","Clinical","1 mm[Hg] = 1 torr; unit to measure blood pressure","kPa","KPAL","133.3220",133.322,false],[true,"square millimeter","mm2","MM2","length",0.000001,[2,0,0,0,0,0,0],"mm<sup>2</sup>",null,false,"L",null,1,false,false,0,"mm^2; sq. mm.; sq. millimeters; millimeters squared; millimetres","LOINC","Area","Clinical","",null,null,null,null,false],[false,"millimole","mmol","MMOL","amount of substance",602213670000000000000,[0,0,0,0,0,0,0],"mmol","si",true,null,null,1,false,false,1,"millimoles","LOINC","Sub","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per 12 hour","mmol/(12.h)","MMOL/HR","amount of substance",13940131250000000,[0,-1,0,0,0,0,0],"mmol/h","si",true,null,null,1,false,false,1,"mmol/12hrs; mmol/12 hrs; mmol per 12 hrs; 12hrs; millimoles per 12 hours","LOINC","SRat","Clinical","unit for tests related to urine","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per 2 hour","mmol/(2.h)","MMOL/HR","amount of substance",83640787500000000,[0,-1,0,0,0,0,0],"mmol/h","si",true,null,null,1,false,false,1,"mmol/2hrs; mmol/2 hrs; mmol per 2 hrs; 2hrs; millimoles per 2 hours","LOINC","SRat","Clinical","unit for tests related to urine","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per 24 hour","mmol/(24.h)","MMOL/HR","amount of substance",6970065625000000,[0,-1,0,0,0,0,0],"mmol/h","si",true,null,null,1,false,false,1,"mmol/24hrs; mmol/24 hrs; mmol per 24 hrs; 24hrs; millimoles per 24 hours","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per 5 hour","mmol/(5.h)","MMOL/HR","amount of substance",33456315000000000,[0,-1,0,0,0,0,0],"mmol/h","si",true,null,null,1,false,false,1,"mmol/5hrs; mmol/5 hrs; mmol per 5 hrs; 5hrs; millimoles per 5 hours","LOINC","SRat","Clinical","unit for tests related to doses","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per 6 hour","mmol/(6.h)","MMOL/HR","amount of substance",27880262500000000,[0,-1,0,0,0,0,0],"mmol/h","si",true,null,null,1,false,false,1,"mmol/6hrs; mmol/6 hrs; mmol per 6 hrs; 6hrs; millimoles per 6 hours","LOINC","SRat","Clinical","unit for tests related to urine","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per 8 hour","mmol/(8.h)","MMOL/HR","amount of substance",20910196875000000,[0,-1,0,0,0,0,0],"mmol/h","si",true,null,null,1,false,false,1,"mmol/8hrs; mmol/8 hrs; mmol per 8 hrs; 8hrs; millimoles per 8 hours; shift","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per day","mmol/d","MMOL/D","amount of substance",6970065625000000,[0,-1,0,0,0,0,0],"mmol/d","si",true,null,null,1,false,false,1,"mmol/24hrs; mmol/24 hrs; mmol per 24 hrs; 24hrs; millimoles per 24 hours","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per deciliter","mmol/dL","MMOL/DL","amount of substance",6.022136699999999e+24,[-3,0,0,0,0,0,0],"mmol/dL","si",true,null,null,1,false,false,1,"mmol per dL; millimoles; decilitre","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per gram","mmol/g","MMOL/G","amount of substance",602213670000000000000,[0,0,-1,0,0,0,0],"mmol/g","si",true,null,null,1,false,false,1,"mmol per gram; millimoles","LOINC","SCnt","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per hour","mmol/h","MMOL/HR","amount of substance",167281575000000000,[0,-1,0,0,0,0,0],"mmol/h","si",true,null,null,1,false,false,1,"mmol/hr; mmol per hr; millimoles per hour","LOINC","SRat","Clinical","unit for tests related to urine","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per kilogram","mmol/kg","MMOL/KG","amount of substance",602213670000000000,[0,0,-1,0,0,0,0],"mmol/kg","si",true,null,null,1,false,false,1,"mmol per kg; millimoles per kilogram","LOINC","SCnt","Clinical","unit for tests related to stool","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per kilogram per 8 hour","mmol/kg/(8.h)","(MMOL/KG)/HR","amount of substance",20910196875000,[0,-1,-1,0,0,0,0],"(mmol/kg)/h","si",true,null,null,1,false,false,1,"mmol/(8.h.kg); mmol/kg/8hrs; mmol/kg/8 hrs; mmol per kg per 8hrs; 8 hrs; millimoles per kilograms per 8 hours; shift","LOINC","CCnt","Clinical","unit used to measure molar dose rate per patient body mass","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per kilogram per day","mmol/kg/d","(MMOL/KG)/D","amount of substance",6970065625000,[0,-1,-1,0,0,0,0],"(mmol/kg)/d","si",true,null,null,1,false,false,1,"mmol/kg/dy; mmol/kg/day; mmol per kg per dy; millimoles per kilograms per day","LOINC","RelSRat","Clinical","unit used to measure molar dose rate per patient body mass","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per kilogram per hour","mmol/kg/h","(MMOL/KG)/HR","amount of substance",167281575000000,[0,-1,-1,0,0,0,0],"(mmol/kg)/h","si",true,null,null,1,false,false,1,"mmol/kg/hr; mmol per kg per hr; millimoles per kilograms per hour","LOINC","CCnt","Clinical","unit used to measure molar dose rate per patient body mass","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per kilogram per minute","mmol/kg/min","(MMOL/KG)/MIN","amount of substance",10036894500000000,[0,-1,-1,0,0,0,0],"(mmol/kg)/min","si",true,null,null,1,false,false,1,"mmol/(kg.min); mmol/kg/min; mmol per kg per min; millimoles per kilograms per minute","LOINC","CCnt","Clinical","unit used to measure molar dose rate per patient body mass; note that the unit for the enzyme unit U = umol/min. mmol/kg/min = kU/kg; ","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per liter","mmol/L","MMOL/L","amount of substance",6.0221367e+23,[-3,0,0,0,0,0,0],"mmol/L","si",true,null,null,1,false,false,1,"mmol per L; millimoles per liter; litre","LOINC","SCnc","Clinical","unit for tests related to doses","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per square meter","mmol/m2","MMOL/M2","amount of substance",602213670000000000000,[-2,0,0,0,0,0,0],"mmol/(m<sup>2</sup>)","si",true,null,null,1,false,false,1,"mmol/m^2; mmol/sq. meter; mmol per m2; m^2; sq. meter; millimoles; meter squared; metre","LOINC","ArSub","Clinical","unit used to measure molar dose per patient body surface area","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per minute","mmol/min","MMOL/MIN","amount of substance",10036894500000000000,[0,-1,0,0,0,0,0],"mmol/min","si",true,null,null,1,false,false,1,"mmol per min; millimoles per minute","LOINC","Srat; CAct","Clinical","unit for the enzyme unit U = umol/min. mmol/min = kU","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per millimole","mmol/mmol","MMOL/MMOL","amount of substance",1,[0,0,0,0,0,0,0],"mmol/mmol","si",true,null,null,1,false,false,0,"mmol per mmol; millimoles per millimole","LOINC","SRto","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per mole","mmol/mol","MMOL/MOL","amount of substance",0.001,[0,0,0,0,0,0,0],"mmol/mol","si",true,null,null,1,false,false,0,"mmol per mol; millimoles per mole","LOINC","SRto","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"millimole per second per liter","mmol/s/L","(MMOL/S)/L","amount of substance",6.0221367e+23,[-3,-1,0,0,0,0,0],"(mmol/s)/L","si",true,null,null,1,false,false,1,"mmol/sec/L; mmol per s per L; per sec; millimoles per seconds per liter; litre","LOINC","CCnc ","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"mole per kilogram","mol/kg","MOL/KG","amount of substance",602213670000000000000,[0,0,-1,0,0,0,0],"mol/kg","si",true,null,null,1,false,false,1,"mol per kg; moles; mols","LOINC","SCnt","Clinical","unit for tests related to stool","10*23","10*23","6.0221367",6.0221367,false],[false,"mole per kilogram per second","mol/kg/s","(MOL/KG)/S","amount of substance",602213670000000000000,[0,-1,-1,0,0,0,0],"(mol/kg)/s","si",true,null,null,1,false,false,1,"mol/kg/sec; mol per kg per sec; moles per kilograms per second; mols","LOINC","CCnt","Clinical","unit of catalytic activity (mol/s) per mass (kg)","10*23","10*23","6.0221367",6.0221367,false],[false,"mole per liter","mol/L","MOL/L","amount of substance",6.0221366999999994e+26,[-3,0,0,0,0,0,0],"mol/L","si",true,null,null,1,false,false,1,"mol per L; moles per liter; litre; moles; mols","LOINC","SCnc","Clinical","unit often used in tests measuring oxygen content","10*23","10*23","6.0221367",6.0221367,false],[false,"mole per cubic meter","mol/m3","MOL/M3","amount of substance",6.0221367e+23,[-3,0,0,0,0,0,0],"mol/(m<sup>3</sup>)","si",true,null,null,1,false,false,1,"mol/m^3; mol/cu. m; mol per m3; m^3; cu. meter; mols; moles; meters cubed; metre; mole per kiloliter; kilolitre; mol/kL","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"mole per milliliter","mol/mL","MOL/ML","amount of substance",6.0221367e+29,[-3,0,0,0,0,0,0],"mol/mL","si",true,null,null,1,false,false,1,"mol per mL; moles; millilitre; mols","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"mole per mole","mol/mol","MOL/MOL","amount of substance",1,[0,0,0,0,0,0,0],"mol/mol","si",true,null,null,1,false,false,0,"mol per mol; moles per mol; mols","LOINC","SRto","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"mole per second","mol/s","MOL/S","amount of substance",6.0221367e+23,[0,-1,0,0,0,0,0],"mol/s","si",true,null,null,1,false,false,1,"mol per sec; moles per second; mols","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"milliosmole","mosm","MOSM","amount of substance (dissolved particles)",602213670000000000000,[0,0,0,0,0,0,0],"mosm","chemical",true,null,null,1,false,false,1,"milliosmoles","LOINC","Osmol","Clinical","equal to 1/1000 of an osmole","mol","MOL","1",1,false],[false,"milliosmole per kilogram","mosm/kg","MOSM/KG","amount of substance (dissolved particles)",602213670000000000,[0,0,-1,0,0,0,0],"mosm/kg","chemical",true,null,null,1,false,false,1,"mosm per kg; milliosmoles per kilogram","LOINC","Osmol","Clinical","","mol","MOL","1",1,false],[false,"milliosmole per liter","mosm/L","MOSM/L","amount of substance (dissolved particles)",6.0221367e+23,[-3,0,0,0,0,0,0],"mosm/L","chemical",true,null,null,1,false,false,1,"mosm per liter; litre; milliosmoles","LOINC","Osmol","Clinical","","mol","MOL","1",1,false],[false,"millipascal","mPa","MPAL","pressure",1,[-1,-2,1,0,0,0,0],"mPa","si",true,null,null,1,false,false,0,"millipascals","LOINC","Pres","Clinical","unit of pressure","N/m2","N/M2","1",1,false],[false,"millipascal second","mPa.s","MPAL.S","pressure",1,[-1,-1,1,0,0,0,0],"mPa.s","si",true,null,null,1,false,false,0,"mPa*s; millipoise; mP; dynamic viscosity","LOINC","Visc","Clinical","base units for millipoise, a measurement of dynamic viscosity","N/m2","N/M2","1",1,false],[true,"megasecond","Ms","MAS","time",1000000,[0,1,0,0,0,0,0],"Ms",null,false,"T",null,1,false,false,0,"megaseconds","LOINC","Time","Clinical","",null,null,null,null,false],[true,"millisecond","ms","MS","time",0.001,[0,1,0,0,0,0,0],"ms",null,false,"T",null,1,false,false,0,"milliseconds; duration","LOINC","Time","Clinical","",null,null,null,null,false],[false,"milli enzyme unit per gram","mU/g","MU/G","catalytic activity",10036894500000,[0,-1,-1,0,0,0,0],"mU/g","chemical",true,null,null,1,false,false,1,"mU per gm; milli enzyme units per gram; enzyme activity; enzymatic activity per mass","LOINC","CCnt","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 mU = 1 nmol/min","umol/min","UMOL/MIN","1",1,false],[false,"milli enzyme unit per liter","mU/L","MU/L","catalytic activity",10036894500000000,[-3,-1,0,0,0,0,0],"mU/L","chemical",true,null,null,1,false,false,1,"mU per liter; litre; milli enzyme units enzymatic activity per volume; enzyme activity","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 mU = 1 nmol/min","umol/min","UMOL/MIN","1",1,false],[false,"milli enzyme unit per milligram","mU/mg","MU/MG","catalytic activity",10036894500000000,[0,-1,-1,0,0,0,0],"mU/mg","chemical",true,null,null,1,false,false,1,"mU per mg; milli enzyme units per milligram","LOINC","CCnt","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 mU = 1 nmol/min","umol/min","UMOL/MIN","1",1,false],[false,"milli enzyme unit per milliliter","mU/mL","MU/ML","catalytic activity",10036894500000000000,[-3,-1,0,0,0,0,0],"mU/mL","chemical",true,null,null,1,false,false,1,"mU per mL; milli enzyme units per milliliter; millilitre; enzymatic activity per volume; enzyme activity","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 mU = 1 nmol/min","umol/min","UMOL/MIN","1",1,false],[false,"milli enzyme unit per milliliter per minute","mU/mL/min","(MU/ML)/MIN","catalytic activity",167281575000000000,[-3,-2,0,0,0,0,0],"(mU/mL)/min","chemical",true,null,null,1,false,false,1,"mU per mL per min; mU per milliliters per minute; millilitres; milli enzyme units; enzymatic activity; enzyme activity","LOINC","CCncRat","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 mU = 1 nmol/min","umol/min","UMOL/MIN","1",1,false],[false,"millivolt","mV","MV","electric potential",1,[2,-2,1,0,0,-1,0],"mV","si",true,null,null,1,false,false,0,"millivolts","LOINC","Elpot","Clinical","unit of electric potential (voltage)","J/C","J/C","1",1,false],[false,"Newton centimeter","N.cm","N.CM","force",10,[2,-2,1,0,0,0,0],"N.cm","si",true,null,null,1,false,false,0,"N*cm; Ncm; N cm; Newton*centimeters; Newton* centimetres; torque; work","LOINC","","Clinical","as a measurement of work, N.cm = 1/100 Joules;\nnote that N.m is the standard unit of measurement for torque (although dimensionally equivalent to Joule), and N.cm can also be thought of as a torqe unit","kg.m/s2","KG.M/S2","1",1,false],[false,"Newton second","N.s","N.S","force",1000,[1,-1,1,0,0,0,0],"N.s","si",true,null,null,1,false,false,0,"Newton*seconds; N*s; N s; Ns; impulse; imp","LOINC","","Clinical","standard unit of impulse","kg.m/s2","KG.M/S2","1",1,false],[true,"nanogram","ng","NG","mass",1e-9,[0,0,1,0,0,0,0],"ng",null,false,"M",null,1,false,false,0,"nanograms","LOINC","Mass","Clinical","",null,null,null,null,false],[true,"nanogram per 24 hour","ng/(24.h)","NG/HR","mass",1.1574074074074075e-14,[0,-1,1,0,0,0,0],"ng/h",null,false,"M",null,1,false,false,0,"ng/24hrs; ng/24 hrs; nanograms per 24 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"nanogram per 8 hour","ng/(8.h)","NG/HR","mass",3.4722222222222224e-14,[0,-1,1,0,0,0,0],"ng/h",null,false,"M",null,1,false,false,0,"ng/8hrs; ng/8 hrs; nanograms per 8 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"nanogram per million","ng/10*6","NG/(10*6)","mass",1e-15,[0,0,1,0,0,0,0],"ng/(10<sup>6</sup>)",null,false,"M",null,1,false,false,0,"ng/10^6; ng per 10*6; 10^6; nanograms","LOINC","MNum","Clinical","",null,null,null,null,false],[true,"nanogram per day","ng/d","NG/D","mass",1.1574074074074075e-14,[0,-1,1,0,0,0,0],"ng/d",null,false,"M",null,1,false,false,0,"ng/dy; ng per day; nanograms ","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"nanogram per deciliter","ng/dL","NG/DL","mass",0.00001,[-3,0,1,0,0,0,0],"ng/dL",null,false,"M",null,1,false,false,0,"ng per dL; nanograms per deciliter; decilitre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"nanogram per gram","ng/g","NG/G","mass",1e-9,[0,0,0,0,0,0,0],"ng/g",null,false,"M",null,1,false,false,0,"ng/gm; ng per gm; nanograms per gram","LOINC","MCnt","Clinical","",null,null,null,null,false],[true,"nanogram per hour","ng/h","NG/HR","mass",2.777777777777778e-13,[0,-1,1,0,0,0,0],"ng/h",null,false,"M",null,1,false,false,0,"ng/hr; ng per hr; nanograms per hour","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"nanogram per kilogram","ng/kg","NG/KG","mass",1e-12,[0,0,0,0,0,0,0],"ng/kg",null,false,"M",null,1,false,false,0,"ng per kg; nanograms per kilogram","LOINC","MCnt","Clinical","",null,null,null,null,false],[true,"nanogram per kilogram per 8 hour","ng/kg/(8.h)","(NG/KG)/HR","mass",3.472222222222222e-17,[0,-1,0,0,0,0,0],"(ng/kg)/h",null,false,"M",null,1,false,false,0,"ng/(8.h.kg); ng/kg/8hrs; ng/kg/8 hrs; ng per kg per 8hrs; 8 hrs; nanograms per kilograms per 8 hours; shift","LOINC","MRtoRat ","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"nanogram per kilogram per hour","ng/kg/h","(NG/KG)/HR","mass",2.7777777777777775e-16,[0,-1,0,0,0,0,0],"(ng/kg)/h",null,false,"M",null,1,false,false,0,"ng/(kg.h); ng/kg/hr; ng per kg per hr; nanograms per kilograms per hour","LOINC","MRtoRat ","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"nanogram per kilogram per minute","ng/kg/min","(NG/KG)/MIN","mass",1.6666666666666667e-14,[0,-1,0,0,0,0,0],"(ng/kg)/min",null,false,"M",null,1,false,false,0,"ng/(kg.min); ng per kg per min; nanograms per kilograms per minute","LOINC","MRtoRat ","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"nanogram per liter","ng/L","NG/L","mass",0.000001,[-3,0,1,0,0,0,0],"ng/L",null,false,"M",null,1,false,false,0,"ng per L; nanograms per liter; litre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"nanogram per square meter","ng/m2","NG/M2","mass",1e-9,[-2,0,1,0,0,0,0],"ng/(m<sup>2</sup>)",null,false,"M",null,1,false,false,0,"ng/m^2; ng/sq. m; ng per m2; m^2; sq. meter; nanograms; meter squared; metre","LOINC","ArMass","Clinical","unit used to measure mass dose per patient body surface area",null,null,null,null,false],[true,"nanogram per milligram","ng/mg","NG/MG","mass",0.000001,[0,0,0,0,0,0,0],"ng/mg",null,false,"M",null,1,false,false,0,"ng per mg; nanograms","LOINC","MCnt","Clinical","",null,null,null,null,false],[true,"nanogram per milligram per hour","ng/mg/h","(NG/MG)/HR","mass",2.7777777777777777e-10,[0,-1,0,0,0,0,0],"(ng/mg)/h",null,false,"M",null,1,false,false,0,"ng/mg/hr; ng per mg per hr; nanograms per milligrams per hour","LOINC","MRtoRat ","Clinical","",null,null,null,null,false],[true,"nanogram per minute","ng/min","NG/MIN","mass",1.6666666666666667e-11,[0,-1,1,0,0,0,0],"ng/min",null,false,"M",null,1,false,false,0,"ng per min; nanograms","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"nanogram per millliiter","ng/mL","NG/ML","mass",0.001,[-3,0,1,0,0,0,0],"ng/mL",null,false,"M",null,1,false,false,0,"ng per mL; nanograms; millilitre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"nanogram per milliliter per hour","ng/mL/h","(NG/ML)/HR","mass",2.7777777777777776e-7,[-3,-1,1,0,0,0,0],"(ng/mL)/h",null,false,"M",null,1,false,false,0,"ng/mL/hr; ng per mL per mL; nanograms per milliliter per hour; nanogram per millilitre per hour; nanograms per millilitre per hour; enzymatic activity per volume; enzyme activity per milliliters","LOINC","CCnc","Clinical","tests that measure enzymatic activity",null,null,null,null,false],[true,"nanogram per second","ng/s","NG/S","mass",1e-9,[0,-1,1,0,0,0,0],"ng/s",null,false,"M",null,1,false,false,0,"ng/sec; ng per sec; nanograms per second","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"nanogram per enzyme unit","ng/U","NG/U","mass",9.963241120049634e-26,[0,1,1,0,0,0,0],"ng/U",null,false,"M",null,1,false,false,-1,"ng per U; nanograms per enzyme unit","LOINC","CMass","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)",null,null,null,null,false],[false,"nanokatal","nkat","NKAT","catalytic activity",602213670000000,[0,-1,0,0,0,0,0],"nkat","chemical",true,null,null,1,false,false,1,"nanokatals","LOINC","CAct","Clinical","kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.","mol/s","MOL/S","1",1,false],[false,"nanoliter","nL","NL","volume",1.0000000000000002e-12,[3,0,0,0,0,0,0],"nL","iso1000",true,null,null,1,false,false,0,"nanoliters; nanolitres","LOINC","Vol","Clinical","","l",null,"1",1,false],[true,"nanometer","nm","NM","length",1e-9,[1,0,0,0,0,0,0],"nm",null,false,"L",null,1,false,false,0,"nanometers; nanometres","LOINC","Len","Clinical","",null,null,null,null,false],[true,"nanometer per second per liter","nm/s/L","(NM/S)/L","length",0.000001,[-2,-1,0,0,0,0,0],"(nm/s)/L",null,false,"L",null,1,false,false,0,"nm/sec/liter; nm/sec/litre; nm per s per l; nm per sec per l; nanometers per second per liter; nanometre per second per litre; nanometres per second per litre","LOINC","VelCnc","Clinical","",null,null,null,null,false],[false,"nanomole","nmol","NMOL","amount of substance",602213670000000,[0,0,0,0,0,0,0],"nmol","si",true,null,null,1,false,false,1,"nanomoles","LOINC","Sub","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per 24 hour","nmol/(24.h)","NMOL/HR","amount of substance",6970065625,[0,-1,0,0,0,0,0],"nmol/h","si",true,null,null,1,false,false,1,"nmol/24hr; nmol/24 hr; nanomoles per 24 hours; nmol/day; nanomoles per day; nmol per day; nanomole/day; nanomol/day","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per day","nmol/d","NMOL/D","amount of substance",6970065625,[0,-1,0,0,0,0,0],"nmol/d","si",true,null,null,1,false,false,1,"nmol/day; nanomoles per day; nmol per day; nanomole/day; nanomol/day; nmol/24hr; nmol/24 hr; nanomoles per 24 hours; ","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per deciliter","nmol/dL","NMOL/DL","amount of substance",6022136700000000000,[-3,0,0,0,0,0,0],"nmol/dL","si",true,null,null,1,false,false,1,"nmol per dL; nanomoles per deciliter; nanomole per decilitre; nanomoles per decilitre; nanomole/deciliter; nanomole/decilitre; nanomol/deciliter; nanomol/decilitre","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per gram","nmol/g","NMOL/G","amount of substance",602213670000000,[0,0,-1,0,0,0,0],"nmol/g","si",true,null,null,1,false,false,1,"nmol per gram; nanomoles per gram; nanomole/gram","LOINC","SCnt","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per hour per liter","nmol/h/L","(NMOL/HR)/L","amount of substance",167281575000000,[-3,-1,0,0,0,0,0],"(nmol/h)/L","si",true,null,null,1,false,false,1,"nmol/hrs/L; nmol per hrs per L; nanomoles per hours per liter; litre; enzymatic activity per volume; enzyme activities","LOINC","CCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per liter","nmol/L","NMOL/L","amount of substance",602213670000000000,[-3,0,0,0,0,0,0],"nmol/L","si",true,null,null,1,false,false,1,"nmol per L; nanomoles per liter; litre","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per milligram","nmol/mg","NMOL/MG","amount of substance",602213670000000000,[0,0,-1,0,0,0,0],"nmol/mg","si",true,null,null,1,false,false,1,"nmol per mg; nanomoles per milligram","LOINC","SCnt","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per milligram per hour","nmol/mg/h","(NMOL/MG)/HR","amount of substance",167281575000000,[0,-1,-1,0,0,0,0],"(nmol/mg)/h","si",true,null,null,1,false,false,1,"nmol/mg/hr; nmol per mg per hr; nanomoles per milligrams per hour","LOINC","SCntRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per milligram of protein","nmol/mg{prot}","NMOL/MG","amount of substance",602213670000000000,[0,0,-1,0,0,0,0],"nmol/mg","si",true,null,null,1,false,false,1,"nanomoles; nmol/mg prot; nmol per mg prot","LOINC","Ratio; CCnt","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per minute","nmol/min","NMOL/MIN","amount of substance",10036894500000,[0,-1,0,0,0,0,0],"nmol/min","si",true,null,null,1,false,false,1,"nmol per min; nanomoles per minute; milli enzyme units; enzyme activity per volume; enzymatic activity","LOINC","CCnc","Clinical","unit for the enzyme unit U = umol/min. nmol/min = mU (milli enzyme unit)","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per minute per milliliter","nmol/min/mL","(NMOL/MIN)/ML","amount of substance",10036894500000000000,[-3,-1,0,0,0,0,0],"(nmol/min)/mL","si",true,null,null,1,false,false,1,"nmol per min per mL; nanomoles per minutes per milliliter; millilitre; milli enzyme units per volume; enzyme activity; enzymatic activity","LOINC","CCnc","Clinical","unit for the enzyme unit U = umol/min. nmol/mL/min = mU/mL","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per milliliter","nmol/mL","NMOL/ML","amount of substance",602213670000000000000,[-3,0,0,0,0,0,0],"nmol/mL","si",true,null,null,1,false,false,1,"nmol per mL; nanomoles per milliliter; millilitre","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per milliliter per hour","nmol/mL/h","(NMOL/ML)/HR","amount of substance",167281575000000000,[-3,-1,0,0,0,0,0],"(nmol/mL)/h","si",true,null,null,1,false,false,1,"nmol/mL/hr; nmol per mL per hr; nanomoles per milliliters per hour; millilitres; milli enzyme units per volume; enzyme activity; enzymatic activity","LOINC","CCnc","Clinical","unit for the enzyme unit U = umol/min.","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per milliliter per minute","nmol/mL/min","(NMOL/ML)/MIN","amount of substance",10036894500000000000,[-3,-1,0,0,0,0,0],"(nmol/mL)/min","si",true,null,null,1,false,false,1,"nmol per mL per min; nanomoles per milliliters per min; millilitres; milli enzyme units per volume; enzyme activity; enzymatic activity","LOINC","CCnc","Clinical","unit for the enzyme unit U = umol/min. nmol/mL/min = mU/mL","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per millimole","nmol/mmol","NMOL/MMOL","amount of substance",0.000001,[0,0,0,0,0,0,0],"nmol/mmol","si",true,null,null,1,false,false,0,"nmol per mmol; nanomoles per millimole","LOINC","SRto","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per millimole of creatinine","nmol/mmol{creat}","NMOL/MMOL","amount of substance",0.000001,[0,0,0,0,0,0,0],"nmol/mmol","si",true,null,null,1,false,false,0,"nanomoles","LOINC","SRto","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per mole","nmol/mol","NMOL/MOL","amount of substance",1e-9,[0,0,0,0,0,0,0],"nmol/mol","si",true,null,null,1,false,false,0,"nmol per mole; nanomoles","LOINC","SRto","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per nanomole","nmol/nmol","NMOL/NMOL","amount of substance",1,[0,0,0,0,0,0,0],"nmol/nmol","si",true,null,null,1,false,false,0,"nmol per nmol; nanomoles","LOINC","SRto","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per second","nmol/s","NMOL/S","amount of substance",602213670000000,[0,-1,0,0,0,0,0],"nmol/s","si",true,null,null,1,false,false,1,"nmol/sec; nmol per sec; nanomoles per sercond; milli enzyme units; enzyme activity; enzymatic activity","LOINC","CCnc","Clinical","unit for the enzyme unit U = umol/min.","10*23","10*23","6.0221367",6.0221367,false],[false,"nanomole per second per liter","nmol/s/L","(NMOL/S)/L","amount of substance",602213670000000000,[-3,-1,0,0,0,0,0],"(nmol/s)/L","si",true,null,null,1,false,false,1,"nmol/sec/L; nmol per s per L; nmol per sec per L; nanomoles per seconds per liter; litre; milli enzyme units per volume; enzyme activity; enzymatic activity","LOINC","CCnc","Clinical","unit for the enzyme unit U = umol/min.","10*23","10*23","6.0221367",6.0221367,false],[true,"nanosecond","ns","NS","time",1e-9,[0,1,0,0,0,0,0],"ns",null,false,"T",null,1,false,false,0,"nanoseconds","LOINC","Time","Clinical","",null,null,null,null,false],[false,"nanoenzyme unit per milliliter","nU/mL","NU/ML","catalytic activity",10036894500000,[-3,-1,0,0,0,0,0],"nU/mL","chemical",true,null,null,1,false,false,1,"nU per mL; nanoenzyme units per milliliter; millilitre; enzymatic activity per volume; enzyme activity","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 fU = pmol/min","umol/min","UMOL/MIN","1",1,false],[false,"Ohm meter","Ohm.m","OHM.M","electric resistance",1000,[3,-1,1,0,0,-2,0],"Ω.m","si",true,null,null,1,false,false,0,"electric resistivity; meters; metres","LOINC","","Clinical","unit of electric resistivity","V/A","V/A","1",1,false],[false,"osmole per kilogram","osm/kg","OSM/KG","amount of substance (dissolved particles)",602213670000000000000,[0,0,-1,0,0,0,0],"osm/kg","chemical",true,null,null,1,false,false,1,"osm per kg; osmoles per kilogram; osmols","LOINC","Osmol","Clinical","","mol","MOL","1",1,false],[false,"osmole per liter","osm/L","OSM/L","amount of substance (dissolved particles)",6.0221366999999994e+26,[-3,0,0,0,0,0,0],"osm/L","chemical",true,null,null,1,false,false,1,"osm per L; osmoles per liter; litre; osmols","LOINC","Osmol","Clinical","","mol","MOL","1",1,false],[false,"picoampere","pA","PA","electric current",1e-12,[0,-1,0,0,0,1,0],"pA","si",true,null,null,1,false,false,0,"picoamperes","LOINC","","Clinical","equal to 10^-12 amperes","C/s","C/S","1",1,false],[true,"picogram","pg","PG","mass",1e-12,[0,0,1,0,0,0,0],"pg",null,false,"M",null,1,false,false,0,"picograms","LOINC","Mass; EntMass","Clinical","",null,null,null,null,false],[true,"picogram per deciliter","pg/dL","PG/DL","mass",9.999999999999999e-9,[-3,0,1,0,0,0,0],"pg/dL",null,false,"M",null,1,false,false,0,"pg per dL; picograms; decilitre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"picogram per liter","pg/L","PG/L","mass",1e-9,[-3,0,1,0,0,0,0],"pg/L",null,false,"M",null,1,false,false,0,"pg per L; picograms; litre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"picogram per milligram","pg/mg","PG/MG","mass",1e-9,[0,0,0,0,0,0,0],"pg/mg",null,false,"M",null,1,false,false,0,"pg per mg; picograms","LOINC","MCnt","Clinical","",null,null,null,null,false],[true,"picogram per milliliter","pg/mL","PG/ML","mass",0.000001,[-3,0,1,0,0,0,0],"pg/mL",null,false,"M",null,1,false,false,0,"pg per mL; picograms per milliliter; millilitre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"picogram per millimeter","pg/mm","PG/MM","mass",1e-9,[-1,0,1,0,0,0,0],"pg/mm",null,false,"M",null,1,false,false,0,"pg per mm; picogram/millimeter; picogram/millimetre; picograms per millimeter; millimetre","LOINC","Lineic Mass","Clinical","",null,null,null,null,false],[false,"picokatal","pkat","PKAT","catalytic activity",602213670000,[0,-1,0,0,0,0,0],"pkat","chemical",true,null,null,1,false,false,1,"pkats; picokatals","LOINC","CAct","Clinical","kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.","mol/s","MOL/S","1",1,false],[false,"picoliter","pL","PL","volume",1e-15,[3,0,0,0,0,0,0],"pL","iso1000",true,null,null,1,false,false,0,"picoliters; picolitres","LOINC","Vol","Clinical","","l",null,"1",1,false],[true,"picometer","pm","PM","length",1e-12,[1,0,0,0,0,0,0],"pm",null,false,"L",null,1,false,false,0,"picometers; picometres","LOINC","Len","Clinical","",null,null,null,null,false],[false,"picomole","pmol","PMOL","amount of substance",602213670000,[0,0,0,0,0,0,0],"pmol","si",true,null,null,1,false,false,1,"picomoles; pmols","LOINC","Sub","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"picomole per 24 hour","pmol/(24.h)","PMOL/HR","amount of substance",6970065.625,[0,-1,0,0,0,0,0],"pmol/h","si",true,null,null,1,false,false,1,"pmol/24hrs; pmol/24 hrs; pmol per 24 hrs; 24hrs; days; dy; picomoles per 24 hours","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"picomole per day","pmol/d","PMOL/D","amount of substance",6970065.625,[0,-1,0,0,0,0,0],"pmol/d","si",true,null,null,1,false,false,1,"pmol/dy; pmol per day; 24 hours; 24hrs; 24 hrs; picomoles","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"picomole per deciliter","pmol/dL","PMOL/DL","amount of substance",6022136700000000,[-3,0,0,0,0,0,0],"pmol/dL","si",true,null,null,1,false,false,1,"pmol per dL; picomoles per deciliter; decilitre","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"picomole per gram","pmol/g","PMOL/G","amount of substance",602213670000,[0,0,-1,0,0,0,0],"pmol/g","si",true,null,null,1,false,false,1,"pmol per gm; picomoles per gram; picomole/gram","LOINC","SCnt","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"picomole per hour per milliliter ","pmol/h/mL","(PMOL/HR)/ML","amount of substance",167281575000000,[-3,-1,0,0,0,0,0],"(pmol/h)/mL","si",true,null,null,1,false,false,1,"pmol/hrs/mL; pmol per hrs per mL; picomoles per hour per milliliter; millilitre; micro enzyme units per volume; enzymatic activity; enzyme activity","LOINC","CCnc","Clinical","unit for the enzyme unit U = umol/min. ","10*23","10*23","6.0221367",6.0221367,false],[false,"picomole per liter","pmol/L","PMOL/L","amount of substance",602213670000000,[-3,0,0,0,0,0,0],"pmol/L","si",true,null,null,1,false,false,1,"picomole/liter; pmol per L; picomoles; litre","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"picomole per minute","pmol/min","PMOL/MIN","amount of substance",10036894500,[0,-1,0,0,0,0,0],"pmol/min","si",true,null,null,1,false,false,1,"picomole/minute; pmol per min; picomoles per minute; micro enzyme units; enzymatic activity; enzyme activity","LOINC","CCnc","Clinical","unit for the enzyme unit U = umol/min. pmol/min = uU (micro enzyme unit)","10*23","10*23","6.0221367",6.0221367,false],[false,"picomole per milliliter","pmol/mL","PMOL/ML","amount of substance",602213670000000000,[-3,0,0,0,0,0,0],"pmol/mL","si",true,null,null,1,false,false,1,"picomole/milliliter; picomole/millilitre; pmol per mL; picomoles; millilitre; picomols; pmols","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"picomole per micromole","pmol/umol","PMOL/UMOL","amount of substance",0.000001,[0,0,0,0,0,0,0],"pmol/μmol","si",true,null,null,1,false,false,0,"pmol/mcgmol; picomole/micromole; pmol per umol; pmol per mcgmol; picomoles ","LOINC","SRto","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[true,"picosecond","ps","PS","time",1e-12,[0,1,0,0,0,0,0],"ps",null,false,"T",null,1,false,false,0,"picoseconds; psec","LOINC","Time","Clinical","",null,null,null,null,false],[false,"picotesla","pT","PT","magnetic flux density",1e-9,[0,-1,1,0,0,-1,0],"pT","si",true,null,null,1,false,false,0,"picoteslas","LOINC","","Clinical","SI unit of magnetic field strength for magnetic field B","Wb/m2","WB/M2","1",1,false],[false,"enzyme unit per 12 hour","U/(12.h)","U/HR","catalytic activity",232335520833.33334,[0,-2,0,0,0,0,0],"U/h","chemical",true,null,null,1,false,false,1,"U/12hrs; U/ 12hrs; U per 12 hrs; 12hrs; enzyme units per 12 hours; enzyme activity; enzymatic activity per time; umol per min per 12 hours; micromoles per minute per 12 hours; umol/min/12hr","LOINC","CRat","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per 2 hour","U/(2.h)","U/HR","catalytic activity",1394013125000,[0,-2,0,0,0,0,0],"U/h","chemical",true,null,null,1,false,false,1,"U/2hrs; U/ 2hrs; U per 2 hrs; 2hrs; enzyme units per 2 hours; enzyme activity; enzymatic activity per time; umol per minute per 2 hours; micromoles per minute; umol/min/2hr; umol per min per 2hr","LOINC","CRat","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per 24 hour","U/(24.h)","U/HR","catalytic activity",116167760416.66667,[0,-2,0,0,0,0,0],"U/h","chemical",true,null,null,1,false,false,1,"U/24hrs; U/ 24hrs; U per 24 hrs; 24hrs; enzyme units per 24 hours; enzyme activity; enzymatic activity per time; micromoles per minute per 24 hours; umol/min/24hr; umol per min per 24hr","LOINC","CRat","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per 10","U/10","U","catalytic activity",1003689450000000,[0,-1,0,0,0,0,0],"U","chemical",true,null,null,1,false,false,1,"enzyme unit/10; U per 10; enzyme units per 10; enzymatic activity; enzyme activity; micromoles per minute; umol/min/10","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per 10 billion","U/10*10","U/(10*10)","catalytic activity",1003689.45,[0,-1,0,0,0,0,0],"U/(10<sup>10</sup>)","chemical",true,null,null,1,false,false,1,"U per 10*10; enzyme units per 10*10; U per 10 billion; enzyme units; enzymatic activity; micromoles per minute per 10 billion; umol/min/10*10","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per trillion","U/10*12","U/(10*12)","catalytic activity",10036.8945,[0,-1,0,0,0,0,0],"U/(10<sup>12</sup>)","chemical",true,null,null,1,false,false,1,"enzyme unit/10*12; U per 10*12; enzyme units per 10*12; enzyme units per trillion; enzymatic activity; micromoles per minute per trillion; umol/min/10*12; umol per min per 10*12","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per million","U/10*6","U/(10*6)","catalytic activity",10036894500,[0,-1,0,0,0,0,0],"U/(10<sup>6</sup>)","chemical",true,null,null,1,false,false,1,"enzyme unit/10*6; U per 10*6; enzyme units per 10*6; enzyme units; enzymatic activity per volume; micromoles per minute per million; umol/min/10*6; umol per min per 10*6","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per billion","U/10*9","U/(10*9)","catalytic activity",10036894.5,[0,-1,0,0,0,0,0],"U/(10<sup>9</sup>)","chemical",true,null,null,1,false,false,1,"enzyme unit/10*9; U per 10*9; enzyme units per 10*9; enzymatic activity per volume; micromoles per minute per billion; umol/min/10*9; umol per min per 10*9","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per day","U/d","U/D","catalytic activity",116167760416.66667,[0,-2,0,0,0,0,0],"U/d","chemical",true,null,null,1,false,false,1,"U/dy; enzyme units per day; enzyme units; enzyme activity; enzymatic activity per time; micromoles per minute per day; umol/min/day; umol per min per day","LOINC","CRat","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per deciliter","U/dL","U/DL","catalytic activity",100368945000000000000,[-3,-1,0,0,0,0,0],"U/dL","chemical",true,null,null,1,false,false,1,"U per dL; enzyme units per deciliter; decilitre; micromoles per minute per deciliter; umol/min/dL; umol per min per dL","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per gram","U/g","U/G","catalytic activity",10036894500000000,[0,-1,-1,0,0,0,0],"U/g","chemical",true,null,null,1,false,false,1,"U/gm; U per gm; enzyme units per gram; micromoles per minute per gram; umol/min/g; umol per min per g","LOINC","CCnt","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per hour","U/h","U/HR","catalytic activity",2788026250000,[0,-2,0,0,0,0,0],"U/h","chemical",true,null,null,1,false,false,1,"U/hr; U per hr; enzyme units per hour; micromoles per minute per hour; umol/min/hr; umol per min per hr","LOINC","CRat","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per liter","U/L","U/L","catalytic activity",10036894500000000000,[-3,-1,0,0,0,0,0],"U/L","chemical",true,null,null,1,false,false,1,"enzyme unit/liter; enzyme unit/litre; U per L; enzyme units per liter; enzyme unit per litre; micromoles per minute per liter; umol/min/L; umol per min per L","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per minute","U/min","U/MIN","catalytic activity",167281575000000,[0,-2,0,0,0,0,0],"U/min","chemical",true,null,null,1,false,false,1,"enzyme unit/minute; U per min; enzyme units; umol/min/min; micromoles per minute per minute; micromoles per min per min; umol","LOINC","CRat","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per milliliter","U/mL","U/ML","catalytic activity",1.00368945e+22,[-3,-1,0,0,0,0,0],"U/mL","chemical",true,null,null,1,false,false,1,"U per mL; enzyme units per milliliter; millilitre; micromoles per minute per milliliter; umol/min/mL; umol per min per mL","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"enzyme unit per second","U/s","U/S","catalytic activity",10036894500000000,[0,-2,0,0,0,0,0],"U/s","chemical",true,null,null,1,false,false,1,"U/sec; U per second; enzyme units per second; micromoles per minute per second; umol/min/sec; umol per min per sec","LOINC","CRat","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)","umol/min","UMOL/MIN","1",1,false],[false,"micro international unit","u[IU]","U[IU]","arbitrary",0.000001,[0,0,0,0,0,0,0],"μi.U.","chemical",true,null,null,1,false,true,0,"uIU; u IU; microinternational units","LOINC","Arb","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"micro international unit per liter","u[IU]/L","U[IU]/L","arbitrary",0.001,[-3,0,0,0,0,0,0],"(μi.U.)/L","chemical",true,null,null,1,false,true,0,"uIU/L; u IU/L; uIU per L; microinternational units per liter; litre; ","LOINC","ACnc","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"micro international unit per milliliter","u[IU]/mL","U[IU]/ML","arbitrary",1,[-3,0,0,0,0,0,0],"(μi.U.)/mL","chemical",true,null,null,1,false,true,0,"uIU/mL; u IU/mL; uIU per mL; microinternational units per milliliter; millilitre","LOINC","ACnc","Clinical","International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)","[iU]","[IU]","1",1,false],[false,"microequivalent","ueq","UEQ","amount of substance",602213670000000000,[0,0,0,0,0,0,0],"μeq","chemical",true,null,null,1,false,false,1,"microequivalents; 10^-6 equivalents; 10-6 equivalents","LOINC","Sub","Clinical","","mol","MOL","1",1,false],[false,"microequivalent per liter","ueq/L","UEQ/L","amount of substance",602213670000000000000,[-3,0,0,0,0,0,0],"μeq/L","chemical",true,null,null,1,false,false,1,"ueq per liter; litre; microequivalents","LOINC","MCnc","Clinical","","mol","MOL","1",1,false],[false,"microequivalent per milliliter","ueq/mL","UEQ/ML","amount of substance",6.0221367000000003e+23,[-3,0,0,0,0,0,0],"μeq/mL","chemical",true,null,null,1,false,false,1,"ueq per milliliter; millilitre; microequivalents","LOINC","MCnc","Clinical","","mol","MOL","1",1,false],[true,"microgram","ug","UG","mass",0.000001,[0,0,1,0,0,0,0],"μg",null,false,"M",null,1,false,false,0,"mcg; micrograms; 10^-6 grams; 10-6 grams","LOINC","Mass","Clinical","",null,null,null,null,false],[true,"microgram per 100 gram","ug/(100.g)","UG/G","mass",1e-8,[0,0,0,0,0,0,0],"μg/g",null,false,"M",null,1,false,false,0,"ug/100gm; ug/100 gm; mcg; ug per 100g; 100 gm; mcg per 100g; micrograms per 100 grams","LOINC","MCnt","Clinical","",null,null,null,null,false],[true,"microgram per 24 hour","ug/(24.h)","UG/HR","mass",1.1574074074074074e-11,[0,-1,1,0,0,0,0],"μg/h",null,false,"M",null,1,false,false,0,"ug/24hrs; ug/24 hrs; mcg/24hrs; ug per 24hrs; mcg per 24hrs; 24 hrs; micrograms per 24 hours","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"microgram per 8 hour","ug/(8.h)","UG/HR","mass",3.472222222222222e-11,[0,-1,1,0,0,0,0],"μg/h",null,false,"M",null,1,false,false,0,"ug/8hrs; ug/8 hrs; mcg/8hrs; ug per 8hrs; mcg per 8hrs; 8 hrs; micrograms per 8 hours; shift","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"microgram per square foot (international)","ug/[sft_i]","UG/[SFT_I]","mass",0.000010763910416709721,[-2,0,1,0,0,0,0],"μg",null,false,"M",null,1,false,false,0,"ug/sft; ug/ft2; ug/ft^2; ug/sq. ft; micrograms; sq. foot; foot squared","LOINC","ArMass","Clinical","",null,null,null,null,false],[true,"microgram per day","ug/d","UG/D","mass",1.1574074074074074e-11,[0,-1,1,0,0,0,0],"μg/d",null,false,"M",null,1,false,false,0,"ug/dy; mcg/dy; ug per day; mcg; micrograms per day","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"microgram per deciliter","ug/dL","UG/DL","mass",0.009999999999999998,[-3,0,1,0,0,0,0],"μg/dL",null,false,"M",null,1,false,false,0,"ug per dL; mcg/dl; mcg per dl; micrograms per deciliter; decilitre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"microgram per gram","ug/g","UG/G","mass",0.000001,[0,0,0,0,0,0,0],"μg/g",null,false,"M",null,1,false,false,0,"ug per gm; mcg/gm; mcg per g; micrograms per gram","LOINC","MCnt","Clinical","",null,null,null,null,false],[true,"microgram per hour","ug/h","UG/HR","mass",2.7777777777777777e-10,[0,-1,1,0,0,0,0],"μg/h",null,false,"M",null,1,false,false,0,"ug/hr; mcg/hr; mcg per hr; ug per hr; ug per hour; micrograms","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"microgram per kilogram","ug/kg","UG/KG","mass",9.999999999999999e-10,[0,0,0,0,0,0,0],"μg/kg",null,false,"M",null,1,false,false,0,"ug per kg; mcg/kg; mcg per kg; micrograms per kilogram","LOINC","MCnt","Clinical","",null,null,null,null,false],[true,"microgram per kilogram per 8 hour","ug/kg/(8.h)","(UG/KG)/HR","mass",3.472222222222222e-14,[0,-1,0,0,0,0,0],"(μg/kg)/h",null,false,"M",null,1,false,false,0,"ug/kg/8hrs; mcg/kg/8hrs; ug/kg/8 hrs; mcg/kg/8 hrs; ug per kg per 8hrs; 8 hrs; mcg per kg per 8hrs; micrograms per kilograms per 8 hours; shift","LOINC","","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"microgram per kilogram per day","ug/kg/d","(UG/KG)/D","mass",1.1574074074074072e-14,[0,-1,0,0,0,0,0],"(μg/kg)/d",null,false,"M",null,1,false,false,0,"ug/(kg.d); ug/kg/dy; mcg/kg/day; ug per kg per dy; 24 hours; 24hrs; mcg; kilograms; microgram per kilogram and day","LOINC","","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"microgram per kilogram per hour","ug/kg/h","(UG/KG)/HR","mass",2.7777777777777774e-13,[0,-1,0,0,0,0,0],"(μg/kg)/h",null,false,"M",null,1,false,false,0,"ug/(kg.h); ug/kg/hr; mcg/kg/hr; ug per kg per hr; mcg per kg per hr; kilograms","LOINC","","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"microgram per kilogram per minute","ug/kg/min","(UG/KG)/MIN","mass",1.6666666666666664e-11,[0,-1,0,0,0,0,0],"(μg/kg)/min",null,false,"M",null,1,false,false,0,"ug/kg/min; ug/kg/min; mcg/kg/min; ug per kg per min; mcg; micrograms per kilograms per minute ","LOINC","","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"microgram per liter","ug/L","UG/L","mass",0.001,[-3,0,1,0,0,0,0],"μg/L",null,false,"M",null,1,false,false,0,"mcg/L; ug per L; mcg; micrograms per liter; litre ","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"microgram per liter per 24 hour","ug/L/(24.h)","(UG/L)/HR","mass",1.1574074074074074e-8,[-3,-1,1,0,0,0,0],"(μg/L)/h",null,false,"M",null,1,false,false,0,"ug/L/24hrs; ug/L/24 hrs; mcg/L/24hrs; ug per L per 24hrs; 24 hrs; day; dy mcg; micrograms per liters per 24 hours; litres","LOINC","","Clinical","unit used to measure mass dose rate per patient body mass",null,null,null,null,false],[true,"microgram per square meter","ug/m2","UG/M2","mass",0.000001,[-2,0,1,0,0,0,0],"μg/(m<sup>2</sup>)",null,false,"M",null,1,false,false,0,"ug/m^2; ug/sq. m; mcg/m2; mcg/m^2; mcg/sq. m; ug per m2; m^2; sq. meter; mcg; micrograms per square meter; meter squared; metre","LOINC","ArMass","Clinical","unit used to measure mass dose per patient body surface area",null,null,null,null,false],[true,"microgram per cubic meter","ug/m3","UG/M3","mass",0.000001,[-3,0,1,0,0,0,0],"μg/(m<sup>3</sup>)",null,false,"M",null,1,false,false,0,"ug/m^3; ug/cu. m; mcg/m3; mcg/m^3; mcg/cu. m; ug per m3; ug per m^3; ug per cu. m; mcg; micrograms per cubic meter; meter cubed; metre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"microgram per milligram","ug/mg","UG/MG","mass",0.001,[0,0,0,0,0,0,0],"μg/mg",null,false,"M",null,1,false,false,0,"ug per mg; mcg/mg; mcg per mg; micromilligrams per milligram","LOINC","MCnt","Clinical","",null,null,null,null,false],[true,"microgram per minute","ug/min","UG/MIN","mass",1.6666666666666667e-8,[0,-1,1,0,0,0,0],"μg/min",null,false,"M",null,1,false,false,0,"ug per min; mcg/min; mcg per min; microminutes per minute","LOINC","MRat","Clinical","",null,null,null,null,false],[true,"microgram per milliliter","ug/mL","UG/ML","mass",1,[-3,0,1,0,0,0,0],"μg/mL",null,false,"M",null,1,false,false,0,"ug per mL; mcg/mL; mcg per mL; micrograms per milliliter; millilitre","LOINC","MCnc","Clinical","",null,null,null,null,false],[true,"microgram per millimole","ug/mmol","UG/MMOL","mass",1.660540186674939e-27,[0,0,1,0,0,0,0],"μg/mmol",null,false,"M",null,1,false,false,-1,"ug per mmol; mcg/mmol; mcg per mmol; micrograms per millimole","LOINC","Ratio","Clinical","",null,null,null,null,false],[true,"microgram per nanogram","ug/ng","UG/NG","mass",999.9999999999999,[0,0,0,0,0,0,0],"μg/ng",null,false,"M",null,1,false,false,0,"ug per ng; mcg/ng; mcg per ng; micrograms per nanogram","LOINC","MCnt","Clinical","",null,null,null,null,false],[false,"microkatal","ukat","UKAT","catalytic activity",602213670000000000,[0,-1,0,0,0,0,0],"μkat","chemical",true,null,null,1,false,false,1,"microkatals; ukats","LOINC","CAct","Clinical","kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.","mol/s","MOL/S","1",1,false],[false,"microliter","uL","UL","volume",1e-9,[3,0,0,0,0,0,0],"μL","iso1000",true,null,null,1,false,false,0,"microliters; microlitres; mcl","LOINC","Vol","Clinical","","l",null,"1",1,false],[false,"microliter per 2 hour","uL/(2.h)","UL/HR","volume",1.388888888888889e-13,[3,-1,0,0,0,0,0],"μL/h","iso1000",true,null,null,1,false,false,0,"uL/2hrs; uL/2 hrs; mcg/2hr; mcg per 2hr; uL per 2hr; uL per 2 hrs; microliters per 2 hours; microlitres ","LOINC","VRat","Clinical","","l",null,"1",1,false],[false,"microliter per hour","uL/h","UL/HR","volume",2.777777777777778e-13,[3,-1,0,0,0,0,0],"μL/h","iso1000",true,null,null,1,false,false,0,"uL/hr; mcg/hr; mcg per hr; uL per hr; microliters per hour; microlitres","LOINC","VRat","Clinical","","l",null,"1",1,false],[true,"micrometer","um","UM","length",0.000001,[1,0,0,0,0,0,0],"μm",null,false,"L",null,1,false,false,0,"micrometers; micrometres; μm; microns","LOINC","Len","Clinical","Unit of length that is usually used in tests related to the eye",null,null,null,null,false],[true,"microns per second","um/s","UM/S","length",0.000001,[1,-1,0,0,0,0,0],"μm/s",null,false,"L",null,1,false,false,0,"um/sec; micron/second; microns/second; um per sec; micrometers per second; micrometres","LOINC","Vel","Clinical","",null,null,null,null,false],[false,"micromole","umol","UMOL","amount of substance",602213670000000000,[0,0,0,0,0,0,0],"μmol","si",true,null,null,1,false,false,1,"micromoles; umols","LOINC","Sub","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per 2 hour","umol/(2.h)","UMOL/HR","amount of substance",83640787500000,[0,-1,0,0,0,0,0],"μmol/h","si",true,null,null,1,false,false,1,"umol/2hrs; umol/2 hrs; umol per 2 hrs; 2hrs; micromoles per 2 hours","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per 24 hour","umol/(24.h)","UMOL/HR","amount of substance",6970065625000,[0,-1,0,0,0,0,0],"μmol/h","si",true,null,null,1,false,false,1,"umol/24hrs; umol/24 hrs; umol per 24 hrs; per 24hrs; micromoles per 24 hours","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per 8 hour","umol/(8.h)","UMOL/HR","amount of substance",20910196875000,[0,-1,0,0,0,0,0],"μmol/h","si",true,null,null,1,false,false,1,"umol/8hr; umol/8 hr; umol per 8 hr; umol per 8hr; umols per 8hr; umol per 8 hours; micromoles per 8 hours; shift","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per day","umol/d","UMOL/D","amount of substance",6970065625000,[0,-1,0,0,0,0,0],"μmol/d","si",true,null,null,1,false,false,1,"umol/day; umol per day; umols per day; umol per days; micromoles per days; umol/24hr; umol/24 hr; umol per 24 hr; umol per 24hr; umols per 24hr; umol per 24 hours; micromoles per 24 hours","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per deciliter","umol/dL","UMOL/DL","amount of substance",6.0221367e+21,[-3,0,0,0,0,0,0],"μmol/dL","si",true,null,null,1,false,false,1,"micromole/deciliter; micromole/decilitre; umol per dL; micromoles per deciliters; micromole per decilitres","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per gram","umol/g","UMOL/G","amount of substance",602213670000000000,[0,0,-1,0,0,0,0],"μmol/g","si",true,null,null,1,false,false,1,"micromole/gram; umol per g; micromoles per gram","LOINC","SCnt; Ratio","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per hour","umol/h","UMOL/HR","amount of substance",167281575000000,[0,-1,0,0,0,0,0],"μmol/h","si",true,null,null,1,false,false,1,"umol/hr; umol per hr; umol per hour; micromoles per hours","LOINC","SRat","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per kilogram","umol/kg","UMOL/KG","amount of substance",602213670000000,[0,0,-1,0,0,0,0],"μmol/kg","si",true,null,null,1,false,false,1,"umol per kg; micromoles per kilogram","LOINC","SCnt","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per liter","umol/L","UMOL/L","amount of substance",602213670000000000000,[-3,0,0,0,0,0,0],"μmol/L","si",true,null,null,1,false,false,1,"micromole/liter; micromole/litre; umol per liter; micromoles per liter; litre","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per liter per hour","umol/L/h","(UMOL/L)/HR","amount of substance",167281575000000000,[-3,-1,0,0,0,0,0],"(μmol/L)/h","si",true,null,null,1,false,false,1,"umol/liter/hr; umol/litre/hr; umol per L per hr; umol per liter per hour; micromoles per liters per hour; litre","LOINC","CCnc","Clinical","unit for the enzyme unit U = umol/min; umol/L/h is a derived unit of enzyme units","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per milligram","umol/mg","UMOL/MG","amount of substance",602213670000000000000,[0,0,-1,0,0,0,0],"μmol/mg","si",true,null,null,1,false,false,1,"micromole/milligram; umol per mg; micromoles per milligram","LOINC","SCnt","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per minute","umol/min","UMOL/MIN","amount of substance",10036894500000000,[0,-1,0,0,0,0,0],"μmol/min","si",true,null,null,1,false,false,1,"micromole/minute; umol per min; micromoles per minute; enzyme units","LOINC","CAct","Clinical","unit for the enzyme unit U = umol/min","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per minute per gram","umol/min/g","(UMOL/MIN)/G","amount of substance",10036894500000000,[0,-1,-1,0,0,0,0],"(μmol/min)/g","si",true,null,null,1,false,false,1,"umol/min/gm; umol per min per gm; micromoles per minutes per gram; U/g; enzyme units","LOINC","CCnt","Clinical","unit for the enzyme unit U = umol/min. umol/min/g = U/g","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per minute per liter","umol/min/L","(UMOL/MIN)/L","amount of substance",10036894500000000000,[-3,-1,0,0,0,0,0],"(μmol/min)/L","si",true,null,null,1,false,false,1,"umol/min/liter; umol/minute/liter; micromoles per minutes per liter; litre; enzyme units; U/L","LOINC","CCnc","Clinical","unit for the enzyme unit U = umol/min. umol/min/L = U/L","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per milliliter","umol/mL","UMOL/ML","amount of substance",6.0221367000000003e+23,[-3,0,0,0,0,0,0],"μmol/mL","si",true,null,null,1,false,false,1,"umol per mL; micromoles per milliliter; millilitre","LOINC","SCnc","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per milliliter per minute","umol/mL/min","(UMOL/ML)/MIN","amount of substance",1.00368945e+22,[-3,-1,0,0,0,0,0],"(μmol/mL)/min","si",true,null,null,1,false,false,1,"umol per mL per min; micromoles per milliliters per minute; millilitres","LOINC","CCnc","Clinical","unit for the enzyme unit U = umol/min. umol/mL/min = U/mL","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per millimole","umol/mmol","UMOL/MMOL","amount of substance",0.001,[0,0,0,0,0,0,0],"μmol/mmol","si",true,null,null,1,false,false,0,"umol per mmol; micromoles per millimole","LOINC","SRto","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per mole","umol/mol","UMOL/MOL","amount of substance",0.000001,[0,0,0,0,0,0,0],"μmol/mol","si",true,null,null,1,false,false,0,"umol per mol; micromoles per mole","LOINC","SRto","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"micromole per micromole","umol/umol","UMOL/UMOL","amount of substance",1,[0,0,0,0,0,0,0],"μmol/μmol","si",true,null,null,1,false,false,0,"umol per umol; micromoles per micromole","LOINC","Srto; SFr; EntSRto","Clinical","","10*23","10*23","6.0221367",6.0221367,false],[false,"microOhm","uOhm","UOHM","electric resistance",0.001,[2,-1,1,0,0,-2,0],"μΩ","si",true,null,null,1,false,false,0,"microOhms; µΩ","LOINC","","Clinical","unit of electric resistance","V/A","V/A","1",1,false],[true,"microsecond","us","US","time",0.000001,[0,1,0,0,0,0,0],"μs",null,false,"T",null,1,false,false,0,"microseconds","LOINC","Time","Clinical","",null,null,null,null,false],[false,"micro enzyme unit per gram","uU/g","UU/G","catalytic activity",10036894500,[0,-1,-1,0,0,0,0],"μU/g","chemical",true,null,null,1,false,false,1,"uU per gm; micro enzyme units per gram; micro enzymatic activity per mass; enzyme activity","LOINC","CCnt","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 uU = 1pmol/min","umol/min","UMOL/MIN","1",1,false],[false,"micro enzyme unit per liter","uU/L","UU/L","catalytic activity",10036894500000,[-3,-1,0,0,0,0,0],"μU/L","chemical",true,null,null,1,false,false,1,"uU per L; micro enzyme units per liter; litre; enzymatic activity per volume; enzyme activity ","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 uU = 1pmol/min","umol/min","UMOL/MIN","1",1,false],[false,"micro enzyme unit per milliliter","uU/mL","UU/ML","catalytic activity",10036894500000000,[-3,-1,0,0,0,0,0],"μU/mL","chemical",true,null,null,1,false,false,1,"uU per mL; micro enzyme units per milliliter; millilitre; enzymatic activity per volume; enzyme activity","LOINC","CCnc","Clinical","1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 uU = 1pmol/min","umol/min","UMOL/MIN","1",1,false],[false,"microvolt","uV","UV","electric potential",0.001,[2,-2,1,0,0,-1,0],"μV","si",true,null,null,1,false,false,0,"microvolts","LOINC","Elpot","Clinical","unit of electric potential (voltage)","J/C","J/C","1",1,false]]}}

},{}],50:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ucum = void 0;

/*
 * This defines the namespace for the UCUM classes and provides
 * a place for the definition of global variables and constants.
 *
 * The javascript for this UCUM implementation uses syntax as
 * defined by the ECMAScript 6 standard
 */
var Ucum = {
  /**
   *  Flag indicating whether or not we're using case sensitive labels
   *  I don't think we need this.  I think we're just going with
   *  case sensitive, per Clem.   Gunther's code has this flag, but I
   *  am removing it, at least for now.  lm, 6/2016
   */
  //caseSensitive_: true ,

  /**
   *  The number of elements in a Dimension array.   Currently this
   *  is set as a configuration variable, but when we get to the point
   *  of loading the unit definitions from a file, this value will be
   *  set from that.
   */
  dimLen_: 7,

  /**
   *  The characters used as valid operators in a UCUM unit expression,
   *  where '.' is for multiplication and '/' is for division.
   */
  validOps_: ['.', '/'],

  /**
   * The string used to separate a unit code and unit name when they
   * are displayed together
   */
  codeSep_: ': ',
  // Message text variations for validation methods and conversion methods
  valMsgStart_: 'Did you mean ',
  valMsgEnd_: '?',
  cnvMsgStart_: 'We assumed you meant ',
  cnvMsgEnd_: '.',

  /**
     * Default opening string used to emphasize portions of error messages.
     * Used when NOT displaying messages on a web site, i.e., for output
     * from the library methods or to a file.
     */
  openEmph_: ' ->',

  /**
   * Default closing string used to emphasize portions of error messages.
   * Used when NOT displaying messages on a web site, i.e., for output
   * from the library methods or to a file.
   */
  closeEmph_: '<- ',

  /**
   * Opening HTML used to emphasize portions of error messages.  Used when
   * displaying messages on a web site; should be blank when output is
   * to a file.
   */
  openEmphHTML_: '<span class="emphSpan">',

  /**
   * Closing HTML used to emphasize portions of error messages.  Used when
   * displaying messages on a web site; should be blank when output is
   * to a file.
   */
  closeEmphHTML_: '</span>',

  /**
   * Message that is displayed when annotations are included in a unit
   * string, to let the user know how they are interpreted.
   */
  bracesMsg_: 'FYI - annotations (text in curly braces {}) are ignored, ' + 'except that an annotation without a leading symbol implies ' + 'the default unit 1 (the unity).',

  /**
   * Message that is displayed or returned when a conversion is requested
   * for two units where (only) a mass<->moles conversion is appropriate
   * but no molecular weight was specified.
   */
  needMoleWeightMsg_: 'Did you wish to convert between mass and moles?  The ' + 'molecular weight of the substance represented by the ' + 'units is required to perform the conversion.',

  /**
   * Hash that matches unit column names to names used in the csv file
   * that is submitted to the data updater.
   */
  csvCols_: {
    'case-sensitive code': 'csCode_',
    'LOINC property': 'loincProperty_',
    'name (display)': 'name_',
    'synonyms': 'synonyms_',
    'source': 'source_',
    'category': 'category_',
    'Guidance': 'guidance_'
  },

  /**
   * Name of the column in the csv file that serves as the key
   */
  inputKey_: 'case-sensitive code',

  /**
   * Special codes that contain operators within brackets.  The operator
   * within these codes causes them to parse incorrectly if they are preceded
   * by a prefix, because the parsing algorithm splits them up on the operator.
   * So we use this object to identify them and substitute placeholders to
   * avoid that.
   */
  specUnits_: {
    'B[10.nV]': 'specialUnitOne',
    '[m/s2/Hz^(1/2)]': 'specialUnitTwo'
  }
};
exports.Ucum = Ucum;


},{}],51:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dimension = void 0;

/**
 * This class implements an object containing the vector of exponents for
 * a unit and its operations for addition, subtraction, and multiplication
 * with a scalar.
 *
 * This object should exist for each unit that can be expressed as a
 * vector of numbers.   This excludes arbitrary units, e.g., (10*23), and
 * units that are not numbers but are an expression based solely on numbers,
 * e.g., mol (mole) which is based on 10*23.
 *
 * @author Lee Mericle, based on java version by Gunther Schadow
 */
var UC = require('./config.js');

var isInteger = require("is-integer");

class Dimension {
  /**
   * Constructor.
   *
   * @param dimSetting an optional parameter that may be:
   *  null, which means that the dimVec_ attribute for this object will be null; or
   *  an array, which must be the length defined by Ucum.dimLen_, and
   *    whose contents will be copied to this new object's vector; or
   *  an integer, which must be between 0 and 1 less than the vector length
   *    defined by Ucum.dimLen_.  This new object's vector will be
   *    initialized to zero for all elements except the one whose index
   *    matches the number passed in.  That element will be set to one.
    * @throws an error if the dimSetting parameter does not meet the types
   *  listed above.
   *  An error will also be thrown if Ucum.dimLen_ has not been set yet,
   *  i.e., is still zero.   Currently that won't happen, because the
   *  value is set in the config.js file.  But further down the road
   *  the setting will come from a definitions input file, so we check
   *  here anyway.
   *
   */
  constructor(dimSetting) {
    if (UC.Ucum.dimLen_ === 0) {
      throw new Error('Dimension.setDimensionLen must be called before ' + 'Dimension constructor');
    }

    if (dimSetting === undefined || dimSetting === null) {
      this.assignZero();
    } else if (dimSetting instanceof Array) {
      if (dimSetting.length !== UC.Ucum.dimLen_) {
        throw new Error('Parameter error, incorrect length of vector passed to ' + `Dimension constructor, vector = ${JSON.stringify(dimSetting)}`);
      }

      this.dimVec_ = [];

      for (let d = 0; d < UC.Ucum.dimLen_; d++) this.dimVec_.push(dimSetting[d]);
    } // In es6 this should be Number.isInteger(dimSetting).  But Babel
    // doesn't transpile that correctly, so we need to use the isInteger
    // module.  :0
    else if (isInteger(dimSetting)) {
        if (dimSetting < 0 || dimSetting >= UC.Ucum.dimLen_) {
          throw new Error('Parameter error, invalid element number specified for ' + 'Dimension constructor');
        }

        this.assignZero();
        this.dimVec_[dimSetting] = 1;
      }
  } // end constructor

  /**
   * Sets the element at the specified position to a specified value.  The
   * default value is 1.  If the dimension vector is null when this is called
   * a zero-filled vector is created and then the indicated position is set.
   *
   * @param indexPos the index of the element to be set
   * @param value the value to assign to the specified element; optional,
   *  default value is 1
   * @throws an exception if the specified position is invalid, i.e., not a
   *   number or is less than 0 or greater than Ucum.dimLen_
   **/


  setElementAt(indexPos, value) {
    if (!isInteger(indexPos) || indexPos < 0 || indexPos >= UC.Ucum.dimLen_) {
      throw new Error(`Dimension.setElementAt called with an invalid index ` + `position (${indexPos})`);
    }

    if (!this.dimVec_) {
      this.assignZero();
    }

    if (value === undefined || value === null) value = 1;
    this.dimVec_[indexPos] = value;
  }
  /**
   * Gets the value of the element at the specified position
   *
   * @param indexPos the index of the element whose value is to be returned
   * @return the value of the element at indexPos, or null if the dimension
   *  vector is null
   * @throws an exception if the specified position is invalid, i.e., not a
   *   number or is less than 0 or greater than Ucum.dimLen_
   **/


  getElementAt(indexPos) {
    if (!isInteger(indexPos) || indexPos < 0 || indexPos >= UC.Ucum.dimLen_) {
      throw new Error(`Dimension.getElementAt called with an invalid index ` + `position (${indexPos})`);
    }

    let ret = null;
    if (this.dimVec_) ret = this.dimVec_[indexPos];
    return ret;
  }
  /**
   * This returns the value of the property named by the parameter
   * passed in.  Although we currently only have one property, dimVec_,
   * that this will get, it's possible that we'll have additional
   * properties.   If we don't this could just be replaced by a
   * getVector function.
   *
   * @param propertyName name of the property to be returned, with
   *        or without the trailing underscore.
   * @return the requested property, if found for this Dimension
   * @throws an error if the property is not found for this Dimension
   */


  getProperty(propertyName) {
    let uProp = propertyName.charAt(propertyName.length - 1) === '_' ? propertyName : propertyName + '_';
    return this[uProp];
  } // end getProperty

  /**
   * Return a string that represents the dimension vector.  Returns null if
   * the dimension vector is null.
   *
   * @return the string that represents the dimension vector.  The
   *         values are enclosed in square brackets, each separated
   *         by a comma and a space
   **/


  toString() {
    let ret = null;
    if (this.dimVec_) ret = '[' + this.dimVec_.join(', ') + ']';
    return ret;
  }
  /**
   * Adds the vector of the dimension object passed in to this
   * dimension object's vector.  This object's vector is changed.
   * If either dimension vector is null, no changes are made to this object.
   *
   *
   * @param dim2 the dimension whose vector is to be added to this one
   * @return this object
   * @throws an exception if dim2 is not a Dimension object
   **/


  add(dim2) {
    if (!dim2 instanceof Dimension) {
      throw new Error(`Dimension.add called with an invalid parameter - ` + `${typeof dim2} instead of a Dimension object`);
    }

    if (this.dimVec_ && dim2.dimVec_) {
      for (let i = 0; i < UC.Ucum.dimLen_; i++) this.dimVec_[i] += dim2.dimVec_[i];
    }

    return this;
  }
  /**
   * Subtracts the vector of the dimension object passed in from this
   * dimension object's vector.  This object's vector is changed.
   * If either dimension vector is null, no changes are made to this object.
   *
   * @param dim2 the dimension whose vector is to be subtracted from this one
   * @return this object
   * @throws an exception if dim2 is not a Dimension object
   **/


  sub(dim2) {
    if (!dim2 instanceof Dimension) {
      throw new Error(`Dimension.sub called with an invalid parameter - ` + `${typeof dim2} instead of a Dimension object`);
    }

    if (this.dimVec_ && dim2.dimVec_) {
      for (let i = 0; i < UC.Ucum.dimLen_; i++) this.dimVec_[i] -= dim2.dimVec_[i];
    }

    return this;
  }
  /**
   * Inverts this dimension object's vector (by multiplying each element
   * by negative 1).  This object's vector is changed - unless it is null,
   * in which case it stays that way.
   *
   * @return this object
   **/


  minus() {
    if (this.dimVec_) {
      for (let i = 0; i < UC.Ucum.dimLen_; i++) this.dimVec_[i] = -this.dimVec_[i];
    }

    return this;
  }
  /**
   * Multiplies this dimension object's vector with a scalar.  This is used
   * when a unit is raised to a power.  This object's vector is changed unless
   * the vector is null, in which case it stays that way.
   *
   * @param s the scalar to use
   * @return this object
   * @throws an exception if s is not a number
   */


  mul(s) {
    if (!isInteger(s)) {
      throw new Error(`Dimension.sub called with an invalid parameter - ` + `${typeof dim2} instead of a number`);
    }

    if (this.dimVec_) {
      for (let i = 0; i < UC.Ucum.dimLen_; i++) this.dimVec_[i] *= s;
    }

    return this;
  }
  /**
   * Tests for equality of this dimension object's vector and that of
   * the dimension object passed in.  If the dimension vector for one of
   * the objects is null, the dimension vector for the other object must
   * also be null for the two to be equal.  (I know - duh.  still)
   *
   * @param dim2 the dimension object whose vector is to be compared to this one
   * @return true if the two vectors are equal; false otherwise.
   * @throws an exception if dim2 is not a Dimension object
   */


  equals(dim2) {
    if (!dim2 instanceof Dimension) {
      throw new Error(`Dimension.equals called with an invalid parameter - ` + `${typeof dim2} instead of a Dimension object`);
    }

    let isEqual = true;
    let dimVec2 = dim2.dimVec_;

    if (this.dimVec_ && dimVec2) {
      for (let i = 0; isEqual && i < UC.Ucum.dimLen_; i++) isEqual = this.dimVec_[i] === dimVec2[i];
    } else {
      isEqual = this.dimVec_ === null && dimVec2 === null;
    }

    return isEqual;
  }
  /**
   * Assigns the contents of the vector belonging to the dimension object
   * passed in to this dimension's vector.  If this dimension vector is null
   * and the other is not, this one will get the contents of the other.  If
   * this dimension vector is not null but the one passed in is null, this
   * one will be set to null.
   *
   * @param dim2 the dimension object with the vector whose contents are
   *  to be assigned to this dimension's vector
   * @return this object (not sure why)
   * @throws an exception if dim2 is not a Dimension object
   */


  assignDim(dim2) {
    if (!dim2 instanceof Dimension) {
      throw new Error(`Dimension.assignDim called with an invalid parameter - ` + `${typeof dim2} instead of a Dimension object`);
    }

    if (dim2.dimVec_ === null) this.dimVec_ = null;else {
      if (this.dimVec_ === null) {
        this.dimVec_ = [];
      }

      for (let i = 0; i < UC.Ucum.dimLen_; i++) this.dimVec_[i] = dim2.dimVec_[i];
    }
    return this;
  }
  /**
   * Sets all elements of this dimension object's vector to zero.
   * If this object's vector is null, it is created as a zero-filled vector.
   *
   * @return this object (not sure why)
   */


  assignZero() {
    if (this.dimVec_ === null || this.dimVec_ === undefined) this.dimVec_ = [];

    for (let i = 0; i < UC.Ucum.dimLen_; i++) {
      this.dimVec_.push(0);
    }

    return this;
  }
  /**
   * Tests for a dimension vector set to all zeroes.
   *
   * @return true if exponents (elements) of this dimension's vector are all
   * zero; false otherwise (including if the current vector is null).
   *
   */


  isZero() {
    let allZero = this.dimVec_ !== null;

    if (this.dimVec_) {
      for (let i = 0; allZero && i < UC.Ucum.dimLen_; i++) allZero = this.dimVec_[i] === 0;
    }

    return allZero;
  }
  /**
   * Tests for a Dimension object with no dimension vector (dimVec_ is null).
   *
   * @return true the dimension vector is null; false if it is not
   *
   */


  isNull() {
    return this.dimVec_ === null;
  }
  /**
   * Creates and returns a clone of this Dimension object
   *
   * @return the clone
   */


  clone() {
    let that = new Dimension();
    that.assignDim(this);
    return that;
  }

} // end Dimension class


exports.Dimension = Dimension;


},{"./config.js":50,"is-integer":64}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packArray = packArray;
exports.unpackArray = unpackArray;

/**
 * This file provides functions to reduce the size of an array of objects of the same structure in JSON.
 */
const pushFn = Array.prototype.push;

function isObject(value) {
  return Object.prototype.toString.call(value) === '[object Object]';
}
/**
 * Makes human readable config used to pack/unpack array of objects of the same structure to store with packed data.
 * @param {Object} refObj - reference item of array of objects of the same structure
 * @returns {Array}
 */


function createConfig(refObj) {
  return Object.keys(refObj).reduce((config, key) => {
    if (isObject(refObj[key])) {
      pushFn.apply(config, createConfig(refObj[key]).map(keyTail => [key, ...[].concat(keyTail)]));
    } else {
      config.push(key);
    }

    return config;
  }, []);
}
/**
 * Prepares config created with createConfig function to use in packItem/unpackItem functions.
 * @param {Array} config
 * @returns {Array}
 */


function prepareConfig(config) {
  return config.map(key => Array.isArray(key) ? key : [key]);
}
/**
 * Converts an object to an array of values in the order of keys from configuration array.
 * @param {Array} config - configuration array
 * @param {Object} item - input object
 * @returns {Array}
 */


function packItem(config, item) {
  if (config.join() !== prepareConfig(createConfig(item)).join()) {
    throw new Error('Object of unusual structure');
  }

  return config.map(keyArr => {
    let place = item;
    keyArr.forEach(key => {
      place = place[key];

      if (place === undefined) {
        throw new Error('Object of unusual structure');
      }
    });
    return place;
  });
}
/**
 * Performs the reverse of packItem function.
 * @param {Array} config - configuration array
 * @param {Array} item - input object
 * @returns {Object}
 */


function unpackItem(config, item) {
  let result = {};
  config.forEach((keyArr, i) => {
    let place = result;

    for (let i = 0; i < keyArr.length - 1; i++) {
      place = place[keyArr[i]] = place[keyArr[i]] || {};
    }

    place[keyArr[keyArr.length - 1]] = item[i];
  });
  return result;
}
/**
 * Reduces size of an array of objects of the same structure before serialize it to JSON
 * @param {Array} arr
 * @returns {Object}
 */


function packArray(arr) {
  if (arr && arr.length) {
    const config = createConfig(arr[0]),
          _config = prepareConfig(config);

    if (config.length) {
      return {
        config: config,
        data: arr.map(packItem.bind(null, _config))
      };
    }
  }

  return {
    config: [],
    data: arr
  };
}
/**
 * Restores an array of objects of the same structure after deserializing this object from JSON
 * @param {Object} obj
 * @returns {Array}
 */


function unpackArray(obj) {
  const config = obj && obj.config;

  if (config) {
    if (config.length && obj.data) {
      const _config = prepareConfig(config);

      return obj.data.map(unpackItem.bind(null, _config));
    } else {
      return obj.data;
    }
  }

  return obj;
}


},{}],53:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Prefix = void 0;

/**
 * Prefix objects are defined in this file.
 */

/**
 * This class implements the prefix object.  Prefixes are used as multipliers
 * for units, e.g., km for kilometers
 *
 * @author Lee Mericle, based on java version by Gunther Schadow
 *
 */
var Ucum = require('./config.js');

class Prefix {
  /**
   * Creates a single prefix object.
   *
   * @param attrs a hash of the values to use in creating the prefix object.
   *  They should be:
   *   code_ - which is the case-sensitive code used for the prefix,
   *    e.g., k for kilo
   *   ciCode_ - which is the case-insensitive code used for the prefix,
   *    e.g., K for kilo
   *   name_ - which is the name of the prefix, e.g., kilo
   *   printSymbol_ - which is the print symbol for the prefix, e.g., k for kilo
   *   value_ - which is teh value to use in multiplying the magnitude of
   *    a unit, e.g., for a prefix of c the value will be .01.
   *   exp_ - which is the exponent used to get the value. For decimal based
   *    prefixes the base is 10 and the exp_ is applied to 10, e.g., for a
   *    prefix of c, the exponent will be -2.  For prefixes that are not
   *    decimal based, this will be null (but must not be undefined).
   *
   * @throws an error if the not all required parameters are provided
   */
  constructor(attrs) {
    if (attrs['code_'] === undefined || attrs['code_'] === null || attrs['name_'] === undefined || attrs['name_'] === null || attrs['value_'] === undefined || attrs['value_'] === null || attrs['exp_'] === undefined) {
      throw new Error('Prefix constructor called missing one or more parameters.  ' + 'Prefix codes (cs or ci), name, value and exponent must all be specified ' + 'and all but the exponent must not be null.');
    }
    /**
     * The prefix code, e.g., k for kilo.  This should be the case-sensitive
     * code.  Since there's no way to check to see if it's the case-sensitive
     * one as opposed to the case-insensitive one (because although
     * case-insensitive codes all seem to be uppercase, some case-sensitive
     * codes are also all uppercase), we'll just have to believe that the
     * right one was passed in.
     */


    this.code_ = attrs['code_'];
    /**
     * The case-insensitive code, e.g., K for kilo
     */

    this.ciCode_ = attrs['ciCode_'];
    /**
     * The prefix name, e.g., kilo
     */

    this.name_ = attrs['name_'];
    /**
     * The printSymbol for the prefix, e.g., k for kilo
     */

    this.printSymbol_ = attrs['printSymbol_'];
    /**
     * The value to use in multiplying the magnitude of a unit
     */

    if (typeof attrs['value_'] === 'string') this.value_ = parseFloat(attrs['value_']);else this.value_ = attrs['value_'];
    /**
     * The exponent used to create the value from 10.  For prefixes that are
     * not based on 10, this will be null.
     */

    this.exp_ = attrs['exp_'];
  } // end constructor

  /**
   * Returns the value for the current prefix object
   * @return the value for the prefix object with the specified code
   * */


  getValue() {
    return this.value_;
  }
  /**
   * Returns the prefix code for the current prefix object
   * @return the code for the current prefix object
   */


  getCode() {
    return this.code_;
  }
  /**
   * Returns the case-insensitive code for the current prefix object
   * @return the case_insensitive code for the current prefix object
   */


  getCiCode() {
    return this.ciCode_;
  }
  /**
   * Returns the prefix name for the current prefix object
   * @return the name for the current prefix object
   */


  getName() {
    return this.name_;
  }
  /**
   * Returns the print symbol for the current prefix object
   * @return the print symbol for the current prefix object
   */


  getPrintSymbol() {
    return this.printSymbol_;
  }
  /**
   * Returns the exponent for the current prefix object
   * @return the exponent for the current prefix object
   */


  getExp() {
    return this.exp_;
  }
  /**
   * Provides way to tell if one prefix equals another.  The second prefix
   * must match all attribute values.
   *
   * @param prefix2 prefix object to check for a match
   * @return true for a match; false if one or more attributes don't match
   */


  equals(prefix2) {
    return this.code_ === prefix2.code_ && this.ciCode_ === prefix2.ciCode_ && this.name_ === prefix2.name_ && this.printSymbol_ === prefix2.printSymbol_ && this.value_ === prefix2.value_ && this.exp_ === prefix2.exp_;
  }

} // end Prefix class


exports.Prefix = Prefix;


},{"./config.js":50}],54:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrefixTables = exports.PrefixTablesFactory = void 0;

/**
 * The tables of defined prefixes is defined in this file.
 */

/**
 * This class implements the table of multiplier prefixes.
 *
 * @author Lee Mericle, based on java version by Gunther Schadow
 *
 */
class PrefixTablesFactory {
  /**
   * Constructor.  This creates the empty PrefixTable hashes once.
   * There is one hash whose key is the prefix code and one whose
   * key is the prefix value.
   *
   * Implementation of this as a singleton is based on the UnitTables
   * implementation.  See that class for details.
   */
  constructor() {
    this.byCode_ = {};
    this.byValue_ = {};
  }
  /**
   * Provides the number of prefix objects in each table
   * @returns count of the number of prefix objects in each table
   */


  prefixCount() {
    return Object.keys(this.byCode_).length;
  }
  /**
   * This is used to get all prefix objects by value.  Currently it is used
   * to create a csv file with all prefixes and units.
   * @returns csv string containing all prefix objects, ordered by value.
   */


  allPrefixesByValue() {
    let prefixBuff = '';
    let pList = Object.keys(this.byValue_); //pList.sort() ;

    let pLen = pList.length;

    for (let p = 0; p < pLen; p++) {
      let pfx = this.getPrefixByValue(pList[p]);
      prefixBuff += pfx.code_ + ',' + pfx.name_ + ',,' + pfx.value_ + '\r\n';
    }

    return prefixBuff;
  }
  /**
   * This is used to get all prefix objects.  Currently it is used
   * to get the objects to write to the json ucum definitions file
   * that is used to provide prefix and unit definition objects for
   * conversions and validations.
   *
   * @returns an array containing all prefix objects, ordered by code.
   */


  allPrefixesByCode() {
    let prefixList = [];
    let pList = Object.keys(this.byCode_);
    pList.sort();
    let pLen = pList.length;

    for (let p = 0; p < pLen; p++) {
      prefixList.push(this.getPrefixByCode(pList[p]));
    }

    return prefixList;
  }
  /**
   * Adds a prefix object to the tables
   *
   * @param prefixObj the object to be added to the tables
   */


  add(prefixObj) {
    this.byCode_[prefixObj.getCode()] = prefixObj;
    this.byValue_[prefixObj.getValue()] = prefixObj;
  }
  /**
   * Tests whether a prefix object is found for a specified code.  This
   * is used to determine whether or not a prefix object has been created
   * for the code.
   *
   * @param code the code to be used to find the prefix object
   * @return boolean indicating whether or not a prefix object was found
   *  for the specified code
   */


  isDefined(code) {
    return this.byCode_[code] !== null && this.byCode_[code] !== undefined;
  }
  /**
   * Obtains a prefix object for a specified code.
   *
   * @param code the code to be used to find the prefix object
   * @return the prefix object found, or null if nothing was found
   */


  getPrefixByCode(code) {
    return this.byCode_[code];
  }
  /**
   * Obtains a prefix object for a specified value.
   *
   * @param value the value to be used to find the prefix object
   * @return the prefix object found, or null if nothing was found
   */


  getPrefixByValue(value) {
    return this.byValue_[value];
  }

} // end PrefixTablesFactory class
// Create a singleton instance and (to preserve the existing API) an object that
// provides that instance via getInstance().


exports.PrefixTablesFactory = PrefixTablesFactory;
var prefixTablesInstance = new PrefixTablesFactory();
const PrefixTables = {
  getInstance: function () {
    return prefixTablesInstance;
  }
};
exports.PrefixTables = PrefixTables;


},{}],55:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * This class manages the special functions used by some units.
 *
 * @author Lee Mericle, based on java version by Gunther Schadow
 *
 */
class UcumFunctions {
  /**
   * Constructor
   *
   * Creates the singleton object that contains the list of functions used
   * to convert special units.
   */
  constructor() {
    // Create the hash containing the function pairs
    this.funcs = {}; // Celsius - convert to Celsius from kelvin and from Celsius to kelvin
    // where kelvin is the base unit for temperature

    this.funcs['cel'] = {
      cnvTo: function (x) {
        return x - 273.15;
      },
      cnvFrom: function (x) {
        return x + 273.15;
      }
    }; // Fahrenheit - convert to Fahrenheit from kelvin and from Fahrenheit to
    // kelvin - which is the base unit for temperature

    this.funcs['degf'] = {
      cnvTo: function (x) {
        return x - 459.67;
      },
      cnvFrom: function (x) {
        return x + 459.67;
      }
    }; // Reaumur - convert between Reaumur and Kelvin.   Because of the way the
    // calling code in the Units class is set up (in the convertFrom method),
    // what is given here as the convertTo function is actually the convert
    // from method and vice versa.
    //this.funcs['degre'] = {cnvTo   : function(x){return x + 273.15;},
    //                    cnvFrom : function(x){return x - 273.15;}};

    this.funcs['degre'] = {
      cnvTo: function (x) {
        return x - 273.15;
      },
      cnvFrom: function (x) {
        return x + 273.15;
      }
    }; // pH - convert to pH from moles per liter and from moles per liter to pH
    // where a mole is an amount of a substance (a count of particles)

    this.funcs['ph'] = {
      cnvTo: function (x) {
        return -Math.log(x) / Math.LN10;
      },
      cnvFrom: function (x) {
        return Math.pow(10, -x);
      }
    }; // ln - natural logarithm (base e 2.71828) - apply (cnvTo) and invert (cnvFrom)
    // and 2ln - two times the natural logarithm

    this.funcs['ln'] = {
      cnvTo: function (x) {
        return Math.log(x);
      },
      cnvFrom: function (x) {
        return Math.exp(x);
      }
    };
    this.funcs['2ln'] = {
      cnvTo: function (x) {
        return 2 * Math.log(x);
      },
      cnvFrom: function (x) {
        return Math.exp(x / 2);
      }
    }; // lg - the decadic logarithm (base 10)

    this.funcs['lg'] = {
      cnvTo: function (x) {
        return Math.log(x) / Math.LN10;
      },
      cnvFrom: function (x) {
        return Math.pow(10, x);
      }
    };
    this.funcs['10lg'] = {
      cnvTo: function (x) {
        return 10 * Math.log(x) / Math.LN10;
      },
      cnvFrom: function (x) {
        return Math.pow(10, x / 10);
      }
    };
    this.funcs['20lg'] = {
      cnvTo: function (x) {
        return 20 * Math.log(x) / Math.LN10;
      },
      cnvFrom: function (x) {
        return Math.pow(10, x / 20);
      }
    }; // The plain text ucum units file uses '2lg'

    this.funcs['2lg'] = {
      cnvTo: function (x) {
        return 2 * Math.log(x) / Math.LN10;
      },
      cnvFrom: function (x) {
        return Math.pow(10, x / 2);
      }
    }; // The xml essence ucum file uses lgTimes2

    this.funcs['lgtimes2'] = this.funcs['2lg']; // ld - dual logarithm (base 2)

    this.funcs['ld'] = {
      cnvTo: function (x) {
        return Math.log(x) / Math.LN2;
      },
      cnvFrom: function (x) {
        return Math.pow(2, x);
      }
    }; // tan - tangent

    this.funcs['100tan'] = {
      cnvTo: function (x) {
        return Math.tan(x) * 100;
      },
      cnvFrom: function (x) {
        return Math.atan(x / 100);
      }
    }; // the xml essence ucum file uses both 100tan and tanTimes100

    this.funcs['tanTimes100'] = this.funcs['100tan']; // sqrt - square root

    this.funcs['sqrt'] = {
      cnvTo: function (x) {
        return Math.sqrt(x);
      },
      cnvFrom: function (x) {
        return x * x;
      }
    }; // inv - inverse

    this.funcs['inv'] = {
      cnvTo: function (x) {
        return 1.0 / x;
      },
      cnvFrom: function (x) {
        return 1.0 / x;
      }
    }; // homeopathic potency functions

    this.funcs['hpX'] = {
      cnvTo: function (x) {
        return -this.funcs['lg'](x);
      },
      cnvFrom: function (x) {
        return Math.pow(10, -x);
      }
    };
    this.funcs['hpC'] = {
      cnvTo: function (x) {
        return -this.func['ln'](x) / this.funcs['ln'](100);
      },
      cnvFrom: function (x) {
        return Math.pow(100, -x);
      }
    };
    this.funcs['hpM'] = {
      cnvTo: function (x) {
        return -this.funcs['ln'](x) / this.funcs['ln'](1000);
      },
      cnvFrom: function (x) {
        return Math.pow(1000, -x);
      }
    };
    this.funcs['hpQ'] = {
      cnvTo: function (x) {
        return -this.funcs['ln'](x) / this.funcs['ln'](50000);
      },
      cnvFrom: function (x) {
        return Math.pow(50000, -x);
      }
    };
  } // end of constructor

  /**
   * Returns the function with the name specified
   *
   * @param fname name of the function to be returned
   * @return the function with the specified name
   * @throws an error message if the function is not found
   */


  forName(fname) {
    fname = fname.toLowerCase();
    let f = this.funcs[fname];
    if (f === null) throw new Error(`Requested function ${fname} is not defined`);
    return f;
  }
  /**
   * Returns a flag indicating whether or not the function has been
   * defined.
   *
   * @param fname name of the function in question
   * @return true if it has been defined; false if not
   */


  isDefined(fname) {
    fname = fname.toLowerCase();
    return this.funcs[fname] !== null;
  }

} // end of UcumFunctions class


var _default = new UcumFunctions(); // one singleton instance


exports.default = _default;


},{}],56:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNumericString = isNumericString;
exports.isIntegerUnit = isIntegerUnit;
exports.getSynonyms = getSynonyms;

/**
 * Internal utilities used by multiple UCUM classes.  For example,
 * isNumericString is used by both the UnitString and UcumLhcUtils
 * classes.  If it's in the UnitString class the UcumLhcUtils class
 * needs to require the UnitString class.  But the checkSynonyms
 * class is used by the UnitString class - but was in the UcumLhcUtils
 * class.  Requiring the UcumLhcUtils class from the UnitString class
 * made everything break (cyclical requires).
 *
 * So now they're here.
 */

/**
 * This module implements internal ucum utilities.
 *
 * @author Lee Mericle, based on java version by Gunther Schadow
 *
 */
var UnitTables = require('./unitTables.js').UnitTables;
/**
 * This function tests a string to see if it contains only numbers (digits,
 * a period, leading - or +).  This code was taken from a stackoverflow
 * solution:
 * https://stackoverflow.com/questions/175739/is-there-a-built-in-way-in-javascript-to-check-if-a-string-is-a-valid-number/42356340#42356340
 *
 * @params theString
 * @returns true if the string contains only numbers; false otherwise
 */


function isNumericString(theString) {
  let num = "" + theString; //coerce num to be a string

  return !isNaN(num) && !isNaN(parseFloat(num));
} // end isNumericString

/**
 *  Checks whether a string qualifies as an integer unit.  Section 2.2.8 ("integer
 *  numbers", says, "A positive integer number may appear in place of a simple
 *  unit symbol.  Only a pure string of decimal digits (‘0’–‘9’) is
 *  interpreted as a number."
 *  Note:  This leaves open the question of whether "0" is a valid unit, since
 *  it is positive, but you can't measure anything in units of zero.
 * @param str the string to check
 */


function isIntegerUnit(str) {
  return /^\d+$/.test(str);
}
/**
 * This method accepts a term and looks for units that include it as
 * a synonym - or that include the term in its name.
 *
 * @param theSyn the term to search for.  This is assumed to be
 *  a string and not undefined.  The calling method should do any
 *  necessary checking before calling this.
 * @returns a hash with up to three elements:
 *  'status' contains the status of the request, which can be 'error',
 *    'failed' or succeeded';
 *  'msg' which contains a message for an error or if no units were found; and
 *  'units' which is an array that contains one array for each unit found:
 *    the unit's csCode_, the unit's name_, and the unit's guidance_
 *
 */


function getSynonyms(theSyn) {
  let retObj = {};
  let utab = UnitTables.getInstance();
  let resp = {};
  resp = utab.getUnitBySynonym(theSyn); // If we didn't get any units, transfer the status and message

  if (!resp['units']) {
    retObj['status'] = resp['status'];
    retObj['msg'] = resp['msg'];
  } else {
    retObj['status'] = 'succeeded';
    let aLen = resp['units'].length;
    retObj['units'] = [];

    for (let a = 0; a < aLen; a++) {
      let theUnit = resp['units'][a];
      retObj['units'][a] = {
        'code': theUnit.csCode_,
        'name': theUnit.name_,
        'guidance': theUnit.guidance_
      };
    } // end do for all units returned

  } // end if we got a units list


  return retObj;
} // end getSynonyms


},{"./unitTables.js":62}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ucumJsonDefs = exports.UcumJsonDefs = void 0;

/**
 * This class handles opening, reading and loading the JSON file of ucum
 * definitions (prefixes, base units, and unit atoms).
 *
 * @author Lee Mericle
 *
 */
var Pfx = require("./prefix.js");

var PfxT = require("./prefixTables.js");

var Un = require("./unit.js");

var Utab = require('./unitTables.js');

var unpackArray = require('./jsonArrayPack.js').unpackArray;

class UcumJsonDefs {
  /**
   * This method loads the JSON prefix and unit objects into the prefix and
   * unit tables.
   *
   * @returns nothing
   */
  loadJsonDefs() {
    // requiring the file will take care of opening it for use
    const jsonDefs = require('../data/ucumDefs.min.json');

    jsonDefs.prefixes = unpackArray(jsonDefs.prefixes);
    jsonDefs.units = unpackArray(jsonDefs.units);

    if (Utab.UnitTables.getInstance().unitsCount() === 0) {
      let pTab = PfxT.PrefixTables.getInstance();
      let prefixes = jsonDefs["prefixes"];
      let plen = prefixes.length;

      for (let p = 0; p < plen; p++) {
        let newPref = new Pfx.Prefix(prefixes[p]);
        pTab.add(newPref);
      }

      let uTab = Utab.UnitTables.getInstance();
      let units = jsonDefs["units"];
      let ulen = units.length;

      for (let u = 0; u < ulen; u++) {
        let newUnit = new Un.Unit(units[u]);
        uTab.addUnit(newUnit);
      }
    } // end if the data has not already been loaded

  } // end loadJsonDefs


} // end UcumJsonDefs class


exports.UcumJsonDefs = UcumJsonDefs;
var ucumJsonDefs = new UcumJsonDefs();
exports.ucumJsonDefs = ucumJsonDefs;


},{"../data/ucumDefs.min.json":49,"./jsonArrayPack.js":52,"./prefix.js":53,"./prefixTables.js":54,"./unit.js":60,"./unitTables.js":62}],58:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UcumLhcUtils = void 0;

var _ucumJsonDefs = require("./ucumJsonDefs.js");

var intUtils_ = _interopRequireWildcard(require("./ucumInternalUtils.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * This class provides a single point of access to the LHC UCUM utilities
 *
 * @author Lee Mericle
 *
 */
var Ucum = require('./config.js').Ucum;

var UnitTables = require('./unitTables.js').UnitTables;

var UnitString = require('./unitString.js').UnitString;

/**
 * UCUM external utilities class
 */
class UcumLhcUtils {
  /**
   * Constructor.  This loads the json prefix and unit definitions if
   * they haven't been loaded already and creates itself as a singleton object.
   *
   */
  constructor() {
    if (UnitTables.getInstance().unitsCount() === 0) {
      // Load the prefix and unit objects
      _ucumJsonDefs.ucumJsonDefs.loadJsonDefs();
    } // Get the UnitString parser that will be used with this instance
    // of the LHC Utilities


    this.uStrParser_ = UnitString.getInstance();
  } // end constructor

  /**
   * This method calls the useHTMLInMessages method on the UnitString
   * object.  It should be called by web applications that use
   * these utilities.
   *
   * @param use flag indicating whether or not to use the braces message;
   *  defaults to true
   */


  useHTMLInMessages(use) {
    if (use === undefined) use = true;
    this.uStrParser_.useHTMLInMessages(use);
  }
  /**
   * This method calls the useBraceMsgForEachString method on the UnitString
   * object.  It should be called by web applications where unit
   * strings are validated individually (as opposed to validating a whole
   * file of unit strings).
   *
   * @param use flag indicating whether or not to use the braces message;
   *  defaults to true
   */


  useBraceMsgForEachString(use) {
    if (use === undefined) use = true;
    this.uStrParser_.useBraceMsgForEachString(use);
  }
  /**
   * This method validates a unit string.  It first checks to see if the
   * string passed in is a unit code that is found in the unit codes table.
   * If it is not found it parses the string to see if it resolves to a
   * valid unit string.
   *
   * If a valid unit cannot be found, the string is tested for some common
   * errors, such as missing brackets or a missing multiplication operator.
   * If found, the error is reported in the messages array that is returned.
   *
   * If a valid unit cannot be found and an error cannot be discerned, this
   * may return, if requested, a list of suggested units in the messages
   * array that is returned.  Suggestions are based on matching the expression
   * with unit names and synonyms.
   *
   * @param uStr the string to be validated
   * @param suggest a boolean to indicate whether or not suggestions are
   *  requested for a string that cannot be resolved to a valid unit;
   *  true indicates suggestions are wanted; false indicates they are not,
   *  and is the default if the parameter is not specified;
   * @param valConv a string indicating if this validation request was initiated
   *  by a validation task ('validate') or a conversion task ('convert'),
   *  used only for the demo code, and the default is 'Validator' if the
   *  parameter is not specified;
   * @returns an object with five properties:
   *  'status' will be 'valid' (the uStr is a valid UCUM code), 'invalid'
   *     (the uStr is not a valid UCUM code, and substitutions or
   *     suggestions may or may not be returned, depending on what was
   *     requested and found); or 'error' (an input or programming error
   *     occurred);
   *  'ucumCode' the valid ucum code, which may differ from what was passed
   *    in (e.g., if 'Gauss' is passed in, this will contain 'G') OR null if
   *    the string was flagged as invalid or an error occurred;
   *  'msg' is an array of one or more messages, if the string is invalid or
   *        an error occurred, indicating the problem, or an explanation of a
   *        substitution such as the substitution of 'G' for 'Gauss', or
   *        an empty array if no messages were generated;
   *  'unit' which is null if no unit is found, or a hash for a unit found:
   *    'code' is the unit's ucum code (G in the above example;
   *    'name' is the unit's name (Gauss in the above example); and
   *    'guidance' is the unit's guidance/description data; and
   *  'suggestions' if suggestions were requested and found, this is an array
   *     of one or more hash objects.  Each hash contains three elements:
   *     'msg' which is a message indicating what part of the uStr input
   *        parameter the suggestions are for;
   *     'invalidUnit' which is the unit expression the suggestions are
   *        for; and
   *     'units' which is an array of data for each suggested unit found.
   *        Each array will contain the unit code, the unit name and the
   *        unit guidance (if any).
   *     If no suggestions were requested and found, this property is not
   *     returned.
   */


  validateUnitString(uStr, suggest, valConv) {
    if (suggest === undefined) suggest = false;
    if (valConv === undefined) valConv = 'validate';
    let resp = this.getSpecifiedUnit(uStr, valConv, suggest);
    let theUnit = resp['unit'];
    let retObj = {};

    if (!theUnit) {
      retObj = {
        'status': !resp['origString'] || resp['origString'] === null ? 'error' : 'invalid',
        'ucumCode': null
      };
    } else {
      retObj = {
        'status': resp['origString'] === uStr ? 'valid' : 'invalid',
        'ucumCode': resp['origString'],
        'unit': {
          'code': theUnit.csCode_,
          'name': theUnit.name_,
          'guidance': theUnit.guidance_
        }
      };
    }

    if (resp['suggestions']) {
      retObj['suggestions'] = resp['suggestions'];
    }

    retObj['msg'] = resp['retMsg'];
    return retObj;
  } // end validateUnitString

  /**
   * This method converts one unit to another
   *
   * @param fromUnitCode the unit code/expression/string of the unit to be converted
   * @param fromVal the number of "from" units to be converted to "to" units
   * @param toUnitCode the unit code/expression/string of the unit that the from
   *  field is to be converted to
   * @param suggest a boolean to indicate whether or not suggestions are
   *  requested for a string that cannot be resolved to a valid unit;
   *  true indicates suggestions are wanted; false indicates they are not,
   *  and is the default if the parameter is not specified;
   * @param molecularWeight the molecular weight of the substance in question
   *  when a conversion is being requested from mass to moles and vice versa.
   *  This is required when one of the units represents a value in moles.  It is
   *  ignored if neither unit includes a measurement in moles.
   * @returns a hash with six elements:
   *  'status' that will be: 'succeeded' if the conversion was successfully
   *     calculated; 'failed' if the conversion could not be made, e.g., if
   *     the units are not commensurable; or 'error' if an error occurred;
   *  'toVal' the numeric value indicating the conversion amount, or null
   *     if the conversion failed (e.g., if the units are not commensurable);
   *  'msg' is an array message, if the string is invalid or an error occurred,
   *        indicating the problem, or an explanation of a substitution such as
   *        the substitution of 'G' for 'Gauss', or an empty array if no
   *        messages were generated;
   *  'suggestions' if suggestions were requested and found, this is a hash
   *     that contains at most two elements:
   *     'from' which, if the fromUnitCode input parameter or one or more of
   *       its components could not be found, is an array one or more hash
   *       objects.  Each hash contains three elements:
   *         'msg' which is a message indicating what unit expression the
   *            suggestions are for;
   *         'invalidUnit' which is the unit expression the suggestions
   *            are for; and
   *         'units' which is an array of data for each suggested unit found.
   *            Each array will contain the unit code, the unit name and the
   *            unit guidance (if any).
   *       If no suggestions were found for the fromUnitCode this element
   *       will not be included.
   *     'to' which, if the "to" unit expression or one or more of its
   *       components could not be found, is an array one or more hash objects.  Each hash
   *       contains three elements:
   *         'msg' which is a message indicating what toUnitCode input
   *            parameter the suggestions are for;
   *         'invalidUnit' which is the unit expression the suggestions
   *            are for; and
   *         'units' which is an array of data for each suggested unit found.
   *            Each array will contain the unit code, the unit name and the
   *            unit guidance (if any).
   *       If no suggestions were found for the toUnitCode this element
   *       will not be included.
   *    No 'suggestions' element will be included in the returned hash
   *    object if none were found, whether or not they were requested.
   *  'fromUnit' the unit object for the fromUnitCode passed in; returned
   *     in case it's needed for additional data from the object; and
   *  'toUnit' the unit object for the toUnitCode passed in; returned
   *     in case it's needed for additional data from the object.
   */


  convertUnitTo(fromUnitCode, fromVal, toUnitCode, suggest, molecularWeight) {
    if (suggest === undefined) suggest = false;
    if (molecularWeight === undefined) molecularWeight = null;
    let returnObj = {
      'status': 'failed',
      'toVal': null,
      'msg': []
    };

    if (fromUnitCode) {
      fromUnitCode = fromUnitCode.trim();
    }

    if (!fromUnitCode || fromUnitCode == '') {
      returnObj['status'] = 'error';
      returnObj['msg'].push('No "from" unit expression specified.');
    }

    if (fromVal === null || isNaN(fromVal) || typeof fromVal !== 'number' && !intUtils_.isNumericString(fromVal)) {
      returnObj['status'] = 'error';
      returnObj['msg'].push('No "from" value, or an invalid "from" value, ' + 'was specified.');
    }

    if (toUnitCode) {
      toUnitCode = toUnitCode.trim();
    }

    if (!toUnitCode || toUnitCode == '') {
      returnObj['status'] = 'error';
      returnObj['msg'].push('No "to" unit expression specified.');
    }

    if (returnObj['status'] !== 'error') {
      try {
        let fromUnit = null;
        let parseResp = this.getSpecifiedUnit(fromUnitCode, 'convert', suggest);
        fromUnit = parseResp['unit'];
        if (parseResp['retMsg']) returnObj['msg'] = returnObj['msg'].concat(parseResp['retMsg']);

        if (parseResp['suggestions']) {
          returnObj['suggestions'] = {};
          returnObj['suggestions']['from'] = parseResp['suggestions'];
        }

        if (!fromUnit) {
          returnObj['msg'].push(`Unable to find a unit for ${fromUnitCode}, ` + `so no conversion could be performed.`);
        }

        let toUnit = null;
        parseResp = this.getSpecifiedUnit(toUnitCode, 'convert', suggest);
        toUnit = parseResp['unit'];
        if (parseResp['retMsg']) returnObj['msg'] = returnObj['msg'].concat(parseResp['retMsg']);

        if (parseResp['suggestions']) {
          if (!returnObj['suggestions']) returnObj['suggestions'] = {};
          returnObj['suggestions']['to'] = parseResp['suggestions'];
        }

        if (!toUnit) {
          returnObj['msg'].push(`Unable to find a unit for ${toUnitCode}, ` + `so no conversion could be performed.`);
        }

        if (fromUnit && toUnit) {
          try {
            // if no molecular weight was specified perform a normal conversion
            if (!molecularWeight) {
              returnObj['toVal'] = toUnit.convertFrom(fromVal, fromUnit);
            } else {
              if (fromUnit.moleExp_ !== 0 && toUnit.moleExp_ !== 0) {
                throw new Error('A molecular weight was specified ' + 'but a mass <-> mole conversion cannot be executed for two ' + 'mole-based units.  No conversion was attempted.');
              }

              if (fromUnit.moleExp_ === 0 && toUnit.moleExp_ === 0) {
                throw new Error('A molecular weight was specified ' + 'but a mass <-> mole conversion cannot be executed when ' + 'neither unit is mole-based.  No conversion was attempted.');
              }

              if (!fromUnit.isMoleMassCommensurable(toUnit)) {
                throw new Error(`Sorry.  ${fromUnitCode} cannot be ` + `converted to ${toUnitCode}.`);
              } // if the "from" unit is a mole-based unit, assume a mole to mass
              // request


              if (fromUnit.moleExp_ !== 0) {
                returnObj['toVal'] = fromUnit.convertMolToMass(fromVal, toUnit, molecularWeight);
              } // else the "to" unit must be the mole-based unit, so assume a
              // mass to mole request
              else {
                  returnObj['toVal'] = fromUnit.convertMassToMol(fromVal, toUnit, molecularWeight);
                }
            } // end if a molecular weight was specified
            // if an error hasn't been thrown - either from convertFrom or here,
            // set the return object to show success


            returnObj['status'] = 'succeeded';
            returnObj['fromUnit'] = fromUnit;
            returnObj['toUnit'] = toUnit;
          } catch (err) {
            returnObj['status'] = 'failed';
            returnObj['msg'].push(err.message);
          }
        } // end if we have the from and to units

      } catch (err) {
        if (err.message == Ucum.needMoleWeightMsg_) returnObj['status'] = 'failed';else returnObj['status'] = 'error';
        returnObj['msg'].push(err.message);
      }
    }

    return returnObj;
  } // end convertUnitTo

  /**
   * This method accepts a term and looks for units that include it as
   * a synonym - or that include the term in its name.
   *
   * @param theSyn the term to search for
   * @returns a hash with up to three elements:
   *  'status' contains the status of the request, which can be 'error',
   *    'failed' or succeeded';
   *  'msg' which contains a message for an error or if no units were found; and
   *  'units' which is an array that contains one hash for each unit found:
   *    'code' is the unit's csCode_
   *    'name' is the unit's name_
   *    'guidance' is the unit's guidance_
   *
   */


  checkSynonyms(theSyn) {
    let retObj = {};

    if (theSyn === undefined || theSyn === null) {
      retObj['status'] = 'error';
      retObj['msg'] = 'No term specified for synonym search.';
    } else {
      retObj = intUtils_.getSynonyms(theSyn);
    } // end if a search synonym was supplied


    return retObj;
  } // end checkSynonyms

  /**
   * This method parses a unit string to get (or try to get) the unit
   * represented by the string.  It returns an error message if no string was specified
   * or if any errors were encountered trying to get the unit.
   *
   * @param uName the expression/string representing the unit
   * @param valConv indicates what type of request this is for - a request to
   *  validate (pass in 'validate') or a request to convert (pass in 'convert')
   * @param suggest a boolean to indicate whether or not suggestions are
   *  requested for a string that cannot be resolved to a valid unit;
   *  true indicates suggestions are wanted; false indicates they are not,
   *  and is the default if the parameter is not specified;
   * @returns a hash containing:
   *   'unit' the unit object (or null if there were problems creating the
   *     unit);
   *   'origString' the possibly updated unit string passed in;
   *   'retMsg' an array of user messages (informational, error or warning) if
   *     any were generated (IF any were generated, otherwise will be an
   *     empty array); and
   *  'suggestions' is an array of 1 or more hash objects.  Each hash
   *     contains three elements:
   *       'msg' which is a message indicating what unit expression the
   *          suggestions are for;
   *       'invalidUnit' which is the unit expression the suggestions are
   *          for; and
   *       'units' which is an array of data for each suggested unit found.
   *          Each array will contain the unit code, the unit name and the
   *          unit guidance (if any).
   *   The return hash will not contain a suggestions array if a valid unit
   *   was found or if suggestions were not requested and found.
   */


  getSpecifiedUnit(uName, valConv, suggest) {
    if (suggest === undefined) suggest = false;
    let retObj = {};
    retObj['retMsg'] = [];

    if (!uName) {
      retObj['retMsg'].push('No unit string specified.');
    } else {
      let utab = UnitTables.getInstance();
      uName = uName.trim(); // go ahead and just try using the name as the code.  This may or may not
      // work, but if it does, it cuts out a lot of parsing.

      let theUnit = utab.getUnitByCode(uName); // If we found it, set the returned unit string to what was passed in;
      // otherwise try parsing as a unit string

      if (theUnit) {
        retObj['unit'] = theUnit;
        retObj['origString'] = uName;
      } else {
        try {
          let resp = this.uStrParser_.parseString(uName, valConv, suggest);
          retObj['unit'] = resp[0];
          retObj['origString'] = resp[1];
          if (resp[2]) retObj['retMsg'] = resp[2];
          retObj['suggestions'] = resp[3];
        } catch (err) {
          console.log(`Unit requested for unit string ${uName}.` + 'request unsuccessful; error thrown = ' + err.message);
          retObj['retMsg'].unshift(`${uName} is not a valid unit.  ` + `${err.message}`);
        }
      } // end if the unit was not found as a unit name

    } // end if a unit expression was specified


    return retObj;
  } // end getSpecifiedUnit

  /**
   * This method retrieves a list of units commensurable, i.e., that can be
   * converted from and to, a specified unit.  Returns an error if the "from"
   * unit cannot be found.
   *
   * @param fromName the name/unit string of the "from" unit
   * @returns an array containing two elements;
   *   first element is the list of commensurable units if any were found
   *   second element is an error message if the "from" unit is not found
   */


  commensurablesList(fromName) {
    let retMsg = [];
    let commUnits = null;
    let parseResp = this.getSpecifiedUnit(fromName, 'validate', false);
    let fromUnit = parseResp['unit'];
    if (parseResp['retMsg'].length > 0) retMsg = parseResp['retMsg'];

    if (!fromUnit) {
      retMsg.push(`Could not find unit ${fromName}.`);
    } else {
      let dimVec = null;
      let fromDim = fromUnit.getProperty('dim_');

      if (!fromDim) {
        retMsg.push('No commensurable units were found for ' + fromName);
      } else {
        try {
          dimVec = fromDim.getProperty('dimVec_');
        } catch (err) {
          retMsg.push(err.message);
          if (err.message === "Dimension does not have requested property(dimVec_)") dimVec = null;
        }

        if (dimVec) {
          let utab = UnitTables.getInstance();
          commUnits = utab.getUnitsByDimension(dimVec);
        }
      } // end if the from unit has a dimension vector

    } // end if we found a "from" unit


    return [commUnits, retMsg];
  } // end commensurablesList


} // end UcumLhcUtils class

/**
 *  This function exists ONLY until the original UcumLhcUtils constructor
 *  is called for the first time.  It's defined here in case getInstance
 *  is called before the constructor.   This calls the constructor.
 *
 *  The constructor redefines the getInstance function to return the
 *  singleton UcumLhcUtils object.  This is based on the UnitTables singleton
 *  implementation; see more detail in the UnitTables constructor description.
 *
 *  NO LONGER TRUE - not implemented as a singleton.  This method retained to
 *  avoid problems with calls to it that exist throughout the code.
 *
 *  @return the (formerly singleton) UcumLhcUtils object.
 */


exports.UcumLhcUtils = UcumLhcUtils;

UcumLhcUtils.getInstance = function () {
  return new UcumLhcUtils();
};


},{"./config.js":50,"./ucumInternalUtils.js":56,"./ucumJsonDefs.js":57,"./unitString.js":61,"./unitTables.js":62}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnitTables = exports.UcumLhcUtils = exports.Ucum = void 0;

/**
 * This exports definitions for ucum classes that need references to them
 * available to the demo code.  The actual code will be in the ucumPkg
 * library found in the dist directory.  This file provides the hooks to
 * those classes within the library.
 */
var Ucum = require("./config.js").Ucum;

exports.Ucum = Ucum;

var UcumLhcUtils = require("./ucumLhcUtils.js").UcumLhcUtils;

exports.UcumLhcUtils = UcumLhcUtils;

var UnitTables = require("./unitTables.js").UnitTables;

exports.UnitTables = UnitTables;


},{"./config.js":50,"./ucumLhcUtils.js":58,"./unitTables.js":62}],60:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Unit = void 0;

var _ucumFunctions = _interopRequireDefault(require("./ucumFunctions.js"));

var intUtils_ = _interopRequireWildcard(require("./ucumInternalUtils.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This class represents one unit of measure.  It includes
 * functions to cover constructor, accessor, and assignment tasks as
 * well as operators to calculate multiplication, division and raising
 * to a power.
 *
 * @author Lee Mericle, based on java version by Gunther Schadow
 *
 */
var Ucum = require('./config.js').Ucum;

var Dimension = require('./dimension.js').Dimension;

var UnitTables;

var isInteger = require("is-integer");

class Unit {
  /**
   * Constructor.
   *
   * @param attrs an optional parameter that may be:
   *  a string, which is parsed by the unit parser, which creates
   *  the unit from the parsed string; or
   *  a hash containing all or some values for the attributes of
   *  the unit, where the keys are the attribute names, without a
   *  trailing underscore, e.g., name instead of name_; or
   *  null, in which case an empty hash is created and used to
   *  set the values forthe attributes.
   *  If a hash (empty or not) is used, attributes for which no value
   *  is specified are assigned a default value.
   *
   */
  constructor(attrs = {}) {
    // Process the attrs hash passed in, which may be empty.
    // Create and assign values (from the attrs hash or defaults) to all
    // attributes.  From Class Declarations in Understanding ECMAScript,
    // https://leanpub.com/understandinges6/read/#leanpub-auto-class-declarations,
    //   "Own properties, properties that occur on the instance rather than the
    //    prototype, can only be created inside of a class constructor or method.
    //    It's recommended to create all possible own properties inside of the
    //    constructor function so there's a single place that's responsible for
    //    all of them."

    /*
     * Flag indicating whether or not this is a base unit
     */
    this.isBase_ = attrs['isBase_'] || false;
    /*
     * The unit name, e.g., meter
     */

    this.name_ = attrs['name_'] || '';
    /*
     * The unit's case-sensitive code, e.g., m
     */

    this.csCode_ = attrs['csCode_'] || '';
    /*
     * The unit's case-insensitive code, e.g., M
     */

    this.ciCode_ = attrs['ciCode_'] || '';
    /*
     * The unit's property, e.g., length
     */

    this.property_ = attrs['property_'] || '';
    /*
     * The magnitude of the unit, e.g., 3600/3937 for a yard,
     * where a yard - 3600/3973 * m(eter).  The Dimension
     * property specifies the meter - which is the unit on which
     * a yard is based, and this magnitude specifies how to figure
     * this unit based on the base unit.
     */

    this.magnitude_ = attrs['magnitude_'] || 1;
    /*
     * The Dimension object of the unit
     */

    if (attrs['dim_'] === undefined || attrs['dim_'] === null) {
      this.dim_ = new Dimension();
    } // When the unit data stored in json format is reloaded, the dimension data
    // is recognized as a a hash, not as a Dimension object.
    else if (attrs['dim_']['dimVec_'] !== undefined) {
        this.dim_ = new Dimension(attrs['dim_']['dimVec_']);
      } else if (attrs['dim_'] instanceof Dimension) {
        this.dim_ = attrs['dim_'];
      } else if (attrs['dim_'] instanceof Array || isInteger(attrs['dim_'])) {
        this.dim_ = new Dimension(attrs['dim_']);
      } else {
        this.dim_ = new Dimension();
      }
    /*
     * The print symbol of the unit, e.g., m
     */


    this.printSymbol_ = attrs['printSymbol_'] || null;
    /*
     * The class of the unit, where given, e.g., dimless
     */

    this.class_ = attrs['class_'] || null;
    /*
     * A flag indicating whether or not the unit is metric
     */

    this.isMetric_ = attrs['isMetric_'] || false;
    /*
     * The "variable" - which I think is used only for base units
     * The symbol for the variable as used in equations, e.g., s for distance
     */

    this.variable_ = attrs['variable_'] || null; // comes from 'dim' in XML

    /*
     * The conversion function
     */

    this.cnv_ = attrs['cnv_'] || null;
    /*
     * The conversion prefix
     */

    this.cnvPfx_ = attrs['cnvPfx_'] || 1;
    /*
     * Flag indicating whether or not this is a "special" unit, i.e., is
     * constructed using a function specific to the measurement, e.g.,
     * fahrenheit and celsius
     */

    this.isSpecial_ = attrs['isSpecial_'] || false;
    /*
     * Flag indicating whether or not this is an arbitrary unit
     */

    this.isArbitrary_ = attrs['isArbitrary_'] || false;
    /*
     * Integer indicating what level of exponent applies to a mole-based portion
     * of the unit.  So, for the unit "mol", this will be 1.  For "mol2" this
     * will be 2.  For "1/mol" this will be -1.  Any unit that does not include
     * a mole will have a 0 in this field.  This is used to determine
     * commensurability for mole<->mass conversions.
     */

    this.moleExp_ = attrs['moleExp_'] || 0;
    /*
     * Added when added LOINC list of units
     * synonyms are used by the autocompleter to enhance lookup capabilities
     * while source says where the unit first shows up.  Current sources are
     * UCUM - which are units from the unitsofmeasure.org list and LOINC -
     * which are units from the LOINC data.
     */

    this.synonyms_ = attrs['synonyms_'] || null;
    this.source_ = attrs['source_'] || null;
    this.loincProperty_ = attrs['loincProperty_'] || null;
    this.category_ = attrs['category_'] || null;
    this.guidance_ = attrs['guidance_'] || null;
    /*
     * Used to compute dimension; storing for now until I complete
     * unit definition parsing
     */

    /*
     * Case sensitive (cs) and case insensitive (ci) base unit strings,
     * includes exponent and prefix if applicable - specified in
     * <value Unit=x UNIT=X value="nnn">nnn</value> -- the unit part --
     * in the ucum-essence.xml file, and may be specified by a user
     * when requesting conversion or validation of a unit string.  The
     * magnitude (base factor) is used with this to determine the new unit.
     * For example, a Newton (unit code N) is created from the string
     * kg.m/s2, and the value of 1 (base factor defined below). An hour
     * (unit code h) is created from the unit min (minute) with a value
     * of 60.
     */

    this.csUnitString_ = attrs['csUnitString_'] || null;
    this.ciUnitString_ = attrs['ciUnitString_'] || null;
    /*
     * String and numeric versions of factor applied to unit specified in
     * <value Unit=x UNIT=X value="nnn">nnn</value> -- the value part
     */

    this.baseFactorStr_ = attrs['baseFactorStr_'] || null;
    this.baseFactor_ = attrs['baseFactor_'] || null;
    /*
     * Flag used to indicate units where the definition process failed
     * when parsing units from the official units definitions file
     * (currently using the ucum-essence.xml file).  We keep these
     * so that we can use them to at least validate them as valid
     * units, but we don't try to convert them.   This is temporary
     * and only to account for instances where the code does not
     * take into account various special cases in the xml file.
     *
     * This is NOT used when trying to validate a unit string
     * submitted during a conversion or validation attempt.
     */

    this.defError_ = attrs['defError_'] || false;
  } // end constructor

  /**
   * Assign the unity (= dimensionless unit 1) to this unit.
   *
   * @return this unit
   */


  assignUnity() {
    this.name_ = "";
    this.magnitude_ = 1;
    if (!this.dim_) this.dim_ = new Dimension();
    this.dim_.assignZero();
    this.cnv_ = null;
    this.cnvPfx_ = 1;
    return this;
  } // end assignUnity

  /**
   * This assigns one or more values, as provided in the hash passed in,
   * to this unit.
   *
   * @param vals hash of values to be assigned to the attributes
   *        specified by the key(s), which should be the attribute
   *        name without the trailing underscore, e.g., name instead
   *        of name_.
   * @return nothing
   */


  assignVals(vals) {
    for (let key in vals) {
      let uKey = !key.charAt(key.length - 1) === '_' ? key + '_' : key;
      if (this.hasOwnProperty(uKey)) this[uKey] = vals[key];else throw new Error(`Parameter error; ${key} is not a property of a Unit`);
    }
  } // end assignVals

  /**
   * This creates a clone of this unit.
   *
   * @return the clone
   */


  clone() {
    let retUnit = new Unit();
    Object.getOwnPropertyNames(this).forEach(val => {
      if (val === 'dim_') {
        if (this['dim_']) retUnit['dim_'] = this['dim_'].clone();else retUnit['dim_'] = null;
      } else retUnit[val] = this[val];
    });
    return retUnit;
  } // end clone

  /**
   * This assigns all properties of a unit passed to it to this unit.
   *
   * @param unit2 the unit whose properties are to be assigned to this one.
   * @return nothing; this unit is updated
   */


  assign(unit2) {
    Object.getOwnPropertyNames(unit2).forEach(val => {
      if (val === 'dim_') {
        if (unit2['dim_']) this['dim_'] = unit2['dim_'].clone();else this['dim_'] = null;
      } else {
        this[val] = unit2[val];
      }
    });
  } // end assign

  /**
   * This determines whether or not object properties of the unit
   * passed in are equal to the corresponding properties in this unit.
   * The following properties are the only ones checked:
   *   magnitude_, dim_, cnv_ and cnvPfx_
   *
   * @param unit2 the unit whose properties are to be checked.
   * @return boolean indicating whether or not they match
   */


  equals(unit2) {
    return this.magnitude_ === unit2.magnitude_ && this.cnv_ === unit2.cnv_ && this.cnvPfx_ === unit2.cnvPfx_ && (this.dim_ === null && unit2.dim_ === null || this.dim_.equals(unit2.dim_));
  } // end equals

  /**
   * This method compares every attribute of two objects to determine
   * if they all match.
   *
   * @param unit2 the unit that is to be compared to this unit
   * @return boolean indicating whether or not every attribute matches
   */


  fullEquals(unit2) {
    let thisAttr = Object.keys(this).sort();
    let u2Attr = Object.keys(unit2).sort();
    let keyLen = thisAttr.length;
    let match = keyLen === u2Attr.length; // check each attribute.   Dimension objects have to checked using
    // the equals function of the Dimension class.

    for (let k = 0; k < keyLen && match; k++) {
      if (thisAttr[k] === u2Attr[k]) {
        if (thisAttr[k] === 'dim_') match = this.dim_.equals(unit2.dim_);else match = this[thisAttr[k]] === unit2[thisAttr[k]];
      } else match = false;
    } // end do for each key and attribute


    return match;
  } // end of fullEquals

  /**
   * This returns the value of the property named by the parameter
   * passed in.
   *
   * @param propertyName name of the property to be returned, with
   *        or without the trailing underscore.
   * @return the requested property, if found for this unit
   * @throws an error if the property is not found for this unit
   */


  getProperty(propertyName) {
    let uProp = propertyName.charAt(propertyName.length - 1) === '_' ? propertyName : propertyName + '_';
    return this[uProp];
  } // end getProperty

  /**
   * Takes a measurement consisting of a number of units and a unit and returns
   * the equivalent number of this unit.  So, 15 mL would translate
   * to 1 tablespoon if this object is a tablespoon.
   *
   * Note that the number returned may not be what is normally expected.
   * For example, converting 10 Celsius units to Fahrenheit would "normally"
   * return a value of 50.   But in this case you'll get back something like
   * 49.99999999999994.
   *
   * If either unit is an arbitrary unit an exception is raised.
   *
   * @param num the magnitude for the unit to be translated (e.g. 15 for 15 mL)
   * @param fromUnit the unit to be translated to one of this type (e.g. a mL unit)
   *
   * @return the number of converted units (e.g. 1 for 1 tablespoon)
   * @throws an error if the dimension of the fromUnit differs from this unit's
   * dimension
   */


  convertFrom(num, fromUnit) {
    let newNum = 0.0;
    if (this.isArbitrary_) throw new Error(`Attempt to convert arbitrary unit ${this.name_}`);
    if (fromUnit.isArbitrary_) throw new Error(`Attempt to convert to arbitrary unit ${fromUnit.name_}`); // reject request if both units have dimensions that are not equal

    if (fromUnit.dim_ && this.dim_ && !fromUnit.dim_.equals(this.dim_)) {
      // check first to see if a mole<->mass conversion is appropriate
      if (this.isMoleMassCommensurable(fromUnit)) {
        throw new Error(Ucum.needMoleWeightMsg_);
      } else {
        throw new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` + `to ${this.csCode_}.`);
      }
    } // reject request if there is a "from" dimension but no "to" dimension


    if (fromUnit.dim_ && (!this.dim_ || this.dim_.isNull())) {
      throw new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` + `to ${this.csCode_}.`);
    } // reject request if there is a "to" dimension but no "from" dimension


    if (this.dim_ && (!fromUnit.dim_ || fromUnit.dim_.isNull())) {
      throw new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` + `to ${this.csCode_}.`);
    }

    let fromCnv = fromUnit.cnv_;
    let fromMag = fromUnit.magnitude_; // If the same conversion function is specified for both units, which
    // includes neither unit having a conversion function, multiply the
    // "from" unit's magnitude by the number passed in and then divide
    // that result by this unit's magnitude.  Do this for units with
    // and without dimension vectors.  PROBLEM with 2 non-commensurable
    // units with no dimension vector or function, e.g., byte to mol

    if (fromCnv === this.cnv_) {
      newNum = num * fromMag / this.magnitude_;
    } // else use a function to get the number to be returned
    else {
        let x = 0.0;

        if (fromCnv != null) {
          // turn num * fromUnit.magnitude into its ratio scale equivalent,
          // e.g., convert Celsius to Kelvin
          let fromFunc = _ucumFunctions.default.forName(fromCnv);

          x = fromFunc.cnvFrom(num * fromUnit.cnvPfx_) * fromMag; //x = fromFunc.cnvFrom(num * fromMag) * fromUnit.cnvPfx_;
        } else {
          x = num * fromMag;
        }

        if (this.cnv_ != null) {
          // turn mag * origUnit on ratio scale into a non-ratio unit,
          // e.g. convert Kelvin to Fahrenheit
          let toFunc = _ucumFunctions.default.forName(this.cnv_);

          newNum = toFunc.cnvTo(x / this.magnitude_) / this.cnvPfx_;
        } else {
          newNum = x / this.magnitude_;
        }
      } // end if either unit has a conversion function


    return newNum;
  } // end convertFrom

  /**
   * Takes a number and a target unit and returns the number for a measurement
   * of this unit that corresponds to the number of the target unit passed in.
   * So, 1 tablespoon (where this unit represents a tablespoon) would translate
   * to 15 mL.
   *
   * See the note on convertFrom about return values.
   *
   * @param mag the magnitude for this unit (e.g. 1 for 1 tablespoon)
   * @param toUnit the unit to which this unit is to be translated
   *  (e.g. an mL unit)
   *
   * @return the converted number value (e.g. 15 mL)
   * @throws an error if the dimension of the toUnit differs from this unit's
   *   dimension
   */


  convertTo(num, toUnit) {
    return toUnit.convertFrom(num, this);
  } // end convertTo

  /**
   * Takes a given number of this unit returns the number of this unit
   * if it is converted into a coherent unit.  Does not change this unit.
   *
   * If this is a coherent unit already, just gives back the number
   * passed in.
   *
   * @param num the number for the coherent version of this unit
   * @return the number for the coherent version of this unit
   */


  convertCoherent(num) {
    // convert mag' * u' into canonical number * u on ratio scale
    if (this.cnv_ !== null) num = this.cnv_.f_from(num / this.cnvPfx_) * this.magnitude_;
    return num;
  } // end convertCoherent

  /**
   * Mutates this unit into a coherent unit and converts a given number of
   * units to the appropriate value for this unit as a coherent unit
   *
   * @param num the number for this unit before conversion
   * @return the number of this unit after conversion
   * @throws an error if the dimensions differ
   */


  mutateCoherent(num) {
    // convert mu' * u' into canonical mu * u on ratio scale
    num = this.convertCoherent(num); // mutate to coherent unit

    this.magnitude_ = 1;
    this.cnv_ = null;
    this.cnvPfx_ = 1;
    this.name_ = ""; // build a name as a term of coherent base units
    // This is probably ALL WRONG and a HORRIBLE MISTAKE
    // but until we figure out what the heck the name being
    // built here really is, it will have to stay.

    for (let i = 0, max = Dimension.getMax(); i < max; i++) {
      let elem = this.dim_.getElementAt(i);

      let tabs = this._getUnitTables();

      let uA = tabs.getUnitsByDimension(new Dimension(i));
      if (uA == null) throw new Error(`Can't find base unit for dimension ${i}`);
      this.name_ = uA.name + elem;
    }

    return num;
  } // end mutateCoherent

  /**
   * Calculates the number of units that would result from converting a unit
   * expressed in mass/grams to a unit expressed in moles.  The "this" unit is
   * the unit expressed in some form of mass (g, mg, mmg, kg, whatever) and the
   * target or "to" unit - the molUnit parameter - is a unit expressed in moles
   * - mol, umol, mmol, etc.  The unit expressions surrounding the moles and
   * mass must be convertible.  No validation of this requirement is performed.
   *
   * @param amt the quantity of this unit to be converted
   * @param molUnit the target/to unit for which the converted # is wanted
   * @param molecularWeight the molecular weight of the substance for which the
   *  conversion is being made
   * @return the equivalent amount in molUnit
   */


  convertMassToMol(amt, molUnit, molecularWeight) {
    // The prefix values that have been applied to this unit, which is the mass
    // (grams) unit, are reflected in the magnitude.  So the number of moles
    // represented by this unit equals the number of grams -- amount * magnitude
    // divided by the molecular Weight
    let molAmt = this.magnitude_ * amt / molecularWeight; // The molUnit's basic magnitude, before prefixes are applied,
    // is avogadro's number, get that and divide it out of the current magnitude.

    let tabs = this._getUnitTables();

    let avoNum = tabs.getUnitByCode('mol').magnitude_;
    let molesFactor = molUnit.magnitude_ / avoNum; // return the molAmt divided by the molesFactor as the number of moles
    // for the molUnit

    return molAmt / molesFactor;
  }
  /**
   * Calculates the number of units that would result from converting a unit
   * expressed in moles to a unit expressed in mass (grams).  The "this" unit
   * is the unit expressed in some form of moles, e.g., mol, umol, mmol, etc.,
   * and the target or "to" unit is a unit expressed in some form of mass, e.g.,
   * g, mg, mmg, kg, etc.  Any unit expressions surrounding the moles and mass
   * must be convertible. No validation of this requirement is performed.
   *
   * @param amt the quantity of this unit to be converted
   * @param massUnit the target/to unit for which the converted # is wanted
   * @param molecularWeight the molecular weight of the substance for which the
   *  conversion is being made
   * @return the equivalent amount in massUnit
   */


  convertMolToMass(amt, massUnit, molecularWeight) {
    // A simple mole unit has a magnitude of avogadro's number.  Get that
    // number now (since not everyone agrees on what it is, and what is
    // being used in this system might change).
    let tabs = this._getUnitTables();

    let avoNum = tabs.getUnitByCode('mol').magnitude_; // Determine what prefix values (mg or mg/dL, etc.) have been applied to
    // this unit by dividing the simple mole unit magnitude out of the
    // current mole unit magnitude.

    let molesFactor = this.magnitude_ / avoNum; // The number of grams (mass) is equal to the number of moles (amt)
    // times the molecular weight.  We also multiply that by the prefix values
    // applied to the current unit (molesFactor) to get the grams for this
    // particular unit.

    let massAmt = molesFactor * amt * molecularWeight; // Finally, we return the mass amount/grams for this particular unit
    // divided by any effects of prefixes applied to the "to" unit, which
    // is assumed to be some form of a gram unit

    return massAmt / massUnit.magnitude_;
  }
  /**
   * Mutates this unit into a unit on a ratio scale and converts a specified
   * number of units to an appropriate value for this converted unit
   *
   * @param num the number of this unit before it's converted
   * @return the magnitude of this unit after it's converted
   * @throw an error if the dimensions differ
   */


  mutateRatio(num) {
    if (this.cnv_ == null) return this.mutateCoherent(num);else return num;
  } // end mutateRatio

  /**
   * Multiplies this unit with a scalar. Special meaning for
   * special units so that (0.1*B) is 1 dB.
   *
   * This function DOES NOT modify this unit.
   *
   * @param s the value by which this unit is to be multiplied
   * @return a copy this unit multiplied by s
   * */


  multiplyThis(s) {
    let retUnit = this.clone();
    if (retUnit.cnv_ != null) retUnit.cnvPfx_ *= s;else retUnit.magnitude_ *= s;
    let mulVal = s.toString();
    retUnit.name_ = this._concatStrs(mulVal, '*', this.name_, '[', ']');
    retUnit.csCode_ = this._concatStrs(mulVal, '.', this.csCode_, '(', ')');
    retUnit.ciCode_ = this._concatStrs(mulVal, '.', this.ciCode_, '(', ')');
    retUnit.printSymbol_ = this._concatStrs(mulVal, '.', this.printSymbol_, '(', ')');
    return retUnit;
  } // end multiplyThis

  /**
   * Multiplies this unit with another unit. If one of the
   * units is a non-ratio unit the other must be dimensionless or
   * else an exception is thrown.
   *
   * This function does NOT modify this unit
   * @param unit2 the unit to be multiplied with this one
   * @return this unit after it is multiplied
   * @throws an error if one of the units is not on a ratio-scale
   *         and the other is not dimensionless.
   */


  multiplyThese(unit2) {
    var retUnit = this.clone();

    if (retUnit.cnv_ != null) {
      if (unit2.cnv_ == null && (!unit2.dim_ || unit2.dim_.isZero())) retUnit.cnvPfx_ *= unit2.magnitude_;else throw new Error(`Attempt to multiply non-ratio unit ${retUnit.name_} ` + 'failed.');
    } // end if this unit has a conversion function
    else if (unit2.cnv_ != null) {
        if (!retUnit.dim_ || retUnit.dim_.isZero()) {
          retUnit.cnvPfx_ = unit2.cnvPfx_ * retUnit.magnitude_;
          retUnit.cnv_ = unit2.cnv_;
        } else throw new Error(`Attempt to multiply non-ratio unit ${unit2.name_}`);
      } // end if unit2 has a conversion function
      // else neither unit has a conversion function
      else {
          retUnit.magnitude_ *= unit2.magnitude_;
        } // end if unit2 does not have a conversion function
    // If this.dim_ isn't there, clone the dimension in unit2 - if dimVec_
    // is a dimension in unit2.dim_; else just transfer it to this dimension


    if (!retUnit.dim_ || retUnit.dim_ && !retUnit.dim_.dimVec_) {
      if (unit2.dim_) retUnit.dim_ = unit2.dim_.clone();else retUnit.dim_ = unit2.dim_;
    } // Else this.dim_ is there.  If there is a dimension for unit2,
    // add it to this one.
    else if (unit2.dim_ && unit2.dim_ instanceof Dimension) {
        retUnit.dim_.add(unit2.dim_);
      } // Concatenate the unit info (name, code, etc) for all cases
    // where the multiplication was performed (an error wasn't thrown)


    retUnit.name_ = this._concatStrs(retUnit.name_, '*', unit2.name_, '[', ']');
    retUnit.csCode_ = this._concatStrs(retUnit.csCode_, '.', unit2.csCode_, '(', ')');
    if (retUnit.ciCode_ && unit2.ciCode_) retUnit.ciCode_ = this._concatStrs(retUnit.ciCode_, '.', unit2.ciCode_, '(', ')');else if (unit2.ciCode_) retUnit.ciCode_ = unit2.ciCode_;
    retUnit.guidance_ = '';
    if (retUnit.printSymbol_ && unit2.printSymbol_) retUnit.printSymbol_ = this._concatStrs(retUnit.printSymbol_, '.', unit2.printSymbol_, '(', ')');else if (unit2.printSymbol_) retUnit.printSymbol_ = unit2.printSymbol_; // Update the mole exponent count by adding the count for unit2 to the
    // count for this unit.

    retUnit.moleExp_ = retUnit.moleExp_ + unit2.moleExp_; // A unit that has the arbitrary attribute taints any unit created from it
    // via an arithmetic operation.  Taint accordingly
    // if (!retUnit.isMole_)
    //   retUnit.isMole_ = unit2.isMole_ ;

    if (!retUnit.isArbitrary_) retUnit.isArbitrary_ = unit2.isArbitrary_;
    return retUnit;
  } // end multiplyThese

  /**
   * Divides this unit by another unit. If this unit is not on a ratio
   * scale an exception is raised. Mutating to a ratio scale unit
   * is not possible for a unit, only for a measurement.
   *
   * This unit is NOT modified by this function.
   * @param unit2 the unit by which to divide this one
   * @return this unit after it is divided by unit2
   * @throws an error if either of the units is not on a ratio scale.
   * */


  divide(unit2) {
    var retUnit = this.clone();
    if (retUnit.cnv_ != null) throw new Error(`Attempt to divide non-ratio unit ${retUnit.name_}`);
    if (unit2.cnv_ != null) throw new Error(`Attempt to divide by non-ratio unit ${unit2.name_}`);
    if (retUnit.name_ && unit2.name_) retUnit.name_ = this._concatStrs(retUnit.name_, '/', unit2.name_, '[', ']');else if (unit2.name_) retUnit.name_ = unit2.invertString(unit2.name_);
    retUnit.csCode_ = this._concatStrs(retUnit.csCode_, '/', unit2.csCode_, '(', ')');
    if (retUnit.ciCode_ && unit2.ciCode_) retUnit.ciCode_ = this._concatStrs(retUnit.ciCode_, '/', unit2.ciCode_, '(', ')');else if (unit2.ciCode_) retUnit.ciCode_ = unit2.invertString(unit2.ciCode_);
    retUnit.guidance_ = '';
    retUnit.magnitude_ /= unit2.magnitude_;
    if (retUnit.printSymbol_ && unit2.printSymbol_) retUnit.printSymbol_ = this._concatStrs(retUnit.printSymbol_, '/', unit2.printSymbol_, '(', ')');else if (unit2.printSymbol_) retUnit.printSymbol_ = unit2.invertString(unit2.printSymbol_); // Continue if unit2 has a dimension object.
    // If this object has a dimension object, subtract unit2's dim_ object from
    // this one. The sub method will take care of cases where the dimVec_ arrays
    // are missing on one or both dim_ objects.

    if (unit2.dim_) {
      if (retUnit.dim_) {
        if (retUnit.dim_.isNull()) retUnit.dim_.assignZero();
        retUnit.dim_ = retUnit.dim_.sub(unit2.dim_);
      } // end if this.dim_ exists
      // Else if this dim_ object is missing, clone unit2's dim_ object
      // and give the inverted clone to this unit.
      else retUnit.dim_ = unit2.dim_.clone().minus();
    } // end if unit2 has a dimension object
    // Update the mole exponent count by subtracting the count for unit2 from
    // the // count for this unit.


    retUnit.moleExp_ = retUnit.moleExp_ - unit2.moleExp_; // A unit that has the arbitrary attribute taints any unit created from
    // it via an arithmetic operation.  Taint accordingly
    // if (!retUnit.isMole_)
    //   retUnit.isMole_ = unit2.isMole_ ;

    if (!retUnit.isArbitrary_) retUnit.isArbitrary_ = unit2.isArbitrary_;
    return retUnit;
  } // end divide

  /**
   * Invert this unit with respect to multiplication. If this unit is not
   * on a ratio scale an exception is thrown. Mutating to a ratio scale unit
   * is not possible for a unit, only for a measurement (the magnitude and
   * dimension).
   *
   *  This unit is modified by this function.
   * @return this unit after being inverted
   * @throws and error if this unit is not on a ratio scale
   */


  invert() {
    if (this.cnv_ != null) throw new Error(`Attempt to invert a non-ratio unit - ${this.name_}`);
    this.name_ = this.invertString(this.name_);
    this.magnitude_ = 1 / this.magnitude_;
    this.dim_.minus();
    return this;
  } // end invert

  /**
   * Inverts a string, where the string is assumed to be a code or a name
   * of a division operation where the string is the divisor and the dividend
   * is blank.
   *
   * @param the string to be inverted
   * @return the inverted string
   */


  invertString(theString) {
    if (theString.length > 0) {
      let stringRep = theString.replace('/', "!").replace('.', '/').replace("!", '.');

      switch (stringRep.charAt(0)) {
        case '.':
          theString = stringRep.substr(1);
          break;

        case '/':
          theString = stringRep;
          break;

        default:
          theString = "/" + stringRep;
      }
    }

    return theString;
  } // end invertString

  /**
   * This function handles concatenation of two strings and an operator.
   * It's called to build unit data, e.g., unit name, unit code, etc., from
   * two different units, joined by the specified operator.
   *
   * @param str1 the first string to appear in the result
   * @param operator the operator ('*', '.' or '/') to appear between the strings
   * @param str2 the second string to appear in the result
   * @param startChar the starting character to be used, when needed, to
   *  enclose a string
   * @param endChar the ending character to be used, when needed, to enclose
   *  a string
   * @returns the built string
   */


  _concatStrs(str1, operator, str2, startChar, endChar) {
    return this._buildOneString(str1, startChar, endChar) + operator + this._buildOneString(str2, startChar, endChar);
  }
  /**
   * This function handles creation of one string to be included in a
   * concatenated string.   Basically it checks to see if the string
   * needs to be enclosed either in parentheses or square brackets.
   *
   * The string is enclosed if it is not a number, does not start with
   * a parenthesis or square bracket, and includes a period, and asterisk,
   * a slash or a blank space.
   *
   * @param str the string
   * @param startChar starting enclosing character
   * @param endChar ending enclosing character
   * @returns the string
   */


  _buildOneString(str, startChar, endChar) {
    let ret = '';

    if (intUtils_.isNumericString(str)) {
      ret = str;
    } else {
      if (str.charAt(0) === '(' || str.charAt(0) === '[') {
        ret = str;
      } else if (/[./* ]/.test(str)) {
        ret = startChar + str + endChar;
      } else {
        ret = str;
      }
    }

    return ret;
  }
  /**
   * Raises the unit to a power.  For example
   *  kg.m/s2 raised to the -2 power would be kg-2.m-2/s-4
   *
   * If this unit is not on a ratio scale an error is thrown. Mutating
   * to a ratio scale unit is not possible for a unit, only for a
   * measurement (magnitude and dimension).
   *
   * This is based on the pow method in Gunter Schadow's java version,
   * although it uses javascript capabilities to simplify the processing.
   *
   * This unit is modified by this function
   *
   * @param p the power to with this unit is to be raise
   * @return this unit after it is raised
   * @throws an error if this unit is not on a ratio scale.
   */


  power(p) {
    if (this.cnv_ != null) throw new Error(`Attempt to raise a non-ratio unit, ${this.name_}, ` + 'to a power.'); //this.name_ = UnitString.pow(this.name_, p);
    // the above line is replaced with the code below, as the pow method
    // never actually existing in the UnitString class.  (Tried to use
    // Schadow java code but this way ended up being a lot easier).

    let uStr = this.csCode_;
    let uArray = uStr.match(/([./]|[^./]+)/g);
    let arLen = uArray.length;

    for (let i = 0; i < arLen; i++) {
      let un = uArray[i];

      if (un !== '/' && un !== '.') {
        let nun = parseInt(un);
        if (isInteger(nun)) uArray[i] = Math.pow(nun, p).toString();else {
          let uLen = un.length;

          for (let u = uLen - 1; u >= 0; u--) {
            let uChar = parseInt(un[u]);

            if (!isInteger(uChar)) {
              if (un[u] === '-' || un[u] === '+') {
                u--;
              }

              if (u < uLen - 1) {
                let exp = parseInt(un.substr(u));
                exp = Math.pow(exp, p);
                uArray[i] = un.substr(0, u) + exp.toString();
                u = -1;
              } else {
                uArray[i] += p.toString();
                u = -1;
              } // end if there are/aren't some numbers at the end


              u = -1;
            } // end if this character is not a number

          } // end searching backwards for start of exponent

        } // end if this element is not a number
      } // end if the current element is not an operator

    } // end do for each element of the units array
    // reassemble the updated units array to a string


    this.csCode_ = uArray.join('');
    this.magnitude_ = Math.pow(this.magnitude_, p);

    if (this.dim_) {
      this.dim_.mul(p);
    }

    return this;
  } // end power

  /*
   * This function tests this unit against the unit passed in to see if the
   * two are mole to mass commensurable.  It assumes that one of the units
   * is a mole-based unit and the other is a mass-based unit.  It also assumes
   * that the mole-based unit has a single mole unit in the numerator and that
   * the mass-based unit has a single mass unit in the numerator.  It does NOT
   * check to validate those assumptions.
   *
   * The check is made by setting the dimension vector element corresponding
   * to the base mass unit (gram) in the mole unit, and then comparing the
   * two dimension vectors.  If they match, the units are commensurable.
   * Otherwise they are not.
   *
   * @param unit2 the unit to be compared to this one
   * @returns boolean indicating commensurability
   */


  isMoleMassCommensurable(unit2) {
    let tabs = this._getUnitTables();

    let d = tabs.getMassDimensionIndex();
    let commensurable = false;

    if (this.moleExp_ === 1 && unit2.moleExp_ === 0) {
      let testDim = this.dim_.clone();
      let curVal = testDim.getElementAt(d);
      testDim.setElementAt(d, curVal + this.moleExp_);
      commensurable = testDim.equals(unit2.dim_);
    } else if (unit2.moleExp_ === 1 && this.moleExp_ === 0) {
      let testDim = unit2.dim_.clone();
      let curVal = testDim.getElementAt(d);
      testDim.setElementAt(d, curVal + unit2.moleExp_);
      commensurable = testDim.equals(this.dim_);
    }

    return commensurable;
  }
  /**
   * This returns the UnitTables singleton object.  Including the require
   * statement included here causes a circular dependency condition that
   * resulted in the UnitTables object not being defined for the Unit object.
   * sigh.  Thanks, Paul, for figuring this out.
   *
   * @private
   */


  _getUnitTables() {
    if (!UnitTables) UnitTables = require('./unitTables.js').UnitTables;
    return UnitTables.getInstance();
  }

} // end Unit class


exports.Unit = Unit;


},{"./config.js":50,"./dimension.js":51,"./ucumFunctions.js":55,"./ucumInternalUtils.js":56,"./unitTables.js":62,"is-integer":64}],61:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnitString = void 0;

var intUtils_ = _interopRequireWildcard(require("./ucumInternalUtils.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * This class handles the parsing of a unit string into a unit object
 */
var Ucum = require('./config.js').Ucum;

var Unit = require('./unit.js').Unit;

var UnitTables = require('./unitTables.js').UnitTables;

var PrefixTables = require('./prefixTables.js').PrefixTables;

class UnitString {
  /**
   * Constructor
   */
  constructor() {
    // Get instances of the unit and prefix tables and the utilities
    this.utabs_ = UnitTables.getInstance();
    this.pfxTabs_ = PrefixTables.getInstance(); // Set emphasis characters to defaults.  These are used to emphasize
    // certain characters or strings in user messages.  They can be reset in
    // the useHTMLInMessages method.

    this.openEmph_ = Ucum.openEmph_;
    this.closeEmph_ = Ucum.closeEmph_; // Set the braces message to blank.  This message is displayed for each
    // validation request on the web page, but is included separately as
    // a note on the validation spreadsheet.  The useBraceMsgForEachString
    // method should be used to set the message to be displayed for each
    // unit string.

    this.bracesMsg_ = ''; // Set the flags used, with indices, as place holders in unit strings
    // for parenthetical strings and strings within braces.

    this.parensFlag_ = "parens_placeholder"; // in lieu of Jehoshaphat

    this.pFlagLen_ = this.parensFlag_.length;
    this.braceFlag_ = "braces_placeholder"; // in lieu of Nebuchadnezzar

    this.bFlagLen_ = this.braceFlag_.length; // Initialize the message start/end strings, which will be set when
    // parseString is called.

    this.vcMsgStart_ = null;
    this.vcMsgEnd_ = null; // Arrays used by multiple methods within this class to hold persistent
    // data.  Just gets too bulky to pass these guys around.
    // Messages to be returned to the calling function

    this.retMsg_ = []; // Units for parenthetical unit strings

    this.parensUnits_ = []; // annotation text for annotations found in unit strings

    this.annotations_ = []; // suggestions for unit strings that for which no unit was found

    this.suggestions = [];
  } // end constructor

  /**
   * Sets the emphasis strings to the HTML used in the webpage display - or
   * blanks them out, depending on the use parameter.
   *
   * @param use flag indicating whether or not to use the html message format;
   *  defaults to true
   */


  useHTMLInMessages(use) {
    if (use === undefined || use) {
      this.openEmph_ = Ucum.openEmphHTML_;
      this.closeEmph_ = Ucum.closeEmphHTML_;
    } else {
      this.openEmph_ = Ucum.openEmph_;
      this.closeEmph_ = Ucum.closeEmph_;
    }
  } // end useHTMLInMessages

  /**
   * Sets the braces message to be displayed for each unit string validation
   * requested, as appropriate.
   *
   * @param use flag indicating whether or not to use the braces message;
   *  defaults to true
   */


  useBraceMsgForEachString(use) {
    if (use === undefined || use) this.bracesMsg_ = Ucum.bracesMsg_;else this.bracesMsg_ = '';
  }
  /**
   * Parses a unit string, returns a unit, a possibly updated version of
   * the string passed in, and messages and suggestions where appropriate.
   *
   * The string returned may be updated if the input string contained unit
   * names, e.g., "pound".  The unit code ([lb_av] for pound) is placed in
   * the string returned, a the returned messages array includes a note
   * explaining the substitution.
   *
   * @param uStr the string defining the unit
   * @param valConv indicates what type of request this is for - a request to
   *  validate (pass in 'validate') or a request to convert (pass in 'convert');
   *  optional, defaults to 'validate'
   * @param suggest a boolean to indicate whether or not suggestions are
   *  requested for a string that cannot be resolved to a valid unit;
   *  true indicates suggestions are wanted; false indicates they are not,
   *  and is the default if the parameter is not specified;
   * @returns an array containing:
   *   the unit object or null if a unit could not be created.  In cases where
   *     a fix was found for a problem string, .e.g., 2.mg for 2mg, a unit will
   *     be returned but an error message will also be returned, describing
   *     the substitution;
   *   the possibly updated unit string passed in;
   *   an array of any user messages (informational, error or warning)
   *     generated (or an empty array); and
   *   a suggestions array of hash objects (1 or more).  Each hash contains
   *   three elements:
   *     'msg' which is a message indicating what unit expression the
   *       suggestions are for;
   *     'invalidUnit' which is the unit expression the suggestions are
   *       for; and
   *     'units' which is an array of data for each suggested unit found.
   *        Each array will contain the unit code, the unit name and the
   *        unit guidance (if any).
   *   The return array will not contain a suggestions array if a valid unit
   *   was found or if suggestions were not requested.
   * @throws an error if nothing was specified.
   */


  parseString(uStr, valConv, suggest) {
    uStr = uStr.trim(); // Make sure we have something to work with

    if (uStr === '' || uStr === null) {
      throw new Error('Please specify a unit expression to be validated.');
    }

    if (valConv === 'validate') {
      this.vcMsgStart_ = Ucum.valMsgStart_;
      this.vcMsgEnd_ = Ucum.valMsgEnd_;
    } else {
      this.vcMsgStart_ = Ucum.cnvMsgStart_;
      this.vcMsgEnd_ = Ucum.cnvMsgEnd_;
    }

    if (suggest === undefined || suggest === false) {
      this.suggestions_ = null;
    } else {
      this.suggestions_ = [];
    }

    this.retMsg_ = [];
    this.parensUnits_ = [];
    this.annotations_ = [];
    let origString = uStr;
    let retObj = []; // Extract any annotations, i.e., text enclosed in braces ({}) from the
    // string before further processing.  Store each one in this.annotations_
    // array and put a placeholder in the string for the annotation.  Do
    // this before other processing in case an annotation contains characters
    // that will be interpreted as parenthetical markers or operators in
    // subsequent processing.

    uStr = this._getAnnotations(uStr);

    if (this.retMsg_.length > 0) {
      retObj[0] = null;
      retObj[1] = null;
    } else {
      // Flag used to block further processing on an unrecoverable error
      let endProcessing = this.retMsg_.length > 0; // First check for one of the "special" units.  If it's one of those, put
      // in a substitution phrase for it to avoid having it separated on its
      // embedded operator.  This will only happen, by the way, if it is
      // preceded by a prefix or followed by an operator and another unit.

      let sUnit = null;

      for (sUnit in Ucum.specUnits_) {
        while (uStr.indexOf(sUnit) !== -1) uStr = uStr.replace(sUnit, Ucum.specUnits_[sUnit]);
      } // Check for spaces and throw an error if any are found.  The spec
      // explicitly forbids spaces except in annotations, which is why any
      // annotations are extracted before this check is made.


      if (uStr.indexOf(' ') > -1) {
        throw new Error('Blank spaces are not allowed in unit expressions.');
      } // end if blanks were found in the string
      // assign the array returned to retObj.  It will contain 2 elements:
      //  the unit returned in position 0; and the origString (possibly
      //  modified in position 1.  The origString in position 1 will not
      //  be changed by subsequent processing.


      retObj = this._parseTheString(uStr, origString);
      let finalUnit = retObj[0]; // Do a final check to make sure that finalUnit is a unit and not
      // just a number.  Something like "8/{HCP}" will return a "unit" of 8
      // - which is not a unit.  Hm - evidently it is.  So just create a unit
      // object for it.

      if (intUtils_.isIntegerUnit(finalUnit) || typeof finalUnit === 'number') {
        finalUnit = new Unit({
          'csCode_': origString,
          'magnitude_': finalUnit,
          'name_': origString
        });
        retObj[0] = finalUnit;
      } // end final check

    } // end if no annotation errors were found


    retObj[2] = this.retMsg_;
    if (this.suggestions_ && this.suggestions_.length > 0) retObj[3] = this.suggestions_;
    return retObj;
  } // end parseString

  /**
   * Parses a unit string, returns a unit, a possibly updated version of
   * the string passed in, and messages where appropriate.  This should
   * only be called from within this class (or by test code).
   *
   * The string returned may be updated if the input string contained unit
   * names, e.g., "pound".  The unit code ([lb_av] for pound) is placed in
   * the string returned, a the returned messages array includes a note
   * explaining the substitution.
   *
   * @param uStr the string defining the unit
   * @param origString the original unit string passed in
   *
   * @returns
   *  an array containing:
   *    the unit object (or null if there were problems creating the unit); and
   *    the possibly updated unit string passed in.
   *
   * the this.retMsg_ array will be updated with any user messages
   *   (informational, error or warning) generated by this or called methods
   * the this.parensUnits_ array is referenced and possibly populated by
   *   methods called within this one
   * the this.annotations_ array is referenced by methods called within
   *   this one
   * the this.suggestions_ array may be populated by methods called within
   *   this one
   */


  _parseTheString(uStr, origString) {
    // Unit to be returned
    let finalUnit = null; // Flag used to block further processing on an unrecoverable error

    let endProcessing = this.retMsg_.length > 0; // Call _processParens to search for and process any/all parenthetical
    // strings in uStr.  Units created for parenthetical strings will be
    // stored in the this.parensUnits_ array.

    let parensResp = this._processParens(uStr, origString);

    endProcessing = parensResp[2]; // The array used to hold the units and their operators.

    let uArray = []; // Continue if we didn't hit a problem

    if (!endProcessing) {
      uStr = parensResp[0];
      origString = parensResp[1]; // Call _makeUnitsArray to convert the string to an array of unit
      // descriptors with operators.

      let mkUArray = this._makeUnitsArray(uStr, origString);

      endProcessing = mkUArray[2];

      if (!endProcessing) {
        uArray = mkUArray[0];
        origString = mkUArray[1]; // Create a unit object out of each un element

        let uLen = uArray.length;

        for (let u1 = 0; u1 < uLen; u1++) {
          //for (let u1 = 0; u1 < uLen && !endProcessing; u1++) {
          let curCode = uArray[u1]['un']; // Determine the type of the "un" attribute of the current array element
          // Check to see if it's a number.  If so write the number version of
          // the number back to the "un" attribute and move on

          if (intUtils_.isIntegerUnit(curCode)) {
            uArray[u1]['un'] = Number(curCode);
          } else {
            // The current unit array element is a string.  Check now to see
            // if it is or contains a parenthesized unit from this.parensUnits_.
            // If so, call _getParens to process the string and get the unit.
            if (curCode.indexOf(this.parensFlag_) >= 0) {
              let parenUnit = this._getParensUnit(curCode, origString); // if we couldn't process the string, set the end flag and bypass
              // further processing.


              if (!endProcessing) endProcessing = parenUnit[1]; // If we're good, put the unit in the uArray and replace the
              // curCode, which contains the parentheses placeholders, etc.,
              // with the unit's code - including any substitutions.

              if (!endProcessing) {
                uArray[u1]['un'] = parenUnit[0];
              }
            } // end if the curCode contains a parenthesized unit
            // Else it's not a parenthetical unit and not a number. Call
            // _makeUnit to create a unit for it.
            else {
                let uRet = this._makeUnit(curCode, origString); // If we didn't get a unit, set the endProcessing flag.


                if (uRet[0] === null) {
                  endProcessing = true;
                } else {
                  uArray[u1]['un'] = uRet[0];
                  origString = uRet[1];
                }
              } // end if the curCode is not a parenthetical expression

          } // end if the "un" array is a not a number

        } // end do for each element in the units array

      } // end if _makeUnitsArray did not return an error

    } // end if _processParens did not find an error that causes a stop
    // If we're still good, continue


    if (!endProcessing) {
      // Process the units (and numbers) to create one final unit object
      if ((uArray[0] === null || uArray[0] === ' ' || uArray[0]['un'] === undefined || uArray[0]['un'] === null) && this.retMsg_.length === 0) {
        // not sure what this might be, but this is a safeguard
        this.retMsg_.push(`Unit string (${origString}) did not contain ` + `anything that could be used to create a unit, or else something ` + `that is not handled yet by this package.  Sorry`);
        endProcessing = true;
      }
    }

    if (!endProcessing) {
      finalUnit = this._performUnitArithmetic(uArray, origString);
    }

    return [finalUnit, origString];
  } // end _parseTheString

  /**
   * Extracts all annotations from a unit string, replacing them with
   * placeholders for later evaluation.  The annotations are stored in the
   * this.annotations_ array.  This should only be called from within this
   * class (or by test code).
   *
   * @param uString the unit string being parsed
   * @returns the string after the annotations are replaced with placeholders
   *
   * the this.retMsg_ array will be updated with any user messages
   *   (informational, error or warning) generated by this or called methods
   * the this.annotations_ array is populated by this method
   */


  _getAnnotations(uString) {
    let openBrace = uString.indexOf('{');

    while (openBrace >= 0) {
      let closeBrace = uString.indexOf('}');

      if (closeBrace < 0) {
        this.retMsg_.push('Missing closing brace for annotation starting at ' + this.openEmph_ + uString.substr(openBrace) + this.closeEmph_);
        openBrace = -1;
      } else {
        let braceStr = uString.substring(openBrace, closeBrace + 1);
        let aIdx = this.annotations_.length.toString();
        uString = uString.replace(braceStr, this.braceFlag_ + aIdx + this.braceFlag_);
        this.annotations_.push(braceStr);
        openBrace = uString.indexOf('{');
      }
    } // end do while we have an opening brace
    // check for a stray/unmatched closing brace


    let closeBrace = uString.indexOf('}');
    if (closeBrace >= 0) this.retMsg_.push('Missing opening brace for closing brace found at ' + this.openEmph_ + uString.substring(0, closeBrace + 1) + this.closeEmph_);
    return uString;
  } // end _getAnnotations

  /**
   * Finds and processes any/all parenthesized unit strings. This should only
   * be called from within this class (or by test code).
   *
   * Nested parenthesized strings are processed from the inside out.  The
   * parseString function is called from within this one for each parenthesized
   * unit string, and the resulting unit object is stored in this.parensUnits_,
   * to be processed after all strings are translated to units.
   *
   * A placeholder is placed in the unit string returned to indicate that the
   * unit object should be obtained from the this.parensUnits_ array.  The
   * placeholder consists of the parenthesis flag (this.parensFlag_) followed
   * by the index of the unit in this.parensUnits_ followed by this.parensFlag_.
   *
   * @param uString the unit string being parsed, where this will be the full
   *  string the first time this is called and parenthesized strings on any
   *  subsequent calls
   * @param origString the original string first passed in to parseString
   * @returns
   *  an array containing:
   *   the string after the parentheses are replaced;
   *   the original string; and
   *   a boolean flag indicating whether or not an error occurred that
   *     should stop processing.
   *
   * the this.retMsg_ array will be updated with any user messages
   *   (informational, error or warning) generated by this or called methods
   * this this.parensUnits_ array will be populated with units found for
   *   parenthetical unit strings
   */


  _processParens(uString, origString) {
    // Unit strings array and index
    let uStrArray = [];
    let uStrAryPos = 0;
    let stopProcessing = false;
    let pu = this.parensUnits_.length; // Count of characters trimmed off the beginning of the unit string (uString)
    // as units are removed from it; used for error messages to provide
    // context.

    let trimmedCt = 0; // Break the unit string into pieces that consist of text outside of
    // parenthetical strings and placeholders for the parenthetical units.
    // This method is called recursively for parenthetical strings and the units
    // returned are stored in the this.parensUnits_ array.

    while (uString !== "" && !stopProcessing) {
      let openCt = 0;
      let closeCt = 0;
      let openPos = uString.indexOf('('); // If an opening parenthesis was not found, check for an unmatched
      // close parenthesis.  If one was found report the error and end
      // processing.

      if (openPos < 0) {
        let closePos = uString.indexOf(')');

        if (closePos >= 0) {
          let theMsg = `Missing open parenthesis for close ` + `parenthesis at ${uString.substring(0, closePos + trimmedCt)}` + `${this.openEmph_}${uString.substr(closePos, 1)}${this.closeEmph_}`;

          if (closePos < uString.length - 1) {
            theMsg += `${uString.substr(closePos + 1)}`;
          }

          this.retMsg_.push(theMsg);
          uStrArray[uStrAryPos] = uString;
          stopProcessing = true;
        } // end if a close parenthesis was found
        // If no parentheses were found in the current unit string, transfer
        // it to the units array and blank out the string, which will end
        // the search for parenthetical units.
        else {
            uStrArray[uStrAryPos] = uString;
            uString = "";
          } // end if no close parenthesis was found

      } // end if no open parenthesis was found
      // Otherwise an open parenthesis was found. Process the string that
      // includes the parenthetical group
      else {
          openCt += 1; // Write the text before the parentheses (if any) to the unit strings array

          let uLen = uString.length;

          if (openPos > 0) {
            uStrArray[uStrAryPos++] = uString.substr(0, openPos);
          } // Find the matching closePos, i.e., the one that closes the
          // parenthetical group that this one opens.  Look also for
          // another open parenthesis, in case this includes nested parenthetical
          // strings.  This continues until it finds the same number of close
          // parentheses as open parentheses, or runs out of string to check.
          // In the case of nested parentheses this will identify the outer set
          // of parentheses.


          let closePos = 0;
          let c = openPos + 1;

          for (; c < uLen && openCt != closeCt; c++) {
            if (uString[c] === '(') openCt += 1;else if (uString[c] === ')') closeCt += 1;
          } // Put a placeholder for the group in the unit strings array and recursively
          // call this method for the parenthetical group.  Put the unit returned
          // in this.parensUnits_.  Set the unit string to whatever follows
          // the position of the closing parenthesis for this group, to be
          // processed by the next iteration of this loop.  If there's nothing
          // left uString is set to "".


          if (openCt === closeCt) {
            closePos = c;
            uStrArray[uStrAryPos++] = this.parensFlag_ + pu.toString() + this.parensFlag_;

            let parseResp = this._parseTheString(uString.substring(openPos + 1, closePos - 1), origString);

            if (parseResp[0] === null) stopProcessing = true;else {
              origString = parseResp[1];
              this.parensUnits_[pu++] = parseResp[0];
              uString = uString.substr(closePos);
              trimmedCt = closePos;
            }
          } // end if the number of open and close parentheses matched
          // If the number of open and close parentheses doesn't match, indicate
          // an error.
          else {
              uStrArray.push(origString.substr(openPos));
              this.retMsg_.push(`Missing close parenthesis for open parenthesis at ` + `${origString.substring(0, openPos + trimmedCt)}` + `${this.openEmph_}${origString.substr(openPos, 1)}` + `${this.closeEmph_}${origString.substr(openPos + 1)}`);
              stopProcessing = true;
            }
        } // end if an open parenthesis was found

    } // end do while the input string is not empty


    if (stopProcessing) this.parensUnits_ = [];
    return [uStrArray.join(''), origString, stopProcessing];
  } // end _processParens

  /**
   * Breaks the unit string into an array of unit descriptors and operators.
   * If a unit descriptor consists of a number preceding a unit code, with
   * no multiplication operator, e.g., 2mg instead of 2.mg, it is handled
   * as if it were a parenthetical expression.
   *
   * This should only be called from within this class (or by test code).
   *
   * @param uStr the unit string being parsed
   * @param origString the original string passed to parseString
   * @returns
   *  an array containing:
   *    the array representing the unit string;
   *    the original string passed in, possibly updated with corrections; and
   *    and a flag indicating whether or not processing can continue.
   *
   * the this.retMsg_ array will be updated with any user messages
   *   (informational, error or warning) generated by this or called methods
   */


  _makeUnitsArray(uStr, origString) {
    // Separate the string into pieces based on delimiters / (division) and .
    // (multiplication).  The idea is to get an array of units on which we
    // can then perform any operations (prefixes, multiplication, division).
    let uArray1 = uStr.match(/([./]|[^./]+)/g);
    let endProcessing = false;
    let uArray = [];
    let startNumCheck = /(^[0-9]+)(\[?[a-zA-Z\_0-9a-zA-Z\_]+\]?$)/; // If the first element in the array is the division operator (/), the
    // string started with '/'.  Add a first element containing 1 to the
    // array, which will cause the correct computation to be performed (inversion).

    if (uArray1[0] === "/") {
      uArray1.unshift("1");
    } // If the first element in the array is the multiplication operator (.)
    // return an error.
    else if (uArray1[0] === '.') {
        this.retMsg_.push(`${origString} is not a valid UCUM code. ` + `The multiplication operator at the beginning of the expression is ` + `not valid. A multiplication operator must appear only between ` + `two codes.`);
        endProcessing = true;
      }

    if (!endProcessing) {
      // Check to see if there is a number preceding a unit code, e.g., 2mg
      // If so, update the first element to remove the number (2mg -> mg) and
      // add two elements to the beginning of the array - the number and the
      // multiplication operator.
      if (!intUtils_.isNumericString(uArray1[0])) {
        let numRes = uArray1[0].match(startNumCheck);

        if (numRes && numRes.length === 3 && numRes[1] !== '' && numRes[2] !== '' && numRes[2].indexOf(this.braceFlag_) !== 0) {
          let dispVal = numRes[2];

          if (!endProcessing && numRes[2].indexOf(this.parensFlag_) !== -1) {
            let parensback = this._getParensUnit(numRes[2], origString);

            numRes[2] = parensback[0]['csCode_'];
            dispVal = `(${numRes[2]})`;
            endProcessing = parensback[1];
          }

          if (!endProcessing) {
            this.retMsg_.push(`${numRes[1]}${dispVal} is not a valid UCUM code.` + `  ${this.vcMsgStart_}${numRes[1]}.${dispVal}${this.vcMsgEnd_}`);
            origString = origString.replace(`${numRes[1]}${dispVal}`, `${numRes[1]}.${dispVal}`);
            uArray1[0] = numRes[2];
            uArray1.unshift(numRes[1], '.');
          }
        }
      } // end if the first element is not a number (only)
      // Create an array of unit/operator objects.  The unit is, for now, the
      // string containing the unit code (e.g., Hz for hertz) including
      // a possible prefix and exponent.   The operator is the operator to be
      // applied to that unit and the one preceding it.  So, a.b would give
      // us two objects.  The first will have a unit of a, and a blank operator
      // (because it's the first unit).  The second would have a unit of b
      // and the multiplication operator (.).


      if (!endProcessing) {
        let u1 = uArray1.length;
        uArray = [{
          op: "",
          un: uArray1[0]
        }];

        for (let n = 1; n < u1; n++) {
          // check to make sure that we don't have two operators together, e.g.,
          // mg./K.  If so, let the user know the problem.
          let theOp = uArray1[n++]; // oh wait - check to make sure something is even there, that the
          // user didn't end the expression with an operator.

          if (!uArray1[n]) {
            this.retMsg_.push(`${origString} is not a valid UCUM code. ` + `It is terminated with the operator ${this.openEmph_}` + `${theOp}${this.closeEmph_}.`);
            n = u1;
            endProcessing = true;
          } else if (Ucum.validOps_.indexOf(uArray1[n]) !== -1) {
            this.retMsg_.push(`${origString} is not a valid UCUM code. ` + `A unit code is missing between${this.openEmph_}` + `${theOp}${this.closeEmph_}and${this.openEmph_}` + `${uArray1[n]}${this.closeEmph_}in${this.openEmph_}` + `${theOp}${uArray1[n]}${this.closeEmph_}.`);
            n = u1;
            endProcessing = true;
          } else {
            // Check to see if a number precedes a unit code.
            // If so, send the element to _processParens, inserting the multiplication
            // operator where it belongs.  Treating it as parenthetical keeps it from
            // being interpreted incorrectly because of operator parentheses.  For
            // example, if the whole string is mg/2kJ we don't want to rewrite it as
            // mg/2.kJ - because mg/2 would be performed, followed by .kJ.  Instead,
            // handling 2kJ as a parenthesized unit will make sure mg is divided by
            // 2.kJ.
            if (!intUtils_.isNumericString(uArray1[n])) {
              let numRes2 = uArray1[n].match(startNumCheck);

              if (numRes2 && numRes2.length === 3 && numRes2[1] !== '' && numRes2[2] !== '' && numRes2[2].indexOf(this.braceFlag_) !== 0) {
                let invalidString = numRes2[0];

                if (!endProcessing && numRes2[2].indexOf(this.parensFlag_) !== -1) {
                  let parensback = this._getParensUnit(numRes2[2], origString);

                  numRes2[2] = parensback[0]['csCode_'];
                  invalidString = `(${numRes2[2]})`;
                  endProcessing = parensback[1];

                  if (!endProcessing) {
                    this.retMsg_.push(`${numRes2[1]}${invalidString} is not a ` + `valid UCUM code.  ${this.vcMsgStart_}${numRes2[1]}.${invalidString}` + `${this.vcMsgEnd_}`);
                    let parensString = `(${numRes2[1]}.${invalidString})`;
                    origString = origString.replace(`${numRes2[1]}${invalidString}`, parensString);

                    let nextParens = this._processParens(parensString, origString);

                    endProcessing = nextParens[2];

                    if (!endProcessing) {
                      uArray.push({
                        op: theOp,
                        un: nextParens[0]
                      });
                    } //uArray.push({op: '.', un: numRes2[2]});

                  }
                } // end if the string represents a parenthesized unit
                else {
                    let parensStr = '(' + numRes2[1] + '.' + numRes2[2] + ')';

                    let parensResp = this._processParens(parensStr, origString); // if a "stop processing" flag was returned, set the n index to end
                    // the loop and set the endProcessing flag


                    if (parensResp[2]) {
                      n = u1;
                      endProcessing = true;
                    } else {
                      this.retMsg_.push(`${numRes2[0]} is not a ` + `valid UCUM code.  ${this.vcMsgStart_}${numRes2[1]}.${numRes2[2]}` + `${this.vcMsgEnd_}`);
                      origString = origString.replace(numRes2[0], parensStr);
                      uArray.push({
                        op: theOp,
                        un: parensResp[0]
                      });
                    } // end if no error on the processParens call

                  } // end if the string does not represent a parenthesized unit

              } // end if the string is a number followed by a string
              else {
                  uArray.push({
                    op: theOp,
                    un: uArray1[n]
                  });
                }
            } else {
              uArray.push({
                op: theOp,
                un: uArray1[n]
              });
            }
          } // end if there isn't a missing operator or unit code

        } // end do for each element in uArray1

      } // end if a processing error didn't occur in getParensUnit

    } // end if the string did not begin with a '.' with no following digit


    return [uArray, origString, endProcessing];
  } // end _makeUnitsArray

  /**
   * Takes a unit string containing parentheses flags and returns the unit they
   * represent.  Any text found before and/or after the parenthetical
   * expression is checked to see if we can tell what the user meant and
   * let them know what it should have been.  For example, 2(mg), which
   * would resolve to 2mg, should be 2.mg.
   *
   * This should only be called from within this class (or by test code).
   *
   * @param pStr the string being parsed
   * @param origString the original unit string passed in; passed through
   *  to _getAnnonText if annotation flags are found in any text preceding
   *  or following the parenthetical unit
   * @returns
   *   an array containing
   *     the unit object; and
   *     a flag indicating whether or not processing should be ended.
   *       True indicates that the string was invalid and no corrections
   *         (substitutions or suggestions) could be found;
   *       False indicates that it was either valid or substitutions/suggestions
   *          were made.
   *   the this.retMsg_ array will be updated with any user messages
   *     (informational, error or warning) generated by this or called methods
   *   this this.parensUnits_ array contains the units that are acquired by
   *     this method
   * @throws an error if an invalid parensUnit index was found.  This is
   *    a processing error.
   */


  _getParensUnit(pStr, origString) {
    let endProcessing = false;
    let retAry = [];
    let retUnit = null;
    let befAnnoText = null;
    let aftAnnoText = null; // Get the location of the flags.  We're assuming there are only two
    // because _processParens takes care of nesting.  By the time we get
    // here we should not be looking a nested parens.  Also get any text
    // before and after the parentheses.  Once we get the unit we update
    // the input string with the unit's csCode_, which will wipe out any
    // before and after text

    let psIdx = pStr.indexOf(this.parensFlag_);
    let befText = null;

    if (psIdx > 0) {
      befText = pStr.substr(0, psIdx - 1);
    }

    let peIdx = pStr.lastIndexOf(this.parensFlag_);
    let aftText = null;

    if (peIdx + this.pFlagLen_ < pStr.length) {
      aftText = pStr.substr(peIdx + this.pFlagLen_);
    } // Get the text between the flags


    let pNumText = pStr.substring(psIdx + this.pFlagLen_, peIdx); // Make sure the index is a number, and if it is, get the unit from the
    // this.parensUnits_ array

    if (intUtils_.isNumericString(pNumText)) {
      retUnit = this.parensUnits_[Number(pNumText)];

      if (!intUtils_.isIntegerUnit(retUnit)) {
        pStr = retUnit.csCode_;
      } else {
        pStr = retUnit;
      }
    } // If it's not a number, it's a programming error.  Throw a fit.
    else {
        throw new Error(`Processing error - invalid parens number ${pNumText} ` + `found in ${pStr}.`);
      } // If there's something in front of the starting parentheses flag, check to
    // see if it's a number or an annotation.


    if (befText) {
      // If it's a number, assume that multiplication was assumed
      if (intUtils_.isNumericString(befText)) {
        let nMag = retUnit.getProperty('magnitude_');
        nMag *= Number(befText);
        retUnit.assignVals({
          'magnitude_': nMag
        });
        pStr = `${befText}.${pStr}`;
        this.retMsg_.push(`${befText}${pStr} is not a valid UCUM code.\n` + this.vcMsgStart_ + pStr + this.vcMsgEnd_);
      } else {
        if (befText.indexOf(this.braceFlag_) >= 0) {
          let annoRet = this._getAnnoText(befText, origString); // if we found not only an annotation, but text before or after
          // the annotation (remembering that this is all before the
          // parentheses) throw an error - because we don't know what
          // to do with it.  Could it be missing an operator?


          if (annoRet[1] || annoRet[2]) {
            throw new Error(`Text found before the parentheses (` + `${befText}) included an annotation along with other text ` + `for parenthetical unit ${retUnit.csCode_}`);
          } // Otherwise put the annotation after the unit string and note
          // the misplacement.


          pStr += annoRet[0];
          this.retMsg_.push(`The annotation ${annoRet[0]} before the unit ` + `code is invalid.\n` + this.vcMsgStart_ + pStr + this.vcMsgEnd_);
        } // else the text before the parentheses is neither a number nor
        // an annotation.  If suggestions were NOT requested, record an
        // error.
        else if (!this.suggestions_) {
            this.retMsg_.push(`${befText} preceding the unit code ${pStr} ` + `is invalid.  Unable to make a substitution.`);
            endProcessing = true;
          } // otherwise try for suggestions
          else {
              let suggestStat = this._getSuggestions(befText);

              endProcessing = suggestStat !== 'succeeded';
            } // end if a brace was found or, if not, suggestions were not or
        // were requested

      } // end if text preceding the parentheses was not a number

    } // end if there was text before the parentheses
    // Process any text after the parentheses


    if (aftText) {
      // if it's an annotation, get it and add it to the pStr
      if (aftText.indexOf(this.braceFlag_) >= 0) {
        let annoRet = this._getAnnoText(aftText, origString); // if we found not only an annotation, but text before or after
        // the annotation (remembering that this is all after the
        // parentheses) throw an error - because we don't know what
        // to do with it.  Could it be missing an operator?


        if (annoRet[1] || annoRet[2]) {
          throw new Error(`Text found after the parentheses (` + `${aftText}) included an annotation along with other text ` + `for parenthetical unit ${retUnit.csCode_}`);
        } // Otherwise put the annotation after the unit string - no message
        // needed.


        pStr += annoRet[0];
      } // Otherwise check to see if it's an exponent.  If so, warn the
      // user that it's not valid - but try it anyway
      else {
          if (intUtils_.isNumericString(aftText)) {
            pStr += aftText;
            retUnit = retUnit.power(Number(aftText));
            this.retMsg_.push(`An exponent (${aftText}) following a parenthesis ` + `is invalid as of revision 1.9 of the UCUM Specification.\n  ` + this.vcMsgStart_ + pStr + this.vcMsgEnd_);
          } // else the text after the parentheses is neither a number nor
          // an annotation.  If suggestions were NOT requested, record an
          // error.
          else if (!this.suggestions_) {
              this.retMsg_.push(`Text ${aftText} following the unit code ${pStr} ` + `is invalid.  Unable to make a substitution.`);
              endProcessing = true;
            } // otherwise try for suggestions
            else {
                let suggestStat = this._getSuggestions(befText);

                endProcessing = suggestStat !== 'succeeded';
              } // end if text following the parentheses not an exponent

        } // end if text following the parentheses is not an annotation

    } // end if there is text following the parentheses


    if (!endProcessing) {
      if (!retUnit) {
        retUnit = new Unit({
          'csCode_': pStr,
          'magnitude_': 1,
          'name_': pStr
        });
      } else if (intUtils_.isIntegerUnit(retUnit)) {
        retUnit = new Unit({
          'csCode_': retUnit,
          'magnitude_': retUnit,
          'name_': retUnit
        });
      } else {
        retUnit.csCode_ = pStr;
      }
    }

    return [retUnit, endProcessing];
  } // end _getParensUnit

  /**
   * Takes a unit string containing annotation flags and returns the
   * annotation they represent.  This also returns any text found before
   * the annotation and any found after the annotation.
   *
   * This should only be called from within this class (or by test code).
   * NEEDS FIX in next branch to handle string with multiple annotations.
   *
   * @param pStr the string being parsed
   * @param origString the original string being parsed; used in error msg
   *  thrown for an invalid index to the annotations array
   * @returns
   *  an array containing
   *    the annotation for the pStr;
   *    any text found before the annotation; and
   *    any text found after the annotation.
   *
   * the this.retMsg_ array will be updated with any user messages
   *   (informational, error or warning) generated by this or called methods
   * the this.annotations_ array is used as the source for the annotations text
   * @throws an error if for a processing error - an invalid annotation index.
   */


  _getAnnoText(pStr, origString) {
    // if the starting braces flag is not at index 0, get the starting
    // text and the adjust the pStr to omit it.
    let asIdx = pStr.indexOf(this.braceFlag_);
    let startText = asIdx > 0 ? pStr.substring(0, asIdx) : null;

    if (asIdx !== 0) {
      pStr = pStr.substr(asIdx);
    } // Get the location of the end flag and, if text follows it, get the text


    let aeIdx = pStr.indexOf(this.braceFlag_, 1);
    let endText = aeIdx + this.bFlagLen_ < pStr.length ? pStr.substr(aeIdx + this.bFlagLen_) : null; // Get the index of the annotation in this.annotations_.
    // Check it to make sure it's valid, and if not, throw an error

    let idx = pStr.substring(this.bFlagLen_, aeIdx);
    let idxNum = Number(idx);

    if (!intUtils_.isNumericString(idx) || idxNum >= this.annotations_.length) {
      throw new Error(`Processing Error - invalid annotation index ${idx} found ` + `in ${pStr} that was created from ${origString}`);
    } // Replace the flags and annotation index with the annotation expression


    pStr = this.annotations_[idxNum];
    return [pStr, startText, endText];
  } // end _getAnnoText

  /**
   * Takes a unit string and looks for suggested units.  This should be
   * called for unit strings that cannot be resolved to unit codes.  The
   * string is searched for in the synonyms table found in the UnitTables
   * class.  That table includes all synonyms and unit names for the units
   * in the unit data table.
   *
   * @param pStr the string being parsed
   * @returns an object that contains an element named 'status', whose
   *  value indicates the status of the request:
   *   'succeeded' indicates that synonyms were found;
   *   'failed' indicates that no synonyms were found; or
   *   'error' which indicates that an error occurred
   *
   * the this.retMsg_ array will be updated with a message indicating whether
   *  or not synonyms/suggestions  were found
   * the this.suggestions_ array will be updated with a hash (added to the
   *   array if it already contains others) that contains three elements:
   *   'msg' which is a message indicating what unit expression the
   *      suggestions are for;
   *   'invalidUnit' which is the unit expression the suggestions are for; and
   *   'units' which is an array of data for each suggested unit found.
   *       Each array will contain the unit code, the unit name and the
   *       unit guidance (if any).
   */


  _getSuggestions(pStr) {
    let retObj = intUtils_.getSynonyms(pStr);

    if (retObj['status'] === 'succeeded') {
      let suggSet = {};
      suggSet['msg'] = `${pStr} is not a valid UCUM code.  We found possible ` + `units that might be what was meant:`;
      suggSet['invalidUnit'] = pStr;
      let synLen = retObj['units'].length;
      suggSet['units'] = [];

      for (let s = 0; s < synLen; s++) {
        let unit = retObj['units'][s];
        let unitArray = [unit['code'], unit['name'], unit['guidance']];
        suggSet['units'].push(unitArray);
      }

      this.suggestions_.push(suggSet);
    } else {
      this.retMsg_.push(`${pStr} is not a valid UCUM code.  No alternatives ` + `were found.`);
    }

    return retObj['status'];
  } // end getSuggestions

  /**
   * Creates a unit object from a string defining one unit.  The string
   * should consist of a unit code for a unit already defined (base or
   * otherwise).  It may include a prefix and an exponent, e.g., cm2
   * (centimeter squared).  This should only be called from within this
   * class (or by test code).
   *
   * @params uCode the string defining the unit
   * @param origString the original string to be parsed; used to provide
   *  context for messages
   * @returns
   *  an array containing:
   *    a unit object, or null if there were problems creating the unit; and
   *    the origString passed in, which may be updated if a unit name was
   *    translated to a unit code.
   *
   *  the this.retMsg_ array will be updated with any user messages
   *    (informational, error or warning) generated by this or called methods
   *  the this.suggestions_ array will be populated if no unit (with or without
   *    substitutions) could be found and suggestions were requested
   */


  _makeUnit(uCode, origString) {
    // First try the code just as is, without looking for annotations,
    // prefixes, exponents, or elephants.
    let retUnit = this.utabs_.getUnitByCode(uCode);

    if (retUnit) {
      retUnit = retUnit.clone();
    } // If we found it, we're done.  No need to parse for those elephants (or
    // other stuff).
    else if (uCode.indexOf(this.braceFlag_) >= 0) {
        let getAnnoRet = this._getUnitWithAnnotation(uCode, origString);

        retUnit = getAnnoRet[0];

        if (retUnit) {
          origString = getAnnoRet[1];
        } // If a unit is not found, retUnit will be returned null and
        // the this.retMsg_ array will contain a message describing the problem.
        // If a unit is found, of course, all is good. So ... nothing left
        // to see here, move along.

      } // end if the uCode includes an annotation
      else {
          // So we didn't find a unit for the full uCode or for one with
          // annotations.  Try looking for a unit that uses a carat (^)
          // instead of an asterisk (*)
          if (uCode.indexOf('^') > -1) {
            let tryCode = uCode.replace('^', '*');
            retUnit = this.utabs_.getUnitByCode(tryCode);

            if (retUnit) {
              retUnit = retUnit.clone();
              retUnit.csCode_ = retUnit.csCode_.replace('*', '^');
              retUnit.ciCode_ = retUnit.ciCode_.replace('*', '^');
            }
          } // If that didn't work, check to see if it should have brackets
          // around it (uCode = degF when it should be [degF]


          if (!retUnit) {
            let addBrackets = '[' + uCode + ']';
            retUnit = this.utabs_.getUnitByCode(addBrackets);

            if (retUnit) {
              retUnit = retUnit.clone();
              origString = origString.replace(uCode, addBrackets);
              this.retMsg_.push(`${uCode} is not a valid unit expression, but ` + `${addBrackets} is.\n` + this.vcMsgStart_ + `${addBrackets} (${retUnit.name_})${this.vcMsgEnd_}`);
            } // end if we found the unit after adding brackets

          } // end trying to add brackets
          // If we didn't find it, try it as a name


          if (!retUnit) {
            let retUnitAry = this.utabs_.getUnitByName(uCode);

            if (retUnitAry && retUnitAry.length > 0) {
              retUnit = retUnitAry[0].clone();
              let mString = 'The UCUM code for ' + uCode + ' is ' + retUnit.csCode_ + '.\n' + this.vcMsgStart_ + retUnit.csCode_ + this.vcMsgEnd_;
              let dupMsg = false;

              for (let r = 0; r < this.retMsg_.length && !dupMsg; r++) dupMsg = this.retMsg_[r] === mString;

              if (!dupMsg) this.retMsg_.push(mString);
              let rStr = new RegExp('(^|[.\/({])(' + uCode + ')($|[.\/)}])');
              let res = origString.match(rStr);
              origString = origString.replace(rStr, res[1] + retUnit.csCode_ + res[3]);
              uCode = retUnit.csCode_;
            }
          } // If we still don't have a unit, try assuming a modifier (prefix and/or
          // exponent) and look for a unit without the modifier


          if (!retUnit) {
            // Well, first see if it's one of the special units.  If so,
            // replace the placeholder text with the actual unit string, keeping
            // whatever text (probably a prefix) goes with the unit string.
            let sUnit = null;

            for (sUnit in Ucum.specUnits_) {
              if (uCode.indexOf(Ucum.specUnits_[sUnit]) !== -1) uCode = uCode.replace(Ucum.specUnits_[sUnit], sUnit);
            }

            retUnit = this.utabs_.getUnitByCode(uCode);
            if (retUnit) retUnit = retUnit.clone();
          }

          if (!retUnit) {
            let origCode = uCode;
            let origUnit = null;
            let exp = null;
            let pfxCode = null;
            let pfxObj = null;
            let pfxVal = null;
            let pfxExp = null; // Look first for an exponent.  If we got one, separate it out and
            // try to get the unit again

            let codeAndExp = this._isCodeWithExponent(uCode);

            if (codeAndExp) {
              uCode = codeAndExp[0];
              exp = codeAndExp[1];
              origUnit = this.utabs_.getUnitByCode(uCode);
            } // If we still don't have a unit, separate out the prefix, if any,
            // and try without it.


            if (!origUnit) {
              // Try for a single character prefix first.
              pfxCode = uCode.charAt(0);
              pfxObj = this.pfxTabs_.getPrefixByCode(pfxCode); // if we got a prefix, get its info and remove it from the unit code

              if (pfxObj) {
                pfxVal = pfxObj.getValue();
                pfxExp = pfxObj.getExp();
                let pCodeLen = pfxCode.length;
                uCode = uCode.substr(pCodeLen); // try again for the unit

                origUnit = this.utabs_.getUnitByCode(uCode); // If we still don't have a unit, see if the prefix could be the
                // two character "da" (deka) prefix.  That's the only prefix with
                // two characters, and without this check it's interpreted as "d"
                // (deci) and the "a" is considered part of the unit code.

                if (!origUnit && pfxCode == 'd' && uCode.substr(0, 1) == 'a') {
                  pfxCode = 'da';
                  pfxObj = this.pfxTabs_.getPrefixByCode(pfxCode);
                  pfxVal = pfxObj.getValue();
                  uCode = uCode.substr(1); // try one more time for the unit

                  origUnit = this.utabs_.getUnitByCode(uCode);
                }
              } // end if we found a prefix

            } // end if we didn't get a unit after removing an exponent
            // If we still haven't found anything, we're done looking.
            // (We tried with the full unit string, with the unit string
            // without the exponent, the unit string without a prefix,
            // common errors, etc. That's all we can try).


            if (!origUnit) {
              retUnit = null; // BUT if the user asked for suggestions, at least look for them

              if (this.suggestions_) {
                let suggestStat = this._getSuggestions(origCode);
              } else {
                this.retMsg_.push(`${origCode} is not a valid UCUM code.`);
              }
            } else {
              // Otherwise we found a unit object.  Clone it and then apply the
              // prefix and exponent, if any, to it.  And remove the guidance.
              retUnit = origUnit.clone();
              retUnit.guidance_ = '';
              let theDim = retUnit.getProperty('dim_');
              let theMag = retUnit.getProperty('magnitude_');
              let theName = retUnit.getProperty('name_');
              let theCiCode = retUnit.getProperty('ciCode_');
              let thePrintSymbol = retUnit.getProperty('printSymbol_'); // If there is an exponent for the unit, apply it to the dimension
              // and magnitude now

              if (exp) {
                exp = parseInt(exp);
                let expMul = exp;
                if (theDim) theDim = theDim.mul(exp);
                theMag = Math.pow(theMag, exp);
                retUnit.assignVals({
                  'magnitude_': theMag
                }); // If there is also a prefix, apply the exponent to the prefix.

                if (pfxObj) {
                  // if the prefix base is 10 it will have an exponent.  Multiply
                  // the current prefix exponent by the exponent for the unit
                  // we're working with.  Then raise the prefix value to the level
                  // defined by the exponent.
                  if (pfxExp) {
                    expMul *= pfxObj.getExp();
                    pfxVal = Math.pow(10, expMul);
                  } // If the prefix base is not 10, it won't have an exponent.
                  // At the moment I don't see any units using the prefixes
                  // that aren't base 10.   But if we get one the prefix value
                  // will be applied to the magnitude (below) if the unit does
                  // not have a conversion function, and to the conversion prefix
                  // if it does.

                } // end if there's a prefix as well as the exponent

              } // end if there's an exponent
              // Now apply the prefix, if there is one, to the conversion
              // prefix or the magnitude


              if (pfxObj) {
                if (retUnit.cnv_) {
                  retUnit.assignVals({
                    'cnvPfx_': pfxVal
                  });
                } else {
                  theMag *= pfxVal;
                  retUnit.assignVals({
                    'magnitude_': theMag
                  });
                }
              } // if we have a prefix and/or an exponent, add them to the unit
              // attributes - name, csCode, ciCode and print symbol


              let theCode = retUnit.csCode_;

              if (pfxObj) {
                theName = pfxObj.getName() + theName;
                theCode = pfxCode + theCode;
                theCiCode = pfxObj.getCiCode() + theCiCode;
                thePrintSymbol = pfxObj.getPrintSymbol() + thePrintSymbol;
                retUnit.assignVals({
                  'name_': theName,
                  'csCode_': theCode,
                  'ciCode_': theCiCode,
                  'printSymbol_': thePrintSymbol
                });
              }

              if (exp) {
                let expStr = exp.toString();
                retUnit.assignVals({
                  'name_': theName + '<sup>' + expStr + '</sup>',
                  'csCode_': theCode + expStr,
                  'ciCode_': theCiCode + expStr,
                  'printSymbol_': thePrintSymbol + '<sup>' + expStr + '</sup>'
                });
              }
            } // end if an original unit was found (without prefix and/or exponent)

          } // end if we didn't get a unit for the full unit code (w/out modifiers)

        } // end if we didn't find the unit on the first try, before parsing


    return [retUnit, origString];
  } // end _makeUnit

  /**
   * This method handles unit creation when an annotation is included
   * in the unit string.  This basically isolates and retrieves the
   * annotation and then calls _makeUnit to try to get a unit from
   * any text that precedes or follows the annotation.
   *
   * @param uCode the string defining the unit
   * @param origString the original full string submitted to parseString
   * @returns the unit object found, or null if one could not be found
   *
   * the this.retMsg_ array will be updated with any user messages
   *   (informational, error or warning) generated by this or called methods
   */


  _getUnitWithAnnotation(uCode, origString) {
    let retUnit = null; // Get the annotation and anything that precedes or follows it.

    let annoRet = this._getAnnoText(uCode, origString);

    let annoText = annoRet[0];
    let befAnnoText = annoRet[1];
    let aftAnnoText = annoRet[2]; // Add the warning about annotations - just once.

    if (this.bracesMsg_ && this.retMsg_.indexOf(this.bracesMsg_) === -1) this.retMsg_.push(this.bracesMsg_); // If there's no text before or after the annotation, it's probably
    // something that should be interpreted as a 1, e.g., {KCT'U}.
    // HOWEVER, it could also be a case where someone used braces instead
    // of brackets, e.g., {degF} instead of [degF].  Check for that before
    // we assume it should be a 1.

    let msgLen = this.retMsg_.length;

    if (!befAnnoText && !aftAnnoText) {
      let tryBrackets = '[' + annoText.substring(1, annoText.length - 1) + ']';

      let mkUnitRet = this._makeUnit(tryBrackets, origString); // If we got back a unit, assign it to the returned unit, and add
      // a message to advise the user that brackets should enclose the code


      if (mkUnitRet[0]) {
        retUnit = mkUnitRet[0];
        origString = origString.replace(annoText, tryBrackets);
        this.retMsg_.push(`${annoText} is not a valid unit expression, but ` + `${tryBrackets} is.\n` + this.vcMsgStart_ + `${tryBrackets} (${retUnit.name_})${this.vcMsgEnd_}`);
      } // Otherwise assume that this should be interpreted as a 1
      else {
          // remove error message generated for trybrackets
          if (this.retMsg_.length > msgLen) {
            this.retMsg_.pop();
          }

          uCode = 1;
          retUnit = 1;
        }
    } // end if it's only an annotation
    else {
        // if there's text before and no text after, assume the text before
        // the annotation is the unit code (with an annotation following it).
        // Call _makeUnit for the text before the annotation.
        if (befAnnoText && !aftAnnoText) {
          // make sure that what's before the annoText is not a number, e.g.,
          // /100{cells}.  But f it is a number, just set the return unit to
          // the number.
          if (intUtils_.isIntegerUnit(befAnnoText)) {
            retUnit = befAnnoText;
          } // Otherwise try to find a unit
          else {
              let mkUnitRet = this._makeUnit(befAnnoText, origString); // if a unit was returned


              if (mkUnitRet[0]) {
                retUnit = mkUnitRet[0];
                retUnit.csCode_ += annoText;
                origString = mkUnitRet[1];
              } // Otherwise add a not found message
              else {
                  this.retMsg_.push(`Unable to find a unit for ${befAnnoText} that ` + `precedes the annotation ${annoText}.`);
                }
            }
        } // else if there's only text after the annotation, try for a unit
        // from the after text and assume the user put the annotation in
        // the wrong place (and tell them)
        else if (!befAnnoText && aftAnnoText) {
            // Again, test for a number and if it is a number, set the return
            // unit to the number.
            if (intUtils_.isIntegerUnit(aftAnnoText)) {
              retUnit = aftAnnoText + annoText;
              this.retMsg_.push(`The annotation ${annoText} before the ``${aftAnnoText} is invalid.\n` + this.vcMsgStart_ + retUnit + this.vcMsgEnd_);
            } else {
              let mkUnitRet = this._makeUnit(aftAnnoText, origString);

              if (mkUnitRet[0]) {
                retUnit = mkUnitRet[0];
                retUnit.csCode_ += annoText;
                origString = retUnit.csCode_;
                this.retMsg_.push(`The annotation ${annoText} before the unit ` + `code is invalid.\n` + this.vcMsgStart_ + retUnit.csCode_ + this.vcMsgEnd_);
              } // Otherwise add a not found message
              else {
                  this.retMsg_.push(`Unable to find a unit for ${befAnnoText} that ` + `follows the annotation ${annoText}.`);
                }
            }
          } // else it's got text before AND after the annotation.  Now what?
          // For now this is an error.  This may be a case of a missing
          // operator but that is not handled yet.
          else {
              this.retMsg_.push(`Unable to find a unit for ${befAnnoText}${annoText}` + `${aftAnnoText}.\nWe are not sure how to interpret text both before ` + `and after the annotation.  Sorry`);
            }
      } // else if there's text before/and or after the annotation


    return [retUnit, origString];
  } // end _getUnitWithAnnotations

  /**
   * Performs unit arithmetic for the units in the units array.  That array
   * contains units/numbers and the operators (division or multiplication) to
   * be performed on each unit/unit or unit/number pair in the array.  This
   * should only be called from within this class (or by test code).
   *
   * @params uArray the array that contains the units, numbers and operators
   *  derived from the unit string passed in to parseString
   * @param origString the original string to be parsed; used to provide
   *  context for messages
   *
   * @returns a single unit object that is the result of the unit arithmetic
   *
   * the this.retMsg_ array will be updated with any user messages
   *   (informational, error or warning) generated by this or called methods
   */


  _performUnitArithmetic(uArray, origString) {
    let finalUnit = uArray[0]['un'];

    if (intUtils_.isIntegerUnit(finalUnit)) {
      finalUnit = new Unit({
        'csCode_': finalUnit,
        'magnitude_': Number(finalUnit),
        'name_': finalUnit
      });
    }

    let uLen = uArray.length;
    let endProcessing = false; // Perform the arithmetic for the units, starting with the first 2 units.
    // We only need to do the arithmetic if we have more than one unit.

    for (let u2 = 1; u2 < uLen && !endProcessing; u2++) {
      let nextUnit = uArray[u2]['un'];

      if (intUtils_.isIntegerUnit(nextUnit)) {
        nextUnit = new Unit({
          'csCode_': nextUnit,
          'magnitude_': Number(nextUnit),
          'name_': nextUnit
        });
      }

      if (nextUnit === null || typeof nextUnit !== 'number' && !nextUnit.getProperty) {
        let msgString = `Unit string (${origString}) contains unrecognized ` + 'element';

        if (nextUnit) {
          msgString += ` (${this.openEmph_}${nextUnit.toString()}` + `${this.closeEmph_})`;
        }

        msgString += '; could not parse full string.  Sorry';
        this.retMsg_.push(msgString);
        endProcessing = true;
      } else {
        try {
          // Is the operation division?
          let thisOp = uArray[u2]['op'];
          let isDiv = thisOp === '/'; // Perform the operation.  Both the finalUnit and nextUnit
          // are unit objects.

          isDiv ? finalUnit = finalUnit.divide(nextUnit) : finalUnit = finalUnit.multiplyThese(nextUnit);
        } catch (err) {
          this.retMsg_.unshift(err.message);
          endProcessing = true;
          finalUnit = null;
        }
      } // end if we have another valid unit/number to process

    } // end do for each unit after the first one


    return finalUnit;
  } // end _performUnitArithmetic

  /**
   * This tests a string to see if it starts with characters and ends with
   * digits.  This is used to test for an exponent on a UCUM code (or what
   * we think might be a UCUM code).  This is broken out to a separate
   * function so that the regular expression can be verified to provide the
   * results we expect, in case someone changes it.  (Per Paul Lynch)
   * See "Test _isCodeWithExponent method" in testUnitString.spec.js
   *
   * This particular regex has been tweaked several times.  This one
   * works with the following test strings:
   * "m[H2O]-21 gives ["m[H2O]-21", "m[H2O]", "-21"]
   * "m[H2O]+21 gives ["m[H2O]+21", "m[H2O]", "+21"]
   * "m[H2O]21 gives ["m[H2O]-21", "m[H2O]", "21"]
   * "s2" gives ["s2", "s, "2"]
   * "kg" gives null
   * "m[H2O]" gives null
   * "m[H2O]23X" gives null
   *
   * @params uCode the code being tested
   * @returns an array containing: (1) the code without the exponent (or
   *  trailing number); and (2) the exponent/trailing number.  Returns null
   *  if there is no trailing number or something follows the trailing
   *  number, or if the first part is not characters.
   */


  _isCodeWithExponent(uCode) {
    let ret = [];
    let res = uCode.match(/(^[^\-\+]+?)([\-\+\d]+)$/); // If we got a return with an exponent, separate the exponent from the
    // unit and return both (as separate values)

    if (res && res[2] && res[2] !== "") {
      ret.push(res[1]);
      ret.push(res[2]);
    } // end if we got an exponent
    else {
        ret = null;
      }

    return ret;
  } // end _isCodeWithExponent


} // end class UnitString

/**
 *  This function exists ONLY until the original UnitString constructor
 *  is called for the first time.  It's defined here in case getInstance
 *  is called before the constructor.   This calls the constructor.
 *
 *  The constructor redefines the getInstance function to return the
 *  singleton UnitString object.  This is based on the UnitTables singleton
 *  implementation; see more detail in the UnitTables constructor description.
 *
 *  @return the singleton UnitString object.
 */


exports.UnitString = UnitString;

UnitString.getInstance = function () {
  return new UnitString();
};
/*
// Perform the first request for the object, to set the getInstance method.
UnitString.getInstance();

*/


},{"./config.js":50,"./prefixTables.js":54,"./ucumInternalUtils.js":56,"./unit.js":60,"./unitTables.js":62}],62:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnitTables = void 0;

/**
 * This class manages Hashtables that provide references to
 * defined units.
 *
 * @author Lee Mericle, based on java version by Gunther Schadow
 *
 */
var Ucum = require('./config.js').Ucum;

class UnitTablesFactory {
  /**
   * Constructor.  This creates the empty unit tables (hashes) once. After the
   * tables are created, it redefines this constructor to throw an error
   * stating that the constructor is no longer available and that the
   * getInstance function must be used.   Here's a description of the first
   * and then all subsequent calls to this constructor.
   *
   * First call to constructor:
   * 1. creates  OBJECT1
   * 2. initializes attributes of OBJECT1
   * 3. stores reference to OBJECT1.prototype in holdthis local variable
   * 4. redefines OBJECT1 as a function that throws an error
   * 5. defines the getInstance function (which is also defined outside of
   *    the class definition - see below).
   *
   * All subsequent calls to constructor:
   * 1. throw error message referring to getInstance
   * 2. call getInstance, returns this - which is OBJECT1.
   */
  constructor() {
    /**
     * Tracks units by name
     * @type hash - key is the name;
     *              value is an array of references to the Unit objects
     *              with the name.  More than one unit may have the same
     *              name, e.g., "second", which is shared by the base unit
     *              with the code = "s" and the unit with code = "'".
     */
    this.unitNames_ = {};
    /**
     * Tracks units by code using case-sensitive version.
     *
     * @type hash - key is the code;
     *              value is the reference to the Unit object.  Codes must
     *              be unique.
     */

    this.unitCodes_ = {};
    /**
     * Keeps track of the order in which units are defined.  The order is
     * important because unit definitions build on previous definitions.
     *
     * @type {Array}
     */

    this.codeOrder_ = [];
    /**
     * Tracks units by unit strings, e.g., cm-1
     *
     * @type hash - key is the unit string
     *              value is an array of unit objects with that ciUnitString.
     */

    this.unitStrings_ = {};
    /**
     * Tracks units by Dimension vector
     *
     * @type hash - key is the dimension vector (not the object, just the
     *              vector);
     *              value is an array of references to the Unit objects
     *              with that vector.  More than one unit may have the same
     *              unit vector, and this can be used to provide a list
     *              of commensurable units.
     */

    this.unitDimensions_ = {};
    /**
     * Maps synonyms to units.   Not built until first requested.
     *
     * @type hash - key is the synonym
     *              value is an array of references to Unit objects that
     *              include that synonym.
     */

    this.unitSynonyms_ = {};
    /*
     * Holds onto the index of the index of the dimension vector flag for
     * the base mass unit (gram).  This is set when the base unit (gram) is
     * created, and is stored here so that it doesn't have to be found
     * over and over again to try to determine whether or not a unit is
     * mass-based (for mole<->mass conversions)
     *
     * @type integer
     */

    this.massDimIndex_ = 0;
  }
  /**
   * Provides the number of unit objects written to the tables, using the
   * codes table since codes must be unique.
   *
   * @returns count of the number of unit objects in the unitCodes_ table.
   */


  unitsCount() {
    return Object.keys(this.unitCodes_).length;
  }
  /**
   * Adds a Unit object to the tables.
   *
   * @param theUnit the unit to be added
   * @returns nothing
   * @throws passes on an error if one is thrown by the called functions for
   *  a problem with the unit code or unit name
   */


  addUnit(theUnit) {
    let uName = theUnit['name_'];

    if (uName) {
      this.addUnitName(theUnit);
    }

    this.addUnitCode(theUnit);
    this.addUnitString(theUnit);

    try {
      if (theUnit['dim_'].getProperty('dimVec_')) this.addUnitDimension(theUnit);
    } catch (err) {// do nothing - throws error if the property is null
      // and that's OK here.
    }
  } // end addUnit

  /**
   * Adds a Unit object to the unitNames_ table.  More than one unit
   * can have the same name, e.g., the two units with the name "second",
   * where the code for one of them is 's' and the code for the other is
   * "'".  Because of this, an array of unit objects is stored for the
   * name.  In most cases it will be an array of one object, but this
   * clarifies that there may be more than one.
   *
   * @param theUnit the unit to be added
   * @returns nothing
   * @throws an error if the unit has no name
   */


  addUnitName(theUnit) {
    let uName = theUnit['name_'];

    if (uName) {
      if (this.unitNames_[uName]) this.unitNames_[uName].push(theUnit);else this.unitNames_[uName] = [theUnit];
    } else throw new Error('UnitTables.addUnitName called for a unit with no name.  ' + `Unit code = ${theUnit['csCode_']}.`);
  } // end addUnitName

  /**
   * Adds a Unit object to the unitCodes_, unitUcCodes_, unitLcCodes_ and
   * codeOrder_ tables.  This also sets the mass dimension index when the
   * base mass unit (gram) is read.
   *
   * @param theUnit the unit to be added
   * @returns nothing
   * @throws an error if the unitCodes_ table already contains a unit with
   *  the code
   */


  addUnitCode(theUnit) {
    let uCode = theUnit['csCode_'];

    if (uCode) {
      if (this.unitCodes_[uCode]) throw new Error(`UnitTables.addUnitCode called, already contains entry for ` + `unit with code = ${uCode}`);else {
        this.unitCodes_[uCode] = theUnit;
        this.codeOrder_.push(uCode);

        if (uCode == 'g') {
          let dimVec = theUnit.dim_.dimVec_;
          let d = 0;

          for (; d < dimVec.length && dimVec[d] < 1; d++);

          this.massDimIndex_ = d;
        }
      }
    } else throw new Error('UnitTables.addUnitCode called for unit that has ' + 'no code.');
  } // end addUnitCode

  /**
   * Adds a unit object to the unitStrings_ table.  More than one unit
   * can have the same string, so an array of unit objects is stored
   * for the string.  The unit string is the string that creates a non-base
   * unit, e.g., a Newton has a unit code of N, a name of Newton, and a
   * unitString of kg.m/s2.
   *
   * If the unit has no string, nothing is stored and no error is reported.
   *
   * @param theUnit the unit to be added
   * @returns nothing
   */


  addUnitString(theUnit) {
    let uString = null;
    if (Ucum.caseSensitive_ == true) uString = theUnit['csUnitString_'];else uString = theUnit['ciUnitString_'];

    if (uString) {
      let uEntry = {
        mag: theUnit['baseFactorStr_'],
        unit: theUnit
      };
      if (this.unitStrings_[uString]) this.unitStrings_[uString].push(uEntry);else this.unitStrings_[uString] = [uEntry];
    }
  } // end addUnitString

  /**
   * Adds a Unit object to the unitDimensions_ table.  More than one unit
   * can have the same dimension (commensurable units have the same dimension).
   * Because of this, an array of unit objects is stored for the
   * dimension.
   *
   * @param theUnit the unit to be added
   * @returns nothing
   * @throws an error if the unit has no dimension
   */


  addUnitDimension(theUnit) {
    let uDim = theUnit['dim_'].getProperty('dimVec_');

    if (uDim) {
      if (this.unitDimensions_[uDim]) this.unitDimensions_[uDim].push(theUnit);else this.unitDimensions_[uDim] = [theUnit];
    } else throw new Error('UnitTables.addUnitDimension called for a unit with no dimension.  ' + `Unit code = ${theUnit['csCode_']}.`);
  } // end addUnitDimension

  /**
   * Builds the unitSynonyms_ table. This is called the first time the
   * getUnitsBySynonym method is called.  The table/hash contains each word
   * (once) from each synonym as well as each word from each unit name.
   *
   * Hash keys are the words.  Hash values are an array of unit codes for
   * each unit that has that word in its synonyms or name.
   *
   * @returns nothing
   */


  buildUnitSynonyms() {
    for (let code in this.unitCodes_) {
      let theUnit = this.unitCodes_[code];
      let uSyns = theUnit.synonyms_; // If the current unit has synonyms, process each synonym (often multiples)

      if (uSyns) {
        let synsAry = uSyns.split(';');

        if (synsAry[0] !== '') {
          let aLen = synsAry.length;

          for (let a = 0; a < aLen; a++) {
            let theSyn = synsAry[a].trim(); // call addSynonymCodes to process each word in the
            // synonym, e.g., "British fluid ounces"

            this.addSynonymCodes(code, theSyn);
          } // end do for each synonym

        } // end if the current unit has a non-null synonym attribute

      } // end if the unit has any synonyms
      // Now call addSynonymCodes to process each word in the unit's name


      this.addSynonymCodes(code, theUnit.name_);
    } // end do for each unit

  } // end buildUnitSynonyms

  /**
   * Adds unit code entries to the synonyms table for a string containing
   * one or more words to be considered as synonyms.
   *
   * @param theCode the unit code to be connected to the synonyms
   * @param theSynonyms a string containing one or more words to be
   *  considered synonyms (and thus to be added to the unitSynonyms hash).
   */


  addSynonymCodes(theCode, theSynonyms) {
    let words = theSynonyms.split(' ');
    let wLen = words.length;

    for (let w = 0; w < wLen; w++) {
      let word = words[w]; // if there is already a synonyms entry for the word,
      // get the array of unit codes currently assigned to
      // the word and add the code for the current word to
      // the synonyms array if it's not already there.

      if (this.unitSynonyms_[word]) {
        let synCodes = this.unitSynonyms_[word];

        if (synCodes.indexOf(theCode) === -1) {
          this.unitSynonyms_[word].push(theCode);
        }
      } // else there are no synonyms entry for the word.  Create a
      // synonyms array for the word, setting it to contain the unit code.
      else {
          this.unitSynonyms_[word] = [theCode];
        }
    } // end do for each word in the synonyms being processed

  } // end addSynonymCodes

  /**
   *  Returns a unit object with a case-sensitive code matching the
   *  uCode parameter, or null if no unit is found with that code.
   *
   *  @param uCode the code of the unit to be returned
   *  @returns the unit object or null if it is not found
   */


  getUnitByCode(uCode) {
    let retUnit = null;

    if (uCode) {
      retUnit = this.unitCodes_[uCode];
    }

    return retUnit;
  }
  /**
   *  Returns a array of unit objects based on the unit's name.  Usually this
   *  will be an array of one, but there may be more, since unit names are
   *  not necessarily unique.
   *
   *  @param uName the name of the unit to be returned.  If more than one
   *  unit has the same name and you only want one specific unit, append the
   *  csCode of the unit you want to the end of the name, separated by the
   *  Ucum.codeSep_ value, e.g., inch - [in_i] vs. inch - [in_us].
   *  @returns null if no unit was found for the specified name OR an array of
   *  unit objects with the specified name.  Normally this will be an array
   *  of one object.
   *  @throws an error if no name is provided to search on
   */


  getUnitByName(uName) {
    if (uName === null || uName === undefined) {
      throw new Error('Unable to find unit by name because no name was provided.');
    }

    let sepPos = uName.indexOf(Ucum.codeSep_);
    let uCode = null;

    if (sepPos >= 1) {
      uCode = uName.substr(sepPos + Ucum.codeSep_.length);
      uName = uName.substr(0, sepPos);
    }

    let retUnits = this.unitNames_[uName];

    if (retUnits) {
      let uLen = retUnits.length;

      if (uCode && uLen > 1) {
        let i = 0;

        for (; retUnits[i].csCode_ !== uCode && i < uLen; i++);

        if (i < uLen) retUnits = [retUnits[i]];else {
          retUnits = null;
        }
      } // end if we need to find both a name and a code

    } // end if we got an array of units


    return retUnits;
  } // end getUnitByName

  /**
   *  Returns an array of unit objects with the specified unit string.
   *  The array may contain one or more unit reference objects.
   *  Or none, if no units have a matching unit string (which is not
   *  considered an error)
   *
   *  @param name the name of the unit to be returned
   *  @returns the array of unit references or null if none were found
   */


  getUnitByString(uString) {
    let retAry = null;

    if (uString) {
      retAry = this.unitStrings_[uString];
      if (retAry === undefined) retAry = null;
    }

    return retAry;
  }
  /**
   *  Returns a array of unit objects based on the unit's dimension vector.
   *
   *  @param uName the dimension vector of the units to be returned.
   *
   *  @returns null if no unit was found for the specified vector OR an array of
   *  one or more unit objects with the specified vector.
   *  @throws an error if no vector is provided to search on
   *  logs an error to the console if no unit is found
   */


  getUnitsByDimension(uDim) {
    let unitsArray = null;

    if (uDim === null || uDim === undefined) {
      throw new Error('Unable to find unit by because no dimension ' + 'vector was provided.');
    }

    unitsArray = this.unitDimensions_[uDim];

    if (unitsArray === undefined || unitsArray === null) {
      console.log(`Unable to find unit with dimension = ${uDim}`);
    }

    return unitsArray;
  } // end getUnitsByDimension

  /**
   *  Returns a array of unit objects that include the specified synonym.
   *
   *  @param uSyn the synonym of the units to be returned.
   *
   *  @returns an object with two of the following three elements:
   *   'status' will be error, failed or succeeded
   *   'msg' will be included for returns with status = error or failed and
   *     will explain why the request did not return any units
   *   'units' any array of unit objects with the specified synonym will be
   *     returned for requests with status = succeeded
   */


  getUnitBySynonym(uSyn) {
    let retObj = {};
    let unitsArray = [];

    try {
      if (uSyn === null || uSyn === undefined) {
        retObj['status'] = 'error';
        throw new Error('Unable to find unit by synonym because no synonym ' + 'was provided.');
      } // If this is the first request for a unit by synonym, build the hash map


      if (Object.keys(this.unitSynonyms_).length === 0) {
        this.buildUnitSynonyms();
      }

      let foundCodes = [];
      foundCodes = this.unitSynonyms_[uSyn];

      if (foundCodes) {
        retObj['status'] = 'succeeded';
        let fLen = foundCodes.length;

        for (let f = 0; f < fLen; f++) {
          unitsArray.push(this.unitCodes_[foundCodes[f]]);
        }

        retObj['units'] = unitsArray;
      }

      if (unitsArray.length === 0) {
        retObj['status'] = 'failed';
        retObj['msg'] = `Unable to find any units with synonym = ${uSyn}`;
      }
    } catch (err) {
      retObj['msg'] = err.message;
    }

    return retObj;
  } // end getUnitBySynonym

  /**
   * Gets a list of all unit names in the Unit tables
   *
   * @returns an array of the unit names
   */


  getAllUnitNames() {
    return Object.keys(this.unitNames_);
  } // end getAllUnitNames

  /**
   * Gets a list of all unit names in the tables.  Where more than one
   * unit has the same name, the unit code, in parentheses, is appended
   * to the end of the name.
   *
   * @returns {Array}
   */


  getUnitNamesList() {
    let nameList = [];
    let codes = Object.keys(this.unitCodes_);
    codes.sort(this.compareCodes);
    let uLen = codes.length;

    for (let i = 0; i < uLen; i++) {
      nameList[i] = codes[i] + Ucum.codeSep_ + this.unitCodes_[codes[i]].name_;
    } // end do for each code


    return nameList;
  }
  /*
   * Returns the mass dimension index
   * @returns this.massDimIndex_
   */


  getMassDimensionIndex() {
    return this.massDimIndex_;
  }
  /**
   * This provides a sort function for unit codes so that sorting ignores
   * square brackets and case.
   *
   * @param a first value
   * @param b second value
   * @returns -1 if a is should fall before b; otherwise 1.
   */


  compareCodes(a, b) {
    a = a.replace(/[\[\]]/g, '');
    a = a.toLowerCase();
    b = b.replace(/[\[\]]/g, '');
    b = b.toLowerCase();
    return a < b ? -1 : 1;
  }
  /**
   * Gets a list of all unit codes in the Unit tables
   *
   * @returns an array of the unit names
   */


  getAllUnitCodes() {
    return Object.keys(this.unitCodes_);
  } // end getAllUnitNames

  /**
   * This is used to get all unit objects.  Currently it is used
   * to get the objects to write to the json ucum definitions file
   * that is used to provide prefix and unit definition objects for
   * conversions and validations.
   *
   * @returns an array containing all unit objects, ordered by definition
   * order
   */


  allUnitsByDef() {
    let unitsList = [];
    let uLen = this.codeOrder_.length;

    for (let u = 0; u < uLen; u++) {
      unitsList.push(this.getUnitByCode(this.codeOrder_[u]));
    }

    return unitsList;
  } // end allUnitsByDef

  /**
   * This is used to get all unit objects, ordered by unit name.  Currently it
   * is used to create a csv list of all units.
   * @param sep separator character (or string) to be used to separate each
   *  column in the output.  Optional, defaults to '|' if not specified.
   *  (Used to use ; but the synonyms use that extensively).  Don't use a
   *  comma or any other punctuation found in the output data.
   * @returns a buffer containing all unit objects, ordered by name
   * order
   */


  allUnitsByName(cols, sep) {
    if (sep === undefined || sep === null) sep = '|';
    let unitBuff = '';
    let unitsList = this.getAllUnitNames();
    let uLen = unitsList.length;
    let cLen = cols.length;

    for (let i = 0; i < uLen; i++) {
      let nameRecs = this.getUnitByName(unitsList[i]);

      for (let u = 0; u < nameRecs.length; u++) {
        let rec = nameRecs[u];

        for (let c = 0; c < cLen; c++) {
          if (c > 0) unitBuff += sep;

          if (cols[c] === 'dim_') {
            if (rec.dim_ !== null && rec.dim_ !== undefined && rec.dim_.dimVec_ instanceof Array) unitBuff += '[' + rec.dim_.dimVec_.join(',') + ']';else unitBuff += '';
          } else {
            let cbuf = rec[cols[c]];
            if (typeof cbuf === 'string') unitBuff += cbuf.replace(/[\n\r]/g, ' ');else unitBuff += cbuf;
          }
        } // end do for each column requested


        unitBuff += '\r\n';
      } // end do for each unit in the unit names array

    }

    return unitBuff;
  } // end allUnitsByName

  /**
   * This creates a list of all units in the tables.  It uses the byCode
   * table, and uses the codeOrder_ array to determine the order in which
   * the units are listed.
   *
   * @param doLong boolean indicating how much to output.  If true, all data
   *  from the unit objects is included.   If false, only a few major values
   *  are included.
   * @param sep separator character (or string) to be used to separate each
   *  column in the output.  Optional, defaults to '|' if not specified.
   *  (Used to use ; but the synonyms use that extensively).
   * @returns {string} buffer containing all the listings
   */


  printUnits(doLong, sep) {
    if (doLong === undefined) doLong = false;
    if (sep === undefined) sep = '|';
    let codeList = '';
    let uLen = this.codeOrder_.length;
    let unitString = 'csCode' + sep;

    if (doLong) {
      unitString += 'ciCode' + sep;
    }

    unitString += 'name' + sep;
    if (doLong) unitString += 'isBase' + sep;
    unitString += 'magnitude' + sep + 'dimension' + sep + 'from unit(s)' + sep + 'value' + sep + 'function' + sep;
    if (doLong) unitString += 'property' + sep + 'printSymbol' + sep + 'synonyms' + sep + 'source' + sep + 'class' + sep + 'isMetric' + sep + 'variable' + sep + 'isSpecial' + sep + 'isAbitrary' + sep;
    unitString += 'comment';
    codeList = unitString + '\n';

    for (let u = 0; u < uLen; u++) {
      let curUnit = this.getUnitByCode(this.codeOrder_[u]);
      unitString = this.codeOrder_[u] + sep;

      if (doLong) {
        unitString += curUnit.getProperty('ciCode_') + sep;
      }

      unitString += curUnit.getProperty('name_') + sep;

      if (doLong) {
        if (curUnit.getProperty('isBase_')) unitString += 'true' + sep;else unitString += 'false' + sep;
      }

      unitString += curUnit.getProperty('magnitude_') + sep;
      let curDim = curUnit.getProperty('dim_');

      if (curDim) {
        unitString += curDim.dimVec_ + sep;
      } else {
        unitString += 'null' + sep;
      }

      if (curUnit.csUnitString_) unitString += curUnit.csUnitString_ + sep + curUnit.baseFactor_ + sep;else unitString += 'null' + sep + 'null' + sep;
      if (curUnit.cnv_) unitString += curUnit.cnv_ + sep;else unitString += 'null' + sep;

      if (doLong) {
        unitString += curUnit.getProperty('property_') + sep + curUnit.getProperty('printSymbol_') + sep + curUnit.getProperty('synonyms_') + sep + curUnit.getProperty('source_') + sep + curUnit.getProperty('class_') + sep + curUnit.getProperty('isMetric_') + sep + curUnit.getProperty('variable_') + sep + curUnit.getProperty('isSpecial_') + sep + curUnit.getProperty('isArbitrary_') + sep;
      }

      if (curUnit.defError_) unitString += 'problem parsing this one, deferred to later.';
      codeList += unitString + '\n';
    }

    return codeList;
  }

} // end UnitTablesFactory
// Create a singleton instance and (to preserve the existing API) an object that
// provides that instance via getInstance().


var unitTablesInstance = new UnitTablesFactory();
const UnitTables = {
  getInstance: function () {
    return unitTablesInstance;
  }
};
exports.UnitTables = UnitTables;


},{"./config.js":50}],63:[function(require,module,exports){
'use strict';

module.exports = Number.isFinite || function (value) {
	return !(typeof value !== 'number' || value !== value || value === Infinity || value === -Infinity);
};

},{}],64:[function(require,module,exports){
// https://github.com/paulmillr/es6-shim
// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isinteger
var isFinite = require("is-finite");
module.exports = Number.isInteger || function(val) {
  return typeof val === "number" &&
    isFinite(val) &&
    Math.floor(val) === val;
};

},{"is-finite":63}],65:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(n);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o) {
  var i = 0;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  i = o[Symbol.iterator]();
  return i.next.bind(i);
}

// these aren't really private, but nor are they really useful to document

/**
 * @private
 */
var LuxonError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(LuxonError, _Error);

  function LuxonError() {
    return _Error.apply(this, arguments) || this;
  }

  return LuxonError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * @private
 */


var InvalidDateTimeError = /*#__PURE__*/function (_LuxonError) {
  _inheritsLoose(InvalidDateTimeError, _LuxonError);

  function InvalidDateTimeError(reason) {
    return _LuxonError.call(this, "Invalid DateTime: " + reason.toMessage()) || this;
  }

  return InvalidDateTimeError;
}(LuxonError);
/**
 * @private
 */

var InvalidIntervalError = /*#__PURE__*/function (_LuxonError2) {
  _inheritsLoose(InvalidIntervalError, _LuxonError2);

  function InvalidIntervalError(reason) {
    return _LuxonError2.call(this, "Invalid Interval: " + reason.toMessage()) || this;
  }

  return InvalidIntervalError;
}(LuxonError);
/**
 * @private
 */

var InvalidDurationError = /*#__PURE__*/function (_LuxonError3) {
  _inheritsLoose(InvalidDurationError, _LuxonError3);

  function InvalidDurationError(reason) {
    return _LuxonError3.call(this, "Invalid Duration: " + reason.toMessage()) || this;
  }

  return InvalidDurationError;
}(LuxonError);
/**
 * @private
 */

var ConflictingSpecificationError = /*#__PURE__*/function (_LuxonError4) {
  _inheritsLoose(ConflictingSpecificationError, _LuxonError4);

  function ConflictingSpecificationError() {
    return _LuxonError4.apply(this, arguments) || this;
  }

  return ConflictingSpecificationError;
}(LuxonError);
/**
 * @private
 */

var InvalidUnitError = /*#__PURE__*/function (_LuxonError5) {
  _inheritsLoose(InvalidUnitError, _LuxonError5);

  function InvalidUnitError(unit) {
    return _LuxonError5.call(this, "Invalid unit " + unit) || this;
  }

  return InvalidUnitError;
}(LuxonError);
/**
 * @private
 */

var InvalidArgumentError = /*#__PURE__*/function (_LuxonError6) {
  _inheritsLoose(InvalidArgumentError, _LuxonError6);

  function InvalidArgumentError() {
    return _LuxonError6.apply(this, arguments) || this;
  }

  return InvalidArgumentError;
}(LuxonError);
/**
 * @private
 */

var ZoneIsAbstractError = /*#__PURE__*/function (_LuxonError7) {
  _inheritsLoose(ZoneIsAbstractError, _LuxonError7);

  function ZoneIsAbstractError() {
    return _LuxonError7.call(this, "Zone is an abstract class") || this;
  }

  return ZoneIsAbstractError;
}(LuxonError);

/**
 * @private
 */
var n = "numeric",
    s = "short",
    l = "long";
var DATE_SHORT = {
  year: n,
  month: n,
  day: n
};
var DATE_MED = {
  year: n,
  month: s,
  day: n
};
var DATE_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s
};
var DATE_FULL = {
  year: n,
  month: l,
  day: n
};
var DATE_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l
};
var TIME_SIMPLE = {
  hour: n,
  minute: n
};
var TIME_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n
};
var TIME_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var TIME_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};
var TIME_24_SIMPLE = {
  hour: n,
  minute: n,
  hour12: false
};
/**
 * {@link toLocaleString}; format like '09:30:23', always 24-hour.
 */

var TIME_24_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
  hour12: false
};
/**
 * {@link toLocaleString}; format like '09:30:23 EDT', always 24-hour.
 */

var TIME_24_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hour12: false,
  timeZoneName: s
};
/**
 * {@link toLocaleString}; format like '09:30:23 Eastern Daylight Time', always 24-hour.
 */

var TIME_24_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hour12: false,
  timeZoneName: l
};
/**
 * {@link toLocaleString}; format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
 */

var DATETIME_SHORT = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n
};
/**
 * {@link toLocaleString}; format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
 */

var DATETIME_SHORT_WITH_SECONDS = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_MED_WITH_SECONDS = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s,
  hour: n,
  minute: n
};
var DATETIME_FULL = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  timeZoneName: s
};
var DATETIME_FULL_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var DATETIME_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  timeZoneName: l
};
var DATETIME_HUGE_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};

/*
  This is just a junk drawer, containing anything used across multiple classes.
  Because Luxon is small(ish), this should stay small and we won't worry about splitting
  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
*/
/**
 * @private
 */
// TYPES

function isUndefined(o) {
  return typeof o === "undefined";
}
function isNumber(o) {
  return typeof o === "number";
}
function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}
function isString(o) {
  return typeof o === "string";
}
function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
} // CAPABILITIES

function hasIntl() {
  try {
    return typeof Intl !== "undefined" && Intl.DateTimeFormat;
  } catch (e) {
    return false;
  }
}
function hasFormatToParts() {
  return !isUndefined(Intl.DateTimeFormat.prototype.formatToParts);
}
function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
} // OBJECTS AND ARRAYS

function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}
function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return undefined;
  }

  return arr.reduce(function (best, next) {
    var pair = [by(next), next];

    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}
function pick(obj, keys) {
  return keys.reduce(function (a, k) {
    a[k] = obj[k];
    return a;
  }, {});
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
} // NUMBERS AND STRINGS

function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
} // x % n but takes the sign of n instead of x

function floorMod(x, n) {
  return x - n * Math.floor(x / n);
}
function padStart(input, n) {
  if (n === void 0) {
    n = 2;
  }

  if (input.toString().length < n) {
    return ("0".repeat(n) + input).slice(-n);
  } else {
    return input.toString();
  }
}
function parseInteger(string) {
  if (isUndefined(string) || string === null || string === "") {
    return undefined;
  } else {
    return parseInt(string, 10);
  }
}
function parseMillis(fraction) {
  // Return undefined (instead of 0) in these cases, where fraction is not set
  if (isUndefined(fraction) || fraction === null || fraction === "") {
    return undefined;
  } else {
    var f = parseFloat("0." + fraction) * 1000;
    return Math.floor(f);
  }
}
function roundTo(number, digits, towardZero) {
  if (towardZero === void 0) {
    towardZero = false;
  }

  var factor = Math.pow(10, digits),
      rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
} // DATE BASICS

function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
  var modMonth = floorMod(month - 1, 12) + 1,
      modYear = year + (month - modMonth) / 12;

  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
} // covert a calendar object to a local timestamp (epoch, but with the offset baked in)

function objToLocalTS(obj) {
  var d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond); // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that

  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }

  return +d;
}
function weeksInWeekYear(weekYear) {
  var p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7,
      last = weekYear - 1,
      p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
  return p1 === 4 || p2 === 3 ? 53 : 52;
}
function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else return year > 60 ? 1900 + year : 2000 + year;
} // PARSING

function parseZoneInfo(ts, offsetFormat, locale, timeZone) {
  if (timeZone === void 0) {
    timeZone = null;
  }

  var date = new Date(ts),
      intlOpts = {
    hour12: false,
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  };

  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }

  var modified = Object.assign({
    timeZoneName: offsetFormat
  }, intlOpts),
      intl = hasIntl();

  if (intl && hasFormatToParts()) {
    var parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find(function (m) {
      return m.type.toLowerCase() === "timezonename";
    });
    return parsed ? parsed.value : null;
  } else if (intl) {
    // this probably doesn't work for all locales
    var without = new Intl.DateTimeFormat(locale, intlOpts).format(date),
        included = new Intl.DateTimeFormat(locale, modified).format(date),
        diffed = included.substring(without.length),
        trimmed = diffed.replace(/^[, \u200e]+/, "");
    return trimmed;
  } else {
    return null;
  }
} // signedOffset('-5', '30') -> -330

function signedOffset(offHourStr, offMinuteStr) {
  var offHour = parseInt(offHourStr, 10); // don't || this because we want to preserve -0

  if (Number.isNaN(offHour)) {
    offHour = 0;
  }

  var offMin = parseInt(offMinuteStr, 10) || 0,
      offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
} // COERCION

function asNumber(value) {
  var numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue)) throw new InvalidArgumentError("Invalid unit value " + value);
  return numericValue;
}
function normalizeObject(obj, normalizer, nonUnitKeys) {
  var normalized = {};

  for (var u in obj) {
    if (hasOwnProperty(obj, u)) {
      if (nonUnitKeys.indexOf(u) >= 0) continue;
      var v = obj[u];
      if (v === undefined || v === null) continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }

  return normalized;
}
function formatOffset(offset, format) {
  var hours = Math.trunc(Math.abs(offset / 60)),
      minutes = Math.trunc(Math.abs(offset % 60)),
      sign = offset >= 0 ? "+" : "-";

  switch (format) {
    case "short":
      return "" + sign + padStart(hours, 2) + ":" + padStart(minutes, 2);

    case "narrow":
      return "" + sign + hours + (minutes > 0 ? ":" + minutes : "");

    case "techie":
      return "" + sign + padStart(hours, 2) + padStart(minutes, 2);

    default:
      throw new RangeError("Value format " + format + " is out of range for property format");
  }
}
function timeObject(obj) {
  return pick(obj, ["hour", "minute", "second", "millisecond"]);
}
var ianaRegex = /[A-Za-z_+-]{1,256}(:?\/[A-Za-z_+-]{1,256}(\/[A-Za-z_+-]{1,256})?)?/;

function stringify(obj) {
  return JSON.stringify(obj, Object.keys(obj).sort());
}
/**
 * @private
 */


var monthsLong = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var monthsShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
function months(length) {
  switch (length) {
    case "narrow":
      return monthsNarrow;

    case "short":
      return monthsShort;

    case "long":
      return monthsLong;

    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];

    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];

    default:
      return null;
  }
}
var weekdaysLong = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
var weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
var weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
function weekdays(length) {
  switch (length) {
    case "narrow":
      return weekdaysNarrow;

    case "short":
      return weekdaysShort;

    case "long":
      return weekdaysLong;

    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];

    default:
      return null;
  }
}
var meridiems = ["AM", "PM"];
var erasLong = ["Before Christ", "Anno Domini"];
var erasShort = ["BC", "AD"];
var erasNarrow = ["B", "A"];
function eras(length) {
  switch (length) {
    case "narrow":
      return erasNarrow;

    case "short":
      return erasShort;

    case "long":
      return erasLong;

    default:
      return null;
  }
}
function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}
function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}
function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric, narrow) {
  if (numeric === void 0) {
    numeric = "always";
  }

  if (narrow === void 0) {
    narrow = false;
  }

  var units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."]
  };
  var lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

  if (numeric === "auto" && lastable) {
    var isDay = unit === "days";

    switch (count) {
      case 1:
        return isDay ? "tomorrow" : "next " + units[unit][0];

      case -1:
        return isDay ? "yesterday" : "last " + units[unit][0];

      case 0:
        return isDay ? "today" : "this " + units[unit][0];

    }
  }

  var isInPast = Object.is(count, -0) || count < 0,
      fmtValue = Math.abs(count),
      singular = fmtValue === 1,
      lilUnits = units[unit],
      fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
  return isInPast ? fmtValue + " " + fmtUnit + " ago" : "in " + fmtValue + " " + fmtUnit;
}
function formatString(knownFormat) {
  // these all have the offsets removed because we don't have access to them
  // without all the intl stuff this is backfilling
  var filtered = pick(knownFormat, ["weekday", "era", "year", "month", "day", "hour", "minute", "second", "timeZoneName", "hour12"]),
      key = stringify(filtered),
      dateTimeHuge = "EEEE, LLLL d, yyyy, h:mm a";

  switch (key) {
    case stringify(DATE_SHORT):
      return "M/d/yyyy";

    case stringify(DATE_MED):
      return "LLL d, yyyy";

    case stringify(DATE_MED_WITH_WEEKDAY):
      return "EEE, LLL d, yyyy";

    case stringify(DATE_FULL):
      return "LLLL d, yyyy";

    case stringify(DATE_HUGE):
      return "EEEE, LLLL d, yyyy";

    case stringify(TIME_SIMPLE):
      return "h:mm a";

    case stringify(TIME_WITH_SECONDS):
      return "h:mm:ss a";

    case stringify(TIME_WITH_SHORT_OFFSET):
      return "h:mm a";

    case stringify(TIME_WITH_LONG_OFFSET):
      return "h:mm a";

    case stringify(TIME_24_SIMPLE):
      return "HH:mm";

    case stringify(TIME_24_WITH_SECONDS):
      return "HH:mm:ss";

    case stringify(TIME_24_WITH_SHORT_OFFSET):
      return "HH:mm";

    case stringify(TIME_24_WITH_LONG_OFFSET):
      return "HH:mm";

    case stringify(DATETIME_SHORT):
      return "M/d/yyyy, h:mm a";

    case stringify(DATETIME_MED):
      return "LLL d, yyyy, h:mm a";

    case stringify(DATETIME_FULL):
      return "LLLL d, yyyy, h:mm a";

    case stringify(DATETIME_HUGE):
      return dateTimeHuge;

    case stringify(DATETIME_SHORT_WITH_SECONDS):
      return "M/d/yyyy, h:mm:ss a";

    case stringify(DATETIME_MED_WITH_SECONDS):
      return "LLL d, yyyy, h:mm:ss a";

    case stringify(DATETIME_MED_WITH_WEEKDAY):
      return "EEE, d LLL yyyy, h:mm a";

    case stringify(DATETIME_FULL_WITH_SECONDS):
      return "LLLL d, yyyy, h:mm:ss a";

    case stringify(DATETIME_HUGE_WITH_SECONDS):
      return "EEEE, LLLL d, yyyy, h:mm:ss a";

    default:
      return dateTimeHuge;
  }
}

function stringifyTokens(splits, tokenToString) {
  var s = "";

  for (var _iterator = _createForOfIteratorHelperLoose(splits), _step; !(_step = _iterator()).done;) {
    var token = _step.value;

    if (token.literal) {
      s += token.val;
    } else {
      s += tokenToString(token.val);
    }
  }

  return s;
}

var _macroTokenToFormatOpts = {
  D: DATE_SHORT,
  DD: DATE_MED,
  DDD: DATE_FULL,
  DDDD: DATE_HUGE,
  t: TIME_SIMPLE,
  tt: TIME_WITH_SECONDS,
  ttt: TIME_WITH_SHORT_OFFSET,
  tttt: TIME_WITH_LONG_OFFSET,
  T: TIME_24_SIMPLE,
  TT: TIME_24_WITH_SECONDS,
  TTT: TIME_24_WITH_SHORT_OFFSET,
  TTTT: TIME_24_WITH_LONG_OFFSET,
  f: DATETIME_SHORT,
  ff: DATETIME_MED,
  fff: DATETIME_FULL,
  ffff: DATETIME_HUGE,
  F: DATETIME_SHORT_WITH_SECONDS,
  FF: DATETIME_MED_WITH_SECONDS,
  FFF: DATETIME_FULL_WITH_SECONDS,
  FFFF: DATETIME_HUGE_WITH_SECONDS
};
/**
 * @private
 */

var Formatter = /*#__PURE__*/function () {
  Formatter.create = function create(locale, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return new Formatter(locale, opts);
  };

  Formatter.parseFormat = function parseFormat(fmt) {
    var current = null,
        currentFull = "",
        bracketed = false;
    var splits = [];

    for (var i = 0; i < fmt.length; i++) {
      var c = fmt.charAt(i);

      if (c === "'") {
        if (currentFull.length > 0) {
          splits.push({
            literal: bracketed,
            val: currentFull
          });
        }

        current = null;
        currentFull = "";
        bracketed = !bracketed;
      } else if (bracketed) {
        currentFull += c;
      } else if (c === current) {
        currentFull += c;
      } else {
        if (currentFull.length > 0) {
          splits.push({
            literal: false,
            val: currentFull
          });
        }

        currentFull = c;
        current = c;
      }
    }

    if (currentFull.length > 0) {
      splits.push({
        literal: bracketed,
        val: currentFull
      });
    }

    return splits;
  };

  Formatter.macroTokenToFormatOpts = function macroTokenToFormatOpts(token) {
    return _macroTokenToFormatOpts[token];
  };

  function Formatter(locale, formatOpts) {
    this.opts = formatOpts;
    this.loc = locale;
    this.systemLoc = null;
  }

  var _proto = Formatter.prototype;

  _proto.formatWithSystemDefault = function formatWithSystemDefault(dt, opts) {
    if (this.systemLoc === null) {
      this.systemLoc = this.loc.redefaultToSystem();
    }

    var df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.format();
  };

  _proto.formatDateTime = function formatDateTime(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.format();
  };

  _proto.formatDateTimeParts = function formatDateTimeParts(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.formatToParts();
  };

  _proto.resolvedOptions = function resolvedOptions(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.resolvedOptions();
  };

  _proto.num = function num(n, p) {
    if (p === void 0) {
      p = 0;
    }

    // we get some perf out of doing this here, annoyingly
    if (this.opts.forceSimple) {
      return padStart(n, p);
    }

    var opts = Object.assign({}, this.opts);

    if (p > 0) {
      opts.padTo = p;
    }

    return this.loc.numberFormatter(opts).format(n);
  };

  _proto.formatDateTimeFromString = function formatDateTimeFromString(dt, fmt) {
    var _this = this;

    var knownEnglish = this.loc.listingMode() === "en",
        useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory" && hasFormatToParts(),
        string = function string(opts, extract) {
      return _this.loc.extract(dt, opts, extract);
    },
        formatOffset = function formatOffset(opts) {
      if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
        return "Z";
      }

      return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
    },
        meridiem = function meridiem() {
      return knownEnglish ? meridiemForDateTime(dt) : string({
        hour: "numeric",
        hour12: true
      }, "dayperiod");
    },
        month = function month(length, standalone) {
      return knownEnglish ? monthForDateTime(dt, length) : string(standalone ? {
        month: length
      } : {
        month: length,
        day: "numeric"
      }, "month");
    },
        weekday = function weekday(length, standalone) {
      return knownEnglish ? weekdayForDateTime(dt, length) : string(standalone ? {
        weekday: length
      } : {
        weekday: length,
        month: "long",
        day: "numeric"
      }, "weekday");
    },
        maybeMacro = function maybeMacro(token) {
      var formatOpts = Formatter.macroTokenToFormatOpts(token);

      if (formatOpts) {
        return _this.formatWithSystemDefault(dt, formatOpts);
      } else {
        return token;
      }
    },
        era = function era(length) {
      return knownEnglish ? eraForDateTime(dt, length) : string({
        era: length
      }, "era");
    },
        tokenToString = function tokenToString(token) {
      // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles
      switch (token) {
        // ms
        case "S":
          return _this.num(dt.millisecond);

        case "u": // falls through

        case "SSS":
          return _this.num(dt.millisecond, 3);
        // seconds

        case "s":
          return _this.num(dt.second);

        case "ss":
          return _this.num(dt.second, 2);
        // minutes

        case "m":
          return _this.num(dt.minute);

        case "mm":
          return _this.num(dt.minute, 2);
        // hours

        case "h":
          return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);

        case "hh":
          return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);

        case "H":
          return _this.num(dt.hour);

        case "HH":
          return _this.num(dt.hour, 2);
        // offset

        case "Z":
          // like +6
          return formatOffset({
            format: "narrow",
            allowZ: _this.opts.allowZ
          });

        case "ZZ":
          // like +06:00
          return formatOffset({
            format: "short",
            allowZ: _this.opts.allowZ
          });

        case "ZZZ":
          // like +0600
          return formatOffset({
            format: "techie",
            allowZ: _this.opts.allowZ
          });

        case "ZZZZ":
          // like EST
          return dt.zone.offsetName(dt.ts, {
            format: "short",
            locale: _this.loc.locale
          });

        case "ZZZZZ":
          // like Eastern Standard Time
          return dt.zone.offsetName(dt.ts, {
            format: "long",
            locale: _this.loc.locale
          });
        // zone

        case "z":
          // like America/New_York
          return dt.zoneName;
        // meridiems

        case "a":
          return meridiem();
        // dates

        case "d":
          return useDateTimeFormatter ? string({
            day: "numeric"
          }, "day") : _this.num(dt.day);

        case "dd":
          return useDateTimeFormatter ? string({
            day: "2-digit"
          }, "day") : _this.num(dt.day, 2);
        // weekdays - standalone

        case "c":
          // like 1
          return _this.num(dt.weekday);

        case "ccc":
          // like 'Tues'
          return weekday("short", true);

        case "cccc":
          // like 'Tuesday'
          return weekday("long", true);

        case "ccccc":
          // like 'T'
          return weekday("narrow", true);
        // weekdays - format

        case "E":
          // like 1
          return _this.num(dt.weekday);

        case "EEE":
          // like 'Tues'
          return weekday("short", false);

        case "EEEE":
          // like 'Tuesday'
          return weekday("long", false);

        case "EEEEE":
          // like 'T'
          return weekday("narrow", false);
        // months - standalone

        case "L":
          // like 1
          return useDateTimeFormatter ? string({
            month: "numeric",
            day: "numeric"
          }, "month") : _this.num(dt.month);

        case "LL":
          // like 01, doesn't seem to work
          return useDateTimeFormatter ? string({
            month: "2-digit",
            day: "numeric"
          }, "month") : _this.num(dt.month, 2);

        case "LLL":
          // like Jan
          return month("short", true);

        case "LLLL":
          // like January
          return month("long", true);

        case "LLLLL":
          // like J
          return month("narrow", true);
        // months - format

        case "M":
          // like 1
          return useDateTimeFormatter ? string({
            month: "numeric"
          }, "month") : _this.num(dt.month);

        case "MM":
          // like 01
          return useDateTimeFormatter ? string({
            month: "2-digit"
          }, "month") : _this.num(dt.month, 2);

        case "MMM":
          // like Jan
          return month("short", false);

        case "MMMM":
          // like January
          return month("long", false);

        case "MMMMM":
          // like J
          return month("narrow", false);
        // years

        case "y":
          // like 2014
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year);

        case "yy":
          // like 14
          return useDateTimeFormatter ? string({
            year: "2-digit"
          }, "year") : _this.num(dt.year.toString().slice(-2), 2);

        case "yyyy":
          // like 0012
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year, 4);

        case "yyyyyy":
          // like 000012
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year, 6);
        // eras

        case "G":
          // like AD
          return era("short");

        case "GG":
          // like Anno Domini
          return era("long");

        case "GGGGG":
          return era("narrow");

        case "kk":
          return _this.num(dt.weekYear.toString().slice(-2), 2);

        case "kkkk":
          return _this.num(dt.weekYear, 4);

        case "W":
          return _this.num(dt.weekNumber);

        case "WW":
          return _this.num(dt.weekNumber, 2);

        case "o":
          return _this.num(dt.ordinal);

        case "ooo":
          return _this.num(dt.ordinal, 3);

        case "q":
          // like 1
          return _this.num(dt.quarter);

        case "qq":
          // like 01
          return _this.num(dt.quarter, 2);

        case "X":
          return _this.num(Math.floor(dt.ts / 1000));

        case "x":
          return _this.num(dt.ts);

        default:
          return maybeMacro(token);
      }
    };

    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
  };

  _proto.formatDurationFromString = function formatDurationFromString(dur, fmt) {
    var _this2 = this;

    var tokenToField = function tokenToField(token) {
      switch (token[0]) {
        case "S":
          return "millisecond";

        case "s":
          return "second";

        case "m":
          return "minute";

        case "h":
          return "hour";

        case "d":
          return "day";

        case "M":
          return "month";

        case "y":
          return "year";

        default:
          return null;
      }
    },
        tokenToString = function tokenToString(lildur) {
      return function (token) {
        var mapped = tokenToField(token);

        if (mapped) {
          return _this2.num(lildur.get(mapped), token.length);
        } else {
          return token;
        }
      };
    },
        tokens = Formatter.parseFormat(fmt),
        realTokens = tokens.reduce(function (found, _ref) {
      var literal = _ref.literal,
          val = _ref.val;
      return literal ? found : found.concat(val);
    }, []),
        collapsed = dur.shiftTo.apply(dur, realTokens.map(tokenToField).filter(function (t) {
      return t;
    }));

    return stringifyTokens(tokens, tokenToString(collapsed));
  };

  return Formatter;
}();

var Invalid = /*#__PURE__*/function () {
  function Invalid(reason, explanation) {
    this.reason = reason;
    this.explanation = explanation;
  }

  var _proto = Invalid.prototype;

  _proto.toMessage = function toMessage() {
    if (this.explanation) {
      return this.reason + ": " + this.explanation;
    } else {
      return this.reason;
    }
  };

  return Invalid;
}();

/**
 * @interface
 */

var Zone = /*#__PURE__*/function () {
  function Zone() {}

  var _proto = Zone.prototype;

  /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */
  _proto.offsetName = function offsetName(ts, opts) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Returns the offset's value as a string
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  ;

  _proto.formatOffset = function formatOffset(ts, format) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */
  ;

  _proto.offset = function offset(ts) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return whether this Zone is equal to another zone
   * @abstract
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(otherZone) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return whether this Zone is valid.
   * @abstract
   * @type {boolean}
   */
  ;

  _createClass(Zone, [{
    key: "type",

    /**
     * The type of zone
     * @abstract
     * @type {string}
     */
    get: function get() {
      throw new ZoneIsAbstractError();
    }
    /**
     * The name of this zone.
     * @abstract
     * @type {string}
     */

  }, {
    key: "name",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
    /**
     * Returns whether the offset is known to be fixed for the whole year.
     * @abstract
     * @type {boolean}
     */

  }, {
    key: "universal",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }, {
    key: "isValid",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }]);

  return Zone;
}();

var singleton = null;
/**
 * Represents the local zone for this Javascript environment.
 * @implements {Zone}
 */

var LocalZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(LocalZone, _Zone);

  function LocalZone() {
    return _Zone.apply(this, arguments) || this;
  }

  var _proto = LocalZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName(ts, _ref) {
    var format = _ref.format,
        locale = _ref.locale;
    return parseZoneInfo(ts, format, locale);
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.offset(ts), format);
  }
  /** @override **/
  ;

  _proto.offset = function offset(ts) {
    return -new Date(ts).getTimezoneOffset();
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "local";
  }
  /** @override **/
  ;

  _createClass(LocalZone, [{
    key: "type",

    /** @override **/
    get: function get() {
      return "local";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      if (hasIntl()) {
        return new Intl.DateTimeFormat().resolvedOptions().timeZone;
      } else return "local";
    }
    /** @override **/

  }, {
    key: "universal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return true;
    }
  }], [{
    key: "instance",

    /**
     * Get a singleton instance of the local zone
     * @return {LocalZone}
     */
    get: function get() {
      if (singleton === null) {
        singleton = new LocalZone();
      }

      return singleton;
    }
  }]);

  return LocalZone;
}(Zone);

var matchingRegex = RegExp("^" + ianaRegex.source + "$");
var dtfCache = {};

function makeDTF(zone) {
  if (!dtfCache[zone]) {
    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit"
    });
  }

  return dtfCache[zone];
}

var typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  hour: 3,
  minute: 4,
  second: 5
};

function hackyOffset(dtf, date) {
  var formatted = dtf.format(date).replace(/\u200E/g, ""),
      parsed = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(formatted),
      fMonth = parsed[1],
      fDay = parsed[2],
      fYear = parsed[3],
      fHour = parsed[4],
      fMinute = parsed[5],
      fSecond = parsed[6];
  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];
}

function partsOffset(dtf, date) {
  var formatted = dtf.formatToParts(date),
      filled = [];

  for (var i = 0; i < formatted.length; i++) {
    var _formatted$i = formatted[i],
        type = _formatted$i.type,
        value = _formatted$i.value,
        pos = typeToPos[type];

    if (!isUndefined(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }

  return filled;
}

var ianaZoneCache = {};
/**
 * A zone identified by an IANA identifier, like America/New_York
 * @implements {Zone}
 */

var IANAZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(IANAZone, _Zone);

  /**
   * @param {string} name - Zone name
   * @return {IANAZone}
   */
  IANAZone.create = function create(name) {
    if (!ianaZoneCache[name]) {
      ianaZoneCache[name] = new IANAZone(name);
    }

    return ianaZoneCache[name];
  }
  /**
   * Reset local caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  ;

  IANAZone.resetCache = function resetCache() {
    ianaZoneCache = {};
    dtfCache = {};
  }
  /**
   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
   * @param {string} s - The string to check validity on
   * @example IANAZone.isValidSpecifier("America/New_York") //=> true
   * @example IANAZone.isValidSpecifier("Fantasia/Castle") //=> true
   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
   * @return {boolean}
   */
  ;

  IANAZone.isValidSpecifier = function isValidSpecifier(s) {
    return !!(s && s.match(matchingRegex));
  }
  /**
   * Returns whether the provided string identifies a real zone
   * @param {string} zone - The string to check
   * @example IANAZone.isValidZone("America/New_York") //=> true
   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
   * @example IANAZone.isValidZone("Sport~~blorp") //=> false
   * @return {boolean}
   */
  ;

  IANAZone.isValidZone = function isValidZone(zone) {
    try {
      new Intl.DateTimeFormat("en-US", {
        timeZone: zone
      }).format();
      return true;
    } catch (e) {
      return false;
    }
  } // Etc/GMT+8 -> -480

  /** @ignore */
  ;

  IANAZone.parseGMTOffset = function parseGMTOffset(specifier) {
    if (specifier) {
      var match = specifier.match(/^Etc\/GMT([+-]\d{1,2})$/i);

      if (match) {
        return -60 * parseInt(match[1]);
      }
    }

    return null;
  };

  function IANAZone(name) {
    var _this;

    _this = _Zone.call(this) || this;
    /** @private **/

    _this.zoneName = name;
    /** @private **/

    _this.valid = IANAZone.isValidZone(name);
    return _this;
  }
  /** @override **/


  var _proto = IANAZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName(ts, _ref) {
    var format = _ref.format,
        locale = _ref.locale;
    return parseZoneInfo(ts, format, locale, this.name);
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.offset(ts), format);
  }
  /** @override **/
  ;

  _proto.offset = function offset(ts) {
    var date = new Date(ts),
        dtf = makeDTF(this.name),
        _ref2 = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date),
        year = _ref2[0],
        month = _ref2[1],
        day = _ref2[2],
        hour = _ref2[3],
        minute = _ref2[4],
        second = _ref2[5],
        adjustedHour = hour === 24 ? 0 : hour;

    var asUTC = objToLocalTS({
      year: year,
      month: month,
      day: day,
      hour: adjustedHour,
      minute: minute,
      second: second,
      millisecond: 0
    });
    var asTS = +date;
    var over = asTS % 1000;
    asTS -= over >= 0 ? over : 1000 + over;
    return (asUTC - asTS) / (60 * 1000);
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "iana" && otherZone.name === this.name;
  }
  /** @override **/
  ;

  _createClass(IANAZone, [{
    key: "type",
    get: function get() {
      return "iana";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.zoneName;
    }
    /** @override **/

  }, {
    key: "universal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return this.valid;
    }
  }]);

  return IANAZone;
}(Zone);

var singleton$1 = null;
/**
 * A zone with a fixed offset (meaning no DST)
 * @implements {Zone}
 */

var FixedOffsetZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(FixedOffsetZone, _Zone);

  /**
   * Get an instance with a specified offset
   * @param {number} offset - The offset in minutes
   * @return {FixedOffsetZone}
   */
  FixedOffsetZone.instance = function instance(offset) {
    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
  }
  /**
   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
   * @param {string} s - The offset string to parse
   * @example FixedOffsetZone.parseSpecifier("UTC+6")
   * @example FixedOffsetZone.parseSpecifier("UTC+06")
   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
   * @return {FixedOffsetZone}
   */
  ;

  FixedOffsetZone.parseSpecifier = function parseSpecifier(s) {
    if (s) {
      var r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);

      if (r) {
        return new FixedOffsetZone(signedOffset(r[1], r[2]));
      }
    }

    return null;
  };

  _createClass(FixedOffsetZone, null, [{
    key: "utcInstance",

    /**
     * Get a singleton instance of UTC
     * @return {FixedOffsetZone}
     */
    get: function get() {
      if (singleton$1 === null) {
        singleton$1 = new FixedOffsetZone(0);
      }

      return singleton$1;
    }
  }]);

  function FixedOffsetZone(offset) {
    var _this;

    _this = _Zone.call(this) || this;
    /** @private **/

    _this.fixed = offset;
    return _this;
  }
  /** @override **/


  var _proto = FixedOffsetZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName() {
    return this.name;
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.fixed, format);
  }
  /** @override **/
  ;

  /** @override **/
  _proto.offset = function offset() {
    return this.fixed;
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
  }
  /** @override **/
  ;

  _createClass(FixedOffsetZone, [{
    key: "type",
    get: function get() {
      return "fixed";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.fixed === 0 ? "UTC" : "UTC" + formatOffset(this.fixed, "narrow");
    }
  }, {
    key: "universal",
    get: function get() {
      return true;
    }
  }, {
    key: "isValid",
    get: function get() {
      return true;
    }
  }]);

  return FixedOffsetZone;
}(Zone);

/**
 * A zone that failed to parse. You should never need to instantiate this.
 * @implements {Zone}
 */

var InvalidZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(InvalidZone, _Zone);

  function InvalidZone(zoneName) {
    var _this;

    _this = _Zone.call(this) || this;
    /**  @private */

    _this.zoneName = zoneName;
    return _this;
  }
  /** @override **/


  var _proto = InvalidZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName() {
    return null;
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset() {
    return "";
  }
  /** @override **/
  ;

  _proto.offset = function offset() {
    return NaN;
  }
  /** @override **/
  ;

  _proto.equals = function equals() {
    return false;
  }
  /** @override **/
  ;

  _createClass(InvalidZone, [{
    key: "type",
    get: function get() {
      return "invalid";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.zoneName;
    }
    /** @override **/

  }, {
    key: "universal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return false;
    }
  }]);

  return InvalidZone;
}(Zone);

/**
 * @private
 */
function normalizeZone(input, defaultZone) {
  var offset;

  if (isUndefined(input) || input === null) {
    return defaultZone;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString(input)) {
    var lowered = input.toLowerCase();
    if (lowered === "local") return defaultZone;else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;else if ((offset = IANAZone.parseGMTOffset(input)) != null) {
      // handle Etc/GMT-4, which V8 chokes on
      return FixedOffsetZone.instance(offset);
    } else if (IANAZone.isValidSpecifier(lowered)) return IANAZone.create(input);else return FixedOffsetZone.parseSpecifier(lowered) || new InvalidZone(input);
  } else if (isNumber(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
    // This is dumb, but the instanceof check above doesn't seem to really work
    // so we're duck checking it
    return input;
  } else {
    return new InvalidZone(input);
  }
}

var now = function now() {
  return Date.now();
},
    defaultZone = null,
    // not setting this directly to LocalZone.instance bc loading order issues
defaultLocale = null,
    defaultNumberingSystem = null,
    defaultOutputCalendar = null,
    throwOnInvalid = false;
/**
 * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
 */


var Settings = /*#__PURE__*/function () {
  function Settings() {}

  /**
   * Reset Luxon's global caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  Settings.resetCaches = function resetCaches() {
    Locale.resetCache();
    IANAZone.resetCache();
  };

  _createClass(Settings, null, [{
    key: "now",

    /**
     * Get the callback for returning the current timestamp.
     * @type {function}
     */
    get: function get() {
      return now;
    }
    /**
     * Set the callback for returning the current timestamp.
     * The function should return a number, which will be interpreted as an Epoch millisecond count
     * @type {function}
     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
     */
    ,
    set: function set(n) {
      now = n;
    }
    /**
     * Get the default time zone to create DateTimes in.
     * @type {string}
     */

  }, {
    key: "defaultZoneName",
    get: function get() {
      return Settings.defaultZone.name;
    }
    /**
     * Set the default time zone to create DateTimes in. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(z) {
      if (!z) {
        defaultZone = null;
      } else {
        defaultZone = normalizeZone(z);
      }
    }
    /**
     * Get the default time zone object to create DateTimes in. Does not affect existing instances.
     * @type {Zone}
     */

  }, {
    key: "defaultZone",
    get: function get() {
      return defaultZone || LocalZone.instance;
    }
    /**
     * Get the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */

  }, {
    key: "defaultLocale",
    get: function get() {
      return defaultLocale;
    }
    /**
     * Set the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(locale) {
      defaultLocale = locale;
    }
    /**
     * Get the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */

  }, {
    key: "defaultNumberingSystem",
    get: function get() {
      return defaultNumberingSystem;
    }
    /**
     * Set the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(numberingSystem) {
      defaultNumberingSystem = numberingSystem;
    }
    /**
     * Get the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */

  }, {
    key: "defaultOutputCalendar",
    get: function get() {
      return defaultOutputCalendar;
    }
    /**
     * Set the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(outputCalendar) {
      defaultOutputCalendar = outputCalendar;
    }
    /**
     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */

  }, {
    key: "throwOnInvalid",
    get: function get() {
      return throwOnInvalid;
    }
    /**
     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    ,
    set: function set(t) {
      throwOnInvalid = t;
    }
  }]);

  return Settings;
}();

var intlDTCache = {};

function getCachedDTF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var key = JSON.stringify([locString, opts]);
  var dtf = intlDTCache[key];

  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }

  return dtf;
}

var intlNumCache = {};

function getCachedINF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var key = JSON.stringify([locString, opts]);
  var inf = intlNumCache[key];

  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }

  return inf;
}

var intlRelCache = {};

function getCachedRTF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var _opts = opts,
      base = _opts.base,
      cacheKeyOpts = _objectWithoutPropertiesLoose(_opts, ["base"]); // exclude `base` from the options


  var key = JSON.stringify([locString, cacheKeyOpts]);
  var inf = intlRelCache[key];

  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }

  return inf;
}

var sysLocaleCache = null;

function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else if (hasIntl()) {
    var computedSys = new Intl.DateTimeFormat().resolvedOptions().locale; // node sometimes defaults to "und". Override that because that is dumb

    sysLocaleCache = !computedSys || computedSys === "und" ? "en-US" : computedSys;
    return sysLocaleCache;
  } else {
    sysLocaleCache = "en-US";
    return sysLocaleCache;
  }
}

function parseLocaleString(localeStr) {
  // I really want to avoid writing a BCP 47 parser
  // see, e.g. https://github.com/wooorm/bcp-47
  // Instead, we'll do this:
  // a) if the string has no -u extensions, just leave it alone
  // b) if it does, use Intl to resolve everything
  // c) if Intl fails, try again without the -u
  var uIndex = localeStr.indexOf("-u-");

  if (uIndex === -1) {
    return [localeStr];
  } else {
    var options;
    var smaller = localeStr.substring(0, uIndex);

    try {
      options = getCachedDTF(localeStr).resolvedOptions();
    } catch (e) {
      options = getCachedDTF(smaller).resolvedOptions();
    }

    var _options = options,
        numberingSystem = _options.numberingSystem,
        calendar = _options.calendar; // return the smaller one so that we can append the calendar and numbering overrides to it

    return [smaller, numberingSystem, calendar];
  }
}

function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (hasIntl()) {
    if (outputCalendar || numberingSystem) {
      localeStr += "-u";

      if (outputCalendar) {
        localeStr += "-ca-" + outputCalendar;
      }

      if (numberingSystem) {
        localeStr += "-nu-" + numberingSystem;
      }

      return localeStr;
    } else {
      return localeStr;
    }
  } else {
    return [];
  }
}

function mapMonths(f) {
  var ms = [];

  for (var i = 1; i <= 12; i++) {
    var dt = DateTime.utc(2016, i, 1);
    ms.push(f(dt));
  }

  return ms;
}

function mapWeekdays(f) {
  var ms = [];

  for (var i = 1; i <= 7; i++) {
    var dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }

  return ms;
}

function listStuff(loc, length, defaultOK, englishFn, intlFn) {
  var mode = loc.listingMode(defaultOK);

  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}

function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || hasIntl() && new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
  }
}
/**
 * @private
 */


var PolyNumberFormatter = /*#__PURE__*/function () {
  function PolyNumberFormatter(intl, forceSimple, opts) {
    this.padTo = opts.padTo || 0;
    this.floor = opts.floor || false;

    if (!forceSimple && hasIntl()) {
      var intlOpts = {
        useGrouping: false
      };
      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
      this.inf = getCachedINF(intl, intlOpts);
    }
  }

  var _proto = PolyNumberFormatter.prototype;

  _proto.format = function format(i) {
    if (this.inf) {
      var fixed = this.floor ? Math.floor(i) : i;
      return this.inf.format(fixed);
    } else {
      // to match the browser's numberformatter defaults
      var _fixed = this.floor ? Math.floor(i) : roundTo(i, 3);

      return padStart(_fixed, this.padTo);
    }
  };

  return PolyNumberFormatter;
}();
/**
 * @private
 */


var PolyDateFormatter = /*#__PURE__*/function () {
  function PolyDateFormatter(dt, intl, opts) {
    this.opts = opts;
    this.hasIntl = hasIntl();
    var z;

    if (dt.zone.universal && this.hasIntl) {
      // Chromium doesn't support fixed-offset zones like Etc/GMT+8 in its formatter,
      // See https://bugs.chromium.org/p/chromium/issues/detail?id=364374.
      // So we have to make do. Two cases:
      // 1. The format options tell us to show the zone. We can't do that, so the best
      // we can do is format the date in UTC.
      // 2. The format options don't tell us to show the zone. Then we can adjust them
      // the time and tell the formatter to show it to us in UTC, so that the time is right
      // and the bad zone doesn't show up.
      // We can clean all this up when Chrome fixes this.
      z = "UTC";

      if (opts.timeZoneName) {
        this.dt = dt;
      } else {
        this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);
      }
    } else if (dt.zone.type === "local") {
      this.dt = dt;
    } else {
      this.dt = dt;
      z = dt.zone.name;
    }

    if (this.hasIntl) {
      var intlOpts = Object.assign({}, this.opts);

      if (z) {
        intlOpts.timeZone = z;
      }

      this.dtf = getCachedDTF(intl, intlOpts);
    }
  }

  var _proto2 = PolyDateFormatter.prototype;

  _proto2.format = function format() {
    if (this.hasIntl) {
      return this.dtf.format(this.dt.toJSDate());
    } else {
      var tokenFormat = formatString(this.opts),
          loc = Locale.create("en-US");
      return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);
    }
  };

  _proto2.formatToParts = function formatToParts() {
    if (this.hasIntl && hasFormatToParts()) {
      return this.dtf.formatToParts(this.dt.toJSDate());
    } else {
      // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings
      // and IMO it's too weird to have an uncanny valley like that
      return [];
    }
  };

  _proto2.resolvedOptions = function resolvedOptions() {
    if (this.hasIntl) {
      return this.dtf.resolvedOptions();
    } else {
      return {
        locale: "en-US",
        numberingSystem: "latn",
        outputCalendar: "gregory"
      };
    }
  };

  return PolyDateFormatter;
}();
/**
 * @private
 */


var PolyRelFormatter = /*#__PURE__*/function () {
  function PolyRelFormatter(intl, isEnglish, opts) {
    this.opts = Object.assign({
      style: "long"
    }, opts);

    if (!isEnglish && hasRelative()) {
      this.rtf = getCachedRTF(intl, opts);
    }
  }

  var _proto3 = PolyRelFormatter.prototype;

  _proto3.format = function format(count, unit) {
    if (this.rtf) {
      return this.rtf.format(count, unit);
    } else {
      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    }
  };

  _proto3.formatToParts = function formatToParts(count, unit) {
    if (this.rtf) {
      return this.rtf.formatToParts(count, unit);
    } else {
      return [];
    }
  };

  return PolyRelFormatter;
}();
/**
 * @private
 */


var Locale = /*#__PURE__*/function () {
  Locale.fromOpts = function fromOpts(opts) {
    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
  };

  Locale.create = function create(locale, numberingSystem, outputCalendar, defaultToEN) {
    if (defaultToEN === void 0) {
      defaultToEN = false;
    }

    var specifiedLocale = locale || Settings.defaultLocale,
        // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
    localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale()),
        numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,
        outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
  };

  Locale.resetCache = function resetCache() {
    sysLocaleCache = null;
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
  };

  Locale.fromObject = function fromObject(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        locale = _ref.locale,
        numberingSystem = _ref.numberingSystem,
        outputCalendar = _ref.outputCalendar;

    return Locale.create(locale, numberingSystem, outputCalendar);
  };

  function Locale(locale, numbering, outputCalendar, specifiedLocale) {
    var _parseLocaleString = parseLocaleString(locale),
        parsedLocale = _parseLocaleString[0],
        parsedNumberingSystem = _parseLocaleString[1],
        parsedOutputCalendar = _parseLocaleString[2];

    this.locale = parsedLocale;
    this.numberingSystem = numbering || parsedNumberingSystem || null;
    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
    this.weekdaysCache = {
      format: {},
      standalone: {}
    };
    this.monthsCache = {
      format: {},
      standalone: {}
    };
    this.meridiemCache = null;
    this.eraCache = {};
    this.specifiedLocale = specifiedLocale;
    this.fastNumbersCached = null;
  }

  var _proto4 = Locale.prototype;

  _proto4.listingMode = function listingMode(defaultOK) {
    if (defaultOK === void 0) {
      defaultOK = true;
    }

    var intl = hasIntl(),
        hasFTP = intl && hasFormatToParts(),
        isActuallyEn = this.isEnglish(),
        hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");

    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {
      return "error";
    } else if (!hasFTP || isActuallyEn && hasNoWeirdness) {
      return "en";
    } else {
      return "intl";
    }
  };

  _proto4.clone = function clone(alts) {
    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
      return this;
    } else {
      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);
    }
  };

  _proto4.redefaultToEN = function redefaultToEN(alts) {
    if (alts === void 0) {
      alts = {};
    }

    return this.clone(Object.assign({}, alts, {
      defaultToEN: true
    }));
  };

  _proto4.redefaultToSystem = function redefaultToSystem(alts) {
    if (alts === void 0) {
      alts = {};
    }

    return this.clone(Object.assign({}, alts, {
      defaultToEN: false
    }));
  };

  _proto4.months = function months$1(length, format, defaultOK) {
    var _this = this;

    if (format === void 0) {
      format = false;
    }

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, months, function () {
      var intl = format ? {
        month: length,
        day: "numeric"
      } : {
        month: length
      },
          formatStr = format ? "format" : "standalone";

      if (!_this.monthsCache[formatStr][length]) {
        _this.monthsCache[formatStr][length] = mapMonths(function (dt) {
          return _this.extract(dt, intl, "month");
        });
      }

      return _this.monthsCache[formatStr][length];
    });
  };

  _proto4.weekdays = function weekdays$1(length, format, defaultOK) {
    var _this2 = this;

    if (format === void 0) {
      format = false;
    }

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, weekdays, function () {
      var intl = format ? {
        weekday: length,
        year: "numeric",
        month: "long",
        day: "numeric"
      } : {
        weekday: length
      },
          formatStr = format ? "format" : "standalone";

      if (!_this2.weekdaysCache[formatStr][length]) {
        _this2.weekdaysCache[formatStr][length] = mapWeekdays(function (dt) {
          return _this2.extract(dt, intl, "weekday");
        });
      }

      return _this2.weekdaysCache[formatStr][length];
    });
  };

  _proto4.meridiems = function meridiems$1(defaultOK) {
    var _this3 = this;

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, undefined, defaultOK, function () {
      return meridiems;
    }, function () {
      // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
      // for AM and PM. This is probably wrong, but it's makes parsing way easier.
      if (!_this3.meridiemCache) {
        var intl = {
          hour: "numeric",
          hour12: true
        };
        _this3.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(function (dt) {
          return _this3.extract(dt, intl, "dayperiod");
        });
      }

      return _this3.meridiemCache;
    });
  };

  _proto4.eras = function eras$1(length, defaultOK) {
    var _this4 = this;

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, eras, function () {
      var intl = {
        era: length
      }; // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
      // to definitely enumerate them.

      if (!_this4.eraCache[length]) {
        _this4.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(function (dt) {
          return _this4.extract(dt, intl, "era");
        });
      }

      return _this4.eraCache[length];
    });
  };

  _proto4.extract = function extract(dt, intlOpts, field) {
    var df = this.dtFormatter(dt, intlOpts),
        results = df.formatToParts(),
        matching = results.find(function (m) {
      return m.type.toLowerCase() === field;
    });
    return matching ? matching.value : null;
  };

  _proto4.numberFormatter = function numberFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }

    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
    // (in contrast, the rest of the condition is used heavily)
    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
  };

  _proto4.dtFormatter = function dtFormatter(dt, intlOpts) {
    if (intlOpts === void 0) {
      intlOpts = {};
    }

    return new PolyDateFormatter(dt, this.intl, intlOpts);
  };

  _proto4.relFormatter = function relFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }

    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
  };

  _proto4.isEnglish = function isEnglish() {
    return this.locale === "en" || this.locale.toLowerCase() === "en-us" || hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
  };

  _proto4.equals = function equals(other) {
    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
  };

  _createClass(Locale, [{
    key: "fastNumbers",
    get: function get() {
      if (this.fastNumbersCached == null) {
        this.fastNumbersCached = supportsFastNumbers(this);
      }

      return this.fastNumbersCached;
    }
  }]);

  return Locale;
}();

/*
 * This file handles parsing for well-specified formats. Here's how it works:
 * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
 * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
 * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
 * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
 * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
 * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
 */

function combineRegexes() {
  for (var _len = arguments.length, regexes = new Array(_len), _key = 0; _key < _len; _key++) {
    regexes[_key] = arguments[_key];
  }

  var full = regexes.reduce(function (f, r) {
    return f + r.source;
  }, "");
  return RegExp("^" + full + "$");
}

function combineExtractors() {
  for (var _len2 = arguments.length, extractors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    extractors[_key2] = arguments[_key2];
  }

  return function (m) {
    return extractors.reduce(function (_ref, ex) {
      var mergedVals = _ref[0],
          mergedZone = _ref[1],
          cursor = _ref[2];

      var _ex = ex(m, cursor),
          val = _ex[0],
          zone = _ex[1],
          next = _ex[2];

      return [Object.assign(mergedVals, val), mergedZone || zone, next];
    }, [{}, null, 1]).slice(0, 2);
  };
}

function parse(s) {
  if (s == null) {
    return [null, null];
  }

  for (var _len3 = arguments.length, patterns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    patterns[_key3 - 1] = arguments[_key3];
  }

  for (var _i = 0, _patterns = patterns; _i < _patterns.length; _i++) {
    var _patterns$_i = _patterns[_i],
        regex = _patterns$_i[0],
        extractor = _patterns$_i[1];
    var m = regex.exec(s);

    if (m) {
      return extractor(m);
    }
  }

  return [null, null];
}

function simpleParse() {
  for (var _len4 = arguments.length, keys = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    keys[_key4] = arguments[_key4];
  }

  return function (match, cursor) {
    var ret = {};
    var i;

    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match[cursor + i]);
    }

    return [ret, null, cursor + i];
  };
} // ISO and SQL parsing


var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,
    isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,
    isoTimeRegex = RegExp("" + isoTimeBaseRegex.source + offsetRegex.source + "?"),
    isoTimeExtensionRegex = RegExp("(?:T" + isoTimeRegex.source + ")?"),
    isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,
    isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/,
    isoOrdinalRegex = /(\d{4})-?(\d{3})/,
    extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay"),
    extractISOOrdinalData = simpleParse("year", "ordinal"),
    sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/,
    // dumbed-down version of the ISO one
sqlTimeRegex = RegExp(isoTimeBaseRegex.source + " ?(?:" + offsetRegex.source + "|(" + ianaRegex.source + "))?"),
    sqlTimeExtensionRegex = RegExp("(?: " + sqlTimeRegex.source + ")?");

function int(match, pos, fallback) {
  var m = match[pos];
  return isUndefined(m) ? fallback : parseInteger(m);
}

function extractISOYmd(match, cursor) {
  var item = {
    year: int(match, cursor),
    month: int(match, cursor + 1, 1),
    day: int(match, cursor + 2, 1)
  };
  return [item, null, cursor + 3];
}

function extractISOTime(match, cursor) {
  var item = {
    hour: int(match, cursor, 0),
    minute: int(match, cursor + 1, 0),
    second: int(match, cursor + 2, 0),
    millisecond: parseMillis(match[cursor + 3])
  };
  return [item, null, cursor + 4];
}

function extractISOOffset(match, cursor) {
  var local = !match[cursor] && !match[cursor + 1],
      fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
      zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone, cursor + 3];
}

function extractIANAZone(match, cursor) {
  var zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
  return [{}, zone, cursor + 1];
} // ISO duration parsing


var isoDuration = /^-?P(?:(?:(-?\d{1,9})Y)?(?:(-?\d{1,9})M)?(?:(-?\d{1,9})W)?(?:(-?\d{1,9})D)?(?:T(?:(-?\d{1,9})H)?(?:(-?\d{1,9})M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,9}))?S)?)?)$/;

function extractISODuration(match) {
  var s = match[0],
      yearStr = match[1],
      monthStr = match[2],
      weekStr = match[3],
      dayStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      millisecondsStr = match[8];
  var hasNegativePrefix = s[0] === "-";

  var maybeNegate = function maybeNegate(num) {
    return num && hasNegativePrefix ? -num : num;
  };

  return [{
    years: maybeNegate(parseInteger(yearStr)),
    months: maybeNegate(parseInteger(monthStr)),
    weeks: maybeNegate(parseInteger(weekStr)),
    days: maybeNegate(parseInteger(dayStr)),
    hours: maybeNegate(parseInteger(hourStr)),
    minutes: maybeNegate(parseInteger(minuteStr)),
    seconds: maybeNegate(parseInteger(secondStr)),
    milliseconds: maybeNegate(parseMillis(millisecondsStr))
  }];
} // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
// and not just that we're in -240 *right now*. But since I don't think these are used that often
// I'm just going to ignore that


var obsOffsets = {
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};

function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr)
  };
  if (secondStr) result.second = parseInteger(secondStr);

  if (weekdayStr) {
    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
  }

  return result;
} // RFC 2822/5322


var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

function extractRFC2822(match) {
  var weekdayStr = match[1],
      dayStr = match[2],
      monthStr = match[3],
      yearStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      obsOffset = match[8],
      milOffset = match[9],
      offHourStr = match[10],
      offMinuteStr = match[11],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  var offset;

  if (obsOffset) {
    offset = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset = 0;
  } else {
    offset = signedOffset(offHourStr, offMinuteStr);
  }

  return [result, new FixedOffsetZone(offset)];
}

function preprocessRFC2822(s) {
  // Remove comments and folding whitespace and replace multiple-spaces with a single space
  return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
} // http date


var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
    rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
    ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

function extractRFC1123Or850(match) {
  var weekdayStr = match[1],
      dayStr = match[2],
      monthStr = match[3],
      yearStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

function extractASCII(match) {
  var weekdayStr = match[1],
      monthStr = match[2],
      dayStr = match[3],
      hourStr = match[4],
      minuteStr = match[5],
      secondStr = match[6],
      yearStr = match[7],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
var extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset);
var extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset);
var extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);
var extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);
/**
 * @private
 */

function parseISODate(s) {
  return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);
}
function parseRFC2822Date(s) {
  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
}
function parseHTTPDate(s) {
  return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);
}
function parseISODuration(s) {
  return parse(s, [isoDuration, extractISODuration]);
}
var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
var extractISOYmdTimeOffsetAndIANAZone = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseSQL(s) {
  return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);
}

var INVALID = "Invalid Duration"; // unit conversion constants

var lowOrderMatrix = {
  weeks: {
    days: 7,
    hours: 7 * 24,
    minutes: 7 * 24 * 60,
    seconds: 7 * 24 * 60 * 60,
    milliseconds: 7 * 24 * 60 * 60 * 1000
  },
  days: {
    hours: 24,
    minutes: 24 * 60,
    seconds: 24 * 60 * 60,
    milliseconds: 24 * 60 * 60 * 1000
  },
  hours: {
    minutes: 60,
    seconds: 60 * 60,
    milliseconds: 60 * 60 * 1000
  },
  minutes: {
    seconds: 60,
    milliseconds: 60 * 1000
  },
  seconds: {
    milliseconds: 1000
  }
},
    casualMatrix = Object.assign({
  years: {
    quarters: 4,
    months: 12,
    weeks: 52,
    days: 365,
    hours: 365 * 24,
    minutes: 365 * 24 * 60,
    seconds: 365 * 24 * 60 * 60,
    milliseconds: 365 * 24 * 60 * 60 * 1000
  },
  quarters: {
    months: 3,
    weeks: 13,
    days: 91,
    hours: 91 * 24,
    minutes: 91 * 24 * 60,
    seconds: 91 * 24 * 60 * 60,
    milliseconds: 91 * 24 * 60 * 60 * 1000
  },
  months: {
    weeks: 4,
    days: 30,
    hours: 30 * 24,
    minutes: 30 * 24 * 60,
    seconds: 30 * 24 * 60 * 60,
    milliseconds: 30 * 24 * 60 * 60 * 1000
  }
}, lowOrderMatrix),
    daysInYearAccurate = 146097.0 / 400,
    daysInMonthAccurate = 146097.0 / 4800,
    accurateMatrix = Object.assign({
  years: {
    quarters: 4,
    months: 12,
    weeks: daysInYearAccurate / 7,
    days: daysInYearAccurate,
    hours: daysInYearAccurate * 24,
    minutes: daysInYearAccurate * 24 * 60,
    seconds: daysInYearAccurate * 24 * 60 * 60,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000
  },
  quarters: {
    months: 3,
    weeks: daysInYearAccurate / 28,
    days: daysInYearAccurate / 4,
    hours: daysInYearAccurate * 24 / 4,
    minutes: daysInYearAccurate * 24 * 60 / 4,
    seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000 / 4
  },
  months: {
    weeks: daysInMonthAccurate / 7,
    days: daysInMonthAccurate,
    hours: daysInMonthAccurate * 24,
    minutes: daysInMonthAccurate * 24 * 60,
    seconds: daysInMonthAccurate * 24 * 60 * 60,
    milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000
  }
}, lowOrderMatrix); // units ordered by size

var orderedUnits = ["years", "quarters", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"];
var reverseUnits = orderedUnits.slice(0).reverse(); // clone really means "create another instance just like this one, but with these changes"

function clone(dur, alts, clear) {
  if (clear === void 0) {
    clear = false;
  }

  // deep merge for vals
  var conf = {
    values: clear ? alts.values : Object.assign({}, dur.values, alts.values || {}),
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy
  };
  return new Duration(conf);
}

function antiTrunc(n) {
  return n < 0 ? Math.floor(n) : Math.ceil(n);
} // NB: mutates parameters


function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
  var conv = matrix[toUnit][fromUnit],
      raw = fromMap[fromUnit] / conv,
      sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),
      // ok, so this is wild, but see the matrix in the tests
  added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
  toMap[toUnit] += added;
  fromMap[fromUnit] -= added * conv;
} // NB: mutates parameters


function normalizeValues(matrix, vals) {
  reverseUnits.reduce(function (previous, current) {
    if (!isUndefined(vals[current])) {
      if (previous) {
        convert(matrix, vals, previous, vals, current);
      }

      return current;
    } else {
      return previous;
    }
  }, null);
}
/**
 * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.
 *
 * Here is a brief overview of commonly used methods and getters in Duration:
 *
 * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
 * * **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.
 * * **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.
 * * **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.
 * * **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}
 *
 * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
 */


var Duration = /*#__PURE__*/function () {
  /**
   * @private
   */
  function Duration(config) {
    var accurate = config.conversionAccuracy === "longterm" || false;
    /**
     * @access private
     */

    this.values = config.values;
    /**
     * @access private
     */

    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */

    this.conversionAccuracy = accurate ? "longterm" : "casual";
    /**
     * @access private
     */

    this.invalid = config.invalid || null;
    /**
     * @access private
     */

    this.matrix = accurate ? accurateMatrix : casualMatrix;
    /**
     * @access private
     */

    this.isLuxonDuration = true;
  }
  /**
   * Create Duration from a number of milliseconds.
   * @param {number} count of milliseconds
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */


  Duration.fromMillis = function fromMillis(count, opts) {
    return Duration.fromObject(Object.assign({
      milliseconds: count
    }, opts));
  }
  /**
   * Create a Duration from a Javascript object with keys like 'years' and 'hours.
   * If this object is empty then a zero milliseconds duration is returned.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.years
   * @param {number} obj.quarters
   * @param {number} obj.months
   * @param {number} obj.weeks
   * @param {number} obj.days
   * @param {number} obj.hours
   * @param {number} obj.minutes
   * @param {number} obj.seconds
   * @param {number} obj.milliseconds
   * @param {string} [obj.locale='en-US'] - the locale to use
   * @param {string} obj.numberingSystem - the numbering system to use
   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  ;

  Duration.fromObject = function fromObject(obj) {
    if (obj == null || typeof obj !== "object") {
      throw new InvalidArgumentError("Duration.fromObject: argument expected to be an object, got " + (obj === null ? "null" : typeof obj));
    }

    return new Duration({
      values: normalizeObject(obj, Duration.normalizeUnit, ["locale", "numberingSystem", "conversionAccuracy", "zone" // a bit of debt; it's super inconvenient internally not to be able to blindly pass this
      ]),
      loc: Locale.fromObject(obj),
      conversionAccuracy: obj.conversionAccuracy
    });
  }
  /**
   * Create a Duration from an ISO 8601 duration string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
   * @return {Duration}
   */
  ;

  Duration.fromISO = function fromISO(text, opts) {
    var _parseISODuration = parseISODuration(text),
        parsed = _parseISODuration[0];

    if (parsed) {
      var obj = Object.assign(parsed, opts);
      return Duration.fromObject(obj);
    } else {
      return Duration.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
    }
  }
  /**
   * Create an invalid Duration.
   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Duration}
   */
  ;

  Duration.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDurationError(invalid);
    } else {
      return new Duration({
        invalid: invalid
      });
    }
  }
  /**
   * @private
   */
  ;

  Duration.normalizeUnit = function normalizeUnit(unit) {
    var normalized = {
      year: "years",
      years: "years",
      quarter: "quarters",
      quarters: "quarters",
      month: "months",
      months: "months",
      week: "weeks",
      weeks: "weeks",
      day: "days",
      days: "days",
      hour: "hours",
      hours: "hours",
      minute: "minutes",
      minutes: "minutes",
      second: "seconds",
      seconds: "seconds",
      millisecond: "milliseconds",
      milliseconds: "milliseconds"
    }[unit ? unit.toLowerCase() : unit];
    if (!normalized) throw new InvalidUnitError(unit);
    return normalized;
  }
  /**
   * Check if an object is a Duration. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  Duration.isDuration = function isDuration(o) {
    return o && o.isLuxonDuration || false;
  }
  /**
   * Get  the locale of a Duration, such 'en-GB'
   * @type {string}
   */
  ;

  var _proto = Duration.prototype;

  /**
   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
   * * `S` for milliseconds
   * * `s` for seconds
   * * `m` for minutes
   * * `h` for hours
   * * `d` for days
   * * `M` for months
   * * `y` for years
   * Notes:
   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
   * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.
   * @param {string} fmt - the format string
   * @param {Object} opts - options
   * @param {boolean} [opts.floor=true] - floor numerical values
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
   * @return {string}
   */
  _proto.toFormat = function toFormat(fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    // reverse-compat since 1.2; we always round down now, never up, and we do it by default
    var fmtOpts = Object.assign({}, opts, {
      floor: opts.round !== false && opts.floor !== false
    });
    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;
  }
  /**
   * Returns a Javascript object with this Duration's values.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
   * @return {Object}
   */
  ;

  _proto.toObject = function toObject(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) return {};
    var base = Object.assign({}, this.values);

    if (opts.includeConfig) {
      base.conversionAccuracy = this.conversionAccuracy;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }

    return base;
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Duration.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
   * @return {string}
   */
  ;

  _proto.toISO = function toISO() {
    // we could use the formatter, but this is an easier way to get the minimum string
    if (!this.isValid) return null;
    var s = "P";
    if (this.years !== 0) s += this.years + "Y";
    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
    if (this.weeks !== 0) s += this.weeks + "W";
    if (this.days !== 0) s += this.days + "D";
    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s += "T";
    if (this.hours !== 0) s += this.hours + "H";
    if (this.minutes !== 0) s += this.minutes + "M";
    if (this.seconds !== 0 || this.milliseconds !== 0) // this will handle "floating point madness" by removing extra decimal places
      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
    if (s === "P") s += "T0S";
    return s;
  }
  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
   * @return {string}
   */
  ;

  _proto.toJSON = function toJSON() {
    return this.toISO();
  }
  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    return this.toISO();
  }
  /**
   * Returns an milliseconds value of this Duration.
   * @return {number}
   */
  ;

  _proto.valueOf = function valueOf() {
    return this.as("milliseconds");
  }
  /**
   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  ;

  _proto.plus = function plus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration),
        result = {};

    for (var _iterator = _createForOfIteratorHelperLoose(orderedUnits), _step; !(_step = _iterator()).done;) {
      var k = _step.value;

      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
        result[k] = dur.get(k) + this.get(k);
      }
    }

    return clone(this, {
      values: result
    }, true);
  }
  /**
   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  ;

  _proto.minus = function minus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration);
    return this.plus(dur.negate());
  }
  /**
   * Scale this Duration by the specified amount. Return a newly-constructed Duration.
   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === "hour" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
   * @return {Duration}
   */
  ;

  _proto.mapUnits = function mapUnits(fn) {
    if (!this.isValid) return this;
    var result = {};

    for (var _i = 0, _Object$keys = Object.keys(this.values); _i < _Object$keys.length; _i++) {
      var k = _Object$keys[_i];
      result[k] = asNumber(fn(this.values[k], k));
    }

    return clone(this, {
      values: result
    }, true);
  }
  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2
   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0
   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3
   * @return {number}
   */
  ;

  _proto.get = function get(unit) {
    return this[Duration.normalizeUnit(unit)];
  }
  /**
   * "Set" the values of specified units. Return a newly-constructed Duration.
   * @param {Object} values - a mapping of units to numbers
   * @example dur.set({ years: 2017 })
   * @example dur.set({ hours: 8, minutes: 30 })
   * @return {Duration}
   */
  ;

  _proto.set = function set(values) {
    if (!this.isValid) return this;
    var mixed = Object.assign(this.values, normalizeObject(values, Duration.normalizeUnit, []));
    return clone(this, {
      values: mixed
    });
  }
  /**
   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
   * @example dur.reconfigure({ locale: 'en-GB' })
   * @return {Duration}
   */
  ;

  _proto.reconfigure = function reconfigure(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        locale = _ref.locale,
        numberingSystem = _ref.numberingSystem,
        conversionAccuracy = _ref.conversionAccuracy;

    var loc = this.loc.clone({
      locale: locale,
      numberingSystem: numberingSystem
    }),
        opts = {
      loc: loc
    };

    if (conversionAccuracy) {
      opts.conversionAccuracy = conversionAccuracy;
    }

    return clone(this, opts);
  }
  /**
   * Return the length of the duration in the specified unit.
   * @param {string} unit - a unit such as 'minutes' or 'days'
   * @example Duration.fromObject({years: 1}).as('days') //=> 365
   * @example Duration.fromObject({years: 1}).as('months') //=> 12
   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
   * @return {number}
   */
  ;

  _proto.as = function as(unit) {
    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
  }
  /**
   * Reduce this Duration to its canonical representation in its current units.
   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
   * @return {Duration}
   */
  ;

  _proto.normalize = function normalize() {
    if (!this.isValid) return this;
    var vals = this.toObject();
    normalizeValues(this.matrix, vals);
    return clone(this, {
      values: vals
    }, true);
  }
  /**
   * Convert this Duration into its representation in a different set of units.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
   * @return {Duration}
   */
  ;

  _proto.shiftTo = function shiftTo() {
    for (var _len = arguments.length, units = new Array(_len), _key = 0; _key < _len; _key++) {
      units[_key] = arguments[_key];
    }

    if (!this.isValid) return this;

    if (units.length === 0) {
      return this;
    }

    units = units.map(function (u) {
      return Duration.normalizeUnit(u);
    });
    var built = {},
        accumulated = {},
        vals = this.toObject();
    var lastUnit;

    for (var _iterator2 = _createForOfIteratorHelperLoose(orderedUnits), _step2; !(_step2 = _iterator2()).done;) {
      var k = _step2.value;

      if (units.indexOf(k) >= 0) {
        lastUnit = k;
        var own = 0; // anything we haven't boiled down yet should get boiled to this unit

        for (var ak in accumulated) {
          own += this.matrix[ak][k] * accumulated[ak];
          accumulated[ak] = 0;
        } // plus anything that's already in this unit


        if (isNumber(vals[k])) {
          own += vals[k];
        }

        var i = Math.trunc(own);
        built[k] = i;
        accumulated[k] = own - i; // we'd like to absorb these fractions in another unit
        // plus anything further down the chain that should be rolled up in to this

        for (var down in vals) {
          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {
            convert(this.matrix, vals, down, built, k);
          }
        } // otherwise, keep it in the wings to boil it later

      } else if (isNumber(vals[k])) {
        accumulated[k] = vals[k];
      }
    } // anything leftover becomes the decimal for the last unit
    // lastUnit must be defined since units is not empty


    for (var key in accumulated) {
      if (accumulated[key] !== 0) {
        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
      }
    }

    return clone(this, {
      values: built
    }, true).normalize();
  }
  /**
   * Return the negative of this Duration.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
   * @return {Duration}
   */
  ;

  _proto.negate = function negate() {
    if (!this.isValid) return this;
    var negated = {};

    for (var _i2 = 0, _Object$keys2 = Object.keys(this.values); _i2 < _Object$keys2.length; _i2++) {
      var k = _Object$keys2[_i2];
      negated[k] = -this.values[k];
    }

    return clone(this, {
      values: negated
    }, true);
  }
  /**
   * Get the years.
   * @type {number}
   */
  ;

  /**
   * Equality check
   * Two Durations are equal iff they have the same units and the same values for each unit.
   * @param {Duration} other
   * @return {boolean}
   */
  _proto.equals = function equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    if (!this.loc.equals(other.loc)) {
      return false;
    }

    for (var _iterator3 = _createForOfIteratorHelperLoose(orderedUnits), _step3; !(_step3 = _iterator3()).done;) {
      var u = _step3.value;

      if (this.values[u] !== other.values[u]) {
        return false;
      }
    }

    return true;
  };

  _createClass(Duration, [{
    key: "locale",
    get: function get() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
     *
     * @type {string}
     */

  }, {
    key: "numberingSystem",
    get: function get() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
  }, {
    key: "years",
    get: function get() {
      return this.isValid ? this.values.years || 0 : NaN;
    }
    /**
     * Get the quarters.
     * @type {number}
     */

  }, {
    key: "quarters",
    get: function get() {
      return this.isValid ? this.values.quarters || 0 : NaN;
    }
    /**
     * Get the months.
     * @type {number}
     */

  }, {
    key: "months",
    get: function get() {
      return this.isValid ? this.values.months || 0 : NaN;
    }
    /**
     * Get the weeks
     * @type {number}
     */

  }, {
    key: "weeks",
    get: function get() {
      return this.isValid ? this.values.weeks || 0 : NaN;
    }
    /**
     * Get the days.
     * @type {number}
     */

  }, {
    key: "days",
    get: function get() {
      return this.isValid ? this.values.days || 0 : NaN;
    }
    /**
     * Get the hours.
     * @type {number}
     */

  }, {
    key: "hours",
    get: function get() {
      return this.isValid ? this.values.hours || 0 : NaN;
    }
    /**
     * Get the minutes.
     * @type {number}
     */

  }, {
    key: "minutes",
    get: function get() {
      return this.isValid ? this.values.minutes || 0 : NaN;
    }
    /**
     * Get the seconds.
     * @return {number}
     */

  }, {
    key: "seconds",
    get: function get() {
      return this.isValid ? this.values.seconds || 0 : NaN;
    }
    /**
     * Get the milliseconds.
     * @return {number}
     */

  }, {
    key: "milliseconds",
    get: function get() {
      return this.isValid ? this.values.milliseconds || 0 : NaN;
    }
    /**
     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
     * on invalid DateTimes or Intervals.
     * @return {boolean}
     */

  }, {
    key: "isValid",
    get: function get() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this Duration became invalid, or null if the Duration is valid
     * @return {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
  }]);

  return Duration;
}();
function friendlyDuration(durationish) {
  if (isNumber(durationish)) {
    return Duration.fromMillis(durationish);
  } else if (Duration.isDuration(durationish)) {
    return durationish;
  } else if (typeof durationish === "object") {
    return Duration.fromObject(durationish);
  } else {
    throw new InvalidArgumentError("Unknown duration argument " + durationish + " of type " + typeof durationish);
  }
}

var INVALID$1 = "Invalid Interval"; // checks if the start is equal to or before the end

function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid("end before start", "The end of an interval must be after its start, but you had start=" + start.toISO() + " and end=" + end.toISO());
  } else {
    return null;
  }
}
/**
 * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
 *
 * Here is a brief overview of the most commonly used methods and getters in Interval:
 *
 * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.
 * * **Accessors** Use {@link start} and {@link end} to get the start and end.
 * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.
 * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.
 * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}.
 * * **Output** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toISODate}, {@link toISOTime}, {@link toFormat}, and {@link toDuration}.
 */


var Interval = /*#__PURE__*/function () {
  /**
   * @private
   */
  function Interval(config) {
    /**
     * @access private
     */
    this.s = config.start;
    /**
     * @access private
     */

    this.e = config.end;
    /**
     * @access private
     */

    this.invalid = config.invalid || null;
    /**
     * @access private
     */

    this.isLuxonInterval = true;
  }
  /**
   * Create an invalid Interval.
   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Interval}
   */


  Interval.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidIntervalError(invalid);
    } else {
      return new Interval({
        invalid: invalid
      });
    }
  }
  /**
   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
   * @param {DateTime|Date|Object} start
   * @param {DateTime|Date|Object} end
   * @return {Interval}
   */
  ;

  Interval.fromDateTimes = function fromDateTimes(start, end) {
    var builtStart = friendlyDateTime(start),
        builtEnd = friendlyDateTime(end);
    var validateError = validateStartEnd(builtStart, builtEnd);

    if (validateError == null) {
      return new Interval({
        start: builtStart,
        end: builtEnd
      });
    } else {
      return validateError;
    }
  }
  /**
   * Create an Interval from a start DateTime and a Duration to extend to.
   * @param {DateTime|Date|Object} start
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  ;

  Interval.after = function after(start, duration) {
    var dur = friendlyDuration(duration),
        dt = friendlyDateTime(start);
    return Interval.fromDateTimes(dt, dt.plus(dur));
  }
  /**
   * Create an Interval from an end DateTime and a Duration to extend backwards to.
   * @param {DateTime|Date|Object} end
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  ;

  Interval.before = function before(end, duration) {
    var dur = friendlyDuration(duration),
        dt = friendlyDateTime(end);
    return Interval.fromDateTimes(dt.minus(dur), dt);
  }
  /**
   * Create an Interval from an ISO 8601 string.
   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
   * @param {string} text - the ISO string to parse
   * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {Interval}
   */
  ;

  Interval.fromISO = function fromISO(text, opts) {
    var _split = (text || "").split("/", 2),
        s = _split[0],
        e = _split[1];

    if (s && e) {
      var start, startIsValid;

      try {
        start = DateTime.fromISO(s, opts);
        startIsValid = start.isValid;
      } catch (e) {
        startIsValid = false;
      }

      var end, endIsValid;

      try {
        end = DateTime.fromISO(e, opts);
        endIsValid = end.isValid;
      } catch (e) {
        endIsValid = false;
      }

      if (startIsValid && endIsValid) {
        return Interval.fromDateTimes(start, end);
      }

      if (startIsValid) {
        var dur = Duration.fromISO(e, opts);

        if (dur.isValid) {
          return Interval.after(start, dur);
        }
      } else if (endIsValid) {
        var _dur = Duration.fromISO(s, opts);

        if (_dur.isValid) {
          return Interval.before(end, _dur);
        }
      }
    }

    return Interval.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
  }
  /**
   * Check if an object is an Interval. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  Interval.isInterval = function isInterval(o) {
    return o && o.isLuxonInterval || false;
  }
  /**
   * Returns the start of the Interval
   * @type {DateTime}
   */
  ;

  var _proto = Interval.prototype;

  /**
   * Returns the length of the Interval in the specified unit.
   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
   * @return {number}
   */
  _proto.length = function length(unit) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    return this.isValid ? this.toDuration.apply(this, [unit]).get(unit) : NaN;
  }
  /**
   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
   * @param {string} [unit='milliseconds'] - the unit of time to count.
   * @return {number}
   */
  ;

  _proto.count = function count(unit) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (!this.isValid) return NaN;
    var start = this.start.startOf(unit),
        end = this.end.startOf(unit);
    return Math.floor(end.diff(start, unit).get(unit)) + 1;
  }
  /**
   * Returns whether this Interval's start and end are both in the same unit of time
   * @param {string} unit - the unit of time to check sameness on
   * @return {boolean}
   */
  ;

  _proto.hasSame = function hasSame(unit) {
    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
  }
  /**
   * Return whether this Interval has the same start and end DateTimes.
   * @return {boolean}
   */
  ;

  _proto.isEmpty = function isEmpty() {
    return this.s.valueOf() === this.e.valueOf();
  }
  /**
   * Return whether this Interval's start is after the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.isAfter = function isAfter(dateTime) {
    if (!this.isValid) return false;
    return this.s > dateTime;
  }
  /**
   * Return whether this Interval's end is before the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.isBefore = function isBefore(dateTime) {
    if (!this.isValid) return false;
    return this.e <= dateTime;
  }
  /**
   * Return whether this Interval contains the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.contains = function contains(dateTime) {
    if (!this.isValid) return false;
    return this.s <= dateTime && this.e > dateTime;
  }
  /**
   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
   * @param {Object} values - the values to set
   * @param {DateTime} values.start - the starting DateTime
   * @param {DateTime} values.end - the ending DateTime
   * @return {Interval}
   */
  ;

  _proto.set = function set(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        start = _ref.start,
        end = _ref.end;

    if (!this.isValid) return this;
    return Interval.fromDateTimes(start || this.s, end || this.e);
  }
  /**
   * Split this Interval at each of the specified DateTimes
   * @param {...[DateTime]} dateTimes - the unit of time to count.
   * @return {[Interval]}
   */
  ;

  _proto.splitAt = function splitAt() {
    var _this = this;

    if (!this.isValid) return [];

    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
      dateTimes[_key] = arguments[_key];
    }

    var sorted = dateTimes.map(friendlyDateTime).filter(function (d) {
      return _this.contains(d);
    }).sort(),
        results = [];
    var s = this.s,
        i = 0;

    while (s < this.e) {
      var added = sorted[i] || this.e,
          next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
      i += 1;
    }

    return results;
  }
  /**
   * Split this Interval into smaller Intervals, each of the specified length.
   * Left over time is grouped into a smaller interval
   * @param {Duration|Object|number} duration - The length of each resulting interval.
   * @return {[Interval]}
   */
  ;

  _proto.splitBy = function splitBy(duration) {
    var dur = friendlyDuration(duration);

    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
      return [];
    }

    var s = this.s,
        added,
        next;
    var results = [];

    while (s < this.e) {
      added = s.plus(dur);
      next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
    }

    return results;
  }
  /**
   * Split this Interval into the specified number of smaller intervals.
   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
   * @return {[Interval]}
   */
  ;

  _proto.divideEqually = function divideEqually(numberOfParts) {
    if (!this.isValid) return [];
    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
  }
  /**
   * Return whether this Interval overlaps with the specified Interval
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.overlaps = function overlaps(other) {
    return this.e > other.s && this.s < other.e;
  }
  /**
   * Return whether this Interval's end is adjacent to the specified Interval's start.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.abutsStart = function abutsStart(other) {
    if (!this.isValid) return false;
    return +this.e === +other.s;
  }
  /**
   * Return whether this Interval's start is adjacent to the specified Interval's end.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.abutsEnd = function abutsEnd(other) {
    if (!this.isValid) return false;
    return +other.e === +this.s;
  }
  /**
   * Return whether this Interval engulfs the start and end of the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.engulfs = function engulfs(other) {
    if (!this.isValid) return false;
    return this.s <= other.s && this.e >= other.e;
  }
  /**
   * Return whether this Interval has the same start and end as the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    return this.s.equals(other.s) && this.e.equals(other.e);
  }
  /**
   * Return an Interval representing the intersection of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
   * Returns null if the intersection is empty, meaning, the intervals don't intersect.
   * @param {Interval} other
   * @return {Interval}
   */
  ;

  _proto.intersection = function intersection(other) {
    if (!this.isValid) return this;
    var s = this.s > other.s ? this.s : other.s,
        e = this.e < other.e ? this.e : other.e;

    if (s > e) {
      return null;
    } else {
      return Interval.fromDateTimes(s, e);
    }
  }
  /**
   * Return an Interval representing the union of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
   * @param {Interval} other
   * @return {Interval}
   */
  ;

  _proto.union = function union(other) {
    if (!this.isValid) return this;
    var s = this.s < other.s ? this.s : other.s,
        e = this.e > other.e ? this.e : other.e;
    return Interval.fromDateTimes(s, e);
  }
  /**
   * Merge an array of Intervals into a equivalent minimal set of Intervals.
   * Combines overlapping and adjacent Intervals.
   * @param {[Interval]} intervals
   * @return {[Interval]}
   */
  ;

  Interval.merge = function merge(intervals) {
    var _intervals$sort$reduc = intervals.sort(function (a, b) {
      return a.s - b.s;
    }).reduce(function (_ref2, item) {
      var sofar = _ref2[0],
          current = _ref2[1];

      if (!current) {
        return [sofar, item];
      } else if (current.overlaps(item) || current.abutsStart(item)) {
        return [sofar, current.union(item)];
      } else {
        return [sofar.concat([current]), item];
      }
    }, [[], null]),
        found = _intervals$sort$reduc[0],
        final = _intervals$sort$reduc[1];

    if (final) {
      found.push(final);
    }

    return found;
  }
  /**
   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
   * @param {[Interval]} intervals
   * @return {[Interval]}
   */
  ;

  Interval.xor = function xor(intervals) {
    var _Array$prototype;

    var start = null,
        currentCount = 0;

    var results = [],
        ends = intervals.map(function (i) {
      return [{
        time: i.s,
        type: "s"
      }, {
        time: i.e,
        type: "e"
      }];
    }),
        flattened = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, ends),
        arr = flattened.sort(function (a, b) {
      return a.time - b.time;
    });

    for (var _iterator = _createForOfIteratorHelperLoose(arr), _step; !(_step = _iterator()).done;) {
      var i = _step.value;
      currentCount += i.type === "s" ? 1 : -1;

      if (currentCount === 1) {
        start = i.time;
      } else {
        if (start && +start !== +i.time) {
          results.push(Interval.fromDateTimes(start, i.time));
        }

        start = null;
      }
    }

    return Interval.merge(results);
  }
  /**
   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
   * @param {...Interval} intervals
   * @return {[Interval]}
   */
  ;

  _proto.difference = function difference() {
    var _this2 = this;

    for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      intervals[_key2] = arguments[_key2];
    }

    return Interval.xor([this].concat(intervals)).map(function (i) {
      return _this2.intersection(i);
    }).filter(function (i) {
      return i && !i.isEmpty();
    });
  }
  /**
   * Returns a string representation of this Interval appropriate for debugging.
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    if (!this.isValid) return INVALID$1;
    return "[" + this.s.toISO() + " \u2013 " + this.e.toISO() + ")";
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Interval.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime.toISO}
   * @return {string}
   */
  ;

  _proto.toISO = function toISO(opts) {
    if (!this.isValid) return INVALID$1;
    return this.s.toISO(opts) + "/" + this.e.toISO(opts);
  }
  /**
   * Returns an ISO 8601-compliant string representation of date of this Interval.
   * The time components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {string}
   */
  ;

  _proto.toISODate = function toISODate() {
    if (!this.isValid) return INVALID$1;
    return this.s.toISODate() + "/" + this.e.toISODate();
  }
  /**
   * Returns an ISO 8601-compliant string representation of time of this Interval.
   * The date components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime.toISO}
   * @return {string}
   */
  ;

  _proto.toISOTime = function toISOTime(opts) {
    if (!this.isValid) return INVALID$1;
    return this.s.toISOTime(opts) + "/" + this.e.toISOTime(opts);
  }
  /**
   * Returns a string representation of this Interval formatted according to the specified format string.
   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.
   * @param {Object} opts - options
   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations
   * @return {string}
   */
  ;

  _proto.toFormat = function toFormat(dateFormat, _temp2) {
    var _ref3 = _temp2 === void 0 ? {} : _temp2,
        _ref3$separator = _ref3.separator,
        separator = _ref3$separator === void 0 ? " – " : _ref3$separator;

    if (!this.isValid) return INVALID$1;
    return "" + this.s.toFormat(dateFormat) + separator + this.e.toFormat(dateFormat);
  }
  /**
   * Return a Duration representing the time spanned by this interval.
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
   * @return {Duration}
   */
  ;

  _proto.toDuration = function toDuration(unit, opts) {
    if (!this.isValid) {
      return Duration.invalid(this.invalidReason);
    }

    return this.e.diff(this.s, unit, opts);
  }
  /**
   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
   * @param {function} mapFn
   * @return {Interval}
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
   */
  ;

  _proto.mapEndpoints = function mapEndpoints(mapFn) {
    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
  };

  _createClass(Interval, [{
    key: "start",
    get: function get() {
      return this.isValid ? this.s : null;
    }
    /**
     * Returns the end of the Interval
     * @type {DateTime}
     */

  }, {
    key: "end",
    get: function get() {
      return this.isValid ? this.e : null;
    }
    /**
     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
     * @type {boolean}
     */

  }, {
    key: "isValid",
    get: function get() {
      return this.invalidReason === null;
    }
    /**
     * Returns an error code if this Interval is invalid, or null if the Interval is valid
     * @type {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
  }]);

  return Interval;
}();

/**
 * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
 */

var Info = /*#__PURE__*/function () {
  function Info() {}

  /**
   * Return whether the specified zone contains a DST.
   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
   * @return {boolean}
   */
  Info.hasDST = function hasDST(zone) {
    if (zone === void 0) {
      zone = Settings.defaultZone;
    }

    var proto = DateTime.local().setZone(zone).set({
      month: 12
    });
    return !zone.universal && proto.offset !== proto.set({
      month: 6
    }).offset;
  }
  /**
   * Return whether the specified zone is a valid IANA specifier.
   * @param {string} zone - Zone to check
   * @return {boolean}
   */
  ;

  Info.isValidIANAZone = function isValidIANAZone(zone) {
    return IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);
  }
  /**
   * Converts the input into a {@link Zone} instance.
   *
   * * If `input` is already a Zone instance, it is returned unchanged.
   * * If `input` is a string containing a valid time zone name, a Zone instance
   *   with that name is returned.
   * * If `input` is a string that doesn't refer to a known time zone, a Zone
   *   instance with {@link Zone.isValid} == false is returned.
   * * If `input is a number, a Zone instance with the specified fixed offset
   *   in minutes is returned.
   * * If `input` is `null` or `undefined`, the default zone is returned.
   * @param {string|Zone|number} [input] - the value to be converted
   * @return {Zone}
   */
  ;

  Info.normalizeZone = function normalizeZone$1(input) {
    return normalizeZone(input, Settings.defaultZone);
  }
  /**
   * Return an array of standalone month names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @example Info.months()[0] //=> 'January'
   * @example Info.months('short')[0] //=> 'Jan'
   * @example Info.months('numeric')[0] //=> '1'
   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
   * @return {[string]}
   */
  ;

  Info.months = function months(length, _temp) {
    if (length === void 0) {
      length = "long";
    }

    var _ref = _temp === void 0 ? {} : _temp,
        _ref$locale = _ref.locale,
        locale = _ref$locale === void 0 ? null : _ref$locale,
        _ref$numberingSystem = _ref.numberingSystem,
        numberingSystem = _ref$numberingSystem === void 0 ? null : _ref$numberingSystem,
        _ref$outputCalendar = _ref.outputCalendar,
        outputCalendar = _ref$outputCalendar === void 0 ? "gregory" : _ref$outputCalendar;

    return Locale.create(locale, numberingSystem, outputCalendar).months(length);
  }
  /**
   * Return an array of format month names.
   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
   * changes the string.
   * See {@link months}
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @return {[string]}
   */
  ;

  Info.monthsFormat = function monthsFormat(length, _temp2) {
    if (length === void 0) {
      length = "long";
    }

    var _ref2 = _temp2 === void 0 ? {} : _temp2,
        _ref2$locale = _ref2.locale,
        locale = _ref2$locale === void 0 ? null : _ref2$locale,
        _ref2$numberingSystem = _ref2.numberingSystem,
        numberingSystem = _ref2$numberingSystem === void 0 ? null : _ref2$numberingSystem,
        _ref2$outputCalendar = _ref2.outputCalendar,
        outputCalendar = _ref2$outputCalendar === void 0 ? "gregory" : _ref2$outputCalendar;

    return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);
  }
  /**
   * Return an array of standalone week names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @example Info.weekdays()[0] //=> 'Monday'
   * @example Info.weekdays('short')[0] //=> 'Mon'
   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
   * @return {[string]}
   */
  ;

  Info.weekdays = function weekdays(length, _temp3) {
    if (length === void 0) {
      length = "long";
    }

    var _ref3 = _temp3 === void 0 ? {} : _temp3,
        _ref3$locale = _ref3.locale,
        locale = _ref3$locale === void 0 ? null : _ref3$locale,
        _ref3$numberingSystem = _ref3.numberingSystem,
        numberingSystem = _ref3$numberingSystem === void 0 ? null : _ref3$numberingSystem;

    return Locale.create(locale, numberingSystem, null).weekdays(length);
  }
  /**
   * Return an array of format week names.
   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
   * changes the string.
   * See {@link weekdays}
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale=null] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @return {[string]}
   */
  ;

  Info.weekdaysFormat = function weekdaysFormat(length, _temp4) {
    if (length === void 0) {
      length = "long";
    }

    var _ref4 = _temp4 === void 0 ? {} : _temp4,
        _ref4$locale = _ref4.locale,
        locale = _ref4$locale === void 0 ? null : _ref4$locale,
        _ref4$numberingSystem = _ref4.numberingSystem,
        numberingSystem = _ref4$numberingSystem === void 0 ? null : _ref4$numberingSystem;

    return Locale.create(locale, numberingSystem, null).weekdays(length, true);
  }
  /**
   * Return an array of meridiems.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.meridiems() //=> [ 'AM', 'PM' ]
   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
   * @return {[string]}
   */
  ;

  Info.meridiems = function meridiems(_temp5) {
    var _ref5 = _temp5 === void 0 ? {} : _temp5,
        _ref5$locale = _ref5.locale,
        locale = _ref5$locale === void 0 ? null : _ref5$locale;

    return Locale.create(locale).meridiems();
  }
  /**
   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
   * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.eras() //=> [ 'BC', 'AD' ]
   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
   * @return {[string]}
   */
  ;

  Info.eras = function eras(length, _temp6) {
    if (length === void 0) {
      length = "short";
    }

    var _ref6 = _temp6 === void 0 ? {} : _temp6,
        _ref6$locale = _ref6.locale,
        locale = _ref6$locale === void 0 ? null : _ref6$locale;

    return Locale.create(locale, null, "gregory").eras(length);
  }
  /**
   * Return the set of available features in this environment.
   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.
   * Keys:
   * * `zones`: whether this environment supports IANA timezones
   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing
   * * `intl`: whether this environment supports general internationalization
   * * `relative`: whether this environment supports relative time formatting
   * @example Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }
   * @return {Object}
   */
  ;

  Info.features = function features() {
    var intl = false,
        intlTokens = false,
        zones = false,
        relative = false;

    if (hasIntl()) {
      intl = true;
      intlTokens = hasFormatToParts();
      relative = hasRelative();

      try {
        zones = new Intl.DateTimeFormat("en", {
          timeZone: "America/New_York"
        }).resolvedOptions().timeZone === "America/New_York";
      } catch (e) {
        zones = false;
      }
    }

    return {
      intl: intl,
      intlTokens: intlTokens,
      zones: zones,
      relative: relative
    };
  };

  return Info;
}();

function dayDiff(earlier, later) {
  var utcDayStart = function utcDayStart(dt) {
    return dt.toUTC(0, {
      keepLocalTime: true
    }).startOf("day").valueOf();
  },
      ms = utcDayStart(later) - utcDayStart(earlier);

  return Math.floor(Duration.fromMillis(ms).as("days"));
}

function highOrderDiffs(cursor, later, units) {
  var differs = [["years", function (a, b) {
    return b.year - a.year;
  }], ["months", function (a, b) {
    return b.month - a.month + (b.year - a.year) * 12;
  }], ["weeks", function (a, b) {
    var days = dayDiff(a, b);
    return (days - days % 7) / 7;
  }], ["days", dayDiff]];
  var results = {};
  var lowestOrder, highWater;

  for (var _i = 0, _differs = differs; _i < _differs.length; _i++) {
    var _differs$_i = _differs[_i],
        unit = _differs$_i[0],
        differ = _differs$_i[1];

    if (units.indexOf(unit) >= 0) {
      var _cursor$plus;

      lowestOrder = unit;
      var delta = differ(cursor, later);
      highWater = cursor.plus((_cursor$plus = {}, _cursor$plus[unit] = delta, _cursor$plus));

      if (highWater > later) {
        var _cursor$plus2;

        cursor = cursor.plus((_cursor$plus2 = {}, _cursor$plus2[unit] = delta - 1, _cursor$plus2));
        delta -= 1;
      } else {
        cursor = highWater;
      }

      results[unit] = delta;
    }
  }

  return [cursor, results, highWater, lowestOrder];
}

function _diff (earlier, later, units, opts) {
  var _highOrderDiffs = highOrderDiffs(earlier, later, units),
      cursor = _highOrderDiffs[0],
      results = _highOrderDiffs[1],
      highWater = _highOrderDiffs[2],
      lowestOrder = _highOrderDiffs[3];

  var remainingMillis = later - cursor;
  var lowerOrderUnits = units.filter(function (u) {
    return ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0;
  });

  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      var _cursor$plus3;

      highWater = cursor.plus((_cursor$plus3 = {}, _cursor$plus3[lowestOrder] = 1, _cursor$plus3));
    }

    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }

  var duration = Duration.fromObject(Object.assign(results, opts));

  if (lowerOrderUnits.length > 0) {
    var _Duration$fromMillis;

    return (_Duration$fromMillis = Duration.fromMillis(remainingMillis, opts)).shiftTo.apply(_Duration$fromMillis, lowerOrderUnits).plus(duration);
  } else {
    return duration;
  }
}

var numberingSystems = {
  arab: "[\u0660-\u0669]",
  arabext: "[\u06F0-\u06F9]",
  bali: "[\u1B50-\u1B59]",
  beng: "[\u09E6-\u09EF]",
  deva: "[\u0966-\u096F]",
  fullwide: "[\uFF10-\uFF19]",
  gujr: "[\u0AE6-\u0AEF]",
  hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
  khmr: "[\u17E0-\u17E9]",
  knda: "[\u0CE6-\u0CEF]",
  laoo: "[\u0ED0-\u0ED9]",
  limb: "[\u1946-\u194F]",
  mlym: "[\u0D66-\u0D6F]",
  mong: "[\u1810-\u1819]",
  mymr: "[\u1040-\u1049]",
  orya: "[\u0B66-\u0B6F]",
  tamldec: "[\u0BE6-\u0BEF]",
  telu: "[\u0C66-\u0C6F]",
  thai: "[\u0E50-\u0E59]",
  tibt: "[\u0F20-\u0F29]",
  latn: "\\d"
};
var numberingSystemsUTF16 = {
  arab: [1632, 1641],
  arabext: [1776, 1785],
  bali: [6992, 7001],
  beng: [2534, 2543],
  deva: [2406, 2415],
  fullwide: [65296, 65303],
  gujr: [2790, 2799],
  khmr: [6112, 6121],
  knda: [3302, 3311],
  laoo: [3792, 3801],
  limb: [6470, 6479],
  mlym: [3430, 3439],
  mong: [6160, 6169],
  mymr: [4160, 4169],
  orya: [2918, 2927],
  tamldec: [3046, 3055],
  telu: [3174, 3183],
  thai: [3664, 3673],
  tibt: [3872, 3881]
}; // eslint-disable-next-line

var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function parseDigits(str) {
  var value = parseInt(str, 10);

  if (isNaN(value)) {
    value = "";

    for (var i = 0; i < str.length; i++) {
      var code = str.charCodeAt(i);

      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (var key in numberingSystemsUTF16) {
          var _numberingSystemsUTF = numberingSystemsUTF16[key],
              min = _numberingSystemsUTF[0],
              max = _numberingSystemsUTF[1];

          if (code >= min && code <= max) {
            value += code - min;
          }
        }
      }
    }

    return parseInt(value, 10);
  } else {
    return value;
  }
}
function digitRegex(_ref, append) {
  var numberingSystem = _ref.numberingSystem;

  if (append === void 0) {
    append = "";
  }

  return new RegExp("" + numberingSystems[numberingSystem || "latn"] + append);
}

var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

function intUnit(regex, post) {
  if (post === void 0) {
    post = function post(i) {
      return i;
    };
  }

  return {
    regex: regex,
    deser: function deser(_ref) {
      var s = _ref[0];
      return post(parseDigits(s));
    }
  };
}

var NBSP = String.fromCharCode(160);
var spaceOrNBSP = "( |" + NBSP + ")";
var spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");

function fixListRegex(s) {
  // make dots optional and also make them literal
  // make space and non breakable space characters interchangeable
  return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}

function stripInsensitivities(s) {
  return s.replace(/\./g, "") // ignore dots that were made optional
  .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
  .toLowerCase();
}

function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: function deser(_ref2) {
        var s = _ref2[0];
        return strings.findIndex(function (i) {
          return stripInsensitivities(s) === stripInsensitivities(i);
        }) + startIndex;
      }
    };
  }
}

function offset(regex, groups) {
  return {
    regex: regex,
    deser: function deser(_ref3) {
      var h = _ref3[1],
          m = _ref3[2];
      return signedOffset(h, m);
    },
    groups: groups
  };
}

function simple(regex) {
  return {
    regex: regex,
    deser: function deser(_ref4) {
      var s = _ref4[0];
      return s;
    }
  };
}

function escapeToken(value) {
  // eslint-disable-next-line no-useless-escape
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}

function unitForToken(token, loc) {
  var one = digitRegex(loc),
      two = digitRegex(loc, "{2}"),
      three = digitRegex(loc, "{3}"),
      four = digitRegex(loc, "{4}"),
      six = digitRegex(loc, "{6}"),
      oneOrTwo = digitRegex(loc, "{1,2}"),
      oneToThree = digitRegex(loc, "{1,3}"),
      oneToSix = digitRegex(loc, "{1,6}"),
      oneToNine = digitRegex(loc, "{1,9}"),
      twoToFour = digitRegex(loc, "{2,4}"),
      fourToSix = digitRegex(loc, "{4,6}"),
      literal = function literal(t) {
    return {
      regex: RegExp(escapeToken(t.val)),
      deser: function deser(_ref5) {
        var s = _ref5[0];
        return s;
      },
      literal: true
    };
  },
      unitate = function unitate(t) {
    if (token.literal) {
      return literal(t);
    }

    switch (t.val) {
      // era
      case "G":
        return oneOf(loc.eras("short", false), 0);

      case "GG":
        return oneOf(loc.eras("long", false), 0);
      // years

      case "y":
        return intUnit(oneToSix);

      case "yy":
        return intUnit(twoToFour, untruncateYear);

      case "yyyy":
        return intUnit(four);

      case "yyyyy":
        return intUnit(fourToSix);

      case "yyyyyy":
        return intUnit(six);
      // months

      case "M":
        return intUnit(oneOrTwo);

      case "MM":
        return intUnit(two);

      case "MMM":
        return oneOf(loc.months("short", true, false), 1);

      case "MMMM":
        return oneOf(loc.months("long", true, false), 1);

      case "L":
        return intUnit(oneOrTwo);

      case "LL":
        return intUnit(two);

      case "LLL":
        return oneOf(loc.months("short", false, false), 1);

      case "LLLL":
        return oneOf(loc.months("long", false, false), 1);
      // dates

      case "d":
        return intUnit(oneOrTwo);

      case "dd":
        return intUnit(two);
      // ordinals

      case "o":
        return intUnit(oneToThree);

      case "ooo":
        return intUnit(three);
      // time

      case "HH":
        return intUnit(two);

      case "H":
        return intUnit(oneOrTwo);

      case "hh":
        return intUnit(two);

      case "h":
        return intUnit(oneOrTwo);

      case "mm":
        return intUnit(two);

      case "m":
        return intUnit(oneOrTwo);

      case "q":
        return intUnit(oneOrTwo);

      case "qq":
        return intUnit(two);

      case "s":
        return intUnit(oneOrTwo);

      case "ss":
        return intUnit(two);

      case "S":
        return intUnit(oneToThree);

      case "SSS":
        return intUnit(three);

      case "u":
        return simple(oneToNine);
      // meridiem

      case "a":
        return oneOf(loc.meridiems(), 0);
      // weekYear (k)

      case "kkkk":
        return intUnit(four);

      case "kk":
        return intUnit(twoToFour, untruncateYear);
      // weekNumber (W)

      case "W":
        return intUnit(oneOrTwo);

      case "WW":
        return intUnit(two);
      // weekdays

      case "E":
      case "c":
        return intUnit(one);

      case "EEE":
        return oneOf(loc.weekdays("short", false, false), 1);

      case "EEEE":
        return oneOf(loc.weekdays("long", false, false), 1);

      case "ccc":
        return oneOf(loc.weekdays("short", true, false), 1);

      case "cccc":
        return oneOf(loc.weekdays("long", true, false), 1);
      // offset/zone

      case "Z":
      case "ZZ":
        return offset(new RegExp("([+-]" + oneOrTwo.source + ")(?::(" + two.source + "))?"), 2);

      case "ZZZ":
        return offset(new RegExp("([+-]" + oneOrTwo.source + ")(" + two.source + ")?"), 2);
      // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
      // because we don't have any way to figure out what they are

      case "z":
        return simple(/[a-z_+-/]{1,256}?/i);

      default:
        return literal(t);
    }
  };

  var unit = unitate(token) || {
    invalidReason: MISSING_FTP
  };
  unit.token = token;
  return unit;
}

var partTypeStyleToTokenVal = {
  year: {
    "2-digit": "yy",
    numeric: "yyyyy"
  },
  month: {
    numeric: "M",
    "2-digit": "MM",
    short: "MMM",
    long: "MMMM"
  },
  day: {
    numeric: "d",
    "2-digit": "dd"
  },
  weekday: {
    short: "EEE",
    long: "EEEE"
  },
  dayperiod: "a",
  dayPeriod: "a",
  hour: {
    numeric: "h",
    "2-digit": "hh"
  },
  minute: {
    numeric: "m",
    "2-digit": "mm"
  },
  second: {
    numeric: "s",
    "2-digit": "ss"
  }
};

function tokenForPart(part, locale, formatOpts) {
  var type = part.type,
      value = part.value;

  if (type === "literal") {
    return {
      literal: true,
      val: value
    };
  }

  var style = formatOpts[type];
  var val = partTypeStyleToTokenVal[type];

  if (typeof val === "object") {
    val = val[style];
  }

  if (val) {
    return {
      literal: false,
      val: val
    };
  }

  return undefined;
}

function buildRegex(units) {
  var re = units.map(function (u) {
    return u.regex;
  }).reduce(function (f, r) {
    return f + "(" + r.source + ")";
  }, "");
  return ["^" + re + "$", units];
}

function match(input, regex, handlers) {
  var matches = input.match(regex);

  if (matches) {
    var all = {};
    var matchIndex = 1;

    for (var i in handlers) {
      if (hasOwnProperty(handlers, i)) {
        var h = handlers[i],
            groups = h.groups ? h.groups + 1 : 1;

        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }

        matchIndex += groups;
      }
    }

    return [matches, all];
  } else {
    return [matches, {}];
  }
}

function dateTimeFromMatches(matches) {
  var toField = function toField(token) {
    switch (token) {
      case "S":
        return "millisecond";

      case "s":
        return "second";

      case "m":
        return "minute";

      case "h":
      case "H":
        return "hour";

      case "d":
        return "day";

      case "o":
        return "ordinal";

      case "L":
      case "M":
        return "month";

      case "y":
        return "year";

      case "E":
      case "c":
        return "weekday";

      case "W":
        return "weekNumber";

      case "k":
        return "weekYear";

      case "q":
        return "quarter";

      default:
        return null;
    }
  };

  var zone;

  if (!isUndefined(matches.Z)) {
    zone = new FixedOffsetZone(matches.Z);
  } else if (!isUndefined(matches.z)) {
    zone = IANAZone.create(matches.z);
  } else {
    zone = null;
  }

  if (!isUndefined(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }

  if (!isUndefined(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }

  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }

  if (!isUndefined(matches.u)) {
    matches.S = parseMillis(matches.u);
  }

  var vals = Object.keys(matches).reduce(function (r, k) {
    var f = toField(k);

    if (f) {
      r[f] = matches[k];
    }

    return r;
  }, {});
  return [vals, zone];
}

var dummyDateTimeCache = null;

function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }

  return dummyDateTimeCache;
}

function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }

  var formatOpts = Formatter.macroTokenToFormatOpts(token.val);

  if (!formatOpts) {
    return token;
  }

  var formatter = Formatter.create(locale, formatOpts);
  var parts = formatter.formatDateTimeParts(getDummyDateTime());
  var tokens = parts.map(function (p) {
    return tokenForPart(p, locale, formatOpts);
  });

  if (tokens.includes(undefined)) {
    return token;
  }

  return tokens;
}

function expandMacroTokens(tokens, locale) {
  var _Array$prototype;

  return (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, tokens.map(function (t) {
    return maybeExpandMacroToken(t, locale);
  }));
}
/**
 * @private
 */


function explainFromTokens(locale, input, format) {
  var tokens = expandMacroTokens(Formatter.parseFormat(format), locale),
      units = tokens.map(function (t) {
    return unitForToken(t, locale);
  }),
      disqualifyingUnit = units.find(function (t) {
    return t.invalidReason;
  });

  if (disqualifyingUnit) {
    return {
      input: input,
      tokens: tokens,
      invalidReason: disqualifyingUnit.invalidReason
    };
  } else {
    var _buildRegex = buildRegex(units),
        regexString = _buildRegex[0],
        handlers = _buildRegex[1],
        regex = RegExp(regexString, "i"),
        _match = match(input, regex, handlers),
        rawMatches = _match[0],
        matches = _match[1],
        _ref6 = matches ? dateTimeFromMatches(matches) : [null, null],
        result = _ref6[0],
        zone = _ref6[1];

    if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
      throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
    }

    return {
      input: input,
      tokens: tokens,
      regex: regex,
      rawMatches: rawMatches,
      matches: matches,
      result: result,
      zone: zone
    };
  }
}
function parseFromTokens(locale, input, format) {
  var _explainFromTokens = explainFromTokens(locale, input, format),
      result = _explainFromTokens.result,
      zone = _explainFromTokens.zone,
      invalidReason = _explainFromTokens.invalidReason;

  return [result, zone, invalidReason];
}

var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
    leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

function unitOutOfRange(unit, value) {
  return new Invalid("unit out of range", "you specified " + value + " (of type " + typeof value + ") as a " + unit + ", which is invalid");
}

function dayOfWeek(year, month, day) {
  var js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();
  return js === 0 ? 7 : js;
}

function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}

function uncomputeOrdinal(year, ordinal) {
  var table = isLeapYear(year) ? leapLadder : nonLeapLadder,
      month0 = table.findIndex(function (i) {
    return i < ordinal;
  }),
      day = ordinal - table[month0];
  return {
    month: month0 + 1,
    day: day
  };
}
/**
 * @private
 */


function gregorianToWeek(gregObj) {
  var year = gregObj.year,
      month = gregObj.month,
      day = gregObj.day,
      ordinal = computeOrdinal(year, month, day),
      weekday = dayOfWeek(year, month, day);
  var weekNumber = Math.floor((ordinal - weekday + 10) / 7),
      weekYear;

  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear);
  } else if (weekNumber > weeksInWeekYear(year)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }

  return Object.assign({
    weekYear: weekYear,
    weekNumber: weekNumber,
    weekday: weekday
  }, timeObject(gregObj));
}
function weekToGregorian(weekData) {
  var weekYear = weekData.weekYear,
      weekNumber = weekData.weekNumber,
      weekday = weekData.weekday,
      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),
      yearInDays = daysInYear(weekYear);
  var ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,
      year;

  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }

  var _uncomputeOrdinal = uncomputeOrdinal(year, ordinal),
      month = _uncomputeOrdinal.month,
      day = _uncomputeOrdinal.day;

  return Object.assign({
    year: year,
    month: month,
    day: day
  }, timeObject(weekData));
}
function gregorianToOrdinal(gregData) {
  var year = gregData.year,
      month = gregData.month,
      day = gregData.day,
      ordinal = computeOrdinal(year, month, day);
  return Object.assign({
    year: year,
    ordinal: ordinal
  }, timeObject(gregData));
}
function ordinalToGregorian(ordinalData) {
  var year = ordinalData.year,
      ordinal = ordinalData.ordinal,
      _uncomputeOrdinal2 = uncomputeOrdinal(year, ordinal),
      month = _uncomputeOrdinal2.month,
      day = _uncomputeOrdinal2.day;

  return Object.assign({
    year: year,
    month: month,
    day: day
  }, timeObject(ordinalData));
}
function hasInvalidWeekData(obj) {
  var validYear = isInteger(obj.weekYear),
      validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),
      validWeekday = integerBetween(obj.weekday, 1, 7);

  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.week);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else return false;
}
function hasInvalidOrdinalData(obj) {
  var validYear = isInteger(obj.year),
      validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else return false;
}
function hasInvalidGregorianData(obj) {
  var validYear = isInteger(obj.year),
      validMonth = integerBetween(obj.month, 1, 12),
      validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else return false;
}
function hasInvalidTimeData(obj) {
  var hour = obj.hour,
      minute = obj.minute,
      second = obj.second,
      millisecond = obj.millisecond;
  var validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0,
      validMinute = integerBetween(minute, 0, 59),
      validSecond = integerBetween(second, 0, 59),
      validMillisecond = integerBetween(millisecond, 0, 999);

  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else return false;
}

var INVALID$2 = "Invalid DateTime";
var MAX_DATE = 8.64e15;

function unsupportedZone(zone) {
  return new Invalid("unsupported zone", "the zone \"" + zone.name + "\" is not supported");
} // we cache week data on the DT object and this intermediates the cache


function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }

  return dt.weekData;
} // clone really means, "make a new object with these modifications". all "setters" really use this
// to create a new object while only changing some of the properties


function clone$1(inst, alts) {
  var current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid
  };
  return new DateTime(Object.assign({}, current, alts, {
    old: current
  }));
} // find the right offset a given local time. The o input is our guess, which determines which
// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)


function fixOffset(localTS, o, tz) {
  // Our UTC time is just a guess because our offset is just a guess
  var utcGuess = localTS - o * 60 * 1000; // Test whether the zone matches the offset for this ts

  var o2 = tz.offset(utcGuess); // If so, offset didn't change and we're done

  if (o === o2) {
    return [utcGuess, o];
  } // If not, change the ts by the difference in the offset


  utcGuess -= (o2 - o) * 60 * 1000; // If that gives us the local time we want, we're done

  var o3 = tz.offset(utcGuess);

  if (o2 === o3) {
    return [utcGuess, o2];
  } // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time


  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
} // convert an epoch timestamp into a calendar object with the given offset


function tsToObj(ts, offset) {
  ts += offset * 60 * 1000;
  var d = new Date(ts);
  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds()
  };
} // convert a calendar object to a epoch timestamp


function objToTS(obj, offset, zone) {
  return fixOffset(objToLocalTS(obj), offset, zone);
} // create a new DT instance by adding a duration, adjusting for DSTs


function adjustTime(inst, dur) {
  var oPre = inst.o,
      year = inst.c.year + Math.trunc(dur.years),
      month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,
      c = Object.assign({}, inst.c, {
    year: year,
    month: month,
    day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
  }),
      millisToAdd = Duration.fromObject({
    years: dur.years - Math.trunc(dur.years),
    quarters: dur.quarters - Math.trunc(dur.quarters),
    months: dur.months - Math.trunc(dur.months),
    weeks: dur.weeks - Math.trunc(dur.weeks),
    days: dur.days - Math.trunc(dur.days),
    hours: dur.hours,
    minutes: dur.minutes,
    seconds: dur.seconds,
    milliseconds: dur.milliseconds
  }).as("milliseconds"),
      localTS = objToLocalTS(c);

  var _fixOffset = fixOffset(localTS, oPre, inst.zone),
      ts = _fixOffset[0],
      o = _fixOffset[1];

  if (millisToAdd !== 0) {
    ts += millisToAdd; // that could have changed the offset by going over a DST, but we want to keep the ts the same

    o = inst.zone.offset(ts);
  }

  return {
    ts: ts,
    o: o
  };
} // helper useful in turning the results of parsing into real dates
// by handling the zone options


function parseDataToDateTime(parsed, parsedZone, opts, format, text) {
  var setZone = opts.setZone,
      zone = opts.zone;

  if (parsed && Object.keys(parsed).length !== 0) {
    var interpretationZone = parsedZone || zone,
        inst = DateTime.fromObject(Object.assign(parsed, opts, {
      zone: interpretationZone,
      // setZone is a valid option in the calling methods, but not in fromObject
      setZone: undefined
    }));
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(new Invalid("unparsable", "the input \"" + text + "\" can't be parsed as " + format));
  }
} // if you want to output a technical format (e.g. RFC 2822), this helper
// helps handle the details


function toTechFormat(dt, format, allowZ) {
  if (allowZ === void 0) {
    allowZ = true;
  }

  return dt.isValid ? Formatter.create(Locale.create("en-US"), {
    allowZ: allowZ,
    forceSimple: true
  }).formatDateTimeFromString(dt, format) : null;
} // technical time formats (e.g. the time part of ISO 8601), take some options
// and this commonizes their handling


function toTechTimeFormat(dt, _ref) {
  var _ref$suppressSeconds = _ref.suppressSeconds,
      suppressSeconds = _ref$suppressSeconds === void 0 ? false : _ref$suppressSeconds,
      _ref$suppressMillisec = _ref.suppressMilliseconds,
      suppressMilliseconds = _ref$suppressMillisec === void 0 ? false : _ref$suppressMillisec,
      includeOffset = _ref.includeOffset,
      _ref$includeZone = _ref.includeZone,
      includeZone = _ref$includeZone === void 0 ? false : _ref$includeZone,
      _ref$spaceZone = _ref.spaceZone,
      spaceZone = _ref$spaceZone === void 0 ? false : _ref$spaceZone,
      _ref$format = _ref.format,
      format = _ref$format === void 0 ? "extended" : _ref$format;
  var fmt = format === "basic" ? "HHmm" : "HH:mm";

  if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {
    fmt += format === "basic" ? "ss" : ":ss";

    if (!suppressMilliseconds || dt.millisecond !== 0) {
      fmt += ".SSS";
    }
  }

  if ((includeZone || includeOffset) && spaceZone) {
    fmt += " ";
  }

  if (includeZone) {
    fmt += "z";
  } else if (includeOffset) {
    fmt += format === "basic" ? "ZZZ" : "ZZ";
  }

  return toTechFormat(dt, fmt);
} // defaults for unspecified units in the supported calendars


var defaultUnitValues = {
  month: 1,
  day: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
},
    defaultWeekUnitValues = {
  weekNumber: 1,
  weekday: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
},
    defaultOrdinalUnitValues = {
  ordinal: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
}; // Units in the supported calendars, sorted by bigness

var orderedUnits$1 = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
    orderedWeekUnits = ["weekYear", "weekNumber", "weekday", "hour", "minute", "second", "millisecond"],
    orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"]; // standardize case and plurality in units

function normalizeUnit(unit) {
  var normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
  }[unit.toLowerCase()];
  if (!normalized) throw new InvalidUnitError(unit);
  return normalized;
} // this is a dumbed down version of fromObject() that runs about 60% faster
// but doesn't do any validation, makes a bunch of assumptions about what units
// are present, and so on.


function quickDT(obj, zone) {
  // assume we have the higher-order units
  for (var _iterator = _createForOfIteratorHelperLoose(orderedUnits$1), _step; !(_step = _iterator()).done;) {
    var u = _step.value;

    if (isUndefined(obj[u])) {
      obj[u] = defaultUnitValues[u];
    }
  }

  var invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);

  if (invalid) {
    return DateTime.invalid(invalid);
  }

  var tsNow = Settings.now(),
      offsetProvis = zone.offset(tsNow),
      _objToTS = objToTS(obj, offsetProvis, zone),
      ts = _objToTS[0],
      o = _objToTS[1];

  return new DateTime({
    ts: ts,
    zone: zone,
    o: o
  });
}

function diffRelative(start, end, opts) {
  var round = isUndefined(opts.round) ? true : opts.round,
      format = function format(c, unit) {
    c = roundTo(c, round || opts.calendary ? 0 : 2, true);
    var formatter = end.loc.clone(opts).relFormatter(opts);
    return formatter.format(c, unit);
  },
      differ = function differ(unit) {
    if (opts.calendary) {
      if (!end.hasSame(start, unit)) {
        return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
      } else return 0;
    } else {
      return end.diff(start, unit).get(unit);
    }
  };

  if (opts.unit) {
    return format(differ(opts.unit), opts.unit);
  }

  for (var _iterator2 = _createForOfIteratorHelperLoose(opts.units), _step2; !(_step2 = _iterator2()).done;) {
    var unit = _step2.value;
    var count = differ(unit);

    if (Math.abs(count) >= 1) {
      return format(count, unit);
    }
  }

  return format(0, opts.units[opts.units.length - 1]);
}
/**
 * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
 *
 * A DateTime comprises of:
 * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
 * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
 * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
 *
 * Here is a brief overview of the most commonly used functionality it provides:
 *
 * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.
 * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},
 * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.
 * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.
 * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.
 * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.
 * * **Output**: To convert the DateTime to other representations, use the {@link toRelative}, {@link toRelativeCalendar}, {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.
 *
 * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
 */


var DateTime = /*#__PURE__*/function () {
  /**
   * @access private
   */
  function DateTime(config) {
    var zone = config.zone || Settings.defaultZone;
    var invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
    /**
     * @access private
     */

    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
    var c = null,
        o = null;

    if (!invalid) {
      var unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

      if (unchanged) {
        var _ref2 = [config.old.c, config.old.o];
        c = _ref2[0];
        o = _ref2[1];
      } else {
        var ot = zone.offset(this.ts);
        c = tsToObj(this.ts, ot);
        invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
        c = invalid ? null : c;
        o = invalid ? null : ot;
      }
    }
    /**
     * @access private
     */


    this._zone = zone;
    /**
     * @access private
     */

    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */

    this.invalid = invalid;
    /**
     * @access private
     */

    this.weekData = null;
    /**
     * @access private
     */

    this.c = c;
    /**
     * @access private
     */

    this.o = o;
    /**
     * @access private
     */

    this.isLuxonDateTime = true;
  } // CONSTRUCT

  /**
   * Create a local DateTime
   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.local()                            //~> now
   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00
   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00
   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00
   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00
   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00
   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10
   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765
   * @return {DateTime}
   */


  DateTime.local = function local(year, month, day, hour, minute, second, millisecond) {
    if (isUndefined(year)) {
      return new DateTime({
        ts: Settings.now()
      });
    } else {
      return quickDT({
        year: year,
        month: month,
        day: day,
        hour: hour,
        minute: minute,
        second: second,
        millisecond: millisecond
      }, Settings.defaultZone);
    }
  }
  /**
   * Create a DateTime in UTC
   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.utc()                            //~> now
   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z
   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z
   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z
   * @return {DateTime}
   */
  ;

  DateTime.utc = function utc(year, month, day, hour, minute, second, millisecond) {
    if (isUndefined(year)) {
      return new DateTime({
        ts: Settings.now(),
        zone: FixedOffsetZone.utcInstance
      });
    } else {
      return quickDT({
        year: year,
        month: month,
        day: day,
        hour: hour,
        minute: minute,
        second: second,
        millisecond: millisecond
      }, FixedOffsetZone.utcInstance);
    }
  }
  /**
   * Create a DateTime from a Javascript Date object. Uses the default zone.
   * @param {Date} date - a Javascript Date object
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @return {DateTime}
   */
  ;

  DateTime.fromJSDate = function fromJSDate(date, options) {
    if (options === void 0) {
      options = {};
    }

    var ts = isDate(date) ? date.valueOf() : NaN;

    if (Number.isNaN(ts)) {
      return DateTime.invalid("invalid input");
    }

    var zoneToUse = normalizeZone(options.zone, Settings.defaultZone);

    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    return new DateTime({
      ts: ts,
      zone: zoneToUse,
      loc: Locale.fromObject(options)
    });
  }
  /**
   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} milliseconds - a number of milliseconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromMillis = function fromMillis(milliseconds, options) {
    if (options === void 0) {
      options = {};
    }

    if (!isNumber(milliseconds)) {
      throw new InvalidArgumentError("fromMillis requires a numerical input, but received a " + typeof milliseconds + " with value " + milliseconds);
    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
      // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
      return DateTime.invalid("Timestamp out of range");
    } else {
      return new DateTime({
        ts: milliseconds,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} seconds - a number of seconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromSeconds = function fromSeconds(seconds, options) {
    if (options === void 0) {
      options = {};
    }

    if (!isNumber(seconds)) {
      throw new InvalidArgumentError("fromSeconds requires a numerical input");
    } else {
      return new DateTime({
        ts: seconds * 1000,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
   * Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.year - a year, such as 1987
   * @param {number} obj.month - a month, 1-12
   * @param {number} obj.day - a day of the month, 1-31, depending on the month
   * @param {number} obj.ordinal - day of the year, 1-365 or 366
   * @param {number} obj.weekYear - an ISO week year
   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
   * @param {number} obj.hour - hour of the day, 0-23
   * @param {number} obj.minute - minute of the hour, 0-59
   * @param {number} obj.second - second of the minute, 0-59
   * @param {number} obj.millisecond - millisecond of the second, 0-999
   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
   * @param {string} [obj.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })
   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
   * @return {DateTime}
   */
  ;

  DateTime.fromObject = function fromObject(obj) {
    var zoneToUse = normalizeZone(obj.zone, Settings.defaultZone);

    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    var tsNow = Settings.now(),
        offsetProvis = zoneToUse.offset(tsNow),
        normalized = normalizeObject(obj, normalizeUnit, ["zone", "locale", "outputCalendar", "numberingSystem"]),
        containsOrdinal = !isUndefined(normalized.ordinal),
        containsGregorYear = !isUndefined(normalized.year),
        containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
        containsGregor = containsGregorYear || containsGregorMD,
        definiteWeekDef = normalized.weekYear || normalized.weekNumber,
        loc = Locale.fromObject(obj); // cases:
    // just a weekday -> this week's instance of that weekday, no worries
    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
    // (gregorian month or day) + ordinal -> error
    // otherwise just use weeks or ordinals or gregorian, depending on what's specified

    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }

    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }

    var useWeekData = definiteWeekDef || normalized.weekday && !containsGregor; // configure ourselves to deal with gregorian dates or week stuff

    var units,
        defaultValues,
        objNow = tsToObj(tsNow, offsetProvis);

    if (useWeekData) {
      units = orderedWeekUnits;
      defaultValues = defaultWeekUnitValues;
      objNow = gregorianToWeek(objNow);
    } else if (containsOrdinal) {
      units = orderedOrdinalUnits;
      defaultValues = defaultOrdinalUnitValues;
      objNow = gregorianToOrdinal(objNow);
    } else {
      units = orderedUnits$1;
      defaultValues = defaultUnitValues;
    } // set default values for missing stuff


    var foundFirst = false;

    for (var _iterator3 = _createForOfIteratorHelperLoose(units), _step3; !(_step3 = _iterator3()).done;) {
      var u = _step3.value;
      var v = normalized[u];

      if (!isUndefined(v)) {
        foundFirst = true;
      } else if (foundFirst) {
        normalized[u] = defaultValues[u];
      } else {
        normalized[u] = objNow[u];
      }
    } // make sure the values we have are in range


    var higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized),
        invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

    if (invalid) {
      return DateTime.invalid(invalid);
    } // compute the actual time


    var gregorian = useWeekData ? weekToGregorian(normalized) : containsOrdinal ? ordinalToGregorian(normalized) : normalized,
        _objToTS2 = objToTS(gregorian, offsetProvis, zoneToUse),
        tsFinal = _objToTS2[0],
        offsetFinal = _objToTS2[1],
        inst = new DateTime({
      ts: tsFinal,
      zone: zoneToUse,
      o: offsetFinal,
      loc: loc
    }); // gregorian data + weekday serves only to validate


    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
      return DateTime.invalid("mismatched weekday", "you can't specify both a weekday of " + normalized.weekday + " and a date of " + inst.toISO());
    }

    return inst;
  }
  /**
   * Create a DateTime from an ISO 8601 string
   * @param {string} text - the ISO string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromISO('2016-05-25T09:08:34.123')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
   * @example DateTime.fromISO('2016-W05-4')
   * @return {DateTime}
   */
  ;

  DateTime.fromISO = function fromISO(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseISODate = parseISODate(text),
        vals = _parseISODate[0],
        parsedZone = _parseISODate[1];

    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
  }
  /**
   * Create a DateTime from an RFC 2822 string
   * @param {string} text - the RFC 2822 string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
   * @return {DateTime}
   */
  ;

  DateTime.fromRFC2822 = function fromRFC2822(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseRFC2822Date = parseRFC2822Date(text),
        vals = _parseRFC2822Date[0],
        parsedZone = _parseRFC2822Date[1];

    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
  }
  /**
   * Create a DateTime from an HTTP header date
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @param {string} text - the HTTP header date
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
   * @return {DateTime}
   */
  ;

  DateTime.fromHTTP = function fromHTTP(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseHTTPDate = parseHTTPDate(text),
        vals = _parseHTTPDate[0],
        parsedZone = _parseHTTPDate[1];

    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
  }
  /**
   * Create a DateTime from an input string and format string.
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromFormat = function fromFormat(text, fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (isUndefined(text) || isUndefined(fmt)) {
      throw new InvalidArgumentError("fromFormat requires an input string and a format");
    }

    var _opts = opts,
        _opts$locale = _opts.locale,
        locale = _opts$locale === void 0 ? null : _opts$locale,
        _opts$numberingSystem = _opts.numberingSystem,
        numberingSystem = _opts$numberingSystem === void 0 ? null : _opts$numberingSystem,
        localeToUse = Locale.fromOpts({
      locale: locale,
      numberingSystem: numberingSystem,
      defaultToEN: true
    }),
        _parseFromTokens = parseFromTokens(localeToUse, text, fmt),
        vals = _parseFromTokens[0],
        parsedZone = _parseFromTokens[1],
        invalid = _parseFromTokens[2];

    if (invalid) {
      return DateTime.invalid(invalid);
    } else {
      return parseDataToDateTime(vals, parsedZone, opts, "format " + fmt, text);
    }
  }
  /**
   * @deprecated use fromFormat instead
   */
  ;

  DateTime.fromString = function fromString(text, fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return DateTime.fromFormat(text, fmt, opts);
  }
  /**
   * Create a DateTime from a SQL date, time, or datetime
   * Defaults to en-US if no locale has been specified, regardless of the system's locale
   * @param {string} text - the string to parse
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @example DateTime.fromSQL('2017-05-15')
   * @example DateTime.fromSQL('2017-05-15 09:12:34')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
   * @example DateTime.fromSQL('09:12:34.342')
   * @return {DateTime}
   */
  ;

  DateTime.fromSQL = function fromSQL(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseSQL = parseSQL(text),
        vals = _parseSQL[0],
        parsedZone = _parseSQL[1];

    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
  }
  /**
   * Create an invalid DateTime.
   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {DateTime}
   */
  ;

  DateTime.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDateTimeError(invalid);
    } else {
      return new DateTime({
        invalid: invalid
      });
    }
  }
  /**
   * Check if an object is a DateTime. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  DateTime.isDateTime = function isDateTime(o) {
    return o && o.isLuxonDateTime || false;
  } // INFO

  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
   * @return {number}
   */
  ;

  var _proto = DateTime.prototype;

  _proto.get = function get(unit) {
    return this[unit];
  }
  /**
   * Returns whether the DateTime is valid. Invalid DateTimes occur when:
   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
   * * The DateTime was created by an operation on another invalid date
   * @type {boolean}
   */
  ;

  /**
   * Returns the resolved Intl options for this DateTime.
   * This is useful in understanding the behavior of formatting methods
   * @param {Object} opts - the same options as toLocaleString
   * @return {Object}
   */
  _proto.resolvedLocaleOpts = function resolvedLocaleOpts(opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _Formatter$create$res = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this),
        locale = _Formatter$create$res.locale,
        numberingSystem = _Formatter$create$res.numberingSystem,
        calendar = _Formatter$create$res.calendar;

    return {
      locale: locale,
      numberingSystem: numberingSystem,
      outputCalendar: calendar
    };
  } // TRANSFORM

  /**
   * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
   *
   * Equivalent to {@link setZone}('utc')
   * @param {number} [offset=0] - optionally, an offset from UTC in minutes
   * @param {Object} [opts={}] - options to pass to `setZone()`
   * @return {DateTime}
   */
  ;

  _proto.toUTC = function toUTC(offset, opts) {
    if (offset === void 0) {
      offset = 0;
    }

    if (opts === void 0) {
      opts = {};
    }

    return this.setZone(FixedOffsetZone.instance(offset), opts);
  }
  /**
   * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
   *
   * Equivalent to `setZone('local')`
   * @return {DateTime}
   */
  ;

  _proto.toLocal = function toLocal() {
    return this.setZone(Settings.defaultZone);
  }
  /**
   * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
   *
   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.
   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.
   * @param {Object} opts - options
   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
   * @return {DateTime}
   */
  ;

  _proto.setZone = function setZone(zone, _temp) {
    var _ref3 = _temp === void 0 ? {} : _temp,
        _ref3$keepLocalTime = _ref3.keepLocalTime,
        keepLocalTime = _ref3$keepLocalTime === void 0 ? false : _ref3$keepLocalTime,
        _ref3$keepCalendarTim = _ref3.keepCalendarTime,
        keepCalendarTime = _ref3$keepCalendarTim === void 0 ? false : _ref3$keepCalendarTim;

    zone = normalizeZone(zone, Settings.defaultZone);

    if (zone.equals(this.zone)) {
      return this;
    } else if (!zone.isValid) {
      return DateTime.invalid(unsupportedZone(zone));
    } else {
      var newTS = this.ts;

      if (keepLocalTime || keepCalendarTime) {
        var offsetGuess = zone.offset(this.ts);
        var asObj = this.toObject();

        var _objToTS3 = objToTS(asObj, offsetGuess, zone);

        newTS = _objToTS3[0];
      }

      return clone$1(this, {
        ts: newTS,
        zone: zone
      });
    }
  }
  /**
   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
   * @param {Object} properties - the properties to set
   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
   * @return {DateTime}
   */
  ;

  _proto.reconfigure = function reconfigure(_temp2) {
    var _ref4 = _temp2 === void 0 ? {} : _temp2,
        locale = _ref4.locale,
        numberingSystem = _ref4.numberingSystem,
        outputCalendar = _ref4.outputCalendar;

    var loc = this.loc.clone({
      locale: locale,
      numberingSystem: numberingSystem,
      outputCalendar: outputCalendar
    });
    return clone$1(this, {
      loc: loc
    });
  }
  /**
   * "Set" the locale. Returns a newly-constructed DateTime.
   * Just a convenient alias for reconfigure({ locale })
   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
   * @return {DateTime}
   */
  ;

  _proto.setLocale = function setLocale(locale) {
    return this.reconfigure({
      locale: locale
    });
  }
  /**
   * "Set" the values of specified units. Returns a newly-constructed DateTime.
   * You can only set units with this method; for "setting" metadata, see {@link reconfigure} and {@link setZone}.
   * @param {Object} values - a mapping of units to numbers
   * @example dt.set({ year: 2017 })
   * @example dt.set({ hour: 8, minute: 30 })
   * @example dt.set({ weekday: 5 })
   * @example dt.set({ year: 2005, ordinal: 234 })
   * @return {DateTime}
   */
  ;

  _proto.set = function set(values) {
    if (!this.isValid) return this;
    var normalized = normalizeObject(values, normalizeUnit, []),
        settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday);
    var mixed;

    if (settingWeekStuff) {
      mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));
    } else if (!isUndefined(normalized.ordinal)) {
      mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));
    } else {
      mixed = Object.assign(this.toObject(), normalized); // if we didn't set the day but we ended up on an overflow date,
      // use the last day of the right month

      if (isUndefined(normalized.day)) {
        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
      }
    }

    var _objToTS4 = objToTS(mixed, this.o, this.zone),
        ts = _objToTS4[0],
        o = _objToTS4[1];

    return clone$1(this, {
      ts: ts,
      o: o
    });
  }
  /**
   * Add a period of time to this DateTime and return the resulting DateTime
   *
   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @example DateTime.local().plus(123) //~> in 123 milliseconds
   * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes
   * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow
   * @example DateTime.local().plus({ days: -1 }) //~> this time yesterday
   * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
   * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
   * @return {DateTime}
   */
  ;

  _proto.plus = function plus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration);
    return clone$1(this, adjustTime(this, dur));
  }
  /**
   * Subtract a period of time to this DateTime and return the resulting DateTime
   * See {@link plus}
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   @return {DateTime}
  */
  ;

  _proto.minus = function minus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration).negate();
    return clone$1(this, adjustTime(this, dur));
  }
  /**
   * "Set" this DateTime to the beginning of a unit of time.
   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
   * @return {DateTime}
   */
  ;

  _proto.startOf = function startOf(unit) {
    if (!this.isValid) return this;
    var o = {},
        normalizedUnit = Duration.normalizeUnit(unit);

    switch (normalizedUnit) {
      case "years":
        o.month = 1;
      // falls through

      case "quarters":
      case "months":
        o.day = 1;
      // falls through

      case "weeks":
      case "days":
        o.hour = 0;
      // falls through

      case "hours":
        o.minute = 0;
      // falls through

      case "minutes":
        o.second = 0;
      // falls through

      case "seconds":
        o.millisecond = 0;
        break;
      // no default, invalid units throw in normalizeUnit()
    }

    if (normalizedUnit === "weeks") {
      o.weekday = 1;
    }

    if (normalizedUnit === "quarters") {
      var q = Math.ceil(this.month / 3);
      o.month = (q - 1) * 3 + 1;
    }

    return this.set(o);
  }
  /**
   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
   * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
   * @return {DateTime}
   */
  ;

  _proto.endOf = function endOf(unit) {
    var _this$plus;

    return this.isValid ? this.plus((_this$plus = {}, _this$plus[unit] = 1, _this$plus)).startOf(unit).minus(1) : this;
  } // OUTPUT

  /**
   * Returns a string representation of this DateTime formatted according to the specified format string.
   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens
   * @param {string} fmt - the format string
   * @param {Object} opts - opts to override the configuration options
   * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
   * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
   * @example DateTime.local().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
   * @example DateTime.local().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
   * @return {string}
   */
  ;

  _proto.toFormat = function toFormat(fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID$2;
  }
  /**
   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
   * of the DateTime in the assigned locale.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param opts {Object} - Intl.DateTimeFormat constructor options and configuration options
   * @example DateTime.local().toLocaleString(); //=> 4/20/2017
   * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
   * @example DateTime.local().toLocaleString({ locale: 'en-gb' }); //=> '20/04/2017'
   * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
   * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
   * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
   * @example DateTime.local().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
   * @example DateTime.local().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
   * @example DateTime.local().toLocaleString({ hour: '2-digit', minute: '2-digit', hour12: false }); //=> '11:32'
   * @return {string}
   */
  ;

  _proto.toLocaleString = function toLocaleString(opts) {
    if (opts === void 0) {
      opts = DATE_SHORT;
    }

    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this) : INVALID$2;
  }
  /**
   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
   * @example DateTime.local().toLocaleParts(); //=> [
   *                                   //=>   { type: 'day', value: '25' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'month', value: '05' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'year', value: '1982' }
   *                                   //=> ]
   */
  ;

  _proto.toLocaleParts = function toLocaleParts(opts) {
    if (opts === void 0) {
      opts = {};
    }

    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
   * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'
   * @example DateTime.local().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
   * @example DateTime.local().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
   * @return {string}
   */
  ;

  _proto.toISO = function toISO(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) {
      return null;
    }

    return this.toISODate(opts) + "T" + this.toISOTime(opts);
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's date component
   * @param {Object} opts - options
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
   * @return {string}
   */
  ;

  _proto.toISODate = function toISODate(_temp3) {
    var _ref5 = _temp3 === void 0 ? {} : _temp3,
        _ref5$format = _ref5.format,
        format = _ref5$format === void 0 ? "extended" : _ref5$format;

    var fmt = format === "basic" ? "yyyyMMdd" : "yyyy-MM-dd";

    if (this.year > 9999) {
      fmt = "+" + fmt;
    }

    return toTechFormat(this, fmt);
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's week date
   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
   * @return {string}
   */
  ;

  _proto.toISOWeekDate = function toISOWeekDate() {
    return toTechFormat(this, "kkkk-'W'WW-c");
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's time component
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
   * @return {string}
   */
  ;

  _proto.toISOTime = function toISOTime(_temp4) {
    var _ref6 = _temp4 === void 0 ? {} : _temp4,
        _ref6$suppressMillise = _ref6.suppressMilliseconds,
        suppressMilliseconds = _ref6$suppressMillise === void 0 ? false : _ref6$suppressMillise,
        _ref6$suppressSeconds = _ref6.suppressSeconds,
        suppressSeconds = _ref6$suppressSeconds === void 0 ? false : _ref6$suppressSeconds,
        _ref6$includeOffset = _ref6.includeOffset,
        includeOffset = _ref6$includeOffset === void 0 ? true : _ref6$includeOffset,
        _ref6$format = _ref6.format,
        format = _ref6$format === void 0 ? "extended" : _ref6$format;

    return toTechTimeFormat(this, {
      suppressSeconds: suppressSeconds,
      suppressMilliseconds: suppressMilliseconds,
      includeOffset: includeOffset,
      format: format
    });
  }
  /**
   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC
   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
   * @return {string}
   */
  ;

  _proto.toRFC2822 = function toRFC2822() {
    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in HTTP headers.
   * Specifically, the string conforms to RFC 1123.
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
   * @return {string}
   */
  ;

  _proto.toHTTP = function toHTTP() {
    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Date
   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
   * @return {string}
   */
  ;

  _proto.toSQLDate = function toSQLDate() {
    return toTechFormat(this, "yyyy-MM-dd");
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Time
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @example DateTime.utc().toSQL() //=> '05:15:16.345'
   * @example DateTime.local().toSQL() //=> '05:15:16.345 -04:00'
   * @example DateTime.local().toSQL({ includeOffset: false }) //=> '05:15:16.345'
   * @example DateTime.local().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
   * @return {string}
   */
  ;

  _proto.toSQLTime = function toSQLTime(_temp5) {
    var _ref7 = _temp5 === void 0 ? {} : _temp5,
        _ref7$includeOffset = _ref7.includeOffset,
        includeOffset = _ref7$includeOffset === void 0 ? true : _ref7$includeOffset,
        _ref7$includeZone = _ref7.includeZone,
        includeZone = _ref7$includeZone === void 0 ? false : _ref7$includeZone;

    return toTechTimeFormat(this, {
      includeOffset: includeOffset,
      includeZone: includeZone,
      spaceZone: true
    });
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
   * @return {string}
   */
  ;

  _proto.toSQL = function toSQL(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) {
      return null;
    }

    return this.toSQLDate() + " " + this.toSQLTime(opts);
  }
  /**
   * Returns a string representation of this DateTime appropriate for debugging
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    return this.isValid ? this.toISO() : INVALID$2;
  }
  /**
   * Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}
   * @return {number}
   */
  ;

  _proto.valueOf = function valueOf() {
    return this.toMillis();
  }
  /**
   * Returns the epoch milliseconds of this DateTime.
   * @return {number}
   */
  ;

  _proto.toMillis = function toMillis() {
    return this.isValid ? this.ts : NaN;
  }
  /**
   * Returns the epoch seconds of this DateTime.
   * @return {number}
   */
  ;

  _proto.toSeconds = function toSeconds() {
    return this.isValid ? this.ts / 1000 : NaN;
  }
  /**
   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
   * @return {string}
   */
  ;

  _proto.toJSON = function toJSON() {
    return this.toISO();
  }
  /**
   * Returns a BSON serializable equivalent to this DateTime.
   * @return {Date}
   */
  ;

  _proto.toBSON = function toBSON() {
    return this.toJSDate();
  }
  /**
   * Returns a Javascript object with this DateTime's year, month, day, and so on.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
   * @return {Object}
   */
  ;

  _proto.toObject = function toObject(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) return {};
    var base = Object.assign({}, this.c);

    if (opts.includeConfig) {
      base.outputCalendar = this.outputCalendar;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }

    return base;
  }
  /**
   * Returns a Javascript Date equivalent to this DateTime.
   * @return {Date}
   */
  ;

  _proto.toJSDate = function toJSDate() {
    return new Date(this.isValid ? this.ts : NaN);
  } // COMPARE

  /**
   * Return the difference between two DateTimes as a Duration.
   * @param {DateTime} otherDateTime - the DateTime to compare this one to
   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example
   * var i1 = DateTime.fromISO('1982-05-25T09:45'),
   *     i2 = DateTime.fromISO('1983-10-14T10:30');
   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
   * @return {Duration}
   */
  ;

  _proto.diff = function diff(otherDateTime, unit, opts) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid || !otherDateTime.isValid) {
      return Duration.invalid(this.invalid || otherDateTime.invalid, "created by diffing an invalid DateTime");
    }

    var durOpts = Object.assign({
      locale: this.locale,
      numberingSystem: this.numberingSystem
    }, opts);

    var units = maybeArray(unit).map(Duration.normalizeUnit),
        otherIsLater = otherDateTime.valueOf() > this.valueOf(),
        earlier = otherIsLater ? this : otherDateTime,
        later = otherIsLater ? otherDateTime : this,
        diffed = _diff(earlier, later, units, durOpts);

    return otherIsLater ? diffed.negate() : diffed;
  }
  /**
   * Return the difference between this DateTime and right now.
   * See {@link diff}
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  ;

  _proto.diffNow = function diffNow(unit, opts) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (opts === void 0) {
      opts = {};
    }

    return this.diff(DateTime.local(), unit, opts);
  }
  /**
   * Return an Interval spanning between this DateTime and another DateTime
   * @param {DateTime} otherDateTime - the other end point of the Interval
   * @return {Interval}
   */
  ;

  _proto.until = function until(otherDateTime) {
    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
  }
  /**
   * Return whether this DateTime is in the same unit of time as another DateTime
   * @param {DateTime} otherDateTime - the other DateTime
   * @param {string} unit - the unit of time to check sameness on
   * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day
   * @return {boolean}
   */
  ;

  _proto.hasSame = function hasSame(otherDateTime, unit) {
    if (!this.isValid) return false;

    if (unit === "millisecond") {
      return this.valueOf() === otherDateTime.valueOf();
    } else {
      var inputMs = otherDateTime.valueOf();
      return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);
    }
  }
  /**
   * Equality check
   * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.
   * To compare just the millisecond values, use `+dt1 === +dt2`.
   * @param {DateTime} other - the other DateTime
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(other) {
    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
  }
  /**
   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
   * platform supports Intl.RelativeTimeFormat. Rounds down by default.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
   * @param {boolean} [options.round=true] - whether to round the numbers in the output.
   * @param {boolean} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.local().plus({ days: 1 }).toRelative() //=> "in 1 day"
   * @example DateTime.local().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
   * @example DateTime.local().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
   * @example DateTime.local().minus({ days: 2 }).toRelative() //=> "2 days ago"
   * @example DateTime.local().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
   * @example DateTime.local().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
   */
  ;

  _proto.toRelative = function toRelative(options) {
    if (options === void 0) {
      options = {};
    }

    if (!this.isValid) return null;
    var base = options.base || DateTime.fromObject({
      zone: this.zone
    }),
        padding = options.padding ? this < base ? -options.padding : options.padding : 0;
    return diffRelative(base, this.plus(padding), Object.assign(options, {
      numeric: "always",
      units: ["years", "months", "days", "hours", "minutes", "seconds"]
    }));
  }
  /**
   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
   * @example DateTime.local().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
   * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
   * @example DateTime.local().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
   */
  ;

  _proto.toRelativeCalendar = function toRelativeCalendar(options) {
    if (options === void 0) {
      options = {};
    }

    if (!this.isValid) return null;
    return diffRelative(options.base || DateTime.fromObject({
      zone: this.zone
    }), this, Object.assign(options, {
      numeric: "auto",
      units: ["years", "months", "days"],
      calendary: true
    }));
  }
  /**
   * Return the min of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
   * @return {DateTime} the min DateTime, or undefined if called with no argument
   */
  ;

  DateTime.min = function min() {
    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
      dateTimes[_key] = arguments[_key];
    }

    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("min requires all arguments be DateTimes");
    }

    return bestBy(dateTimes, function (i) {
      return i.valueOf();
    }, Math.min);
  }
  /**
   * Return the max of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
   * @return {DateTime} the max DateTime, or undefined if called with no argument
   */
  ;

  DateTime.max = function max() {
    for (var _len2 = arguments.length, dateTimes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      dateTimes[_key2] = arguments[_key2];
    }

    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("max requires all arguments be DateTimes");
    }

    return bestBy(dateTimes, function (i) {
      return i.valueOf();
    }, Math.max);
  } // MISC

  /**
   * Explain how a string would be parsed by fromFormat()
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see description)
   * @param {Object} options - options taken by fromFormat()
   * @return {Object}
   */
  ;

  DateTime.fromFormatExplain = function fromFormatExplain(text, fmt, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$locale = _options.locale,
        locale = _options$locale === void 0 ? null : _options$locale,
        _options$numberingSys = _options.numberingSystem,
        numberingSystem = _options$numberingSys === void 0 ? null : _options$numberingSys,
        localeToUse = Locale.fromOpts({
      locale: locale,
      numberingSystem: numberingSystem,
      defaultToEN: true
    });
    return explainFromTokens(localeToUse, text, fmt);
  }
  /**
   * @deprecated use fromFormatExplain instead
   */
  ;

  DateTime.fromStringExplain = function fromStringExplain(text, fmt, options) {
    if (options === void 0) {
      options = {};
    }

    return DateTime.fromFormatExplain(text, fmt, options);
  } // FORMAT PRESETS

  /**
   * {@link toLocaleString} format like 10/14/1983
   * @type {Object}
   */
  ;

  _createClass(DateTime, [{
    key: "isValid",
    get: function get() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
     * @type {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "locale",
    get: function get() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "numberingSystem",
    get: function get() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "outputCalendar",
    get: function get() {
      return this.isValid ? this.loc.outputCalendar : null;
    }
    /**
     * Get the time zone associated with this DateTime.
     * @type {Zone}
     */

  }, {
    key: "zone",
    get: function get() {
      return this._zone;
    }
    /**
     * Get the name of the time zone.
     * @type {string}
     */

  }, {
    key: "zoneName",
    get: function get() {
      return this.isValid ? this.zone.name : null;
    }
    /**
     * Get the year
     * @example DateTime.local(2017, 5, 25).year //=> 2017
     * @type {number}
     */

  }, {
    key: "year",
    get: function get() {
      return this.isValid ? this.c.year : NaN;
    }
    /**
     * Get the quarter
     * @example DateTime.local(2017, 5, 25).quarter //=> 2
     * @type {number}
     */

  }, {
    key: "quarter",
    get: function get() {
      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }
    /**
     * Get the month (1-12).
     * @example DateTime.local(2017, 5, 25).month //=> 5
     * @type {number}
     */

  }, {
    key: "month",
    get: function get() {
      return this.isValid ? this.c.month : NaN;
    }
    /**
     * Get the day of the month (1-30ish).
     * @example DateTime.local(2017, 5, 25).day //=> 25
     * @type {number}
     */

  }, {
    key: "day",
    get: function get() {
      return this.isValid ? this.c.day : NaN;
    }
    /**
     * Get the hour of the day (0-23).
     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
     * @type {number}
     */

  }, {
    key: "hour",
    get: function get() {
      return this.isValid ? this.c.hour : NaN;
    }
    /**
     * Get the minute of the hour (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
     * @type {number}
     */

  }, {
    key: "minute",
    get: function get() {
      return this.isValid ? this.c.minute : NaN;
    }
    /**
     * Get the second of the minute (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
     * @type {number}
     */

  }, {
    key: "second",
    get: function get() {
      return this.isValid ? this.c.second : NaN;
    }
    /**
     * Get the millisecond of the second (0-999).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
     * @type {number}
     */

  }, {
    key: "millisecond",
    get: function get() {
      return this.isValid ? this.c.millisecond : NaN;
    }
    /**
     * Get the week year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekYear //=> 2015
     * @type {number}
     */

  }, {
    key: "weekYear",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
    }
    /**
     * Get the week number of the week year (1-52ish).
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
     * @type {number}
     */

  }, {
    key: "weekNumber",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
    }
    /**
     * Get the day of the week.
     * 1 is Monday and 7 is Sunday
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekday //=> 4
     * @type {number}
     */

  }, {
    key: "weekday",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
    }
    /**
     * Get the ordinal (meaning the day of the year)
     * @example DateTime.local(2017, 5, 25).ordinal //=> 145
     * @type {number|DateTime}
     */

  }, {
    key: "ordinal",
    get: function get() {
      return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
    }
    /**
     * Get the human readable short month name, such as 'Oct'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
     * @type {string}
     */

  }, {
    key: "monthShort",
    get: function get() {
      return this.isValid ? Info.months("short", {
        locale: this.locale
      })[this.month - 1] : null;
    }
    /**
     * Get the human readable long month name, such as 'October'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthLong //=> October
     * @type {string}
     */

  }, {
    key: "monthLong",
    get: function get() {
      return this.isValid ? Info.months("long", {
        locale: this.locale
      })[this.month - 1] : null;
    }
    /**
     * Get the human readable short weekday, such as 'Mon'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
     * @type {string}
     */

  }, {
    key: "weekdayShort",
    get: function get() {
      return this.isValid ? Info.weekdays("short", {
        locale: this.locale
      })[this.weekday - 1] : null;
    }
    /**
     * Get the human readable long weekday, such as 'Monday'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
     * @type {string}
     */

  }, {
    key: "weekdayLong",
    get: function get() {
      return this.isValid ? Info.weekdays("long", {
        locale: this.locale
      })[this.weekday - 1] : null;
    }
    /**
     * Get the UTC offset of this DateTime in minutes
     * @example DateTime.local().offset //=> -240
     * @example DateTime.utc().offset //=> 0
     * @type {number}
     */

  }, {
    key: "offset",
    get: function get() {
      return this.isValid ? +this.o : NaN;
    }
    /**
     * Get the short human name for the zone's current offset, for example "EST" or "EDT".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */

  }, {
    key: "offsetNameShort",
    get: function get() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "short",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */

  }, {
    key: "offsetNameLong",
    get: function get() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "long",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get whether this zone's offset ever changes, as in a DST.
     * @type {boolean}
     */

  }, {
    key: "isOffsetFixed",
    get: function get() {
      return this.isValid ? this.zone.universal : null;
    }
    /**
     * Get whether the DateTime is in a DST.
     * @type {boolean}
     */

  }, {
    key: "isInDST",
    get: function get() {
      if (this.isOffsetFixed) {
        return false;
      } else {
        return this.offset > this.set({
          month: 1
        }).offset || this.offset > this.set({
          month: 5
        }).offset;
      }
    }
    /**
     * Returns true if this DateTime is in a leap year, false otherwise
     * @example DateTime.local(2016).isInLeapYear //=> true
     * @example DateTime.local(2013).isInLeapYear //=> false
     * @type {boolean}
     */

  }, {
    key: "isInLeapYear",
    get: function get() {
      return isLeapYear(this.year);
    }
    /**
     * Returns the number of days in this DateTime's month
     * @example DateTime.local(2016, 2).daysInMonth //=> 29
     * @example DateTime.local(2016, 3).daysInMonth //=> 31
     * @type {number}
     */

  }, {
    key: "daysInMonth",
    get: function get() {
      return daysInMonth(this.year, this.month);
    }
    /**
     * Returns the number of days in this DateTime's year
     * @example DateTime.local(2016).daysInYear //=> 366
     * @example DateTime.local(2013).daysInYear //=> 365
     * @type {number}
     */

  }, {
    key: "daysInYear",
    get: function get() {
      return this.isValid ? daysInYear(this.year) : NaN;
    }
    /**
     * Returns the number of weeks in this DateTime's year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2004).weeksInWeekYear //=> 53
     * @example DateTime.local(2013).weeksInWeekYear //=> 52
     * @type {number}
     */

  }, {
    key: "weeksInWeekYear",
    get: function get() {
      return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
    }
  }], [{
    key: "DATE_SHORT",
    get: function get() {
      return DATE_SHORT;
    }
    /**
     * {@link toLocaleString} format like 'Oct 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_MED",
    get: function get() {
      return DATE_MED;
    }
    /**
     * {@link toLocaleString} format like 'Fri, Oct 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_MED_WITH_WEEKDAY",
    get: function get() {
      return DATE_MED_WITH_WEEKDAY;
    }
    /**
     * {@link toLocaleString} format like 'October 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_FULL",
    get: function get() {
      return DATE_FULL;
    }
    /**
     * {@link toLocaleString} format like 'Tuesday, October 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_HUGE",
    get: function get() {
      return DATE_HUGE;
    }
    /**
     * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_SIMPLE",
    get: function get() {
      return TIME_SIMPLE;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_SECONDS",
    get: function get() {
      return TIME_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_SHORT_OFFSET",
    get: function get() {
      return TIME_WITH_SHORT_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_LONG_OFFSET",
    get: function get() {
      return TIME_WITH_LONG_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '09:30', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_SIMPLE",
    get: function get() {
      return TIME_24_SIMPLE;
    }
    /**
     * {@link toLocaleString} format like '09:30:23', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_SECONDS",
    get: function get() {
      return TIME_24_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_SHORT_OFFSET",
    get: function get() {
      return TIME_24_WITH_SHORT_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_LONG_OFFSET",
    get: function get() {
      return TIME_24_WITH_LONG_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_SHORT",
    get: function get() {
      return DATETIME_SHORT;
    }
    /**
     * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_SHORT_WITH_SECONDS",
    get: function get() {
      return DATETIME_SHORT_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED",
    get: function get() {
      return DATETIME_MED;
    }
    /**
     * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED_WITH_SECONDS",
    get: function get() {
      return DATETIME_MED_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED_WITH_WEEKDAY",
    get: function get() {
      return DATETIME_MED_WITH_WEEKDAY;
    }
    /**
     * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_FULL",
    get: function get() {
      return DATETIME_FULL;
    }
    /**
     * {@link toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_FULL_WITH_SECONDS",
    get: function get() {
      return DATETIME_FULL_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_HUGE",
    get: function get() {
      return DATETIME_HUGE;
    }
    /**
     * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_HUGE_WITH_SECONDS",
    get: function get() {
      return DATETIME_HUGE_WITH_SECONDS;
    }
  }]);

  return DateTime;
}();
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError("Unknown datetime argument: " + dateTimeish + ", of type " + typeof dateTimeish);
  }
}

exports.DateTime = DateTime;
exports.Duration = Duration;
exports.FixedOffsetZone = FixedOffsetZone;
exports.IANAZone = IANAZone;
exports.Info = Info;
exports.Interval = Interval;
exports.InvalidZone = InvalidZone;
exports.LocalZone = LocalZone;
exports.Settings = Settings;
exports.Zone = Zone;


},{}]},{},[1]);
