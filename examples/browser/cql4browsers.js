(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/* eslint-disable
    no-undef,
*/
// TODO: This file was created by bulk-decaffeinate.
// Fix any style issues and re-enable lint.
/*
 * decaffeinate suggestions:
 * DS102: Remove unnecessary code created because of implicit returns
 * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md
 */
window.cql = require('../../lib/cql');

window.executeSimpleELM = function (
  elm,
  patientSource,
  valueSets,
  libraryName,
  version,
  executionDateTime,
  parameters = {}
) {
  let lib;
  if (Array.isArray(elm)) {
    if (elm.length > 1) {
      const rep = new window.cql.Repository(elm);
      lib = rep.resolve(libraryName, version);
    } else {
      lib = new window.cql.Library(elm[0]);
    }
  } else {
    lib = new window.cql.Library(elm);
  }

  const codeService = new window.cql.CodeService(valueSets);
  const executor = new window.cql.Executor(lib, codeService, parameters);
  return executor.exec(patientSource, executionDateTime);
};

},{"../../lib/cql":4}],2:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./datatypes/datatypes'),
    Code = _require.Code,
    ValueSet = _require.ValueSet;

var CodeService = /*#__PURE__*/function () {
  function CodeService() {
    var valueSetsJson = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CodeService);

    this.valueSets = {};

    for (var oid in valueSetsJson) {
      this.valueSets[oid] = {};

      for (var version in valueSetsJson[oid]) {
        var codes = valueSetsJson[oid][version].map(function (code) {
          return new Code(code.code, code.system, code.version);
        });
        this.valueSets[oid][version] = new ValueSet(oid, version, codes);
      }
    }
  }

  _createClass(CodeService, [{
    key: "findValueSetsByOid",
    value: function findValueSetsByOid(oid) {
      return this.valueSets[oid] ? Object.values(this.valueSets[oid]) : [];
    }
  }, {
    key: "findValueSet",
    value: function findValueSet(oid, version) {
      if (version != null) {
        return this.valueSets[oid] != null ? this.valueSets[oid][version] : undefined;
      } else {
        var results = this.findValueSetsByOid(oid);

        if (results.length === 0) {
          return null;
        } else {
          return results.reduce(function (a, b) {
            if (a.version > b.version) {
              return a;
            } else {
              return b;
            }
          });
        }
      }
    }
  }]);

  return CodeService;
}();

module.exports.CodeService = CodeService;
},{"./datatypes/datatypes":6}],3:[function(require,module,exports){
"use strict";

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DT = require('./datatypes/datatypes');

var Record = /*#__PURE__*/function () {
  function Record(json) {
    _classCallCheck(this, Record);

    this.json = json;
    this.id = this.json.id;
  }

  _createClass(Record, [{
    key: "_is",
    value: function _is(typeSpecifier) {
      return this._typeHierarchy().some(function (t) {
        return t.type === typeSpecifier.type && t.name == typeSpecifier.name;
      });
    }
  }, {
    key: "_typeHierarchy",
    value: function _typeHierarchy() {
      return [{
        name: "{https://github.com/cqframework/cql-execution/simple}".concat(this.json.recordType),
        type: 'NamedTypeSpecifier'
      }, {
        name: '{https://github.com/cqframework/cql-execution/simple}Record',
        type: 'NamedTypeSpecifier'
      }, {
        name: '{urn:hl7-org:elm-types:r1}Any',
        type: 'NamedTypeSpecifier'
      }];
    }
  }, {
    key: "_recursiveGet",
    value: function _recursiveGet(field) {
      if (field != null && field.indexOf('.') >= 0) {
        var _field$split = field.split('.', 2),
            _field$split2 = _slicedToArray(_field$split, 2),
            root = _field$split2[0],
            rest = _field$split2[1];

        return new Record(this._recursiveGet(root))._recursiveGet(rest);
      }

      return this.json[field];
    }
  }, {
    key: "get",
    value: function get(field) {
      // the model should return the correct type for the field. For this simple model example,
      // we just cheat and use the shape of the value to determine it. Real implementations should
      // have a more sophisticated approach
      var value = this._recursiveGet(field);

      if (typeof value === 'string' && /\d{4}-\d{2}-\d{2}(T[\d\-.]+)?/.test(value)) {
        return this.getDate(field);
      }

      if (value != null && _typeof(value) === 'object' && value.code != null && value.system != null) {
        return this.getCode(field);
      }

      if (value != null && _typeof(value) === 'object' && (value.low != null || value.high != null)) {
        return this.getInterval(field);
      }

      return value;
    }
  }, {
    key: "getId",
    value: function getId() {
      return this.id;
    }
  }, {
    key: "getDate",
    value: function getDate(field) {
      var val = this._recursiveGet(field);

      if (val != null) {
        return DT.DateTime.parse(val);
      } else {
        return null;
      }
    }
  }, {
    key: "getInterval",
    value: function getInterval(field) {
      var val = this._recursiveGet(field);

      if (val != null && _typeof(val) === 'object') {
        var low = val.low != null ? DT.DateTime.parse(val.low) : null;
        var high = val.high != null ? DT.DateTime.parse(val.high) : null;
        return new DT.Interval(low, high);
      }
    }
  }, {
    key: "getDateOrInterval",
    value: function getDateOrInterval(field) {
      var val = this._recursiveGet(field);

      if (val != null && _typeof(val) === 'object') {
        return this.getInterval(field);
      } else {
        return this.getDate(field);
      }
    }
  }, {
    key: "getCode",
    value: function getCode(field) {
      var val = this._recursiveGet(field);

      if (val != null && _typeof(val) === 'object') {
        return new DT.Code(val.code, val.system, val.version);
      }
    }
  }]);

  return Record;
}();

var Patient = /*#__PURE__*/function (_Record) {
  _inherits(Patient, _Record);

  var _super = _createSuper(Patient);

  function Patient(json) {
    var _this;

    _classCallCheck(this, Patient);

    _this = _super.call(this, json);
    _this.name = json.name;
    _this.gender = json.gender;
    _this.birthDate = json.birthDate != null ? DT.DateTime.parse(json.birthDate) : undefined;
    _this.records = {};
    (json.records || []).forEach(function (r) {
      if (_this.records[r.recordType] == null) {
        _this.records[r.recordType] = [];
      }

      _this.records[r.recordType].push(new Record(r));
    });
    return _this;
  }

  _createClass(Patient, [{
    key: "findRecords",
    value: function findRecords(profile) {
      if (profile == null) {
        return [];
      }

      var recordType = profile.match(/(\{https:\/\/github\.com\/cqframework\/cql-execution\/simple\})?(.*)/)[2];

      if (recordType === 'Patient') {
        return [this];
      } else {
        return this.records[recordType] || [];
      }
    }
  }]);

  return Patient;
}(Record);

var PatientSource = /*#__PURE__*/function () {
  function PatientSource(patients) {
    _classCallCheck(this, PatientSource);

    this.patients = patients;
    this.nextPatient();
  }

  _createClass(PatientSource, [{
    key: "currentPatient",
    value: function currentPatient() {
      return this.current;
    }
  }, {
    key: "nextPatient",
    value: function nextPatient() {
      var currentJSON = this.patients.shift();
      this.current = currentJSON ? new Patient(currentJSON) : undefined;
      return this.current;
    }
  }]);

  return PatientSource;
}();

module.exports.Patient = Patient;
module.exports.PatientSource = PatientSource;
},{"./datatypes/datatypes":6}],4:[function(require,module,exports){
"use strict";

var library = require('./elm/library');

var expression = require('./elm/expression');

var repository = require('./runtime/repository');

var context = require('./runtime/context');

var exec = require('./runtime/executor');

var results = require('./runtime/results');

var datatypes = require('./datatypes/datatypes');

var patient = require('./cql-patient');

var codeservice = require('./cql-code-service'); // Library-related classes


module.exports.Library = library.Library;
module.exports.Repository = repository.Repository;
module.exports.Expression = expression.Expression; // Execution-related classes

module.exports.Context = context.Context;
module.exports.Executor = exec.Executor;
module.exports.PatientContext = context.PatientContext;
module.exports.UnfilteredContext = context.UnfilteredContext;
module.exports.Results = results.Results; // PatientSource-related classes

module.exports.Patient = patient.Patient;
module.exports.PatientSource = patient.PatientSource; // TerminologyService-related classes

module.exports.CodeService = codeservice.CodeService; // DataType classes

module.exports.Code = datatypes.Code;
module.exports.CodeSystem = datatypes.CodeSystem;
module.exports.Concept = datatypes.Concept;
module.exports.Date = datatypes.Date;
module.exports.DateTime = datatypes.DateTime;
module.exports.Interval = datatypes.Interval;
module.exports.Quantity = datatypes.Quantity;
module.exports.Ratio = datatypes.Ratio;
module.exports.ValueSet = datatypes.ValueSet;
},{"./cql-code-service":2,"./cql-patient":3,"./datatypes/datatypes":6,"./elm/expression":22,"./elm/library":27,"./runtime/context":41,"./runtime/executor":42,"./runtime/repository":43,"./runtime/results":44}],5:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('../util/util'),
    typeIsArray = _require.typeIsArray;

var Code = /*#__PURE__*/function () {
  function Code(code, system, version, display) {
    _classCallCheck(this, Code);

    this.code = code;
    this.system = system;
    this.version = version;
    this.display = display;
  }

  _createClass(Code, [{
    key: "hasMatch",
    value: function hasMatch(code) {
      if (typeof code === 'string') {
        // the specific behavior for this is not in the specification. Matching codesystem behavior.
        return code === this.code;
      } else {
        return codesInList(toCodeList(code), [this]);
      }
    }
  }, {
    key: "isCode",
    get: function get() {
      return true;
    }
  }]);

  return Code;
}();

var Concept = /*#__PURE__*/function () {
  function Concept(codes, display) {
    _classCallCheck(this, Concept);

    this.codes = codes || [];
    this.display = display;
  }

  _createClass(Concept, [{
    key: "hasMatch",
    value: function hasMatch(code) {
      return codesInList(toCodeList(code), this.codes);
    }
  }, {
    key: "isConcept",
    get: function get() {
      return true;
    }
  }]);

  return Concept;
}();

var ValueSet = /*#__PURE__*/function () {
  function ValueSet(oid, version, codes) {
    _classCallCheck(this, ValueSet);

    this.oid = oid;
    this.version = version;
    this.codes = codes || [];
  }

  _createClass(ValueSet, [{
    key: "hasMatch",
    value: function hasMatch(code) {
      var codesList = toCodeList(code); // InValueSet String Overload

      if (codesList.length === 1 && typeof codesList[0] === 'string') {
        var matchFound = false;
        var multipleCodeSystemsExist = false;

        var _iterator = _createForOfIteratorHelper(this.codes),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var codeItem = _step.value;

            // Confirm all code systems match
            if (codeItem.system !== this.codes[0].system) {
              multipleCodeSystemsExist = true;
            }

            if (codeItem.code === codesList[0]) {
              matchFound = true;
            }

            if (multipleCodeSystemsExist && matchFound) {
              throw new Error('In (valueset) is ambiguous -- multiple codes with multiple code systems exist in value set.');
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return matchFound;
      } else {
        return codesInList(codesList, this.codes);
      }
    }
  }, {
    key: "isValueSet",
    get: function get() {
      return true;
    }
  }]);

  return ValueSet;
}();

function toCodeList(c) {
  if (c == null) {
    return [];
  } else if (typeIsArray(c)) {
    var list = [];

    var _iterator2 = _createForOfIteratorHelper(c),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var c2 = _step2.value;
        list = list.concat(toCodeList(c2));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return list;
  } else if (typeIsArray(c.codes)) {
    return c.codes;
  } else {
    return [c];
  }
}

function codesInList(cl1, cl2) {
  // test each code in c1 against each code in c2 looking for a match
  return cl1.some(function (c1) {
    return cl2.some(function (c2) {
      // only the left argument (cl1) can contain strings. cl2 will only contain codes.
      if (typeof c1 === 'string') {
        // for "string in codesystem" this should compare the string to
        // the code's "code" field according to the specification.
        return c1 === c2.code;
      } else {
        return codesMatch(c1, c2);
      }
    });
  });
}

function codesMatch(code1, code2) {
  return code1.code === code2.code && code1.system === code2.system;
}

var CodeSystem = function CodeSystem(id, version) {
  _classCallCheck(this, CodeSystem);

  this.id = id;
  this.version = version;
};

module.exports = {
  Code: Code,
  Concept: Concept,
  ValueSet: ValueSet,
  CodeSystem: CodeSystem
};
},{"../util/util":47}],6:[function(require,module,exports){
"use strict";

var logic = require('./logic');

var clinical = require('./clinical');

var uncertainty = require('./uncertainty');

var datetime = require('./datetime');

var interval = require('./interval');

var quantity = require('./quantity');

var ratio = require('./ratio');

var libs = [logic, clinical, uncertainty, datetime, interval, quantity, ratio];

for (var _i = 0, _libs = libs; _i < _libs.length; _i++) {
  var lib = _libs[_i];

  for (var _i2 = 0, _Object$keys = Object.keys(lib); _i2 < _Object$keys.length; _i2++) {
    var element = _Object$keys[_i2];
    module.exports[element] = lib[element];
  }
}
},{"./clinical":5,"./datetime":7,"./interval":9,"./logic":10,"./quantity":11,"./ratio":12,"./uncertainty":13}],7:[function(require,module,exports){
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./uncertainty'),
    Uncertainty = _require.Uncertainty;

var _require2 = require('../util/util'),
    jsDate = _require2.jsDate,
    normalizeMillisecondsField = _require2.normalizeMillisecondsField,
    normalizeMillisecondsFieldInString = _require2.normalizeMillisecondsFieldInString;

var luxon = require('luxon'); // It's easiest and most performant to organize formats by length of the supported strings.
// This way we can test strings only against the formats that have a chance of working.
// NOTE: Formats use Luxon formats, documented here: https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens


var LENGTH_TO_DATE_FORMAT_MAP = function () {
  var ltdfMap = new Map();
  ltdfMap.set(4, 'yyyy');
  ltdfMap.set(7, 'yyyy-MM');
  ltdfMap.set(10, 'yyyy-MM-dd');
  return ltdfMap;
}();

var LENGTH_TO_DATETIME_FORMATS_MAP = function () {
  var formats = {
    yyyy: '2012',
    'yyyy-MM': '2012-01',
    'yyyy-MM-dd': '2012-01-31',
    "yyyy-MM-dd'T''Z'": '2012-01-31TZ',
    "yyyy-MM-dd'T'ZZ": '2012-01-31T-04:00',
    "yyyy-MM-dd'T'HH": '2012-01-31T12',
    "yyyy-MM-dd'T'HH'Z'": '2012-01-31T12Z',
    "yyyy-MM-dd'T'HHZZ": '2012-01-31T12-04:00',
    "yyyy-MM-dd'T'HH:mm": '2012-01-31T12:30',
    "yyyy-MM-dd'T'HH:mm'Z'": '2012-01-31T12:30Z',
    "yyyy-MM-dd'T'HH:mmZZ": '2012-01-31T12:30-04:00',
    "yyyy-MM-dd'T'HH:mm:ss": '2012-01-31T12:30:59',
    "yyyy-MM-dd'T'HH:mm:ss'Z'": '2012-01-31T12:30:59Z',
    "yyyy-MM-dd'T'HH:mm:ssZZ": '2012-01-31T12:30:59-04:00',
    "yyyy-MM-dd'T'HH:mm:ss.SSS": '2012-01-31T12:30:59.000',
    "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'": '2012-01-31T12:30:59.000Z',
    "yyyy-MM-dd'T'HH:mm:ss.SSSZZ": '2012-01-31T12:30:59.000-04:00'
  };
  var ltdtfMap = new Map();
  Object.keys(formats).forEach(function (k) {
    var example = formats[k];

    if (!ltdtfMap.has(example.length)) {
      ltdtfMap.set(example.length, [k]);
    } else {
      ltdtfMap.get(example.length).push(k);
    }
  });
  return ltdtfMap;
}();

function wholeLuxonDuration(duration, unit) {
  var value = duration.get(unit);
  return value >= 0 ? Math.floor(value) : Math.ceil(value);
}

function truncateLuxonDateTime(luxonDT, unit) {
  // Truncating by week (to the previous Sunday) requires different logic than the rest
  if (unit === DateTime.Unit.WEEK) {
    // Sunday is ISO weekday 7
    if (luxonDT.weekday !== 7) {
      luxonDT = luxonDT.set({
        weekday: 7
      }).minus({
        weeks: 1
      });
    }

    unit = DateTime.Unit.DAY;
  }

  return luxonDT.startOf(unit);
}

var DateTime = /*#__PURE__*/function () {
  _createClass(DateTime, null, [{
    key: "parse",
    value: function parse(string) {
      if (string === null) {
        return null;
      }

      var matches = /(\d{4})(-(\d{2}))?(-(\d{2}))?(T((\d{2})(:(\d{2})(:(\d{2})(\.(\d+))?)?)?)?(Z|(([+-])(\d{2})(:?(\d{2}))?))?)?/.exec(string);

      if (matches == null) {
        return null;
      }

      var years = matches[1];
      var months = matches[3];
      var days = matches[5];
      var hours = matches[8];
      var minutes = matches[10];
      var seconds = matches[12];
      var milliseconds = matches[14];

      if (milliseconds != null) {
        milliseconds = normalizeMillisecondsField(milliseconds);
      }

      if (milliseconds != null) {
        string = normalizeMillisecondsFieldInString(string, matches[14]);
      }

      if (!isValidDateTimeStringFormat(string)) {
        return null;
      } // convert the args to integers


      var args = [years, months, days, hours, minutes, seconds, milliseconds].map(function (arg) {
        return arg != null ? parseInt(arg) : arg;
      }); // convert timezone offset to decimal and add it to arguments

      if (matches[18] != null) {
        var num = parseInt(matches[18]) + (matches[20] != null ? parseInt(matches[20]) / 60 : 0);
        args.push(matches[17] === '+' ? num : num * -1);
      } else if (matches[15] === 'Z') {
        args.push(0);
      }

      return _construct(DateTime, _toConsumableArray(args));
    }
  }, {
    key: "fromJSDate",
    value: function fromJSDate(date, timezoneOffset) {
      //This is from a JS Date, not a CQL Date
      if (date instanceof DateTime) {
        return date;
      }

      if (timezoneOffset != null) {
        date = new jsDate(date.getTime() + timezoneOffset * 60 * 60 * 1000);
        return new DateTime(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds(), timezoneOffset);
      } else {
        return new DateTime(date.getFullYear(), date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
      }
    }
  }, {
    key: "fromLuxonDateTime",
    value: function fromLuxonDateTime(luxonDT) {
      if (luxonDT instanceof DateTime) {
        return luxonDT;
      }

      return new DateTime(luxonDT.year, luxonDT.month, luxonDT.day, luxonDT.hour, luxonDT.minute, luxonDT.second, luxonDT.millisecond, luxonDT.offset / 60);
    }
  }]);

  function DateTime() {
    var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var day = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var hour = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var minute = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var second = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var millisecond = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
    var timezoneOffset = arguments.length > 7 ? arguments[7] : undefined;

    _classCallCheck(this, DateTime);

    // from the spec: If no timezone is specified, the timezone of the evaluation request timestamp is used.
    // NOTE: timezoneOffset will be explicitly null for the Time overload, whereas
    // it will be undefined if simply unspecified
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.millisecond = millisecond;
    this.timezoneOffset = timezoneOffset;

    if (this.timezoneOffset === undefined) {
      this.timezoneOffset = new jsDate().getTimezoneOffset() / 60 * -1;
    }
  }

  _createClass(DateTime, [{
    key: "copy",
    value: function copy() {
      return new DateTime(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond, this.timezoneOffset);
    }
  }, {
    key: "successor",
    value: function successor() {
      if (this.millisecond != null) {
        return this.add(1, DateTime.Unit.MILLISECOND);
      } else if (this.second != null) {
        return this.add(1, DateTime.Unit.SECOND);
      } else if (this.minute != null) {
        return this.add(1, DateTime.Unit.MINUTE);
      } else if (this.hour != null) {
        return this.add(1, DateTime.Unit.HOUR);
      } else if (this.day != null) {
        return this.add(1, DateTime.Unit.DAY);
      } else if (this.month != null) {
        return this.add(1, DateTime.Unit.MONTH);
      } else if (this.year != null) {
        return this.add(1, DateTime.Unit.YEAR);
      }
    }
  }, {
    key: "predecessor",
    value: function predecessor() {
      if (this.millisecond != null) {
        return this.add(-1, DateTime.Unit.MILLISECOND);
      } else if (this.second != null) {
        return this.add(-1, DateTime.Unit.SECOND);
      } else if (this.minute != null) {
        return this.add(-1, DateTime.Unit.MINUTE);
      } else if (this.hour != null) {
        return this.add(-1, DateTime.Unit.HOUR);
      } else if (this.day != null) {
        return this.add(-1, DateTime.Unit.DAY);
      } else if (this.month != null) {
        return this.add(-1, DateTime.Unit.MONTH);
      } else if (this.year != null) {
        return this.add(-1, DateTime.Unit.YEAR);
      }
    }
  }, {
    key: "convertToTimezoneOffset",
    value: function convertToTimezoneOffset() {
      var timezoneOffset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var shiftedLuxonDT = this.toLuxonDateTime().setZone(luxon.FixedOffsetZone.instance(timezoneOffset * 60));
      var shiftedDT = DateTime.fromLuxonDateTime(shiftedLuxonDT);
      return shiftedDT.reducedPrecision(this.getPrecision());
    }
  }, {
    key: "differenceBetween",
    value: function differenceBetween(other, unitField) {
      other = this._implicitlyConvert(other);

      if (other == null || !other.isDateTime) {
        return null;
      } // According to CQL spec:
      // * "Difference calculations are performed by truncating the datetime values at the next precision,
      //   and then performing the corresponding duration calculation on the truncated values."
      // * "When difference is calculated for hours or finer units, timezone offsets should be normalized
      //   prior to truncation to correctly consider real (actual elapsed) time. When difference is calculated
      //   for days or coarser units, however, the time components (including timezone offset) should be truncated
      //   without normalization to correctly reflect the difference in calendar days, months, and years."


      var a = this.toLuxonUncertainty();
      var b = other.toLuxonUncertainty(); // If unit is days or above, reset all the DateTimes to UTC since TZ offset should not be considered;
      // Otherwise, we don't actually have to "normalize" to a common TZ because Luxon takes TZ into account.

      if ([DateTime.Unit.YEAR, DateTime.Unit.MONTH, DateTime.Unit.WEEK, DateTime.Unit.DAY].includes(unitField)) {
        a.low = a.low.toUTC(0, {
          keepLocalTime: true
        });
        a.high = a.high.toUTC(0, {
          keepLocalTime: true
        });
        b.low = b.low.toUTC(0, {
          keepLocalTime: true
        });
        b.high = b.high.toUTC(0, {
          keepLocalTime: true
        });
      } // Truncate all dates at precision below specified unit


      a.low = truncateLuxonDateTime(a.low, unitField);
      a.high = truncateLuxonDateTime(a.high, unitField);
      b.low = truncateLuxonDateTime(b.low, unitField);
      b.high = truncateLuxonDateTime(b.high, unitField); // Return the duration based on the normalize and truncated values

      return new Uncertainty(wholeLuxonDuration(b.low.diff(a.high, unitField), unitField), wholeLuxonDuration(b.high.diff(a.low, unitField), unitField));
    }
  }, {
    key: "durationBetween",
    value: function durationBetween(other, unitField) {
      other = this._implicitlyConvert(other);

      if (other == null || !other.isDateTime) {
        return null;
      }

      var a = this.toLuxonUncertainty();
      var b = other.toLuxonUncertainty();
      return new Uncertainty(wholeLuxonDuration(b.low.diff(a.high, unitField), unitField), wholeLuxonDuration(b.high.diff(a.low, unitField), unitField));
    }
  }, {
    key: "isUTC",
    value: function isUTC() {
      // A timezoneOffset of 0 indicates UTC time.
      return !this.timezoneOffset;
    }
  }, {
    key: "getPrecision",
    value: function getPrecision() {
      var result = null;

      if (this.year != null) {
        result = DateTime.Unit.YEAR;
      } else {
        return result;
      }

      if (this.month != null) {
        result = DateTime.Unit.MONTH;
      } else {
        return result;
      }

      if (this.day != null) {
        result = DateTime.Unit.DAY;
      } else {
        return result;
      }

      if (this.hour != null) {
        result = DateTime.Unit.HOUR;
      } else {
        return result;
      }

      if (this.minute != null) {
        result = DateTime.Unit.MINUTE;
      } else {
        return result;
      }

      if (this.second != null) {
        result = DateTime.Unit.SECOND;
      } else {
        return result;
      }

      if (this.millisecond != null) {
        result = DateTime.Unit.MILLISECOND;
      }

      return result;
    }
  }, {
    key: "toLuxonDateTime",
    value: function toLuxonDateTime() {
      var offsetMins = this.timezoneOffset != null ? this.timezoneOffset * 60 : new jsDate().getTimezoneOffset() * -1;
      return luxon.DateTime.fromObject({
        year: this.year,
        month: this.month,
        day: this.day,
        hour: this.hour,
        minute: this.minute,
        second: this.second,
        millisecond: this.millisecond,
        zone: luxon.FixedOffsetZone.instance(offsetMins)
      });
    }
  }, {
    key: "toLuxonUncertainty",
    value: function toLuxonUncertainty() {
      var low = this.toLuxonDateTime();
      var high = low.endOf(this.getPrecision());
      return new Uncertainty(low, high);
    }
  }, {
    key: "toJSDate",
    value: function toJSDate() {
      var ignoreTimezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var luxonDT = this.toLuxonDateTime(); // I don't know if anyone is using "ignoreTimezone" anymore (we aren't), but just in case

      if (ignoreTimezone) {
        var offset = new jsDate().getTimezoneOffset() * -1;
        luxonDT = luxonDT.setZone(luxon.FixedOffsetZone.instance(offset), {
          keepLocalTime: true
        });
      }

      return luxonDT.toJSDate();
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }, {
    key: "_pad",
    value: function _pad(num) {
      return String('0' + num).slice(-2);
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.isTime()) {
        return this.toStringTime();
      } else {
        return this.toStringDateTime();
      }
    }
  }, {
    key: "toStringTime",
    value: function toStringTime() {
      var str = '';

      if (this.hour != null) {
        str += this._pad(this.hour);

        if (this.minute != null) {
          str += ':' + this._pad(this.minute);

          if (this.second != null) {
            str += ':' + this._pad(this.second);

            if (this.millisecond != null) {
              str += '.' + String('00' + this.millisecond).slice(-3);
            }
          }
        }
      }

      return str;
    }
  }, {
    key: "toStringDateTime",
    value: function toStringDateTime() {
      var str = '';

      if (this.year != null) {
        str += this.year;

        if (this.month != null) {
          str += '-' + this._pad(this.month);

          if (this.day != null) {
            str += '-' + this._pad(this.day);

            if (this.hour != null) {
              str += 'T' + this._pad(this.hour);

              if (this.minute != null) {
                str += ':' + this._pad(this.minute);

                if (this.second != null) {
                  str += ':' + this._pad(this.second);

                  if (this.millisecond != null) {
                    str += '.' + String('00' + this.millisecond).slice(-3);
                  }
                }
              }
            }
          }
        }
      }

      if (str.indexOf('T') !== -1 && this.timezoneOffset != null) {
        str += this.timezoneOffset < 0 ? '-' : '+';
        var offsetHours = Math.floor(Math.abs(this.timezoneOffset));
        str += this._pad(offsetHours);
        var offsetMin = (Math.abs(this.timezoneOffset) - offsetHours) * 60;
        str += ':' + this._pad(offsetMin);
      }

      return str;
    }
  }, {
    key: "getDateTime",
    value: function getDateTime() {
      return this;
    }
  }, {
    key: "getDate",
    value: function getDate() {
      return new _Date(this.year, this.month, this.day);
    }
  }, {
    key: "getTime",
    value: function getTime() {
      // Times no longer have timezoneOffets, so we must explicitly set it to null
      return new DateTime(0, 1, 1, this.hour, this.minute, this.second, this.millisecond, null);
    }
  }, {
    key: "isTime",
    value: function isTime() {
      return this.year === 0 && this.month === 1 && this.day === 1;
    }
  }, {
    key: "_implicitlyConvert",
    value: function _implicitlyConvert(other) {
      if (other != null && other.isDate) {
        return other.getDateTime();
      }

      return other;
    }
  }, {
    key: "reducedPrecision",
    value: function reducedPrecision() {
      var unitField = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DateTime.Unit.MILLISECOND;
      var reduced = this.copy();

      if (unitField !== DateTime.Unit.MILLISECOND) {
        var fieldIndex = DateTime.FIELDS.indexOf(unitField);
        var fieldsToRemove = DateTime.FIELDS.slice(fieldIndex + 1);

        var _iterator = _createForOfIteratorHelper(fieldsToRemove),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var field = _step.value;
            reduced[field] = null;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return reduced;
    }
  }, {
    key: "isDateTime",
    get: function get() {
      return true;
    }
  }]);

  return DateTime;
}();

DateTime.Unit = {
  YEAR: 'year',
  MONTH: 'month',
  WEEK: 'week',
  DAY: 'day',
  HOUR: 'hour',
  MINUTE: 'minute',
  SECOND: 'second',
  MILLISECOND: 'millisecond'
};
DateTime.FIELDS = [DateTime.Unit.YEAR, DateTime.Unit.MONTH, DateTime.Unit.DAY, DateTime.Unit.HOUR, DateTime.Unit.MINUTE, DateTime.Unit.SECOND, DateTime.Unit.MILLISECOND];

var _Date = /*#__PURE__*/function () {
  _createClass(_Date, null, [{
    key: "parse",
    value: function parse(string) {
      if (string === null) {
        return null;
      }

      var matches = /(\d{4})(-(\d{2}))?(-(\d{2}))?/.exec(string);

      if (matches == null) {
        return null;
      }

      var years = matches[1];
      var months = matches[3];
      var days = matches[5];

      if (!isValidDateStringFormat(string)) {
        return null;
      } // convert args to integers


      var args = [years, months, days].map(function (arg) {
        return arg != null ? parseInt(arg) : arg;
      });
      return _construct(_Date, _toConsumableArray(args));
    }
  }]);

  function _Date() {
    var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var day = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, _Date);

    this.year = year;
    this.month = month;
    this.day = day;
  }

  _createClass(_Date, [{
    key: "copy",
    value: function copy() {
      return new _Date(this.year, this.month, this.day);
    }
  }, {
    key: "successor",
    value: function successor() {
      if (this.day != null) {
        return this.add(1, _Date.Unit.DAY);
      } else if (this.month != null) {
        return this.add(1, _Date.Unit.MONTH);
      } else if (this.year != null) {
        return this.add(1, _Date.Unit.YEAR);
      }
    }
  }, {
    key: "predecessor",
    value: function predecessor() {
      if (this.day != null) {
        return this.add(-1, _Date.Unit.DAY);
      } else if (this.month != null) {
        return this.add(-1, _Date.Unit.MONTH);
      } else if (this.year != null) {
        return this.add(-1, _Date.Unit.YEAR);
      }
    }
  }, {
    key: "differenceBetween",
    value: function differenceBetween(other, unitField) {
      if (other != null && other.isDateTime) {
        return this.getDateTime().differenceBetween(other, unitField);
      }

      if (other == null || !other.isDate) {
        return null;
      } // According to CQL spec:
      // * "Difference calculations are performed by truncating the datetime values at the next precision,
      //   and then performing the corresponding duration calculation on the truncated values."


      var a = this.toLuxonUncertainty();
      var b = other.toLuxonUncertainty(); // Truncate all dates at precision below specified unit

      a.low = truncateLuxonDateTime(a.low, unitField);
      a.high = truncateLuxonDateTime(a.high, unitField);
      b.low = truncateLuxonDateTime(b.low, unitField);
      b.high = truncateLuxonDateTime(b.high, unitField); // Return the duration based on the normalize and truncated values

      return new Uncertainty(wholeLuxonDuration(b.low.diff(a.high, unitField), unitField), wholeLuxonDuration(b.high.diff(a.low, unitField), unitField));
    }
  }, {
    key: "durationBetween",
    value: function durationBetween(other, unitField) {
      if (other != null && other.isDateTime) {
        return this.getDateTime().durationBetween(other, unitField);
      }

      if (other == null || !other.isDate) {
        return null;
      }

      var a = this.toLuxonUncertainty();
      var b = other.toLuxonUncertainty();
      return new Uncertainty(wholeLuxonDuration(b.low.diff(a.high, unitField), unitField), wholeLuxonDuration(b.high.diff(a.low, unitField), unitField));
    }
  }, {
    key: "getPrecision",
    value: function getPrecision() {
      var result = null;

      if (this.year != null) {
        result = _Date.Unit.YEAR;
      } else {
        return result;
      }

      if (this.month != null) {
        result = _Date.Unit.MONTH;
      } else {
        return result;
      }

      if (this.day != null) {
        result = _Date.Unit.DAY;
      } else {
        return result;
      }

      return result;
    }
  }, {
    key: "toLuxonDateTime",
    value: function toLuxonDateTime() {
      return luxon.DateTime.fromObject({
        year: this.year,
        month: this.month,
        day: this.day,
        zone: luxon.FixedOffsetZone.utcInstance
      });
    }
  }, {
    key: "toLuxonUncertainty",
    value: function toLuxonUncertainty() {
      var low = this.toLuxonDateTime();
      var high = low.endOf(this.getPrecision()).startOf('day'); // Date type is always at T00:00:00.0

      return new Uncertainty(low, high);
    }
  }, {
    key: "toJSDate",
    value: function toJSDate() {
      var _ref = [this.year, this.month != null ? this.month - 1 : 0, this.day != null ? this.day : 1],
          y = _ref[0],
          mo = _ref[1],
          d = _ref[2];
      return new jsDate(y, mo, d);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }, {
    key: "toString",
    value: function toString() {
      var str = '';

      if (this.year != null) {
        str += this.year.toString();

        if (this.month != null) {
          str += '-' + this.month.toString().padStart(2, '0');

          if (this.day != null) {
            str += '-' + this.day.toString().padStart(2, '0');
          }
        }
      }

      return str;
    }
  }, {
    key: "getDateTime",
    value: function getDateTime() {
      // from the spec: the result will be a DateTime with the time components set to zero,
      // except for the timezone offset, which will be set to the timezone offset of the evaluation
      // request timestamp. (this last part is acheived by just not passing in timezone offset)
      if (this.year != null && this.month != null && this.day != null) {
        return new DateTime(this.year, this.month, this.day, 0, 0, 0, 0); // from spec: no component may be specified at a precision below an unspecified precision.
        // For example, hour may be null, but if it is, minute, second, and millisecond must all be null as well.
      } else {
        return new DateTime(this.year, this.month, this.day);
      }
    }
  }, {
    key: "reducedPrecision",
    value: function reducedPrecision() {
      var unitField = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Date.Unit.DAY;
      var reduced = this.copy();

      if (unitField !== _Date.Unit.DAY) {
        var fieldIndex = _Date.FIELDS.indexOf(unitField);

        var fieldsToRemove = _Date.FIELDS.slice(fieldIndex + 1);

        var _iterator2 = _createForOfIteratorHelper(fieldsToRemove),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var field = _step2.value;
            reduced[field] = null;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      return reduced;
    }
  }, {
    key: "isDate",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromJSDate",
    value: function fromJSDate(date) {
      if (date instanceof _Date) {
        return date;
      }

      return new _Date(date.getFullYear(), date.getMonth() + 1, date.getDate());
    }
  }, {
    key: "fromLuxonDateTime",
    value: function fromLuxonDateTime(luxonDT) {
      if (luxonDT instanceof _Date) {
        return luxonDT;
      }

      return new _Date(luxonDT.year, luxonDT.month, luxonDT.day);
    }
  }]);

  return _Date;
}();

var MIN_DATETIME_VALUE = DateTime.parse('0001-01-01T00:00:00.000');
var MAX_DATETIME_VALUE = DateTime.parse('9999-12-31T23:59:59.999');

var MIN_DATE_VALUE = _Date.parse('0001-01-01');

var MAX_DATE_VALUE = _Date.parse('9999-12-31');

var MIN_TIME_VALUE = DateTime.parse('0000-01-01T00:00:00.000').getTime();
var MAX_TIME_VALUE = DateTime.parse('0000-01-01T23:59:59.999').getTime();
_Date.Unit = {
  YEAR: 'year',
  MONTH: 'month',
  WEEK: 'week',
  DAY: 'day'
};
_Date.FIELDS = [_Date.Unit.YEAR, _Date.Unit.MONTH, _Date.Unit.DAY]; // Shared Funtions For Date and DateTime

DateTime.prototype.isPrecise = _Date.prototype.isPrecise = function () {
  var _this = this;

  return this.constructor.FIELDS.every(function (field) {
    return _this[field] != null;
  });
};

DateTime.prototype.isImprecise = _Date.prototype.isImprecise = function () {
  return !this.isPrecise();
}; // This function can take another Date-ish object, or a precision string (e.g. 'month')


DateTime.prototype.isMorePrecise = _Date.prototype.isMorePrecise = function (other) {
  if (typeof other === 'string' && this.constructor.FIELDS.includes(other)) {
    if (this[other] == null) {
      return false;
    }
  } else {
    var _iterator3 = _createForOfIteratorHelper(this.constructor.FIELDS),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var field = _step3.value;

        if (other[field] != null && this[field] == null) {
          return false;
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }

  return !this.isSamePrecision(other);
}; // This function can take another Date-ish object, or a precision string (e.g. 'month')


DateTime.prototype.isLessPrecise = _Date.prototype.isLessPrecise = function (other) {
  return !this.isSamePrecision(other) && !this.isMorePrecise(other);
}; // This function can take another Date-ish object, or a precision string (e.g. 'month')


DateTime.prototype.isSamePrecision = _Date.prototype.isSamePrecision = function (other) {
  if (typeof other === 'string' && this.constructor.FIELDS.includes(other)) {
    return other === this.getPrecision();
  }

  var _iterator4 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var field = _step4.value;

      if (this[field] != null && other[field] == null) {
        return false;
      }

      if (this[field] == null && other[field] != null) {
        return false;
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return true;
};

DateTime.prototype.equals = _Date.prototype.equals = function (other) {
  return compareWithDefaultResult(this, other, null);
};

DateTime.prototype.equivalent = _Date.prototype.equivalent = function (other) {
  return compareWithDefaultResult(this, other, false);
};

DateTime.prototype.sameAs = _Date.prototype.sameAs = function (other, precision) {
  if (!(other.isDate || other.isDateTime)) {
    return null;
  } else if (this.isDate && other.isDateTime) {
    return this.getDateTime().sameAs(other, precision);
  } else if (this.isDateTime && other.isDate) {
    other = other.getDateTime();
  }

  if (precision != null && this.constructor.FIELDS.indexOf(precision) < 0) {
    throw new Error("Invalid precision: ".concat(precision));
  } // make a copy of other in the correct timezone offset if they don't match.


  if (this.timezoneOffset !== other.timezoneOffset) {
    other = other.convertToTimezoneOffset(this.timezoneOffset);
  }

  var _iterator5 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var field = _step5.value;

      // if both have this precision defined
      if (this[field] != null && other[field] != null) {
        // if they are different then return with false
        if (this[field] !== other[field]) {
          return false;
        } // if both dont have this precision, return true of precision is not defined

      } else if (this[field] == null && other[field] == null) {
        if (precision == null) {
          return true;
        } else {
          // we havent met precision yet
          return null;
        } // otherwise they have inconclusive precision, return null

      } else {
        return null;
      } // if precision is defined and we have reached expected precision, we can leave the loop


      if (precision != null && precision === field) {
        break;
      }
    } // if we made it here, then all fields matched.

  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  return true;
};

DateTime.prototype.sameOrBefore = _Date.prototype.sameOrBefore = function (other, precision) {
  if (!(other.isDate || other.isDateTime)) {
    return null;
  } else if (this.isDate && other.isDateTime) {
    return this.getDateTime().sameOrBefore(other, precision);
  } else if (this.isDateTime && other.isDate) {
    other = other.getDateTime();
  }

  if (precision != null && this.constructor.FIELDS.indexOf(precision) < 0) {
    throw new Error("Invalid precision: ".concat(precision));
  } // make a copy of other in the correct timezone offset if they don't match.


  if (this.timezoneOffset !== other.timezoneOffset) {
    other = other.convertToTimezoneOffset(this.timezoneOffset);
  }

  var _iterator6 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var field = _step6.value;

      // if both have this precision defined
      if (this[field] != null && other[field] != null) {
        // if this value is less than the other return with true. this is before other
        if (this[field] < other[field]) {
          return true; // if this value is greater than the other return with false. this is after
        } else if (this[field] > other[field]) {
          return false;
        } // execution continues if the values are the same
        // if both dont have this precision, return true if precision is not defined

      } else if (this[field] == null && other[field] == null) {
        if (precision == null) {
          return true;
        } else {
          // we havent met precision yet
          return null;
        } // otherwise they have inconclusive precision, return null

      } else {
        return null;
      } // if precision is defined and we have reached expected precision, we can leave the loop


      if (precision != null && precision === field) {
        break;
      }
    } // if we made it here, then all fields matched and they are same

  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  return true;
};

DateTime.prototype.sameOrAfter = _Date.prototype.sameOrAfter = function (other, precision) {
  if (!(other.isDate || other.isDateTime)) {
    return null;
  } else if (this.isDate && other.isDateTime) {
    return this.getDateTime().sameOrAfter(other, precision);
  } else if (this.isDateTime && other.isDate) {
    other = other.getDateTime();
  }

  if (precision != null && this.constructor.FIELDS.indexOf(precision) < 0) {
    throw new Error("Invalid precision: ".concat(precision));
  } // make a copy of other in the correct timezone offset if they don't match.


  if (this.timezoneOffset !== other.timezoneOffset) {
    other = other.convertToTimezoneOffset(this.timezoneOffset);
  }

  var _iterator7 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step7;

  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var field = _step7.value;

      // if both have this precision defined
      if (this[field] != null && other[field] != null) {
        // if this value is greater than the other return with true. this is after other
        if (this[field] > other[field]) {
          return true; // if this value is greater than the other return with false. this is before
        } else if (this[field] < other[field]) {
          return false;
        } // execution continues if the values are the same
        // if both dont have this precision, return true if precision is not defined

      } else if (this[field] == null && other[field] == null) {
        if (precision == null) {
          return true;
        } else {
          // we havent met precision yet
          return null;
        } // otherwise they have inconclusive precision, return null

      } else {
        return null;
      } // if precision is defined and we have reached expected precision, we can leave the loop


      if (precision != null && precision === field) {
        break;
      }
    } // if we made it here, then all fields matched and they are same

  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }

  return true;
};

DateTime.prototype.before = _Date.prototype.before = function (other, precision) {
  if (!(other.isDate || other.isDateTime)) {
    return null;
  } else if (this.isDate && other.isDateTime) {
    return this.getDateTime().before(other, precision);
  } else if (this.isDateTime && other.isDate) {
    other = other.getDateTime();
  }

  if (precision != null && this.constructor.FIELDS.indexOf(precision) < 0) {
    throw new Error("Invalid precision: ".concat(precision));
  } // make a copy of other in the correct timezone offset if they don't match.


  if (this.timezoneOffset !== other.timezoneOffset) {
    other = other.convertToTimezoneOffset(this.timezoneOffset);
  }

  var _iterator8 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step8;

  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var field = _step8.value;

      // if both have this precision defined
      if (this[field] != null && other[field] != null) {
        // if this value is less than the other return with true. this is before other
        if (this[field] < other[field]) {
          return true; // if this value is greater than the other return with false. this is after
        } else if (this[field] > other[field]) {
          return false;
        } // execution continues if the values are the same
        // if both dont have this precision, return false if precision is not defined

      } else if (this[field] == null && other[field] == null) {
        if (precision == null) {
          return false;
        } else {
          // we havent met precision yet
          return null;
        } // otherwise they have inconclusive precision, return null

      } else {
        return null;
      } // if precision is defined and we have reached expected precision, we can leave the loop


      if (precision != null && precision === field) {
        break;
      }
    } // if we made it here, then all fields matched and they are same

  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }

  return false;
};

DateTime.prototype.after = _Date.prototype.after = function (other, precision) {
  if (!(other.isDate || other.isDateTime)) {
    return null;
  } else if (this.isDate && other.isDateTime) {
    return this.getDateTime().after(other, precision);
  } else if (this.isDateTime && other.isDate) {
    other = other.getDateTime();
  }

  if (precision != null && this.constructor.FIELDS.indexOf(precision) < 0) {
    throw new Error("Invalid precision: ".concat(precision));
  } // make a copy of other in the correct timezone offset if they don't match.


  if (this.timezoneOffset !== other.timezoneOffset) {
    other = other.convertToTimezoneOffset(this.timezoneOffset);
  }

  var _iterator9 = _createForOfIteratorHelper(this.constructor.FIELDS),
      _step9;

  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var field = _step9.value;

      // if both have this precision defined
      if (this[field] != null && other[field] != null) {
        // if this value is greater than the other return with true. this is after other
        if (this[field] > other[field]) {
          return true; // if this value is greater than the other return with false. this is before
        } else if (this[field] < other[field]) {
          return false;
        } // execution continues if the values are the same
        // if both dont have this precision, return false if precision is not defined

      } else if (this[field] == null && other[field] == null) {
        if (precision == null) {
          return false;
        } else {
          // we havent met precision yet
          return null;
        } // otherwise they have inconclusive precision, return null

      } else {
        return null;
      } // if precision is defined and we have reached expected precision, we can leave the loop


      if (precision != null && precision === field) {
        break;
      }
    } // if we made it here, then all fields matched and they are same

  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }

  return false;
};

DateTime.prototype.add = _Date.prototype.add = function (offset, field) {
  if (offset === 0 || this.year == null) {
    return this.copy();
  } // Use luxon to do the date math because it honors DST and it has the leap-year/end-of-month semantics we want.
  // NOTE: The luxonDateTime will contain default values where this[unit] is null, but we'll account for that.


  var luxonDateTime = this.toLuxonDateTime(); // From the spec: "The operation is performed by converting the time-based quantity to the most precise value
  // specified in the date/time (truncating any resulting decimal portion) and then adding it to the date/time value."
  // However, since you can't really convert days to months,  if "this" is less precise than the field being added, we can
  // add to the earliest possible value of "this" or subtract from the latest possible value of "this" (depending on the
  // sign of the offset), and then null out the imprecise fields again after doing the calculation.  Due to the way
  // luxonDateTime is constructed above, it is already at the earliest value, so only adjust if the offset is negative.

  var offsetIsMorePrecise = this[field] == null; //whether the quantity we are adding is more precise than "this".

  if (offsetIsMorePrecise && offset < 0) {
    luxonDateTime = luxonDateTime.endOf(this.getPrecision());
  } // Now do the actual math and convert it back to a Date/DateTime w/ originally null fields nulled out again


  var luxonResult = luxonDateTime.plus(_defineProperty({}, field, offset));
  var result = this.constructor.fromLuxonDateTime(luxonResult).reducedPrecision(this.getPrecision()); // Luxon never has a null offset, but sometimes "this" does, so reset to null if applicable

  if (this.isDateTime && this.timezoneOffset == null) {
    result.timezoneOffset = null;
  } // Can't use overflowsOrUnderflows from math.js due to circular dependencies when we require it


  if (result.after(MAX_DATETIME_VALUE || result.before(MIN_DATETIME_VALUE))) {
    return null;
  } else {
    return result;
  }
};

DateTime.prototype.getFieldFloor = _Date.prototype.getFieldFloor = function (field) {
  switch (field) {
    case 'month':
      return 1;

    case 'day':
      return 1;

    case 'hour':
      return 0;

    case 'minute':
      return 0;

    case 'second':
      return 0;

    case 'millisecond':
      return 0;

    default:
      throw new Error('Tried to floor a field that has no floor value: ' + field);
  }
};

DateTime.prototype.getFieldCieling = _Date.prototype.getFieldCieling = function (field) {
  switch (field) {
    case 'month':
      return 12;

    case 'day':
      return daysInMonth(this.year, this.month);

    case 'hour':
      return 23;

    case 'minute':
      return 59;

    case 'second':
      return 59;

    case 'millisecond':
      return 999;

    default:
      throw new Error('Tried to clieling a field that has no cieling value: ' + field);
  }
};

function compareWithDefaultResult(a, b, defaultResult) {
  // return false there is a type mismatch
  if ((!a.isDate || !b.isDate) && (!a.isDateTime || !b.isDateTime)) {
    return false;
  } // make a copy of other in the correct timezone offset if they don't match.


  if (a.timezoneOffset !== b.timezoneOffset) {
    b = b.convertToTimezoneOffset(a.timezoneOffset);
  }

  var _iterator10 = _createForOfIteratorHelper(a.constructor.FIELDS),
      _step10;

  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var field = _step10.value;

      // if both have this precision defined
      if (a[field] != null && b[field] != null) {
        // For the purposes of comparison, seconds and milliseconds are combined
        // as a single precision using a decimal, with decimal equality semantics
        if (field === 'second') {
          // NOTE: if millisecond is null it will calcualte like this anyway, but
          // if millisecond is undefined, using it will result in NaN calculations
          var aMillisecond = a['millisecond'] != null ? a['millisecond'] : 0;
          var aSecondAndMillisecond = a[field] + aMillisecond / 1000;
          var bMillisecond = b['millisecond'] != null ? b['millisecond'] : 0;
          var bSecondAndMillisecond = b[field] + bMillisecond / 1000; // second/millisecond is the most precise comparison, so we can directly return

          return aSecondAndMillisecond === bSecondAndMillisecond;
        } // if they are different then return with false


        if (a[field] !== b[field]) {
          return false;
        } // if both dont have this precision, return true

      } else if (a[field] == null && b[field] == null) {
        return true; // otherwise they have inconclusive precision, return defaultResult
      } else {
        return defaultResult;
      }
    } // if we made it here, then all fields matched.

  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }

  return true;
}

function daysInMonth(year, month) {
  if (year == null || month == null) {
    throw new Error('daysInMonth requires year and month as arguments');
  } // Month is 1-indexed here because of the 0 day


  return new jsDate(year, month, 0).getDate();
}

function isValidDateStringFormat(string) {
  if (typeof string !== 'string') {
    return false;
  }

  var format = LENGTH_TO_DATE_FORMAT_MAP.get(string.length);

  if (format == null) {
    return false;
  }

  return luxon.DateTime.fromFormat(string, format).isValid;
}

function isValidDateTimeStringFormat(string) {
  if (typeof string !== 'string') {
    return false;
  } // Luxon doesn't support +hh offset, so change it to +hh:00


  if (/T[\d:.]*[+-]\d{2}$/.test(string)) {
    string += ':00';
  }

  var formats = LENGTH_TO_DATETIME_FORMATS_MAP.get(string.length);

  if (formats == null) {
    return false;
  }

  return formats.some(function (fmt) {
    return luxon.DateTime.fromFormat(string, fmt).isValid;
  });
}

module.exports = {
  DateTime: DateTime,
  Date: _Date,
  MIN_DATETIME_VALUE: MIN_DATETIME_VALUE,
  MAX_DATETIME_VALUE: MAX_DATETIME_VALUE,
  MIN_DATE_VALUE: MIN_DATE_VALUE,
  MAX_DATE_VALUE: MAX_DATE_VALUE,
  MIN_TIME_VALUE: MIN_TIME_VALUE,
  MAX_TIME_VALUE: MAX_TIME_VALUE
}; // Require MIN/MAX here because math.js requires this file, and when we make this file require
// math.js before it exports DateTime and Date, it errors due to the circular dependency...
// const { MAX_DATETIME_VALUE, MIN_DATETIME_VALUE } = require('../util/math');
},{"../util/util":47,"./uncertainty":13,"luxon":48}],8:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Exception = function Exception(message, wrapped) {
  _classCallCheck(this, Exception);

  this.message = message;
  this.wrapped = wrapped;
};

module.exports = {
  Exception: Exception
};
},{}],9:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./uncertainty'),
    Uncertainty = _require.Uncertainty;

var _require2 = require('../datatypes/quantity'),
    Quantity = _require2.Quantity,
    doSubtraction = _require2.doSubtraction;

var _require3 = require('./logic'),
    ThreeValuedLogic = _require3.ThreeValuedLogic;

var _require4 = require('../util/math'),
    successor = _require4.successor,
    predecessor = _require4.predecessor,
    maxValueForInstance = _require4.maxValueForInstance,
    minValueForInstance = _require4.minValueForInstance;

var cmp = require('../util/comparison');

var Interval = /*#__PURE__*/function () {
  function Interval(low, high, lowClosed, highClosed) {
    _classCallCheck(this, Interval);

    this.low = low;
    this.high = high;
    this.lowClosed = lowClosed != null ? lowClosed : true;
    this.highClosed = highClosed != null ? highClosed : true;
  }

  _createClass(Interval, [{
    key: "copy",
    value: function copy() {
      var newLow = this.low;
      var newHigh = this.high;

      if (this.low != null && typeof this.low.copy === 'function') {
        newLow = this.low.copy();
      }

      if (this.high != null && typeof this.high.copy === 'function') {
        newHigh = this.high.copy();
      }

      return new Interval(newLow, newHigh, this.lowClosed, this.highClosed);
    }
  }, {
    key: "contains",
    value: function contains(item, precision) {
      // These first two checks ensure correct handling of edge case where an item equals the closed boundary
      if (this.lowClosed && this.low != null && cmp.equals(this.low, item)) {
        return true;
      }

      if (this.highClosed && this.high != null && cmp.equals(this.high, item)) {
        return true;
      }

      if (item != null && item.isInterval) {
        throw new Error('Argument to contains must be a point');
      }

      var lowFn;

      if (this.lowClosed && this.low == null) {
        lowFn = function lowFn() {
          return true;
        };
      } else if (this.lowClosed) {
        lowFn = cmp.lessThanOrEquals;
      } else {
        lowFn = cmp.lessThan;
      }

      var highFn;

      if (this.highClosed && this.high == null) {
        highFn = function highFn() {
          return true;
        };
      } else if (this.highClosed) {
        highFn = cmp.greaterThanOrEquals;
      } else {
        highFn = cmp.greaterThan;
      }

      return ThreeValuedLogic.and(lowFn(this.low, item, precision), highFn(this.high, item, precision));
    }
  }, {
    key: "properlyIncludes",
    value: function properlyIncludes(other, precision) {
      if (other == null || !other.isInterval) {
        throw new Error('Argument to properlyIncludes must be an interval');
      }

      return ThreeValuedLogic.and(this.includes(other, precision), ThreeValuedLogic.not(other.includes(this, precision)));
    }
  }, {
    key: "includes",
    value: function includes(other, precision) {
      if (other == null || !other.isInterval) {
        return this.contains(other, precision);
      }

      var a = this.toClosed();
      var b = other.toClosed();
      return ThreeValuedLogic.and(cmp.lessThanOrEquals(a.low, b.low, precision), cmp.greaterThanOrEquals(a.high, b.high, precision));
    }
  }, {
    key: "includedIn",
    value: function includedIn(other, precision) {
      // For the point overload, this operator is a synonym for the in operator
      if (other == null || !other.isInterval) {
        return this.contains(other, precision);
      } else {
        return other.includes(this);
      }
    }
  }, {
    key: "overlaps",
    value: function overlaps(item, precision) {
      var closed = this.toClosed();

      var _ref = function () {
        if (item != null && item.isInterval) {
          var itemClosed = item.toClosed();
          return [itemClosed.low, itemClosed.high];
        } else {
          return [item, item];
        }
      }(),
          _ref2 = _slicedToArray(_ref, 2),
          low = _ref2[0],
          high = _ref2[1];

      return ThreeValuedLogic.and(cmp.lessThanOrEquals(closed.low, high, precision), cmp.greaterThanOrEquals(closed.high, low, precision));
    }
  }, {
    key: "overlapsAfter",
    value: function overlapsAfter(item, precision) {
      var closed = this.toClosed();
      var high = item != null && item.isInterval ? item.toClosed().high : item;
      return ThreeValuedLogic.and(cmp.lessThanOrEquals(closed.low, high, precision), cmp.greaterThan(closed.high, high, precision));
    }
  }, {
    key: "overlapsBefore",
    value: function overlapsBefore(item, precision) {
      var closed = this.toClosed();
      var low = item != null && item.isInterval ? item.toClosed().low : item;
      return ThreeValuedLogic.and(cmp.lessThan(closed.low, low, precision), cmp.greaterThanOrEquals(closed.high, low, precision));
    }
  }, {
    key: "union",
    value: function union(other) {
      if (other == null || !other.isInterval) {
        throw new Error('Argument to union must be an interval');
      } // Note that interval union is only defined if the arguments overlap or meet.


      if (this.overlaps(other) || this.meets(other)) {
        var _ref3 = [this.toClosed(), other.toClosed()],
            a = _ref3[0],
            b = _ref3[1];
        var l, lc;

        if (cmp.lessThanOrEquals(a.low, b.low)) {
          var _ref4 = [this.low, this.lowClosed];
          l = _ref4[0];
          lc = _ref4[1];
        } else if (cmp.greaterThanOrEquals(a.low, b.low)) {
          var _ref5 = [other.low, other.lowClosed];
          l = _ref5[0];
          lc = _ref5[1];
        } else if (areNumeric(a.low, b.low)) {
          var _ref6 = [lowestNumericUncertainty(a.low, b.low), true];
          l = _ref6[0];
          lc = _ref6[1];
        } else if (areDateTimes(a.low, b.low) && a.low.isMorePrecise(b.low)) {
          var _ref7 = [other.low, other.lowClosed];
          l = _ref7[0];
          lc = _ref7[1];
        } else {
          var _ref8 = [this.low, this.lowClosed];
          l = _ref8[0];
          lc = _ref8[1];
        }

        var h, hc;

        if (cmp.greaterThanOrEquals(a.high, b.high)) {
          var _ref9 = [this.high, this.highClosed];
          h = _ref9[0];
          hc = _ref9[1];
        } else if (cmp.lessThanOrEquals(a.high, b.high)) {
          var _ref10 = [other.high, other.highClosed];
          h = _ref10[0];
          hc = _ref10[1];
        } else if (areNumeric(a.high, b.high)) {
          var _ref11 = [highestNumericUncertainty(a.high, b.high), true];
          h = _ref11[0];
          hc = _ref11[1];
        } else if (areDateTimes(a.high, b.high) && a.high.isMorePrecise(b.high)) {
          var _ref12 = [other.high, other.highClosed];
          h = _ref12[0];
          hc = _ref12[1];
        } else {
          var _ref13 = [this.high, this.highClosed];
          h = _ref13[0];
          hc = _ref13[1];
        }

        return new Interval(l, h, lc, hc);
      } else {
        return null;
      }
    }
  }, {
    key: "intersect",
    value: function intersect(other) {
      if (other == null || !other.isInterval) {
        throw new Error('Argument to union must be an interval');
      } // Note that interval union is only defined if the arguments overlap.


      if (this.overlaps(other)) {
        var _ref14 = [this.toClosed(), other.toClosed()],
            a = _ref14[0],
            b = _ref14[1];
        var l, lc;

        if (cmp.greaterThanOrEquals(a.low, b.low)) {
          var _ref15 = [this.low, this.lowClosed];
          l = _ref15[0];
          lc = _ref15[1];
        } else if (cmp.lessThanOrEquals(a.low, b.low)) {
          var _ref16 = [other.low, other.lowClosed];
          l = _ref16[0];
          lc = _ref16[1];
        } else if (areNumeric(a.low, b.low)) {
          var _ref17 = [highestNumericUncertainty(a.low, b.low), true];
          l = _ref17[0];
          lc = _ref17[1];
        } else if (areDateTimes(a.low, b.low) && b.low.isMorePrecise(a.low)) {
          var _ref18 = [other.low, other.lowClosed];
          l = _ref18[0];
          lc = _ref18[1];
        } else {
          var _ref19 = [this.low, this.lowClosed];
          l = _ref19[0];
          lc = _ref19[1];
        }

        var h, hc;

        if (cmp.lessThanOrEquals(a.high, b.high)) {
          var _ref20 = [this.high, this.highClosed];
          h = _ref20[0];
          hc = _ref20[1];
        } else if (cmp.greaterThanOrEquals(a.high, b.high)) {
          var _ref21 = [other.high, other.highClosed];
          h = _ref21[0];
          hc = _ref21[1];
        } else if (areNumeric(a.high, b.high)) {
          var _ref22 = [lowestNumericUncertainty(a.high, b.high), true];
          h = _ref22[0];
          hc = _ref22[1];
        } else if (areDateTimes(a.high, b.high) && b.high.isMorePrecise(a.high)) {
          var _ref23 = [other.high, other.highClosed];
          h = _ref23[0];
          hc = _ref23[1];
        } else {
          var _ref24 = [this.high, this.highClosed];
          h = _ref24[0];
          hc = _ref24[1];
        }

        return new Interval(l, h, lc, hc);
      } else {
        return null;
      }
    }
  }, {
    key: "except",
    value: function except(other) {
      if (other === null) {
        return null;
      }

      if (other == null || !other.isInterval) {
        throw new Error('Argument to except must be an interval');
      }

      var ol = this.overlaps(other);

      if (ol === true) {
        var olb = this.overlapsBefore(other);
        var ola = this.overlapsAfter(other);

        if (olb === true && ola === false) {
          return new Interval(this.low, other.low, this.lowClosed, !other.lowClosed);
        } else if (ola === true && olb === false) {
          return new Interval(other.high, this.high, !other.highClosed, this.highClosed);
        } else {
          return null;
        }
      } else if (ol === false) {
        return this;
      } else {
        // ol is null
        return null;
      }
    }
  }, {
    key: "sameAs",
    value: function sameAs(other, precision) {
      // This large if and else if block handles the scenarios where there is an open ended null
      // If both lows or highs exists, it can be determined that intervals are not Same As
      if (this.low != null && other.low != null && this.high == null && other.high != null && !this.highClosed || this.low != null && other.low != null && this.high != null && other.high == null && !other.highClosed || this.low != null && other.low != null && this.high == null && other.high == null && !other.highClosed && !this.highClosed) {
        if (typeof this.low === 'number') {
          if (!(this.start() === other.start())) {
            return false;
          }
        } else {
          if (!this.start().sameAs(other.start(), precision)) {
            return false;
          }
        }
      } else if (this.low != null && other.low == null && this.high != null && other.high != null || this.low == null && other.low != null && this.high != null && other.high != null || this.low == null && other.low == null && this.high != null && other.high != null) {
        if (typeof this.high === 'number') {
          if (!(this.end() === other.end())) {
            return false;
          }
        } else {
          if (!this.end().sameAs(other.end(), precision)) {
            return false;
          }
        }
      } // Checks to see if any of the Intervals have a open, null boundary


      if (this.low == null && !this.lowClosed || this.high == null && !this.highClosed || other.low == null && !other.lowClosed || other.high == null && !other.highClosed) {
        return null;
      } // For the special cases where @ is Interval[null,null]


      if (this.lowClosed && this.low == null && this.highClosed && this.high == null) {
        return other.lowClosed && other.low == null && other.highClosed && other.high == null;
      } // For the special case where Interval[...] same as Interval[null,null] should return false.
      // This accounts for the inverse of the if statement above: where the second Interval is
      // [null,null] and not the first Interval.
      // The reason why this isn't caught below is due to how start() and end() work.
      // There is no way to tell the datatype for MIN and MAX if both boundaries are null.


      if (other.lowClosed && other.low == null && other.highClosed && other.high == null) {
        return false;
      }

      if (typeof this.low === 'number') {
        return this.start() === other.start() && this.end() === other.end();
      } else {
        return this.start().sameAs(other.start(), precision) && this.end().sameAs(other.end(), precision);
      }
    }
  }, {
    key: "sameOrBefore",
    value: function sameOrBefore(other, precision) {
      if (this.end() == null || other == null || other.start() == null) {
        return null;
      } else {
        return cmp.lessThanOrEquals(this.end(), other.start(), precision);
      }
    }
  }, {
    key: "sameOrAfter",
    value: function sameOrAfter(other, precision) {
      if (this.start() == null || other == null || other.end() == null) {
        return null;
      } else {
        return cmp.greaterThanOrEquals(this.start(), other.end(), precision);
      }
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (other != null && other.isInterval) {
        var _ref25 = [this.toClosed(), other.toClosed()],
            a = _ref25[0],
            b = _ref25[1];
        return ThreeValuedLogic.and(cmp.equals(a.low, b.low), cmp.equals(a.high, b.high));
      } else {
        return false;
      }
    }
  }, {
    key: "after",
    value: function after(other, precision) {
      var closed = this.toClosed(); // Meets spec, but not 100% correct (e.g., (null, 5] after [6, 10] --> null)
      // Simple way to fix it: and w/ not overlaps

      if (other.toClosed) {
        return cmp.greaterThan(closed.low, other.toClosed().high, precision);
      } else {
        return cmp.greaterThan(closed.low, other, precision);
      }
    }
  }, {
    key: "before",
    value: function before(other, precision) {
      var closed = this.toClosed(); // Meets spec, but not 100% correct (e.g., (null, 5] after [6, 10] --> null)
      // Simple way to fix it: and w/ not overlaps

      if (other.toClosed) {
        return cmp.lessThan(closed.high, other.toClosed().low, precision);
      } else {
        return cmp.lessThan(closed.high, other, precision);
      }
    }
  }, {
    key: "meets",
    value: function meets(other, precision) {
      return ThreeValuedLogic.or(this.meetsBefore(other, precision), this.meetsAfter(other, precision));
    }
  }, {
    key: "meetsAfter",
    value: function meetsAfter(other, precision) {
      try {
        if (precision != null && this.low != null && this.low.isDateTime) {
          return this.toClosed().low.sameAs(other.toClosed().high != null ? other.toClosed().high.add(1, precision) : null, precision);
        } else {
          return cmp.equals(this.toClosed().low, successor(other.toClosed().high));
        }
      } catch (error) {
        return false;
      }
    }
  }, {
    key: "meetsBefore",
    value: function meetsBefore(other, precision) {
      try {
        if (precision != null && this.high != null && this.high.isDateTime) {
          return this.toClosed().high.sameAs(other.toClosed().low != null ? other.toClosed().low.add(-1, precision) : null, precision);
        } else {
          return cmp.equals(this.toClosed().high, predecessor(other.toClosed().low));
        }
      } catch (error) {
        return false;
      }
    }
  }, {
    key: "start",
    value: function start() {
      if (this.low == null) {
        if (this.lowClosed) {
          return minValueForInstance(this.high);
        } else {
          return this.low;
        }
      }

      return this.toClosed().low;
    }
  }, {
    key: "end",
    value: function end() {
      if (this.high == null) {
        if (this.highClosed) {
          return maxValueForInstance(this.low);
        } else {
          return this.high;
        }
      }

      return this.toClosed().high;
    }
  }, {
    key: "starts",
    value: function starts(other, precision) {
      var startEqual;

      if (precision != null && this.low != null && this.low.isDateTime) {
        startEqual = this.low.sameAs(other.low, precision);
      } else {
        startEqual = cmp.equals(this.low, other.low);
      }

      var endLessThanOrEqual = cmp.lessThanOrEquals(this.high, other.high, precision);
      return startEqual && endLessThanOrEqual;
    }
  }, {
    key: "ends",
    value: function ends(other, precision) {
      var endEqual;
      var startGreaterThanOrEqual = cmp.greaterThanOrEquals(this.low, other.low, precision);

      if (precision != null && (this.low != null ? this.low.isDateTime : undefined)) {
        endEqual = this.high.sameAs(other.high, precision);
      } else {
        endEqual = cmp.equals(this.high, other.high);
      }

      return startGreaterThanOrEqual && endEqual;
    }
  }, {
    key: "width",
    value: function width() {
      if (this.low != null && (this.low.isDateTime || this.low.isDate || this.low.isTime) || this.high != null && (this.high.isDateTime || this.high.isDate || this.high.isTime)) {
        throw new Error('Width of Date, DateTime, and Time intervals is not supported');
      }

      var closed = this.toClosed();

      if (closed.low != null && closed.low.isUncertainty || closed.high != null && closed.high.isUncertainty) {
        return null;
      } else if (closed.low.isQuantity) {
        if (closed.low.unit !== closed.high.unit) {
          throw new Error('Cannot calculate width of Quantity Interval with different units');
        }

        var lowValue = closed.low.value;
        var highValue = closed.high.value;
        var diff = Math.abs(highValue - lowValue);
        diff = Math.round(diff * Math.pow(10, 8)) / Math.pow(10, 8);
        return new Quantity(diff, closed.low.unit);
      } else {
        // TODO: Fix precision to 8 decimals in other places that return numbers
        var _diff = Math.abs(closed.high - closed.low);

        return Math.round(_diff * Math.pow(10, 8)) / Math.pow(10, 8);
      }
    }
  }, {
    key: "size",
    value: function size() {
      var pointSize = this.getPointSize();

      if (this.low != null && (this.low.isDateTime || this.low.isDate || this.low.isTime) || this.high != null && (this.high.isDateTime || this.high.isDate || this.high.isTime)) {
        throw new Error('Size of Date, DateTime, and Time intervals is not supported');
      }

      var closed = this.toClosed();

      if (closed.low != null && closed.low.isUncertainty || closed.high != null && closed.high.isUncertainty) {
        return null;
      } else if (closed.low.isQuantity) {
        if (closed.low.unit !== closed.high.unit) {
          throw new Error('Cannot calculate size of Quantity Interval with different units');
        }

        var lowValue = closed.low.value;
        var highValue = closed.high.value;
        var diff = Math.abs(highValue - lowValue) + pointSize.value;
        Math.round(diff * Math.pow(10, 8)) / Math.pow(10, 8);
        return new Quantity(diff, closed.low.unit);
      } else {
        var _diff2 = Math.abs(closed.high - closed.low) + pointSize.value;

        return Math.round(_diff2 * Math.pow(10, 8)) / Math.pow(10, 8);
      }
    }
  }, {
    key: "getPointSize",
    value: function getPointSize() {
      var pointSize;

      if (this.low != null) {
        if (this.low.isDateTime) {
          pointSize = new Quantity(1, this.low.getPrecision());
        } else if (this.low.isQuantity) {
          pointSize = doSubtraction(successor(this.low), this.low);
        } else {
          pointSize = successor(this.low) - this.low;
        }
      } else if (this.high != null) {
        if (this.high.isDateTime) {
          pointSize = new Quantity(1, this.high.getPrecision());
        } else if (this.high.isQuantity) {
          pointSize = doSubtraction(successor(this.high), this.high);
        } else {
          pointSize = successor(this.high) - this.high;
        }
      } else {
        throw new Error('Point type of intervals cannot be determined.');
      }

      if (typeof pointSize === 'number') {
        pointSize = new Quantity(pointSize, '1');
      }

      return pointSize;
    }
  }, {
    key: "toClosed",
    value: function toClosed() {
      var point = this.low != null ? this.low : this.high;

      if (typeof point === 'number' || point != null && (point.isDateTime || point.isQuantity || point.isDate)) {
        var low;

        if (this.lowClosed && this.low == null) {
          low = minValueForInstance(point);
        } else if (!this.lowClosed && this.low != null) {
          low = successor(this.low);
        } else {
          low = this.low;
        }

        var high;

        if (this.highClosed && this.high == null) {
          high = maxValueForInstance(point);
        } else if (!this.highClosed && this.high != null) {
          high = predecessor(this.high);
        } else {
          high = this.high;
        }

        if (low == null) {
          low = new Uncertainty(minValueForInstance(point), high);
        }

        if (high == null) {
          high = new Uncertainty(low, maxValueForInstance(point));
        }

        return new Interval(low, high, true, true);
      } else {
        return new Interval(this.low, this.high, true, true);
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      var start = this.lowClosed ? '[' : '(';
      var end = this.highClosed ? ']' : ')';
      return start + this.low.toString() + ', ' + this.high.toString() + end;
    }
  }, {
    key: "isInterval",
    get: function get() {
      return true;
    }
  }]);

  return Interval;
}();

function areDateTimes(x, y) {
  return [x, y].every(function (z) {
    return z != null && z.isDateTime;
  });
}

function areNumeric(x, y) {
  return [x, y].every(function (z) {
    return typeof z === 'number' || z != null && z.isUncertainty && typeof z.low === 'number';
  });
}

function lowestNumericUncertainty(x, y) {
  if (x == null || !x.isUncertainty) {
    x = new Uncertainty(x);
  }

  if (y == null || !y.isUncertainty) {
    y = new Uncertainty(y);
  }

  var low = x.low < y.low ? x.low : y.low;
  var high = x.high < y.high ? x.high : y.high;

  if (low !== high) {
    return new Uncertainty(low, high);
  } else {
    return low;
  }
}

function highestNumericUncertainty(x, y) {
  if (x == null || !x.isUncertainty) {
    x = new Uncertainty(x);
  }

  if (y == null || !y.isUncertainty) {
    y = new Uncertainty(y);
  }

  var low = x.low > y.low ? x.low : y.low;
  var high = x.high > y.high ? x.high : y.high;

  if (low !== high) {
    return new Uncertainty(low, high);
  } else {
    return low;
  }
}

module.exports = {
  Interval: Interval
};
},{"../datatypes/quantity":11,"../util/comparison":45,"../util/math":46,"./logic":10,"./uncertainty":13}],10:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ThreeValuedLogic = /*#__PURE__*/function () {
  function ThreeValuedLogic() {
    _classCallCheck(this, ThreeValuedLogic);
  }

  _createClass(ThreeValuedLogic, null, [{
    key: "and",
    value: function and() {
      for (var _len = arguments.length, val = new Array(_len), _key = 0; _key < _len; _key++) {
        val[_key] = arguments[_key];
      }

      if (val.includes(false)) {
        return false;
      } else if (val.includes(null)) {
        return null;
      } else {
        return true;
      }
    }
  }, {
    key: "or",
    value: function or() {
      for (var _len2 = arguments.length, val = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        val[_key2] = arguments[_key2];
      }

      if (val.includes(true)) {
        return true;
      } else if (val.includes(null)) {
        return null;
      } else {
        return false;
      }
    }
  }, {
    key: "xor",
    value: function xor() {
      for (var _len3 = arguments.length, val = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        val[_key3] = arguments[_key3];
      }

      if (val.includes(null)) {
        return null;
      } else {
        return val.reduce(function (a, b) {
          return (!a ^ !b) === 1;
        });
      }
    }
  }, {
    key: "not",
    value: function not(val) {
      if (val != null) {
        return !val;
      } else {
        return null;
      }
    }
  }]);

  return ThreeValuedLogic;
}();

module.exports = {
  ThreeValuedLogic: ThreeValuedLogic
};
},{}],11:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('../util/math'),
    decimalAdjust = _require.decimalAdjust,
    isValidDecimal = _require.isValidDecimal,
    overflowsOrUnderflows = _require.overflowsOrUnderflows;

var ucum = require('ucum');

var Quantity = /*#__PURE__*/function () {
  function Quantity(value, unit) {
    _classCallCheck(this, Quantity);

    this.value = value;
    this.unit = unit;

    if (this.value == null || isNaN(this.value)) {
      throw new Error('Cannot create a quantity with an undefined value');
    } else if (!isValidDecimal(this.value)) {
      throw new Error('Cannot create a quantity with an invalid decimal value');
    } // Attempt to parse the unit with UCUM. If it fails, throw a friendly error.


    if (this.unit != null && !is_valid_ucum_unit(this.unit)) {
      throw new Error("'".concat(this.unit, "' is not a valid UCUM unit."));
    }
  }

  _createClass(Quantity, [{
    key: "clone",
    value: function clone() {
      return new Quantity(this.value, this.unit);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.value, " '").concat(this.unit, "'");
    }
  }, {
    key: "sameOrBefore",
    value: function sameOrBefore(other) {
      if (other != null && other.isQuantity) {
        var other_v = convert_value(other.value, ucum_unit(other.unit), ucum_unit(this.unit));

        if (other_v == null) {
          return null;
        } else {
          return this.value <= other_v;
        }
      }
    }
  }, {
    key: "sameOrAfter",
    value: function sameOrAfter(other) {
      if (other != null && other.isQuantity) {
        var other_v = convert_value(other.value, ucum_unit(other.unit), ucum_unit(this.unit));

        if (other_v == null) {
          return null;
        } else {
          return this.value >= other_v;
        }
      }
    }
  }, {
    key: "after",
    value: function after(other) {
      if (other != null && other.isQuantity) {
        var other_v = convert_value(other.value, ucum_unit(other.unit), ucum_unit(this.unit));

        if (other_v == null) {
          return null;
        } else {
          return this.value > other_v;
        }
      }
    }
  }, {
    key: "before",
    value: function before(other) {
      if (other != null && other.isQuantity) {
        var other_v = convert_value(other.value, ucum_unit(other.unit), ucum_unit(this.unit));

        if (other_v == null) {
          return null;
        } else {
          return this.value < other_v;
        }
      }
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (other != null && other.isQuantity) {
        if (!this.unit && other.unit || this.unit && !other.unit) {
          return false;
        } else if (!this.unit && !other.unit) {
          return this.value === other.value;
        } else {
          var other_v = convert_value(other.value, ucum_unit(other.unit), ucum_unit(this.unit));

          if (other_v == null) {
            return null;
          } else {
            return decimalAdjust('round', this.value, -8) === decimalAdjust('round', other_v, -8);
          }
        }
      }
    }
  }, {
    key: "convertUnit",
    value: function convertUnit(to_unit) {
      var value = convert_value(this.value, this.unit, to_unit);
      var unit = to_unit; // Need to pass through constructor again to catch invalid units

      return new Quantity(value, unit);
    }
  }, {
    key: "dividedBy",
    value: function dividedBy(other) {
      return this.multiplyDivide(other, '/');
    }
  }, {
    key: "multiplyBy",
    value: function multiplyBy(other) {
      return this.multiplyDivide(other, '.'); // in ucum . represents multiplication
    }
  }, {
    key: "multiplyDivide",
    value: function multiplyDivide(other, operator) {
      if (other != null && other.isQuantity) {
        if (other.unit === '1' || other.unit === '' || other.unit == null) {
          var value = operator === '/' ? this.value / other.value : this.value * other.value;

          if (overflowsOrUnderflows(value)) {
            return null;
          }

          try {
            return new Quantity(decimalAdjust('round', value, -8), coalesceToOne(this.unit));
          } catch (e) {
            return null;
          }
        } else {
          var a = this.unit != null ? this : new Quantity(this.value, '1');
          var b = other.unit != null ? other : new Quantity(other.value, '1');
          var can_val = a.to_ucum();
          var other_can_value = b.to_ucum();
          var ucum_value = ucum_multiply(can_val, [[operator, other_can_value]]);

          if (overflowsOrUnderflows(ucum_value.value)) {
            return null;
          }

          try {
            return new Quantity(ucum_value.value, units_to_string(ucum_value.units));
          } catch (e) {
            return null;
          }
        }
      } else {
        var _value = operator === '/' ? this.value / other : this.value * other;

        if (overflowsOrUnderflows(_value)) {
          return null;
        }

        try {
          return new Quantity(decimalAdjust('round', _value, -8), coalesceToOne(this.unit));
        } catch (e) {
          return null;
        }
      }
    }
  }, {
    key: "to_ucum",
    value: function to_ucum() {
      var u = ucum.parse(ucum_unit(this.unit));
      u.value *= this.value;
      return u;
    }
  }, {
    key: "isQuantity",
    get: function get() {
      return true;
    }
  }]);

  return Quantity;
}();

function clean_unit(units) {
  if (ucum_time_units[units]) {
    return ucum_to_cql_units[ucum_time_units[units]];
  } else {
    return units;
  }
} // Hash of time units and their UCUM equivalents, both case-sensitive and case-insensitive
// See http://unitsofmeasure.org/ucum.html#para-31
// The CQL specification says that dates are based on the Gregorian calendar
// UCUM says that years should be Julian. As a result, CQL-based year and month identifiers will
// be matched to the UCUM gregorian units. UCUM-based year and month identifiers will be matched
// to the UCUM julian units.


var ucum_time_units = {
  years: 'a_g',
  year: 'a_g',
  YEARS: 'a_g',
  YEAR: 'a_g',
  a_g: 'a_g',
  a: 'a_j',
  ANN: 'a_j',
  ann: 'a_j',
  A: 'a_j',
  a_j: 'a_j',
  months: 'mo_g',
  month: 'mo_g',
  mo_g: 'mo_g',
  mo: 'mo_j',
  MO: 'mo_j',
  mo_j: 'mo_j',
  weeks: 'wk',
  week: 'wk',
  wk: 'wk',
  WK: 'wk',
  days: 'd',
  day: 'd',
  d: 'd',
  D: 'd',
  hours: 'h',
  hour: 'h',
  h: 'h',
  H: 'h',
  minutes: 'min',
  minute: 'min',
  min: 'min',
  MIN: 'min',
  seconds: 's',
  second: 's',
  s: 's',
  S: 's',
  milliseconds: 'ms',
  millisecond: 'ms',
  ms: 'ms',
  MS: 'ms'
};
var ucum_to_cql_units = {
  a_j: 'year',
  a_g: 'year',
  mo_j: 'month',
  mo_g: 'month',
  wk: 'week',
  d: 'day',
  h: 'hour',
  min: 'minute',
  s: 'second',
  ms: 'millisecond'
}; // this is used to perform any conversions of CQL date time fields to their ucum equivalents

function ucum_unit(unit) {
  return ucum_time_units[unit] || unit || '';
} // just a wrapper function to deal with possible exceptions being thrown


function convert_value(value, from, to) {
  try {
    if (from === to) {
      return value;
    } else {
      return decimalAdjust('round', ucum.convert(value, ucum_unit(from), ucum_unit(to)), -8);
    } // If the units could not be alignied ie: incompareable, exception will be thrown, return null

  } catch (e) {
    return null;
  }
} // Cache for unit validity results so we dont have to go to ucum.js for every check.
// Is a map of unit string to boolean validity


var unitValidityCache = {}; // Helper for checking if a unit is valid. Checks the cache first, checks with ucum.js otherwise.

function is_valid_ucum_unit(unit) {
  if (unitValidityCache[unit] != null) {
    return unitValidityCache[unit];
  } else {
    try {
      ucum.parse(ucum_unit(unit));
      unitValidityCache[unit] = true;
      return true;
    } catch (error) {
      unitValidityCache[unit] = false;
      return false;
    }
  }
} // This method will take a ucum.js representation of units and convert them to a string
// ucum.js units are a has of unit => power values.  For instance m/h (meters per hour) in
// ucum.js will be reprsented by the json object {m: 1, h:-1}  negative values are inverted and
// are akin to denominator values in a fraction.  Positive values are somewhat a kin to numerator
// values in that they preceed the inverted values.  It is possible in ucum to have multiple non inverted
// or inverted values.  This method combines all of the non inverted values and appends them with
// the ucum multiplication operator '.' and then appends the inverted values separated by the ucum
// divisor '/' .


function units_to_string() {
  var units = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var numer = [];
  var denom = [];

  for (var _i = 0, _Object$keys = Object.keys(units); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    var v = units[key];
    var pow = Math.abs(v);
    var str = pow === 1 ? key : key + pow;

    if (v < 0) {
      denom.push(str);
    } else {
      numer.push(str);
    }
  }

  var unit_string = '';
  unit_string += numer.join('.');

  if (denom.length > 0) {
    unit_string += '/' + denom.join('/');
  }

  if (unit_string === '') {
    return '1';
  } else {
    return unit_string;
  }
} // this method is taken from the ucum.js library which it does not  export
// so we need to replicate the behavior here in order to perform multiplication
// and division of the ucum values.
// t:  the ucum quantity being multiplied/divided .  This method modifies the object t that is passed in
// ms: an array of arrays whoes format is [<operator>,<ucum quantity>] an example would be [['.', {value: 1, units: {m:2}}]]
// this would represent multiply t by the value m^2


function ucum_multiply(t) {
  var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (ms.length === 0) {
    return t;
  }

  var ret = t;

  var _iterator = _createForOfIteratorHelper(ms),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var mterm = _step.value;
      var sign = mterm[0] === '.' ? 1 : -1;
      var b = mterm[1];
      ret.value *= Math.pow(b.value, sign);

      for (var k in b.units) {
        var v = b.units[k];
        ret.units[k] = ret.units[k] || 0;
        ret.units[k] = ret.units[k] + sign * v;

        if (ret.units[k] === 0) {
          delete ret.units[k];
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return ret;
}

function parseQuantity(str) {
  var components = /([+|-]?\d+\.?\d*)\s*('(.+)')?/.exec(str);

  if (components != null && components[1] != null) {
    var value = parseFloat(components[1]);

    if (!isValidDecimal(value)) {
      return null;
    }

    var unit;

    if (components[3] != null) {
      unit = components[3].trim();
    } else {
      unit = '';
    }

    return new Quantity(value, unit);
  } else {
    return null;
  }
}

function doScaledAddition(a, b, scaleForB) {
  var b_unit;

  if (a != null && a.isQuantity && b != null && b.isQuantity) {
    var a_unit;
    var _ref = [coalesceToOne(a.unit), coalesceToOne(b.unit)];
    a_unit = _ref[0];
    b_unit = _ref[1];
    // The units don't have to match (m and m^2), but must be convertable
    // we will choose the unit of a to be the unit we return
    var val = convert_value(b.value * scaleForB, b_unit, a_unit);

    if (val == null) {
      return null;
    }

    var sum = a.value + val;

    if (overflowsOrUnderflows(sum)) {
      return null;
    } else {
      return new Quantity(sum, a_unit);
    }
  } else if (a.copy && a.add) {
    b_unit = b != null && b.isQuantity ? coalesceToOne(b.unit) : b.unit;
    return a.copy().add(b.value * scaleForB, clean_unit(b_unit));
  } else {
    throw new Error('Unsupported argument types.');
  }
}

function doAddition(a, b) {
  return doScaledAddition(a, b, 1);
}

function doSubtraction(a, b) {
  return doScaledAddition(a, b, -1);
}

function doDivision(a, b) {
  if (a != null && a.isQuantity) {
    return a.dividedBy(b);
  }
}

function doMultiplication(a, b) {
  if (a != null && a.isQuantity) {
    return a.multiplyBy(b);
  } else {
    return b.multiplyBy(a);
  }
}

function coalesceToOne(o) {
  if (o == null || o.trim != null && !o.trim()) {
    return '1';
  } else {
    return o;
  }
}

function compare_units(unit_a, unit_b) {
  try {
    var c = ucum.convert(1, ucum_unit(unit_a), ucum_unit(unit_b));

    if (c > 1) {
      return 1; // unit_a is bigger (less precise)
    }

    if (c < 1) {
      return -1; // unit_a is smaller
    }

    return 0; //units are the same
  } catch (e) {
    return null;
  }
}

module.exports = {
  Quantity: Quantity,
  convert_value: convert_value,
  parseQuantity: parseQuantity,
  doAddition: doAddition,
  doSubtraction: doSubtraction,
  doDivision: doDivision,
  doMultiplication: doMultiplication,
  compare_units: compare_units
};
},{"../util/math":46,"ucum":56}],12:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Ratio = /*#__PURE__*/function () {
  function Ratio(numerator, denominator) {
    _classCallCheck(this, Ratio);

    this.numerator = numerator;
    this.denominator = denominator;

    if (this.numerator == null) {
      throw new Error('Cannot create a ratio with an undefined numerator');
    }

    if (this.denominator == null) {
      throw new Error('Cannot create a ratio with an undefined denominator');
    }
  }

  _createClass(Ratio, [{
    key: "clone",
    value: function clone() {
      return new Ratio(this.numerator.clone(), this.denominator.clone());
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.numerator.toString(), " : ").concat(this.denominator.toString());
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (other != null && other.isRatio) {
        var divided_this = this.numerator.dividedBy(this.denominator);
        var divided_other = other.numerator.dividedBy(other.denominator);
        return divided_this.equals(divided_other);
      } else {
        return false;
      }
    }
  }, {
    key: "equivalent",
    value: function equivalent(other) {
      var equal = this.equals(other);
      return equal != null ? equal : false;
    }
  }, {
    key: "isRatio",
    get: function get() {
      return true;
    }
  }]);

  return Ratio;
}();

module.exports = {
  Ratio: Ratio
};
},{}],13:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./logic'),
    ThreeValuedLogic = _require.ThreeValuedLogic;

var Uncertainty = /*#__PURE__*/function () {
  _createClass(Uncertainty, null, [{
    key: "from",
    value: function from(obj) {
      if (obj != null && obj.isUncertainty) {
        return obj;
      } else {
        return new Uncertainty(obj);
      }
    }
  }]);

  function Uncertainty() {
    var low = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var high = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Uncertainty);

    this.low = low;
    this.high = high;

    var gt = function gt(a, b) {
      if (_typeof(a) !== _typeof(b)) {
        // TODO: This should probably throw rather than return false.
        // Uncertainties with different types probably shouldn't be supported.
        return false;
      }

      if (typeof a.after === 'function') {
        return a.after(b);
      } else {
        return a > b;
      }
    };

    var isNonEnumerable = function isNonEnumerable(val) {
      return val != null && (val.isCode || val.isConcept || val.isValueSet);
    };

    if (typeof this.high === 'undefined') {
      this.high = this.low;
    }

    if (isNonEnumerable(this.low) || isNonEnumerable(this.high)) {
      this.low = this.high = null;
    }

    if (this.low != null && this.high != null && gt(this.low, this.high)) {
      var _ref = [this.high, this.low];
      this.low = _ref[0];
      this.high = _ref[1];
    }
  }

  _createClass(Uncertainty, [{
    key: "copy",
    value: function copy() {
      var newLow = this.low;
      var newHigh = this.high;

      if (typeof this.low.copy === 'function') {
        newLow = this.low.copy();
      }

      if (typeof this.high.copy === 'function') {
        newHigh = this.high.copy();
      }

      return new Uncertainty(newLow, newHigh);
    }
  }, {
    key: "isPoint",
    value: function isPoint() {
      // Note: Can't use normal equality, as that fails for Javascript dates
      // TODO: Fix after we don't need to support Javascript date uncertainties anymore
      var lte = function lte(a, b) {
        if (_typeof(a) !== _typeof(b)) {
          return false;
        }

        if (typeof a.sameOrBefore === 'function') {
          return a.sameOrBefore(b);
        } else {
          return a <= b;
        }
      };

      var gte = function gte(a, b) {
        if (_typeof(a) !== _typeof(b)) {
          return false;
        }

        if (typeof a.sameOrBefore === 'function') {
          return a.sameOrAfter(b);
        } else {
          return a >= b;
        }
      };

      return this.low != null && this.high != null && lte(this.low, this.high) && gte(this.low, this.high);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      other = Uncertainty.from(other);
      return ThreeValuedLogic.not(ThreeValuedLogic.or(this.lessThan(other), this.greaterThan(other)));
    }
  }, {
    key: "lessThan",
    value: function lessThan(other) {
      var lt = function lt(a, b) {
        if (_typeof(a) !== _typeof(b)) {
          return false;
        }

        if (typeof a.before === 'function') {
          return a.before(b);
        } else {
          return a < b;
        }
      };

      other = Uncertainty.from(other);
      var bestCase = this.low == null || other.high == null || lt(this.low, other.high);
      var worstCase = this.high != null && other.low != null && lt(this.high, other.low);

      if (bestCase === worstCase) {
        return bestCase;
      } else {
        return null;
      }
    }
  }, {
    key: "greaterThan",
    value: function greaterThan(other) {
      return Uncertainty.from(other).lessThan(this);
    }
  }, {
    key: "lessThanOrEquals",
    value: function lessThanOrEquals(other) {
      return ThreeValuedLogic.not(this.greaterThan(Uncertainty.from(other)));
    }
  }, {
    key: "greaterThanOrEquals",
    value: function greaterThanOrEquals(other) {
      return ThreeValuedLogic.not(this.lessThan(Uncertainty.from(other)));
    }
  }, {
    key: "isUncertainty",
    get: function get() {
      return true;
    }
  }]);

  return Uncertainty;
}();

module.exports = {
  Uncertainty: Uncertainty
};
},{"./logic":10}],14:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('../util/util'),
    typeIsArray = _require2.typeIsArray,
    allTrue = _require2.allTrue,
    anyTrue = _require2.anyTrue,
    removeNulls = _require2.removeNulls,
    numerical_sort = _require2.numerical_sort;

var _require3 = require('./builder'),
    build = _require3.build;

var _require4 = require('../datatypes/exception'),
    Exception = _require4.Exception;

var _require5 = require('../util/comparison'),
    greaterThan = _require5.greaterThan,
    lessThan = _require5.lessThan;

var _require6 = require('../datatypes/quantity'),
    Quantity = _require6.Quantity;

var AggregateExpression = /*#__PURE__*/function (_Expression) {
  _inherits(AggregateExpression, _Expression);

  var _super = _createSuper(AggregateExpression);

  function AggregateExpression(json) {
    var _this;

    _classCallCheck(this, AggregateExpression);

    _this = _super.call(this, json);
    _this.source = build(json.source);
    return _this;
  }

  return AggregateExpression;
}(Expression);

var Count = /*#__PURE__*/function (_AggregateExpression) {
  _inherits(Count, _AggregateExpression);

  var _super2 = _createSuper(Count);

  function Count(json) {
    _classCallCheck(this, Count);

    return _super2.call(this, json);
  }

  _createClass(Count, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      return removeNulls(items).length;
    }
  }]);

  return Count;
}(AggregateExpression);

var Sum = /*#__PURE__*/function (_AggregateExpression2) {
  _inherits(Sum, _AggregateExpression2);

  var _super3 = _createSuper(Sum);

  function Sum(json) {
    _classCallCheck(this, Sum);

    return _super3.call(this, json);
  }

  _createClass(Sum, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      if (hasOnlyQuantities(items)) {
        var values = getValuesFromQuantities(items);
        var sum = values.reduce(function (x, y) {
          return x + y;
        });
        return new Quantity(sum, items[0].unit);
      } else {
        return items.reduce(function (x, y) {
          return x + y;
        });
      }
    }
  }]);

  return Sum;
}(AggregateExpression);

var Min = /*#__PURE__*/function (_AggregateExpression3) {
  _inherits(Min, _AggregateExpression3);

  var _super4 = _createSuper(Min);

  function Min(json) {
    _classCallCheck(this, Min);

    return _super4.call(this, json);
  }

  _createClass(Min, [{
    key: "exec",
    value: function exec(ctx) {
      var list = this.source.execute(ctx);

      if (list == null) {
        return null;
      }

      var listWithoutNulls = removeNulls(list); // Check for incompatible units and return null. We don't want to convert
      // the units for Min/Max, so we throw away the converted array if it succeeds

      try {
        processQuantities(list);
      } catch (e) {
        return null;
      }

      if (listWithoutNulls.length === 0) {
        return null;
      } // We assume the list is an array of all the same type.


      var minimum = listWithoutNulls[0];

      var _iterator = _createForOfIteratorHelper(listWithoutNulls),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var element = _step.value;

          if (lessThan(element, minimum)) {
            minimum = element;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return minimum;
    }
  }]);

  return Min;
}(AggregateExpression);

var Max = /*#__PURE__*/function (_AggregateExpression4) {
  _inherits(Max, _AggregateExpression4);

  var _super5 = _createSuper(Max);

  function Max(json) {
    _classCallCheck(this, Max);

    return _super5.call(this, json);
  }

  _createClass(Max, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (items == null) {
        return null;
      }

      var listWithoutNulls = removeNulls(items); // Check for incompatible units and return null. We don't want to convert
      // the units for Min/Max, so we throw away the converted array if it succeeds

      try {
        processQuantities(items);
      } catch (e) {
        return null;
      }

      if (listWithoutNulls.length === 0) {
        return null;
      } // We assume the list is an array of all the same type.


      var maximum = listWithoutNulls[0];

      var _iterator2 = _createForOfIteratorHelper(listWithoutNulls),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var element = _step2.value;

          if (greaterThan(element, maximum)) {
            maximum = element;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return maximum;
    }
  }]);

  return Max;
}(AggregateExpression);

var Avg = /*#__PURE__*/function (_AggregateExpression5) {
  _inherits(Avg, _AggregateExpression5);

  var _super6 = _createSuper(Avg);

  function Avg(json) {
    _classCallCheck(this, Avg);

    return _super6.call(this, json);
  }

  _createClass(Avg, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      if (hasOnlyQuantities(items)) {
        var values = getValuesFromQuantities(items);
        var sum = values.reduce(function (x, y) {
          return x + y;
        });
        return new Quantity(sum / values.length, items[0].unit);
      } else {
        var _sum = items.reduce(function (x, y) {
          return x + y;
        });

        return _sum / items.length;
      }
    }
  }]);

  return Avg;
}(AggregateExpression);

var Median = /*#__PURE__*/function (_AggregateExpression6) {
  _inherits(Median, _AggregateExpression6);

  var _super7 = _createSuper(Median);

  function Median(json) {
    _classCallCheck(this, Median);

    return _super7.call(this, json);
  }

  _createClass(Median, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (!hasOnlyQuantities(items)) {
        return medianOfNumbers(items);
      }

      var values = getValuesFromQuantities(items);
      var median = medianOfNumbers(values);
      return new Quantity(median, items[0].unit);
    }
  }]);

  return Median;
}(AggregateExpression);

var Mode = /*#__PURE__*/function (_AggregateExpression7) {
  _inherits(Mode, _AggregateExpression7);

  var _super8 = _createSuper(Mode);

  function Mode(json) {
    _classCallCheck(this, Mode);

    return _super8.call(this, json);
  }

  _createClass(Mode, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      var filtered;

      try {
        filtered = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (hasOnlyQuantities(filtered)) {
        var values = getValuesFromQuantities(filtered);
        var mode = this.mode(values);

        if (mode.length === 1) {
          mode = mode[0];
        }

        return new Quantity(mode, items[0].unit);
      } else {
        var _mode = this.mode(filtered);

        if (_mode.length === 1) {
          return _mode[0];
        } else {
          return _mode;
        }
      }
    }
  }, {
    key: "mode",
    value: function mode(arr) {
      var max = 0;
      var counts = {};
      var results = [];

      var _iterator3 = _createForOfIteratorHelper(arr),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var elem = _step3.value;
          var cnt = counts[elem] = (counts[elem] != null ? counts[elem] : 0) + 1;

          if (cnt === max && !results.includes(elem)) {
            results.push(elem);
          } else if (cnt > max) {
            results = [elem];
            max = cnt;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return results;
    }
  }]);

  return Mode;
}(AggregateExpression);

var StdDev = /*#__PURE__*/function (_AggregateExpression8) {
  _inherits(StdDev, _AggregateExpression8);

  var _super9 = _createSuper(StdDev);

  // TODO: This should be a derived class of an abstract base class 'Statistic'
  // rather than the base class
  function StdDev(json) {
    var _this2;

    _classCallCheck(this, StdDev);

    _this2 = _super9.call(this, json);
    _this2.type = 'standard_deviation';
    return _this2;
  }

  _createClass(StdDev, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      if (hasOnlyQuantities(items)) {
        var values = getValuesFromQuantities(items);
        var stdDev = this.standardDeviation(values);
        return new Quantity(stdDev, items[0].unit);
      } else {
        return this.standardDeviation(items);
      }
    }
  }, {
    key: "standardDeviation",
    value: function standardDeviation(list) {
      var val = this.stats(list);

      if (val) {
        return val[this.type];
      }
    }
  }, {
    key: "stats",
    value: function stats(list) {
      var sum = list.reduce(function (x, y) {
        return x + y;
      });
      var mean = sum / list.length;
      var sumOfSquares = 0;

      var _iterator4 = _createForOfIteratorHelper(list),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var sq = _step4.value;
          sumOfSquares += Math.pow(sq - mean, 2);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var std_var = 1 / (list.length - 1) * sumOfSquares;
      var pop_var = 1 / list.length * sumOfSquares;
      var std_dev = Math.sqrt(std_var);
      var pop_dev = Math.sqrt(pop_var);
      return {
        standard_variance: std_var,
        population_variance: pop_var,
        standard_deviation: std_dev,
        population_deviation: pop_dev
      };
    }
  }]);

  return StdDev;
}(AggregateExpression);

var Product = /*#__PURE__*/function (_AggregateExpression9) {
  _inherits(Product, _AggregateExpression9);

  var _super10 = _createSuper(Product);

  function Product(json) {
    _classCallCheck(this, Product);

    return _super10.call(this, json);
  }

  _createClass(Product, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      if (hasOnlyQuantities(items)) {
        var values = getValuesFromQuantities(items);
        var product = values.reduce(function (x, y) {
          return x * y;
        }); // Units are not multiplied for the geometric product

        return new Quantity(product, items[0].unit);
      } else {
        return items.reduce(function (x, y) {
          return x * y;
        });
      }
    }
  }]);

  return Product;
}(AggregateExpression);

var GeometricMean = /*#__PURE__*/function (_AggregateExpression10) {
  _inherits(GeometricMean, _AggregateExpression10);

  var _super11 = _createSuper(GeometricMean);

  function GeometricMean(json) {
    _classCallCheck(this, GeometricMean);

    return _super11.call(this, json);
  }

  _createClass(GeometricMean, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);

      if (!typeIsArray(items)) {
        return null;
      }

      try {
        items = processQuantities(items);
      } catch (e) {
        return null;
      }

      if (items.length === 0) {
        return null;
      }

      if (hasOnlyQuantities(items)) {
        var values = getValuesFromQuantities(items);
        var product = values.reduce(function (x, y) {
          return x * y;
        });
        var geoMean = Math.pow(product, 1.0 / items.length);
        return new Quantity(geoMean, items[0].unit);
      } else {
        var _product = items.reduce(function (x, y) {
          return x * y;
        });

        return Math.pow(_product, 1.0 / items.length);
      }
    }
  }]);

  return GeometricMean;
}(AggregateExpression);

var PopulationStdDev = /*#__PURE__*/function (_StdDev) {
  _inherits(PopulationStdDev, _StdDev);

  var _super12 = _createSuper(PopulationStdDev);

  function PopulationStdDev(json) {
    var _this3;

    _classCallCheck(this, PopulationStdDev);

    _this3 = _super12.call(this, json);
    _this3.type = 'population_deviation';
    return _this3;
  }

  return PopulationStdDev;
}(StdDev);

var Variance = /*#__PURE__*/function (_StdDev2) {
  _inherits(Variance, _StdDev2);

  var _super13 = _createSuper(Variance);

  function Variance(json) {
    var _this4;

    _classCallCheck(this, Variance);

    _this4 = _super13.call(this, json);
    _this4.type = 'standard_variance';
    return _this4;
  }

  return Variance;
}(StdDev);

var PopulationVariance = /*#__PURE__*/function (_StdDev3) {
  _inherits(PopulationVariance, _StdDev3);

  var _super14 = _createSuper(PopulationVariance);

  function PopulationVariance(json) {
    var _this5;

    _classCallCheck(this, PopulationVariance);

    _this5 = _super14.call(this, json);
    _this5.type = 'population_variance';
    return _this5;
  }

  return PopulationVariance;
}(StdDev);

var AllTrue = /*#__PURE__*/function (_AggregateExpression11) {
  _inherits(AllTrue, _AggregateExpression11);

  var _super15 = _createSuper(AllTrue);

  function AllTrue(json) {
    _classCallCheck(this, AllTrue);

    return _super15.call(this, json);
  }

  _createClass(AllTrue, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);
      return allTrue(items);
    }
  }]);

  return AllTrue;
}(AggregateExpression);

var AnyTrue = /*#__PURE__*/function (_AggregateExpression12) {
  _inherits(AnyTrue, _AggregateExpression12);

  var _super16 = _createSuper(AnyTrue);

  function AnyTrue(json) {
    _classCallCheck(this, AnyTrue);

    return _super16.call(this, json);
  }

  _createClass(AnyTrue, [{
    key: "exec",
    value: function exec(ctx) {
      var items = this.source.execute(ctx);
      return anyTrue(items);
    }
  }]);

  return AnyTrue;
}(AggregateExpression);

function processQuantities(values) {
  var items = removeNulls(values);

  if (hasOnlyQuantities(items)) {
    return convertAllUnits(items);
  } else if (hasSomeQuantities(items)) {
    throw new Exception('Cannot perform aggregate operations on mixed values of Quantities and non Quantities');
  } else {
    return items;
  }
}

function getValuesFromQuantities(quantities) {
  return quantities.map(function (quantity) {
    return quantity.value;
  });
}

function hasOnlyQuantities(arr) {
  return arr.every(function (x) {
    return x.isQuantity;
  });
}

function hasSomeQuantities(arr) {
  return arr.some(function (x) {
    return x.isQuantity;
  });
}

function convertAllUnits(arr) {
  // convert all quantities in array to match the unit of the first item
  return arr.map(function (q) {
    return q.convertUnit(arr[0].unit);
  });
}

function medianOfNumbers(numbers) {
  var items = numerical_sort(numbers, 'asc');

  if (items.length % 2 === 1) {
    // Odd number of items
    return items[(items.length - 1) / 2];
  } else {
    // Even number of items
    return (items[items.length / 2 - 1] + items[items.length / 2]) / 2;
  }
}

module.exports = {
  Count: Count,
  Sum: Sum,
  Min: Min,
  Max: Max,
  Avg: Avg,
  Median: Median,
  Mode: Mode,
  StdDev: StdDev,
  Product: Product,
  GeometricMean: GeometricMean,
  PopulationStdDev: PopulationStdDev,
  Variance: Variance,
  PopulationVariance: PopulationVariance,
  AllTrue: AllTrue,
  AnyTrue: AnyTrue
};
},{"../datatypes/exception":8,"../datatypes/quantity":11,"../util/comparison":45,"../util/util":47,"./builder":16,"./expression":22}],15:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var MathUtil = require('../util/math');

var _require3 = require('../datatypes/quantity'),
    Quantity = _require3.Quantity,
    doAddition = _require3.doAddition,
    doSubtraction = _require3.doSubtraction,
    doMultiplication = _require3.doMultiplication,
    doDivision = _require3.doDivision;

var Add = /*#__PURE__*/function (_Expression) {
  _inherits(Add, _Expression);

  var _super = _createSuper(Add);

  function Add(json) {
    _classCallCheck(this, Add);

    return _super.call(this, json);
  }

  _createClass(Add, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var sum = args.reduce(function (x, y) {
        if (x.isQuantity || x.isDateTime || x.isDate || x.isTime) {
          return doAddition(x, y);
        } else {
          return x + y;
        }
      });

      if (MathUtil.overflowsOrUnderflows(sum)) {
        return null;
      }

      return sum;
    }
  }]);

  return Add;
}(Expression);

var Subtract = /*#__PURE__*/function (_Expression2) {
  _inherits(Subtract, _Expression2);

  var _super2 = _createSuper(Subtract);

  function Subtract(json) {
    _classCallCheck(this, Subtract);

    return _super2.call(this, json);
  }

  _createClass(Subtract, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var difference = args.reduce(function (x, y) {
        if (x.isQuantity || x.isDateTime || x.isDate) {
          return doSubtraction(x, y);
        } else {
          return x - y;
        }
      });

      if (MathUtil.overflowsOrUnderflows(difference)) {
        return null;
      }

      return difference;
    }
  }]);

  return Subtract;
}(Expression);

var Multiply = /*#__PURE__*/function (_Expression3) {
  _inherits(Multiply, _Expression3);

  var _super3 = _createSuper(Multiply);

  function Multiply(json) {
    _classCallCheck(this, Multiply);

    return _super3.call(this, json);
  }

  _createClass(Multiply, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var product = args.reduce(function (x, y) {
        if (x.isQuantity || y.isQuantity) {
          return doMultiplication(x, y);
        } else {
          return x * y;
        }
      });

      if (MathUtil.overflowsOrUnderflows(product)) {
        return null;
      }

      return product;
    }
  }]);

  return Multiply;
}(Expression);

var Divide = /*#__PURE__*/function (_Expression4) {
  _inherits(Divide, _Expression4);

  var _super4 = _createSuper(Divide);

  function Divide(json) {
    _classCallCheck(this, Divide);

    return _super4.call(this, json);
  }

  _createClass(Divide, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var quotient = args.reduce(function (x, y) {
        if (x.isQuantity) {
          return doDivision(x, y);
        } else {
          return x / y;
        }
      }); // Note, anything divided by 0 is Infinity in Javascript, which will be
      // considered as overflow by this check.

      if (MathUtil.overflowsOrUnderflows(quotient)) {
        return null;
      }

      return quotient;
    }
  }]);

  return Divide;
}(Expression);

var TruncatedDivide = /*#__PURE__*/function (_Expression5) {
  _inherits(TruncatedDivide, _Expression5);

  var _super5 = _createSuper(TruncatedDivide);

  function TruncatedDivide(json) {
    _classCallCheck(this, TruncatedDivide);

    return _super5.call(this, json);
  }

  _createClass(TruncatedDivide, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var quotient = args.reduce(function (x, y) {
        return x / y;
      });
      var truncatedQuotient = quotient >= 0 ? Math.floor(quotient) : Math.ceil(quotient);

      if (MathUtil.overflowsOrUnderflows(truncatedQuotient)) {
        return null;
      }

      return truncatedQuotient;
    }
  }]);

  return TruncatedDivide;
}(Expression);

var Modulo = /*#__PURE__*/function (_Expression6) {
  _inherits(Modulo, _Expression6);

  var _super6 = _createSuper(Modulo);

  function Modulo(json) {
    _classCallCheck(this, Modulo);

    return _super6.call(this, json);
  }

  _createClass(Modulo, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var modulo = args.reduce(function (x, y) {
        return x % y;
      });
      return MathUtil.decimalOrNull(modulo);
    }
  }]);

  return Modulo;
}(Expression);

var Ceiling = /*#__PURE__*/function (_Expression7) {
  _inherits(Ceiling, _Expression7);

  var _super7 = _createSuper(Ceiling);

  function Ceiling(json) {
    _classCallCheck(this, Ceiling);

    return _super7.call(this, json);
  }

  _createClass(Ceiling, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      return Math.ceil(arg);
    }
  }]);

  return Ceiling;
}(Expression);

var Floor = /*#__PURE__*/function (_Expression8) {
  _inherits(Floor, _Expression8);

  var _super8 = _createSuper(Floor);

  function Floor(json) {
    _classCallCheck(this, Floor);

    return _super8.call(this, json);
  }

  _createClass(Floor, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      return Math.floor(arg);
    }
  }]);

  return Floor;
}(Expression);

var Truncate = /*#__PURE__*/function (_Expression9) {
  _inherits(Truncate, _Expression9);

  var _super9 = _createSuper(Truncate);

  function Truncate(json) {
    _classCallCheck(this, Truncate);

    return _super9.call(this, json);
  }

  _createClass(Truncate, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      return arg >= 0 ? Math.floor(arg) : Math.ceil(arg);
    }
  }]);

  return Truncate;
}(Expression);

var Abs = /*#__PURE__*/function (_Expression10) {
  _inherits(Abs, _Expression10);

  var _super10 = _createSuper(Abs);

  function Abs(json) {
    _classCallCheck(this, Abs);

    return _super10.call(this, json);
  }

  _createClass(Abs, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      } else if (arg.isQuantity) {
        return new Quantity(Math.abs(arg.value), arg.unit);
      } else {
        return Math.abs(arg);
      }
    }
  }]);

  return Abs;
}(Expression);

var Negate = /*#__PURE__*/function (_Expression11) {
  _inherits(Negate, _Expression11);

  var _super11 = _createSuper(Negate);

  function Negate(json) {
    _classCallCheck(this, Negate);

    return _super11.call(this, json);
  }

  _createClass(Negate, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      } else if (arg.isQuantity) {
        return new Quantity(arg.value * -1, arg.unit);
      } else {
        return arg * -1;
      }
    }
  }]);

  return Negate;
}(Expression);

var Round = /*#__PURE__*/function (_Expression12) {
  _inherits(Round, _Expression12);

  var _super12 = _createSuper(Round);

  function Round(json) {
    var _this;

    _classCallCheck(this, Round);

    _this = _super12.call(this, json);
    _this.precision = build(json.precision);
    return _this;
  }

  _createClass(Round, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      var dec = this.precision != null ? this.precision.execute(ctx) : 0;
      return Math.round(arg * Math.pow(10, dec)) / Math.pow(10, dec);
    }
  }]);

  return Round;
}(Expression);

var Ln = /*#__PURE__*/function (_Expression13) {
  _inherits(Ln, _Expression13);

  var _super13 = _createSuper(Ln);

  function Ln(json) {
    _classCallCheck(this, Ln);

    return _super13.call(this, json);
  }

  _createClass(Ln, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      var ln = Math.log(arg);
      return MathUtil.decimalOrNull(ln);
    }
  }]);

  return Ln;
}(Expression);

var Exp = /*#__PURE__*/function (_Expression14) {
  _inherits(Exp, _Expression14);

  var _super14 = _createSuper(Exp);

  function Exp(json) {
    _classCallCheck(this, Exp);

    return _super14.call(this, json);
  }

  _createClass(Exp, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      }

      var power = Math.exp(arg);

      if (MathUtil.overflowsOrUnderflows(power)) {
        return null;
      }

      return power;
    }
  }]);

  return Exp;
}(Expression);

var Log = /*#__PURE__*/function (_Expression15) {
  _inherits(Log, _Expression15);

  var _super15 = _createSuper(Log);

  function Log(json) {
    _classCallCheck(this, Log);

    return _super15.call(this, json);
  }

  _createClass(Log, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        return null;
      }

      var log = args.reduce(function (x, y) {
        return Math.log(x) / Math.log(y);
      });
      return MathUtil.decimalOrNull(log);
    }
  }]);

  return Log;
}(Expression);

var Power = /*#__PURE__*/function (_Expression16) {
  _inherits(Power, _Expression16);

  var _super16 = _createSuper(Power);

  function Power(json) {
    _classCallCheck(this, Power);

    return _super16.call(this, json);
  }

  _createClass(Power, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args == null || args.some(function (x) {
        return x == null;
      })) {
        null;
      }

      var power = args.reduce(function (x, y) {
        return Math.pow(x, y);
      });

      if (MathUtil.overflowsOrUnderflows(power)) {
        return null;
      }

      return power;
    }
  }]);

  return Power;
}(Expression);

var MinValue = /*#__PURE__*/function (_Expression17) {
  _inherits(MinValue, _Expression17);

  var _super17 = _createSuper(MinValue);

  function MinValue(json) {
    var _this2;

    _classCallCheck(this, MinValue);

    _this2 = _super17.call(this, json);
    _this2.valueType = json.valueType;
    return _this2;
  }

  _createClass(MinValue, [{
    key: "exec",
    value: function exec(ctx) {
      if (MinValue.MIN_VALUES[this.valueType]) {
        if (this.valueType === '{urn:hl7-org:elm-types:r1}DateTime') {
          var minDateTime = MinValue.MIN_VALUES[this.valueType].copy();
          minDateTime.timezoneOffset = ctx.getTimezoneOffset();
          return minDateTime;
        } else {
          return MinValue.MIN_VALUES[this.valueType];
        }
      } else {
        throw new Error("Minimum not supported for ".concat(this.valueType));
      }
    }
  }]);

  return MinValue;
}(Expression);

MinValue.MIN_VALUES = {};
MinValue.MIN_VALUES['{urn:hl7-org:elm-types:r1}Integer'] = MathUtil.MIN_INT_VALUE;
MinValue.MIN_VALUES['{urn:hl7-org:elm-types:r1}Decimal'] = MathUtil.MIN_FLOAT_VALUE;
MinValue.MIN_VALUES['{urn:hl7-org:elm-types:r1}DateTime'] = MathUtil.MIN_DATETIME_VALUE;
MinValue.MIN_VALUES['{urn:hl7-org:elm-types:r1}Date'] = MathUtil.MIN_DATE_VALUE;
MinValue.MIN_VALUES['{urn:hl7-org:elm-types:r1}Time'] = MathUtil.MIN_TIME_VALUE;

var MaxValue = /*#__PURE__*/function (_Expression18) {
  _inherits(MaxValue, _Expression18);

  var _super18 = _createSuper(MaxValue);

  function MaxValue(json) {
    var _this3;

    _classCallCheck(this, MaxValue);

    _this3 = _super18.call(this, json);
    _this3.valueType = json.valueType;
    return _this3;
  }

  _createClass(MaxValue, [{
    key: "exec",
    value: function exec(ctx) {
      if (MaxValue.MAX_VALUES[this.valueType] != null) {
        if (this.valueType === '{urn:hl7-org:elm-types:r1}DateTime') {
          var maxDateTime = MaxValue.MAX_VALUES[this.valueType].copy();
          maxDateTime.timezoneOffset = ctx.getTimezoneOffset();
          return maxDateTime;
        } else {
          return MaxValue.MAX_VALUES[this.valueType];
        }
      } else {
        throw new Error("Maximum not supported for ".concat(this.valueType));
      }
    }
  }]);

  return MaxValue;
}(Expression);

MaxValue.MAX_VALUES = {};
MaxValue.MAX_VALUES['{urn:hl7-org:elm-types:r1}Integer'] = MathUtil.MAX_INT_VALUE;
MaxValue.MAX_VALUES['{urn:hl7-org:elm-types:r1}Decimal'] = MathUtil.MAX_FLOAT_VALUE;
MaxValue.MAX_VALUES['{urn:hl7-org:elm-types:r1}DateTime'] = MathUtil.MAX_DATETIME_VALUE;
MaxValue.MAX_VALUES['{urn:hl7-org:elm-types:r1}Date'] = MathUtil.MAX_DATE_VALUE;
MaxValue.MAX_VALUES['{urn:hl7-org:elm-types:r1}Time'] = MathUtil.MAX_TIME_VALUE;

var Successor = /*#__PURE__*/function (_Expression19) {
  _inherits(Successor, _Expression19);

  var _super19 = _createSuper(Successor);

  function Successor(json) {
    _classCallCheck(this, Successor);

    return _super19.call(this, json);
  }

  _createClass(Successor, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        null;
      }

      var successor = null;

      try {
        // MathUtil.successor throws on overflow, and the exception is used in
        // the logic for evaluating `meets`, so it can't be changed to just return null
        successor = MathUtil.successor(arg);
      } catch (e) {
        if (e instanceof MathUtil.OverFlowException) {
          return null;
        }
      }

      if (MathUtil.overflowsOrUnderflows(successor)) {
        return null;
      }

      return successor;
    }
  }]);

  return Successor;
}(Expression);

var Predecessor = /*#__PURE__*/function (_Expression20) {
  _inherits(Predecessor, _Expression20);

  var _super20 = _createSuper(Predecessor);

  function Predecessor(json) {
    _classCallCheck(this, Predecessor);

    return _super20.call(this, json);
  }

  _createClass(Predecessor, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        null;
      }

      var predecessor = null;

      try {
        // MathUtil.predecessor throws on underflow, and the exception is used in
        // the logic for evaluating `meets`, so it can't be changed to just return null
        predecessor = MathUtil.predecessor(arg);
      } catch (e) {
        if (e instanceof MathUtil.OverFlowException) {
          return null;
        }
      }

      if (MathUtil.overflowsOrUnderflows(predecessor)) {
        return null;
      }

      return predecessor;
    }
  }]);

  return Predecessor;
}(Expression);

module.exports = {
  Abs: Abs,
  Add: Add,
  Ceiling: Ceiling,
  Divide: Divide,
  Exp: Exp,
  Floor: Floor,
  Ln: Ln,
  Log: Log,
  MaxValue: MaxValue,
  MinValue: MinValue,
  Modulo: Modulo,
  Multiply: Multiply,
  Negate: Negate,
  Power: Power,
  Predecessor: Predecessor,
  Round: Round,
  Subtract: Subtract,
  Successor: Successor,
  Truncate: Truncate,
  TruncatedDivide: TruncatedDivide
};
},{"../datatypes/quantity":11,"../util/math":46,"./builder":16,"./expression":22}],16:[function(require,module,exports){
"use strict";

var E = require('./expressions');

var _require = require('../util/util'),
    typeIsArray = _require.typeIsArray;

function build(json) {
  if (json == null) {
    return json;
  }

  if (typeIsArray(json)) {
    return json.map(function (child) {
      return build(child);
    });
  }

  if (json.type === 'FunctionRef') {
    return new E.FunctionRef(json);
  } else if (json.type === 'Literal') {
    return E.Literal.from(json);
  } else if (functionExists(json.type)) {
    return constructByName(json.type, json);
  } else {
    return null;
  }
}

function functionExists(name) {
  return typeof E[name] === 'function';
}

function constructByName(name, json) {
  return new E[name](json);
}

module.exports = {
  build: build
};
},{"../util/util":47,"./expressions":23}],17:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var dt = require('../datatypes/datatypes');

var _require2 = require('./builder'),
    build = _require2.build;

var ValueSetDef = /*#__PURE__*/function (_Expression) {
  _inherits(ValueSetDef, _Expression);

  var _super = _createSuper(ValueSetDef);

  function ValueSetDef(json) {
    var _this;

    _classCallCheck(this, ValueSetDef);

    _this = _super.call(this, json);
    _this.name = json.name;
    _this.id = json.id;
    _this.version = json.version;
    return _this;
  } //todo: code systems and versions


  _createClass(ValueSetDef, [{
    key: "exec",
    value: function exec(ctx) {
      var valueset = ctx.codeService.findValueSet(this.id, this.version) || new dt.ValueSet(this.id, this.version);
      ctx.rootContext().set(this.name, valueset);
      return valueset;
    }
  }]);

  return ValueSetDef;
}(Expression);

var ValueSetRef = /*#__PURE__*/function (_Expression2) {
  _inherits(ValueSetRef, _Expression2);

  var _super2 = _createSuper(ValueSetRef);

  function ValueSetRef(json) {
    var _this2;

    _classCallCheck(this, ValueSetRef);

    _this2 = _super2.call(this, json);
    _this2.name = json.name;
    _this2.libraryName = json.libraryName;
    return _this2;
  }

  _createClass(ValueSetRef, [{
    key: "exec",
    value: function exec(ctx) {
      // TODO: This calls the code service every time-- should be optimized
      var valueset = ctx.getValueSet(this.name, this.libraryName);

      if (valueset instanceof Expression) {
        valueset = valueset.execute(ctx);
      }

      return valueset;
    }
  }]);

  return ValueSetRef;
}(Expression);

var AnyInValueSet = /*#__PURE__*/function (_Expression3) {
  _inherits(AnyInValueSet, _Expression3);

  var _super3 = _createSuper(AnyInValueSet);

  function AnyInValueSet(json) {
    var _this3;

    _classCallCheck(this, AnyInValueSet);

    _this3 = _super3.call(this, json);
    _this3.codes = build(json.codes);
    _this3.valueset = new ValueSetRef(json.valueset);
    return _this3;
  }

  _createClass(AnyInValueSet, [{
    key: "exec",
    value: function exec(ctx) {
      var valueset = this.valueset.execute(ctx); // If the value set reference cannot be resolved, a run-time error is thrown.

      if (valueset == null || !valueset.isValueSet) {
        throw new Error('ValueSet must be provided to InValueSet function');
      }

      var codes = this.codes.exec(ctx);
      return codes != null && codes.some(function (code) {
        return valueset.hasMatch(code);
      });
    }
  }]);

  return AnyInValueSet;
}(Expression);

var InValueSet = /*#__PURE__*/function (_Expression4) {
  _inherits(InValueSet, _Expression4);

  var _super4 = _createSuper(InValueSet);

  function InValueSet(json) {
    var _this4;

    _classCallCheck(this, InValueSet);

    _this4 = _super4.call(this, json);
    _this4.code = build(json.code);
    _this4.valueset = new ValueSetRef(json.valueset);
    return _this4;
  }

  _createClass(InValueSet, [{
    key: "exec",
    value: function exec(ctx) {
      // If the code argument is null, the result is false
      if (this.code == null) {
        return false;
      }

      if (this.valueset == null) {
        throw new Error('ValueSet must be provided to InValueSet function');
      }

      var code = this.code.execute(ctx); // spec indicates to return false if code is null, throw error if value set cannot be resolved

      if (code == null) {
        return false;
      }

      var valueset = this.valueset.execute(ctx);

      if (valueset == null || !valueset.isValueSet) {
        throw new Error('ValueSet must be provided to InValueSet function');
      } // If there is a code and valueset return whether or not the valueset has the code


      return valueset.hasMatch(code);
    }
  }]);

  return InValueSet;
}(Expression);

var CodeSystemDef = /*#__PURE__*/function (_Expression5) {
  _inherits(CodeSystemDef, _Expression5);

  var _super5 = _createSuper(CodeSystemDef);

  function CodeSystemDef(json) {
    var _this5;

    _classCallCheck(this, CodeSystemDef);

    _this5 = _super5.call(this, json);
    _this5.name = json.name;
    _this5.id = json.id;
    _this5.version = json.version;
    return _this5;
  }

  _createClass(CodeSystemDef, [{
    key: "exec",
    value: function exec(ctx) {
      return new dt.CodeSystem(this.id, this.version);
    }
  }]);

  return CodeSystemDef;
}(Expression);

var CodeDef = /*#__PURE__*/function (_Expression6) {
  _inherits(CodeDef, _Expression6);

  var _super6 = _createSuper(CodeDef);

  function CodeDef(json) {
    var _this6;

    _classCallCheck(this, CodeDef);

    _this6 = _super6.call(this, json);
    _this6.name = json.name;
    _this6.id = json.id;
    _this6.systemName = json.codeSystem.name;
    _this6.display = json.display;
    return _this6;
  }

  _createClass(CodeDef, [{
    key: "exec",
    value: function exec(ctx) {
      var system = ctx.getCodeSystem(this.systemName).execute(ctx);
      return new dt.Code(this.id, system.id, system.version, this.display);
    }
  }]);

  return CodeDef;
}(Expression);

var CodeRef = /*#__PURE__*/function (_Expression7) {
  _inherits(CodeRef, _Expression7);

  var _super7 = _createSuper(CodeRef);

  function CodeRef(json) {
    var _this7;

    _classCallCheck(this, CodeRef);

    _this7 = _super7.call(this, json);
    _this7.name = json.name;
    _this7.library = json.libraryName;
    return _this7;
  }

  _createClass(CodeRef, [{
    key: "exec",
    value: function exec(ctx) {
      ctx = this.library ? ctx.getLibraryContext(this.library) : ctx;
      var codeDef = ctx.getCode(this.name);
      return codeDef ? codeDef.execute(ctx) : undefined;
    }
  }]);

  return CodeRef;
}(Expression);

var Code = /*#__PURE__*/function (_Expression8) {
  _inherits(Code, _Expression8);

  var _super8 = _createSuper(Code);

  function Code(json) {
    var _this8;

    _classCallCheck(this, Code);

    _this8 = _super8.call(this, json);
    _this8.code = json.code;
    _this8.systemName = json.system.name;
    _this8.version = json.version;
    _this8.display = json.display;
    return _this8;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(Code, [{
    key: "exec",
    value: function exec(ctx) {
      var system = ctx.getCodeSystem(this.systemName) || {};
      return new dt.Code(this.code, system.id, this.version, this.display);
    }
  }, {
    key: "isCode",
    get: function get() {
      return true;
    }
  }]);

  return Code;
}(Expression);

var ConceptDef = /*#__PURE__*/function (_Expression9) {
  _inherits(ConceptDef, _Expression9);

  var _super9 = _createSuper(ConceptDef);

  function ConceptDef(json) {
    var _this9;

    _classCallCheck(this, ConceptDef);

    _this9 = _super9.call(this, json);
    _this9.name = json.name;
    _this9.display = json.display;
    _this9.codes = json.code;
    return _this9;
  }

  _createClass(ConceptDef, [{
    key: "exec",
    value: function exec(ctx) {
      var codes = this.codes.map(function (code) {
        var codeDef = ctx.getCode(code.name);
        return codeDef ? codeDef.execute(ctx) : undefined;
      });
      return new dt.Concept(codes, this.display);
    }
  }]);

  return ConceptDef;
}(Expression);

var ConceptRef = /*#__PURE__*/function (_Expression10) {
  _inherits(ConceptRef, _Expression10);

  var _super10 = _createSuper(ConceptRef);

  function ConceptRef(json) {
    var _this10;

    _classCallCheck(this, ConceptRef);

    _this10 = _super10.call(this, json);
    _this10.name = json.name;
    return _this10;
  }

  _createClass(ConceptRef, [{
    key: "exec",
    value: function exec(ctx) {
      var conceptDef = ctx.getConcept(this.name);
      return conceptDef ? conceptDef.execute(ctx) : undefined;
    }
  }]);

  return ConceptRef;
}(Expression);

var Concept = /*#__PURE__*/function (_Expression11) {
  _inherits(Concept, _Expression11);

  var _super11 = _createSuper(Concept);

  function Concept(json) {
    var _this11;

    _classCallCheck(this, Concept);

    _this11 = _super11.call(this, json);
    _this11.codes = json.code;
    _this11.display = json.display;
    return _this11;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(Concept, [{
    key: "toCode",
    value: function toCode(ctx, code) {
      var system = ctx.getCodeSystem(code.system.name) || {};
      return new dt.Code(code.code, system.id, code.version, code.display);
    }
  }, {
    key: "exec",
    value: function exec(ctx) {
      var _this12 = this;

      var codes = this.codes.map(function (code) {
        return _this12.toCode(ctx, code);
      });
      return new dt.Concept(codes, this.display);
    }
  }, {
    key: "isConcept",
    get: function get() {
      return true;
    }
  }]);

  return Concept;
}(Expression);

var CalculateAge = /*#__PURE__*/function (_Expression12) {
  _inherits(CalculateAge, _Expression12);

  var _super12 = _createSuper(CalculateAge);

  function CalculateAge(json) {
    var _this13;

    _classCallCheck(this, CalculateAge);

    _this13 = _super12.call(this, json);
    _this13.precision = json.precision;
    return _this13;
  }

  _createClass(CalculateAge, [{
    key: "exec",
    value: function exec(ctx) {
      var date1 = this.execArgs(ctx);
      var date2 = dt.DateTime.fromJSDate(ctx.getExecutionDateTime());
      var result = date1 != null ? date1.durationBetween(date2, this.precision.toLowerCase()) : undefined;

      if (result != null && result.isPoint()) {
        return result.low;
      } else {
        return result;
      }
    }
  }]);

  return CalculateAge;
}(Expression);

var CalculateAgeAt = /*#__PURE__*/function (_Expression13) {
  _inherits(CalculateAgeAt, _Expression13);

  var _super13 = _createSuper(CalculateAgeAt);

  function CalculateAgeAt(json) {
    var _this14;

    _classCallCheck(this, CalculateAgeAt);

    _this14 = _super13.call(this, json);
    _this14.precision = json.precision;
    return _this14;
  }

  _createClass(CalculateAgeAt, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs = this.execArgs(ctx),
          _this$execArgs2 = _slicedToArray(_this$execArgs, 2),
          date1 = _this$execArgs2[0],
          date2 = _this$execArgs2[1];

      if (date1 != null && date2 != null) {
        // date1 is the birthdate, convert it to date if date2 is a date (to support ignoring time)
        if (date2.isDate && date1.isDateTime) {
          date1 = date1.getDate();
        }

        var result = date1.durationBetween(date2, this.precision.toLowerCase());

        if (result != null && result.isPoint()) {
          return result.low;
        } else {
          return result;
        }
      }

      return null;
    }
  }]);

  return CalculateAgeAt;
}(Expression);

module.exports = {
  AnyInValueSet: AnyInValueSet,
  CalculateAge: CalculateAge,
  CalculateAgeAt: CalculateAgeAt,
  Code: Code,
  CodeDef: CodeDef,
  CodeRef: CodeRef,
  CodeSystemDef: CodeSystemDef,
  Concept: Concept,
  ConceptDef: ConceptDef,
  ConceptRef: ConceptRef,
  InValueSet: InValueSet,
  ValueSetDef: ValueSetDef,
  ValueSetRef: ValueSetRef
};
},{"../datatypes/datatypes":6,"./builder":16,"./expression":22}],18:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('../datatypes/datatypes'),
    Uncertainty = _require2.Uncertainty; // Equal is completely handled by overloaded#Equal
// NotEqual is completely handled by overloaded#Equal


var Less = /*#__PURE__*/function (_Expression) {
  _inherits(Less, _Expression);

  var _super = _createSuper(Less);

  function Less(json) {
    _classCallCheck(this, Less);

    return _super.call(this, json);
  }

  _createClass(Less, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx).map(function (x) {
        return Uncertainty.from(x);
      });

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return args[0].lessThan(args[1]);
    }
  }]);

  return Less;
}(Expression);

var LessOrEqual = /*#__PURE__*/function (_Expression2) {
  _inherits(LessOrEqual, _Expression2);

  var _super2 = _createSuper(LessOrEqual);

  function LessOrEqual(json) {
    _classCallCheck(this, LessOrEqual);

    return _super2.call(this, json);
  }

  _createClass(LessOrEqual, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx).map(function (x) {
        return Uncertainty.from(x);
      });

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return args[0].lessThanOrEquals(args[1]);
    }
  }]);

  return LessOrEqual;
}(Expression);

var Greater = /*#__PURE__*/function (_Expression3) {
  _inherits(Greater, _Expression3);

  var _super3 = _createSuper(Greater);

  function Greater(json) {
    _classCallCheck(this, Greater);

    return _super3.call(this, json);
  }

  _createClass(Greater, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx).map(function (x) {
        return Uncertainty.from(x);
      });

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return args[0].greaterThan(args[1]);
    }
  }]);

  return Greater;
}(Expression);

var GreaterOrEqual = /*#__PURE__*/function (_Expression4) {
  _inherits(GreaterOrEqual, _Expression4);

  var _super4 = _createSuper(GreaterOrEqual);

  function GreaterOrEqual(json) {
    _classCallCheck(this, GreaterOrEqual);

    return _super4.call(this, json);
  }

  _createClass(GreaterOrEqual, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx).map(function (x) {
        return Uncertainty.from(x);
      });

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return args[0].greaterThanOrEquals(args[1]);
    }
  }]);

  return GreaterOrEqual;
}(Expression);

module.exports = {
  Greater: Greater,
  GreaterOrEqual: GreaterOrEqual,
  Less: Less,
  LessOrEqual: LessOrEqual
};
},{"../datatypes/datatypes":6,"./expression":22}],19:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('../util/comparison'),
    equals = _require3.equals; // TODO: Spec lists "Conditional", but it's "If" in the XSD


var If = /*#__PURE__*/function (_Expression) {
  _inherits(If, _Expression);

  var _super = _createSuper(If);

  function If(json) {
    var _this;

    _classCallCheck(this, If);

    _this = _super.call(this, json);
    _this.condition = build(json.condition);
    _this.th = build(json.then);
    _this.els = build(json.else);
    return _this;
  }

  _createClass(If, [{
    key: "exec",
    value: function exec(ctx) {
      if (this.condition.execute(ctx)) {
        return this.th.execute(ctx);
      } else {
        return this.els.execute(ctx);
      }
    }
  }]);

  return If;
}(Expression);

var CaseItem = function CaseItem(json) {
  _classCallCheck(this, CaseItem);

  this.when = build(json.when);
  this.then = build(json.then);
};

var Case = /*#__PURE__*/function (_Expression2) {
  _inherits(Case, _Expression2);

  var _super2 = _createSuper(Case);

  function Case(json) {
    var _this2;

    _classCallCheck(this, Case);

    _this2 = _super2.call(this, json);
    _this2.comparand = build(json.comparand);
    _this2.caseItems = json.caseItem.map(function (ci) {
      return new CaseItem(ci);
    });
    _this2.els = build(json.else);
    return _this2;
  }

  _createClass(Case, [{
    key: "exec",
    value: function exec(ctx) {
      if (this.comparand) {
        return this.exec_selected(ctx);
      } else {
        return this.exec_standard(ctx);
      }
    }
  }, {
    key: "exec_selected",
    value: function exec_selected(ctx) {
      var val = this.comparand.execute(ctx);

      var _iterator = _createForOfIteratorHelper(this.caseItems),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var ci = _step.value;

          if (equals(ci.when.execute(ctx), val)) {
            return ci.then.execute(ctx);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return this.els.execute(ctx);
    }
  }, {
    key: "exec_standard",
    value: function exec_standard(ctx) {
      var _iterator2 = _createForOfIteratorHelper(this.caseItems),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var ci = _step2.value;

          if (ci.when.execute(ctx)) {
            return ci.then.execute(ctx);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return this.els.execute(ctx);
    }
  }]);

  return Case;
}(Expression);

module.exports = {
  Case: Case,
  CaseItem: CaseItem,
  If: If
};
},{"../util/comparison":45,"./builder":16,"./expression":22}],20:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('./literal'),
    Literal = _require3.Literal;

var DT = require('../datatypes/datatypes');

var DateTime = /*#__PURE__*/function (_Expression) {
  _inherits(DateTime, _Expression);

  var _super = _createSuper(DateTime);

  function DateTime(json) {
    var _this;

    _classCallCheck(this, DateTime);

    _this = _super.call(this, json);
    _this.json = json;
    return _this;
  }

  _createClass(DateTime, [{
    key: "exec",
    value: function exec(ctx) {
      var _this2 = this;

      var _iterator = _createForOfIteratorHelper(DateTime.PROPERTIES),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;

          // if json does not contain 'timezoneOffset' set it to the executionDateTime from the context
          if (this.json[property] != null) {
            this[property] = build(this.json[property]);
          } else if (property === 'timezoneOffset' && ctx.getTimezoneOffset() != null) {
            this[property] = Literal.from({
              type: 'Literal',
              value: ctx.getTimezoneOffset(),
              valueType: '{urn:hl7-org:elm-types:r1}Integer'
            });
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var args = DateTime.PROPERTIES.map(function (p) {
        return _this2[p] != null ? _this2[p].execute(ctx) : undefined;
      });
      return _construct(DT.DateTime, _toConsumableArray(args));
    }
  }]);

  return DateTime;
}(Expression);

DateTime.PROPERTIES = ['year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond', 'timezoneOffset'];

var _Date = /*#__PURE__*/function (_Expression2) {
  _inherits(_Date, _Expression2);

  var _super2 = _createSuper(_Date);

  function _Date(json) {
    var _this3;

    _classCallCheck(this, _Date);

    _this3 = _super2.call(this, json);
    _this3.json = json;
    return _this3;
  }

  _createClass(_Date, [{
    key: "exec",
    value: function exec(ctx) {
      var _this4 = this;

      var _iterator2 = _createForOfIteratorHelper(_Date.PROPERTIES),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var property = _step2.value;

          if (this.json[property] != null) {
            this[property] = build(this.json[property]);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var args = _Date.PROPERTIES.map(function (p) {
        return _this4[p] != null ? _this4[p].execute(ctx) : undefined;
      });

      return _construct(DT.Date, _toConsumableArray(args));
    }
  }]);

  return _Date;
}(Expression);

_Date.PROPERTIES = ['year', 'month', 'day'];

var Time = /*#__PURE__*/function (_Expression3) {
  _inherits(Time, _Expression3);

  var _super3 = _createSuper(Time);

  function Time(json) {
    var _this5;

    _classCallCheck(this, Time);

    _this5 = _super3.call(this, json);

    var _iterator3 = _createForOfIteratorHelper(Time.PROPERTIES),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var property = _step3.value;

        if (json[property] != null) {
          _this5[property] = build(json[property]);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return _this5;
  }

  _createClass(Time, [{
    key: "exec",
    value: function exec(ctx) {
      var _this6 = this;

      var args = Time.PROPERTIES.map(function (p) {
        return _this6[p] != null ? _this6[p].execute(ctx) : undefined;
      });
      return _construct(DT.DateTime, [0, 1, 1].concat(_toConsumableArray(args))).getTime();
    }
  }]);

  return Time;
}(Expression);

Time.PROPERTIES = ['hour', 'minute', 'second', 'millisecond'];

var Today = /*#__PURE__*/function (_Expression4) {
  _inherits(Today, _Expression4);

  var _super4 = _createSuper(Today);

  function Today(json) {
    _classCallCheck(this, Today);

    return _super4.call(this, json);
  }

  _createClass(Today, [{
    key: "exec",
    value: function exec(ctx) {
      return ctx.getExecutionDateTime().getDate();
    }
  }]);

  return Today;
}(Expression);

var Now = /*#__PURE__*/function (_Expression5) {
  _inherits(Now, _Expression5);

  var _super5 = _createSuper(Now);

  function Now(json) {
    _classCallCheck(this, Now);

    return _super5.call(this, json);
  }

  _createClass(Now, [{
    key: "exec",
    value: function exec(ctx) {
      return ctx.getExecutionDateTime();
    }
  }]);

  return Now;
}(Expression);

var TimeOfDay = /*#__PURE__*/function (_Expression6) {
  _inherits(TimeOfDay, _Expression6);

  var _super6 = _createSuper(TimeOfDay);

  function TimeOfDay(json) {
    _classCallCheck(this, TimeOfDay);

    return _super6.call(this, json);
  }

  _createClass(TimeOfDay, [{
    key: "exec",
    value: function exec(ctx) {
      return ctx.getExecutionDateTime().getTime();
    }
  }]);

  return TimeOfDay;
}(Expression);

var DateTimeComponentFrom = /*#__PURE__*/function (_Expression7) {
  _inherits(DateTimeComponentFrom, _Expression7);

  var _super7 = _createSuper(DateTimeComponentFrom);

  function DateTimeComponentFrom(json) {
    var _this7;

    _classCallCheck(this, DateTimeComponentFrom);

    _this7 = _super7.call(this, json);
    _this7.precision = json.precision;
    return _this7;
  }

  _createClass(DateTimeComponentFrom, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return arg[this.precision.toLowerCase()];
      } else {
        return null;
      }
    }
  }]);

  return DateTimeComponentFrom;
}(Expression);

var DateFrom = /*#__PURE__*/function (_Expression8) {
  _inherits(DateFrom, _Expression8);

  var _super8 = _createSuper(DateFrom);

  function DateFrom(json) {
    _classCallCheck(this, DateFrom);

    return _super8.call(this, json);
  }

  _createClass(DateFrom, [{
    key: "exec",
    value: function exec(ctx) {
      var date = this.execArgs(ctx);

      if (date != null) {
        return date.getDate();
      } else {
        return null;
      }
    }
  }]);

  return DateFrom;
}(Expression);

var TimeFrom = /*#__PURE__*/function (_Expression9) {
  _inherits(TimeFrom, _Expression9);

  var _super9 = _createSuper(TimeFrom);

  function TimeFrom(json) {
    _classCallCheck(this, TimeFrom);

    return _super9.call(this, json);
  }

  _createClass(TimeFrom, [{
    key: "exec",
    value: function exec(ctx) {
      var date = this.execArgs(ctx);

      if (date != null) {
        return date.getTime();
      } else {
        return null;
      }
    }
  }]);

  return TimeFrom;
}(Expression);

var TimezoneOffsetFrom = /*#__PURE__*/function (_Expression10) {
  _inherits(TimezoneOffsetFrom, _Expression10);

  var _super10 = _createSuper(TimezoneOffsetFrom);

  function TimezoneOffsetFrom(json) {
    _classCallCheck(this, TimezoneOffsetFrom);

    return _super10.call(this, json);
  }

  _createClass(TimezoneOffsetFrom, [{
    key: "exec",
    value: function exec(ctx) {
      var date = this.execArgs(ctx);

      if (date != null) {
        return date.timezoneOffset;
      } else {
        return null;
      }
    }
  }]);

  return TimezoneOffsetFrom;
}(Expression); // Delegated to by overloaded#After


function doAfter(a, b, precision) {
  return a.after(b, precision);
} // Delegated to by overloaded#Before


function doBefore(a, b, precision) {
  return a.before(b, precision);
}

var DifferenceBetween = /*#__PURE__*/function (_Expression11) {
  _inherits(DifferenceBetween, _Expression11);

  var _super11 = _createSuper(DifferenceBetween);

  function DifferenceBetween(json) {
    var _this8;

    _classCallCheck(this, DifferenceBetween);

    _this8 = _super11.call(this, json);
    _this8.precision = json.precision;
    return _this8;
  }

  _createClass(DifferenceBetween, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx); // Check to make sure args exist and that they have differenceBetween functions so that they can be compared to one another

      if (args[0] == null || args[1] == null || typeof args[0].differenceBetween !== 'function' || typeof args[1].differenceBetween !== 'function') {
        return null;
      }

      var result = args[0].differenceBetween(args[1], this.precision != null ? this.precision.toLowerCase() : undefined);

      if (result != null && result.isPoint()) {
        return result.low;
      } else {
        return result;
      }
    }
  }]);

  return DifferenceBetween;
}(Expression);

var DurationBetween = /*#__PURE__*/function (_Expression12) {
  _inherits(DurationBetween, _Expression12);

  var _super12 = _createSuper(DurationBetween);

  function DurationBetween(json) {
    var _this9;

    _classCallCheck(this, DurationBetween);

    _this9 = _super12.call(this, json);
    _this9.precision = json.precision;
    return _this9;
  }

  _createClass(DurationBetween, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx); // Check to make sure args exist and that they have durationBetween functions so that they can be compared to one another

      if (args[0] == null || args[1] == null || typeof args[0].durationBetween !== 'function' || typeof args[1].durationBetween !== 'function') {
        return null;
      }

      var result = args[0].durationBetween(args[1], this.precision != null ? this.precision.toLowerCase() : undefined);

      if (result != null && result.isPoint()) {
        return result.low;
      } else {
        return result;
      }
    }
  }]);

  return DurationBetween;
}(Expression);

module.exports = {
  Date: _Date,
  DateFrom: DateFrom,
  DateTime: DateTime,
  DateTimeComponentFrom: DateTimeComponentFrom,
  DifferenceBetween: DifferenceBetween,
  DurationBetween: DurationBetween,
  Now: Now,
  Time: Time,
  TimeFrom: TimeFrom,
  TimeOfDay: TimeOfDay,
  TimezoneOffsetFrom: TimezoneOffsetFrom,
  Today: Today,
  doAfter: doAfter,
  doBefore: doBefore
};
},{"../datatypes/datatypes":6,"./builder":16,"./expression":22,"./literal":29}],21:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    UnimplementedExpression = _require.UnimplementedExpression;

var UsingDef = /*#__PURE__*/function (_UnimplementedExpress) {
  _inherits(UsingDef, _UnimplementedExpress);

  var _super = _createSuper(UsingDef);

  function UsingDef() {
    _classCallCheck(this, UsingDef);

    return _super.apply(this, arguments);
  }

  return UsingDef;
}(UnimplementedExpression);

var IncludeDef = /*#__PURE__*/function (_UnimplementedExpress2) {
  _inherits(IncludeDef, _UnimplementedExpress2);

  var _super2 = _createSuper(IncludeDef);

  function IncludeDef() {
    _classCallCheck(this, IncludeDef);

    return _super2.apply(this, arguments);
  }

  return IncludeDef;
}(UnimplementedExpression);

var VersionedIdentifier = /*#__PURE__*/function (_UnimplementedExpress3) {
  _inherits(VersionedIdentifier, _UnimplementedExpress3);

  var _super3 = _createSuper(VersionedIdentifier);

  function VersionedIdentifier() {
    _classCallCheck(this, VersionedIdentifier);

    return _super3.apply(this, arguments);
  }

  return VersionedIdentifier;
}(UnimplementedExpression);

module.exports = {
  UsingDef: UsingDef,
  IncludeDef: IncludeDef,
  VersionedIdentifier: VersionedIdentifier
};
},{"./expression":22}],22:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./builder'),
    build = _require.build;

var _require2 = require('../util/util'),
    typeIsArray = _require2.typeIsArray;

var Expression = /*#__PURE__*/function () {
  function Expression(json) {
    _classCallCheck(this, Expression);

    if (json.operand != null) {
      var op = build(json.operand);

      if (typeIsArray(json.operand)) {
        this.args = op;
      } else {
        this.arg = op;
      }
    }

    if (json.localId != null) {
      this.localId = json.localId;
    }
  }

  _createClass(Expression, [{
    key: "execute",
    value: function execute(ctx) {
      if (this.localId != null) {
        // Store the localId and result on the root context of this library
        var execValue = this.exec(ctx);
        ctx.rootContext().setLocalIdWithResult(this.localId, execValue);
        return execValue;
      } else {
        return this.exec(ctx);
      }
    }
  }, {
    key: "exec",
    value: function exec(ctx) {
      return this;
    }
  }, {
    key: "execArgs",
    value: function execArgs(ctx) {
      switch (false) {
        case this.args == null:
          return this.args.map(function (arg) {
            return arg.execute(ctx);
          });

        case this.arg == null:
          return this.arg.execute(ctx);

        default:
          return null;
      }
    }
  }]);

  return Expression;
}();

var UnimplementedExpression = /*#__PURE__*/function (_Expression) {
  _inherits(UnimplementedExpression, _Expression);

  var _super = _createSuper(UnimplementedExpression);

  function UnimplementedExpression(json) {
    var _this;

    _classCallCheck(this, UnimplementedExpression);

    _this = _super.call(this, json);
    _this.json = json;
    return _this;
  }

  _createClass(UnimplementedExpression, [{
    key: "exec",
    value: function exec(ctx) {
      throw new Error("Unimplemented Expression: ".concat(this.json.type));
    }
  }]);

  return UnimplementedExpression;
}(Expression);

module.exports = {
  Expression: Expression,
  UnimplementedExpression: UnimplementedExpression
};
},{"../util/util":47,"./builder":16}],23:[function(require,module,exports){
"use strict";

var expression = require('./expression');

var aggregate = require('./aggregate');

var arithmetic = require('./arithmetic');

var clinical = require('./clinical');

var comparison = require('./comparison');

var conditional = require('./conditional');

var datetime = require('./datetime');

var declaration = require('./declaration');

var external = require('./external');

var instance = require('./instance');

var interval = require('./interval');

var list = require('./list');

var literal = require('./literal');

var logical = require('./logical');

var nullological = require('./nullological');

var parameters = require('./parameters');

var quantity = require('./quantity');

var query = require('./query');

var ratio = require('./ratio');

var reusable = require('./reusable');

var string = require('./string');

var structured = require('./structured');

var type = require('./type');

var overloaded = require('./overloaded');

var libs = [expression, aggregate, arithmetic, clinical, comparison, conditional, datetime, declaration, external, instance, interval, list, literal, logical, nullological, parameters, query, quantity, ratio, reusable, string, structured, type, overloaded];

for (var _i = 0, _libs = libs; _i < _libs.length; _i++) {
  var lib = _libs[_i];

  for (var _i2 = 0, _Object$keys = Object.keys(lib); _i2 < _Object$keys.length; _i2++) {
    var element = _Object$keys[_i2];
    module.exports[element] = lib[element];
  }
}
},{"./aggregate":14,"./arithmetic":15,"./clinical":17,"./comparison":18,"./conditional":19,"./datetime":20,"./declaration":21,"./expression":22,"./external":24,"./instance":25,"./interval":26,"./list":28,"./literal":29,"./logical":30,"./nullological":31,"./overloaded":32,"./parameters":33,"./quantity":34,"./query":35,"./ratio":36,"./reusable":37,"./string":38,"./structured":39,"./type":40}],24:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('../util/util'),
    typeIsArray = _require3.typeIsArray;

var Retrieve = /*#__PURE__*/function (_Expression) {
  _inherits(Retrieve, _Expression);

  var _super = _createSuper(Retrieve);

  function Retrieve(json) {
    var _this;

    _classCallCheck(this, Retrieve);

    _this = _super.call(this, json);
    _this.datatype = json.dataType;
    _this.templateId = json.templateId;
    _this.codeProperty = json.codeProperty;
    _this.codes = build(json.codes);
    _this.dateProperty = json.dateProperty;
    _this.dateRange = build(json.dateRange);
    return _this;
  }

  _createClass(Retrieve, [{
    key: "exec",
    value: function exec(ctx) {
      var _this2 = this;

      var records = ctx.findRecords(this.templateId != null ? this.templateId : this.datatype);
      var codes = this.codes;

      if (this.codes && typeof this.codes.exec === 'function') {
        codes = this.codes.execute(ctx);

        if (codes == null) {
          return [];
        }
      }

      if (codes) {
        records = records.filter(function (r) {
          return _this2.recordMatchesCodesOrVS(r, codes);
        });
      } // TODO: Added @dateProperty check due to previous fix in cql4browsers in cql_qdm_patient_api hash: ddbc57


      if (this.dateRange && this.dateProperty) {
        var range = this.dateRange.execute(ctx);
        records = records.filter(function (r) {
          return range.includes(r.getDateOrInterval(_this2.dateProperty));
        });
      }

      if (Array.isArray(records)) {
        var _ctx$evaluatedRecords;

        (_ctx$evaluatedRecords = ctx.evaluatedRecords).push.apply(_ctx$evaluatedRecords, _toConsumableArray(records));
      } else {
        ctx.evaluatedRecords.push(records);
      }

      return records;
    }
  }, {
    key: "recordMatchesCodesOrVS",
    value: function recordMatchesCodesOrVS(record, codes) {
      var _this3 = this;

      if (typeIsArray(codes)) {
        return codes.some(function (c) {
          return c.hasMatch(record.getCode(_this3.codeProperty));
        });
      } else {
        return codes.hasMatch(record.getCode(this.codeProperty));
      }
    }
  }]);

  return Retrieve;
}(Expression);

module.exports = {
  Retrieve: Retrieve
};
},{"../util/util":47,"./builder":16,"./expression":22}],25:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('../datatypes/quantity'),
    Quantity = _require3.Quantity;

var _require4 = require('../datatypes/datatypes'),
    Code = _require4.Code,
    Concept = _require4.Concept;

var Element = /*#__PURE__*/function () {
  function Element(json) {
    _classCallCheck(this, Element);

    this.name = json.name;
    this.value = build(json.value);
  }

  _createClass(Element, [{
    key: "exec",
    value: function exec(ctx) {
      return this.value != null ? this.value.execute(ctx) : undefined;
    }
  }]);

  return Element;
}();

var Instance = /*#__PURE__*/function (_Expression) {
  _inherits(Instance, _Expression);

  var _super = _createSuper(Instance);

  function Instance(json) {
    var _this;

    _classCallCheck(this, Instance);

    _this = _super.call(this, json);
    _this.classType = json.classType;
    _this.element = json.element.map(function (child) {
      return new Element(child);
    });
    return _this;
  }

  _createClass(Instance, [{
    key: "exec",
    value: function exec(ctx) {
      var obj = {};

      var _iterator = _createForOfIteratorHelper(this.element),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var el = _step.value;
          obj[el.name] = el.exec(ctx);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      switch (this.classType) {
        case '{urn:hl7-org:elm-types:r1}Quantity':
          return new Quantity(obj.value, obj.unit);

        case '{urn:hl7-org:elm-types:r1}Code':
          return new Code(obj.code, obj.system, obj.version, obj.display);

        case '{urn:hl7-org:elm-types:r1}Concept':
          return new Concept(obj.codes, obj.display);

        default:
          return obj;
      }
    }
  }]);

  return Instance;
}(Expression);

module.exports = {
  Instance: Instance
};
},{"../datatypes/datatypes":6,"../datatypes/quantity":11,"./builder":16,"./expression":22}],26:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('../datatypes/quantity'),
    Quantity = _require3.Quantity,
    doAddition = _require3.doAddition,
    compare_units = _require3.compare_units,
    convert_value = _require3.convert_value;

var _require4 = require('../util/math'),
    successor = _require4.successor,
    predecessor = _require4.predecessor,
    MAX_DATETIME_VALUE = _require4.MAX_DATETIME_VALUE,
    MIN_DATETIME_VALUE = _require4.MIN_DATETIME_VALUE;

var dtivl = require('../datatypes/interval');

var Interval = /*#__PURE__*/function (_Expression) {
  _inherits(Interval, _Expression);

  var _super = _createSuper(Interval);

  function Interval(json) {
    var _this;

    _classCallCheck(this, Interval);

    _this = _super.call(this, json);
    _this.lowClosed = json.lowClosed;
    _this.highClosed = json.highClosed;
    _this.low = build(json.low);
    _this.high = build(json.high);
    return _this;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(Interval, [{
    key: "exec",
    value: function exec(ctx) {
      return new dtivl.Interval(this.low.execute(ctx), this.high.execute(ctx), this.lowClosed, this.highClosed);
    }
  }, {
    key: "isInterval",
    get: function get() {
      return true;
    }
  }]);

  return Interval;
}(Expression); // Equal is completely handled by overloaded#Equal
// NotEqual is completely handled by overloaded#Equal
// Delegated to by overloaded#Contains and overloaded#In


function doContains(interval, item, precision) {
  return interval.contains(item, precision);
} // Delegated to by overloaded#Includes and overloaded#IncludedIn


function doIncludes(interval, subinterval, precision) {
  return interval.includes(subinterval, precision);
} // Delegated to by overloaded#ProperIncludes and overloaded@ProperIncludedIn


function doProperIncludes(interval, subinterval, precision) {
  return interval.properlyIncludes(subinterval, precision);
} // Delegated to by overloaded#After


function doAfter(a, b, precision) {
  return a.after(b, precision);
} // Delegated to by overloaded#Before


function doBefore(a, b, precision) {
  return a.before(b, precision);
}

var Meets = /*#__PURE__*/function (_Expression2) {
  _inherits(Meets, _Expression2);

  var _super2 = _createSuper(Meets);

  function Meets(json) {
    var _this2;

    _classCallCheck(this, Meets);

    _this2 = _super2.call(this, json);
    _this2.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this2;
  }

  _createClass(Meets, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs = this.execArgs(ctx),
          _this$execArgs2 = _slicedToArray(_this$execArgs, 2),
          a = _this$execArgs2[0],
          b = _this$execArgs2[1];

      if (a != null && b != null) {
        return a.meets(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return Meets;
}(Expression);

var MeetsAfter = /*#__PURE__*/function (_Expression3) {
  _inherits(MeetsAfter, _Expression3);

  var _super3 = _createSuper(MeetsAfter);

  function MeetsAfter(json) {
    var _this3;

    _classCallCheck(this, MeetsAfter);

    _this3 = _super3.call(this, json);
    _this3.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this3;
  }

  _createClass(MeetsAfter, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs3 = this.execArgs(ctx),
          _this$execArgs4 = _slicedToArray(_this$execArgs3, 2),
          a = _this$execArgs4[0],
          b = _this$execArgs4[1];

      if (a != null && b != null) {
        return a.meetsAfter(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return MeetsAfter;
}(Expression);

var MeetsBefore = /*#__PURE__*/function (_Expression4) {
  _inherits(MeetsBefore, _Expression4);

  var _super4 = _createSuper(MeetsBefore);

  function MeetsBefore(json) {
    var _this4;

    _classCallCheck(this, MeetsBefore);

    _this4 = _super4.call(this, json);
    _this4.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this4;
  }

  _createClass(MeetsBefore, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs5 = this.execArgs(ctx),
          _this$execArgs6 = _slicedToArray(_this$execArgs5, 2),
          a = _this$execArgs6[0],
          b = _this$execArgs6[1];

      if (a != null && b != null) {
        return a.meetsBefore(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return MeetsBefore;
}(Expression);

var Overlaps = /*#__PURE__*/function (_Expression5) {
  _inherits(Overlaps, _Expression5);

  var _super5 = _createSuper(Overlaps);

  function Overlaps(json) {
    var _this5;

    _classCallCheck(this, Overlaps);

    _this5 = _super5.call(this, json);
    _this5.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this5;
  }

  _createClass(Overlaps, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs7 = this.execArgs(ctx),
          _this$execArgs8 = _slicedToArray(_this$execArgs7, 2),
          a = _this$execArgs8[0],
          b = _this$execArgs8[1];

      if (a != null && b != null) {
        return a.overlaps(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return Overlaps;
}(Expression);

var OverlapsAfter = /*#__PURE__*/function (_Expression6) {
  _inherits(OverlapsAfter, _Expression6);

  var _super6 = _createSuper(OverlapsAfter);

  function OverlapsAfter(json) {
    var _this6;

    _classCallCheck(this, OverlapsAfter);

    _this6 = _super6.call(this, json);
    _this6.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this6;
  }

  _createClass(OverlapsAfter, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs9 = this.execArgs(ctx),
          _this$execArgs10 = _slicedToArray(_this$execArgs9, 2),
          a = _this$execArgs10[0],
          b = _this$execArgs10[1];

      if (a != null && b != null) {
        return a.overlapsAfter(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return OverlapsAfter;
}(Expression);

var OverlapsBefore = /*#__PURE__*/function (_Expression7) {
  _inherits(OverlapsBefore, _Expression7);

  var _super7 = _createSuper(OverlapsBefore);

  function OverlapsBefore(json) {
    var _this7;

    _classCallCheck(this, OverlapsBefore);

    _this7 = _super7.call(this, json);
    _this7.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this7;
  }

  _createClass(OverlapsBefore, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs11 = this.execArgs(ctx),
          _this$execArgs12 = _slicedToArray(_this$execArgs11, 2),
          a = _this$execArgs12[0],
          b = _this$execArgs12[1];

      if (a != null && b != null) {
        return a.overlapsBefore(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return OverlapsBefore;
}(Expression); // Delegated to by overloaded#Union


function doUnion(a, b) {
  return a.union(b);
} // Delegated to by overloaded#Except


function doExcept(a, b) {
  if (a != null && b != null) {
    return a.except(b);
  } else {
    return null;
  }
} // Delegated to by overloaded#Intersect


function doIntersect(a, b) {
  if (a != null && b != null) {
    return a.intersect(b);
  } else {
    return null;
  }
}

var Width = /*#__PURE__*/function (_Expression8) {
  _inherits(Width, _Expression8);

  var _super8 = _createSuper(Width);

  function Width(json) {
    _classCallCheck(this, Width);

    return _super8.call(this, json);
  }

  _createClass(Width, [{
    key: "exec",
    value: function exec(ctx) {
      var interval = this.arg.execute(ctx);

      if (interval == null) {
        return null;
      }

      return interval.width();
    }
  }]);

  return Width;
}(Expression);

var Size = /*#__PURE__*/function (_Expression9) {
  _inherits(Size, _Expression9);

  var _super9 = _createSuper(Size);

  function Size(json) {
    _classCallCheck(this, Size);

    return _super9.call(this, json);
  }

  _createClass(Size, [{
    key: "exec",
    value: function exec(ctx) {
      var interval = this.arg.execute(ctx);

      if (interval == null) {
        return null;
      }

      return interval.size();
    }
  }]);

  return Size;
}(Expression);

var Start = /*#__PURE__*/function (_Expression10) {
  _inherits(Start, _Expression10);

  var _super10 = _createSuper(Start);

  function Start(json) {
    _classCallCheck(this, Start);

    return _super10.call(this, json);
  }

  _createClass(Start, [{
    key: "exec",
    value: function exec(ctx) {
      var interval = this.arg.execute(ctx);

      if (interval == null) {
        return null;
      }

      var start = interval.start(); // fix the timezoneOffset of minimum Datetime to match context offset

      if (start && start.isDateTime && start.equals(MIN_DATETIME_VALUE)) {
        start.timezoneOffset = ctx.getTimezoneOffset();
      }

      return start;
    }
  }]);

  return Start;
}(Expression);

var End = /*#__PURE__*/function (_Expression11) {
  _inherits(End, _Expression11);

  var _super11 = _createSuper(End);

  function End(json) {
    _classCallCheck(this, End);

    return _super11.call(this, json);
  }

  _createClass(End, [{
    key: "exec",
    value: function exec(ctx) {
      var interval = this.arg.execute(ctx);

      if (interval == null) {
        return null;
      }

      var end = interval.end(); // fix the timezoneOffset of maximum Datetime to match context offset

      if (end && end.isDateTime && end.equals(MAX_DATETIME_VALUE)) {
        end.timezoneOffset = ctx.getTimezoneOffset();
      }

      return end;
    }
  }]);

  return End;
}(Expression);

var Starts = /*#__PURE__*/function (_Expression12) {
  _inherits(Starts, _Expression12);

  var _super12 = _createSuper(Starts);

  function Starts(json) {
    var _this8;

    _classCallCheck(this, Starts);

    _this8 = _super12.call(this, json);
    _this8.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this8;
  }

  _createClass(Starts, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs13 = this.execArgs(ctx),
          _this$execArgs14 = _slicedToArray(_this$execArgs13, 2),
          a = _this$execArgs14[0],
          b = _this$execArgs14[1];

      if (a != null && b != null) {
        return a.starts(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return Starts;
}(Expression);

var Ends = /*#__PURE__*/function (_Expression13) {
  _inherits(Ends, _Expression13);

  var _super13 = _createSuper(Ends);

  function Ends(json) {
    var _this9;

    _classCallCheck(this, Ends);

    _this9 = _super13.call(this, json);
    _this9.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this9;
  }

  _createClass(Ends, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs15 = this.execArgs(ctx),
          _this$execArgs16 = _slicedToArray(_this$execArgs15, 2),
          a = _this$execArgs16[0],
          b = _this$execArgs16[1];

      if (a != null && b != null) {
        return a.ends(b, this.precision);
      } else {
        return null;
      }
    }
  }]);

  return Ends;
}(Expression);

function intervalListType(intervals) {
  // Returns one of null, 'time', 'date', 'datetime', 'quantity', 'integer', 'decimal' or 'mismatch'
  var type = null;

  var _iterator = _createForOfIteratorHelper(intervals),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var itvl = _step.value;

      if (itvl == null) {
        continue;
      }

      if (itvl.low == null && itvl.high == null) {
        //can't really determine type from this
        continue;
      } // if one end is null (but not both), the type can be determined from the other end


      var low = itvl.low != null ? itvl.low : itvl.high;
      var high = itvl.high != null ? itvl.high : itvl.low;

      if (typeof low.isTime === 'function' && low.isTime() && typeof high.isTime === 'function' && high.isTime()) {
        if (type == null) {
          type = 'time';
        } else if (type === 'time') {
          continue;
        } else {
          return 'mismatch';
        } // if an interval mixes date and datetime, type is datetime (for implicit conversion)

      } else if ((low.isDateTime || high.isDateTime) && (low.isDateTime || low.isDate) && (high.isDateTime || high.isDate)) {
        if (type == null || type === 'date') {
          type = 'datetime';
        } else if (type === 'datetime') {
          continue;
        } else {
          return 'mismatch';
        }
      } else if (low.isDate && high.isDate) {
        if (type == null) {
          type = 'date';
        } else if (type === 'date' || type === 'datetime') {
          continue;
        } else {
          return 'mismatch';
        }
      } else if (low.isQuantity && high.isQuantity) {
        if (type == null) {
          type = 'quantity';
        } else if (type === 'quantity') {
          continue;
        } else {
          return 'mismatch';
        }
      } else if (Number.isInteger(low) && Number.isInteger(high)) {
        if (type == null) {
          type = 'integer';
        } else if (type === 'integer' || type === 'decimal') {
          continue;
        } else {
          return 'mismatch';
        }
      } else if (typeof low === 'number' && typeof high === 'number') {
        if (type == null || type === 'integer') {
          type = 'decimal';
        } else if (type === 'decimal') {
          continue;
        } else {
          return 'mismatch';
        } //if we are here ends are mismatched

      } else {
        return 'mismatch';
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return type;
}

var Expand = /*#__PURE__*/function (_Expression14) {
  _inherits(Expand, _Expression14);

  var _super14 = _createSuper(Expand);

  function Expand(json) {
    _classCallCheck(this, Expand);

    return _super14.call(this, json);
  }

  _createClass(Expand, [{
    key: "exec",
    value: function exec(ctx) {
      // expand(argument List<Interval<T>>, per Quantity) List<Interval<T>>
      var defaultPer, expandFunction;

      var _this$execArgs17 = this.execArgs(ctx),
          _this$execArgs18 = _slicedToArray(_this$execArgs17, 2),
          intervals = _this$execArgs18[0],
          per = _this$execArgs18[1];

      var type = intervalListType(intervals);

      if (type === 'mismatch') {
        throw new Error('List of intervals contains mismatched types.');
      }

      if (type == null) {
        return null;
      } // this step collapses overlaps, and also returns a clone of intervals so we can feel free to mutate


      intervals = collapseIntervals(intervals, per);

      if (intervals.length === 0) {
        return [];
      }

      if (['time', 'date', 'datetime'].includes(type)) {
        expandFunction = this.expandDTishInterval;

        defaultPer = function defaultPer(interval) {
          return new Quantity(1, interval.low.getPrecision());
        };
      } else if (['quantity'].includes(type)) {
        expandFunction = this.expandQuantityInterval;

        defaultPer = function defaultPer(interval) {
          return new Quantity(1, interval.low.unit);
        };
      } else if (['integer', 'decimal'].includes(type)) {
        expandFunction = this.expandNumericInterval;

        defaultPer = function defaultPer(interval) {
          return new Quantity(1, '1');
        };
      } else {
        throw new Error('Interval list type not yet supported.');
      }

      var results = [];

      var _iterator2 = _createForOfIteratorHelper(intervals),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var interval = _step2.value;

          if (interval == null) {
            continue;
          } // We do not support open ended intervals since result would likely be too long


          if (interval.low == null || interval.high == null) {
            return null;
          }

          if (type === 'datetime') {
            //support for implicitly converting dates to datetime
            interval.low = interval.low.getDateTime();
            interval.high = interval.high.getDateTime();
          }

          per = per != null ? per : defaultPer(interval);
          var items = expandFunction.call(this, interval, per);

          if (items === null) {
            return null;
          }

          results.push.apply(results, _toConsumableArray(items || []));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return results;
    }
  }, {
    key: "expandDTishInterval",
    value: function expandDTishInterval(interval, per) {
      if (['week', 'weeks'].includes(per.unit)) {
        per.value *= 7;
        per.unit = 'day';
      } // Precision Checks
      // return null if precision not applicable (e.g. gram, or minutes for dates)


      if (!interval.low.constructor.FIELDS.includes(per.unit)) {
        return null;
      } // open interval with null boundaries do not contribute to output
      // closed interval with null boundaries are not allowed for performance reasons


      if (interval.low == null || interval.high == null) {
        return null;
      }

      var low = interval.lowClosed ? interval.low : interval.low.successor();
      var high = interval.highClosed ? interval.high : interval.high.predecessor();

      if (low.after(high)) {
        return [];
      }

      if (interval.low.isLessPrecise(per.unit) || interval.high.isLessPrecise(per.unit)) {
        return [];
      }

      var current_low = low;
      var results = [];
      low = this.truncateToPrecision(low, per.unit);
      high = this.truncateToPrecision(high, per.unit);
      var current_high = current_low.add(per.value, per.unit).predecessor();
      var intervalToAdd = new dtivl.Interval(current_low, current_high, true, true);

      while (intervalToAdd.high.sameOrBefore(high)) {
        results.push(intervalToAdd);
        current_low = current_low.add(per.value, per.unit);
        current_high = current_low.add(per.value, per.unit).predecessor();
        intervalToAdd = new dtivl.Interval(current_low, current_high, true, true);
      }

      return results;
    }
  }, {
    key: "truncateToPrecision",
    value: function truncateToPrecision(value, unit) {
      // If interval boundaries are more precise than per quantity, truncate to
      // the precision specified by the per
      var shouldTruncate = false;

      var _iterator3 = _createForOfIteratorHelper(value.constructor.FIELDS),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var field = _step3.value;

          if (shouldTruncate) {
            value[field] = null;
          }

          if (field === unit) {
            // Start truncating after this unit
            shouldTruncate = true;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return value;
    }
  }, {
    key: "expandQuantityInterval",
    value: function expandQuantityInterval(interval, per) {
      // we want to convert everything to the more precise of the interval.low or per
      var result_units;

      if (compare_units(interval.low.unit, per.unit) > 0) {
        //interval.low.unit is 'bigger' aka les precise
        result_units = per.unit;
      } else {
        result_units = interval.low.unit;
      }

      var low_value = convert_value(interval.low.value, interval.low.unit, result_units);
      var high_value = convert_value(interval.high.value, interval.high.unit, result_units);
      var per_value = convert_value(per.value, per.unit, result_units); // return null if unit conversion failed, must have mismatched units

      if (!(low_value != null && high_value != null && per_value != null)) {
        return null;
      }

      var results = this.makeNumericIntervalList(low_value, high_value, interval.lowClosed, interval.highClosed, per_value);

      var _iterator4 = _createForOfIteratorHelper(results),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var itvl = _step4.value;
          itvl.low = new Quantity(itvl.low, result_units);
          itvl.high = new Quantity(itvl.high, result_units);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return results;
    }
  }, {
    key: "expandNumericInterval",
    value: function expandNumericInterval(interval, per) {
      if (per.unit !== '1' && per.unit !== '') {
        return null;
      }

      return this.makeNumericIntervalList(interval.low, interval.high, interval.lowClosed, interval.highClosed, per.value);
    }
  }, {
    key: "makeNumericIntervalList",
    value: function makeNumericIntervalList(low, high, lowClosed, highClosed, perValue) {
      // If the per value is a Decimal (has a .), 8 decimal places are appropriate
      // Integers should have 0 Decimal places
      var perIsDecimal = perValue.toString().includes('.');
      var decimalPrecision = perIsDecimal ? 8 : 0;
      low = lowClosed ? low : successor(low);
      high = highClosed ? high : predecessor(high); // If the interval boundaries are more precise than the per quantity, the
      // more precise values will be truncated to the precision specified by the
      // per quantity.

      low = truncateDecimal(low, decimalPrecision);
      high = truncateDecimal(high, decimalPrecision);

      if (low > high) {
        return [];
      }

      if (low == null || high == null) {
        return [];
      }

      var perUnitSize = perIsDecimal ? 0.00000001 : 1;

      if (low === high && Number.isInteger(low) && Number.isInteger(high) && !Number.isInteger(perValue)) {
        high = parseFloat((high + 1).toFixed(decimalPrecision));
      }

      var current_low = low;
      var results = [];

      if (perValue > high - low + perUnitSize) {
        return [];
      }

      var current_high = parseFloat((current_low + perValue - perUnitSize).toFixed(decimalPrecision));
      var intervalToAdd = new dtivl.Interval(current_low, current_high, true, true);

      while (intervalToAdd.high <= high) {
        results.push(intervalToAdd);
        current_low = parseFloat((current_low + perValue).toFixed(decimalPrecision));
        current_high = parseFloat((current_low + perValue - perUnitSize).toFixed(decimalPrecision));
        intervalToAdd = new dtivl.Interval(current_low, current_high, true, true);
      }

      return results;
    }
  }]);

  return Expand;
}(Expression);

var Collapse = /*#__PURE__*/function (_Expression15) {
  _inherits(Collapse, _Expression15);

  var _super15 = _createSuper(Collapse);

  function Collapse(json) {
    _classCallCheck(this, Collapse);

    return _super15.call(this, json);
  }

  _createClass(Collapse, [{
    key: "exec",
    value: function exec(ctx) {
      // collapse(argument List<Interval<T>>, per Quantity) List<Interval<T>>
      var _this$execArgs19 = this.execArgs(ctx),
          _this$execArgs20 = _slicedToArray(_this$execArgs19, 2),
          intervals = _this$execArgs20[0],
          perWidth = _this$execArgs20[1];

      return collapseIntervals(intervals, perWidth);
    }
  }]);

  return Collapse;
}(Expression);

function collapseIntervals(intervals, perWidth) {
  // Clone intervals so this function remains idempotent
  var intervalsClone = [];

  var _iterator5 = _createForOfIteratorHelper(intervals),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var interval = _step5.value;

      // The spec says to ignore null intervals
      if (interval != null) {
        intervalsClone.push(interval.copy());
      }
    } // If the list is null, return null

  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  if (intervals == null) {
    return null;
  } else if (intervalsClone.length <= 1) {
    return intervalsClone;
  } else {
    // If the per argument is null, the default unit interval for the point type
    // of the intervals involved will be used (i.e. the interval that has a
    // width equal to the result of the successor function for the point type).
    if (perWidth == null) {
      perWidth = intervalsClone[0].getPointSize();
    } // sort intervalsClone by start


    intervalsClone.sort(function (a, b) {
      if (a.low && typeof a.low.before === 'function') {
        if (b.low != null && a.low.before(b.low)) {
          return -1;
        }

        if (b.low == null || a.low.after(b.low)) {
          return 1;
        }
      } else if (a.low != null && b.low != null) {
        if (a.low < b.low) {
          return -1;
        }

        if (a.low > b.low) {
          return 1;
        }
      } else if (a.low != null && b.low == null) {
        return 1;
      } else if (a.low == null && b.low != null) {
        return -1;
      } // if both lows are undefined, sort by high


      if (a.high && typeof a.high.before === 'function') {
        if (b.high == null || a.high.before(b.high)) {
          return -1;
        }

        if (a.high.after(b.high)) {
          return 1;
        }
      } else if (a.high != null && b.high != null) {
        if (a.high < b.high) {
          return -1;
        }

        if (a.high > b.high) {
          return 1;
        }
      } else if (a.high != null && b.high == null) {
        return -1;
      } else if (a.high == null && b.high != null) {
        return 1;
      }

      return 0;
    }); // collapse intervals as necessary

    var collapsedIntervals = [];
    var a = intervalsClone.shift();
    var b = intervalsClone.shift();

    while (b) {
      if (b.low && typeof b.low.durationBetween === 'function') {
        // handle DateTimes using durationBetween
        if (a.high != null ? a.high.sameOrAfter(b.low) : undefined) {
          // overlap
          if (b.high == null || b.high.after(a.high)) {
            a.high = b.high;
          }
        } else if ((a.high != null ? a.high.durationBetween(b.low, perWidth.unit).high : undefined) <= perWidth.value) {
          a.high = b.high;
        } else {
          collapsedIntervals.push(a);
          a = b;
        }
      } else if (b.low && typeof b.low.sameOrBefore === 'function') {
        if (a.high != null && b.low.sameOrBefore(doAddition(a.high, perWidth))) {
          if (b.high == null || b.high.after(a.high)) {
            a.high = b.high;
          }
        } else {
          collapsedIntervals.push(a);
          a = b;
        }
      } else {
        if (b.low - a.high <= perWidth.value) {
          if (b.high > a.high || b.high == null) {
            a.high = b.high;
          }
        } else {
          collapsedIntervals.push(a);
          a = b;
        }
      }

      b = intervalsClone.shift();
    }

    collapsedIntervals.push(a);
    return collapsedIntervals;
  }
}

function truncateDecimal(decimal, decimalPlaces) {
  // like parseFloat().toFixed() but floor rather than round
  // Needed for when per precision is less than the interval input precision
  var re = new RegExp('^-?\\d+(?:.\\d{0,' + (decimalPlaces || -1) + '})?');
  return parseFloat(decimal.toString().match(re)[0]);
}

module.exports = {
  Collapse: Collapse,
  End: End,
  Ends: Ends,
  Expand: Expand,
  Interval: Interval,
  Meets: Meets,
  MeetsAfter: MeetsAfter,
  MeetsBefore: MeetsBefore,
  Overlaps: Overlaps,
  OverlapsAfter: OverlapsAfter,
  OverlapsBefore: OverlapsBefore,
  Size: Size,
  Start: Start,
  Starts: Starts,
  Width: Width,
  doContains: doContains,
  doIncludes: doIncludes,
  doProperIncludes: doProperIncludes,
  doAfter: doAfter,
  doBefore: doBefore,
  doUnion: doUnion,
  doExcept: doExcept,
  doIntersect: doIntersect
};
},{"../datatypes/interval":9,"../datatypes/quantity":11,"../util/math":46,"./builder":16,"./expression":22}],27:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Library = /*#__PURE__*/function () {
  function Library(json, libraryManager) {
    _classCallCheck(this, Library);

    this.source = json; // usings

    var usingDefs = json.library.usings && json.library.usings.def || [];
    this.usings = usingDefs.filter(function (u) {
      return u.localIdentifier !== 'System';
    }).map(function (u) {
      return {
        name: u.localIdentifier,
        version: u.version
      };
    }); // parameters

    var paramDefs = json.library.parameters && json.library.parameters.def || [];
    this.parameters = {};

    var _iterator = _createForOfIteratorHelper(paramDefs),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var param = _step.value;
        this.parameters[param.name] = new ParameterDef(param);
      } // code systems

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var csDefs = json.library.codeSystems && json.library.codeSystems.def || [];
    this.codesystems = {};

    var _iterator2 = _createForOfIteratorHelper(csDefs),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var codesystem = _step2.value;
        this.codesystems[codesystem.name] = new CodeSystemDef(codesystem);
      } // value sets

    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    var vsDefs = json.library.valueSets && json.library.valueSets.def || [];
    this.valuesets = {};

    var _iterator3 = _createForOfIteratorHelper(vsDefs),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var valueset = _step3.value;
        this.valuesets[valueset.name] = new ValueSetDef(valueset);
      } // codes

    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    var codeDefs = json.library.codes && json.library.codes.def || [];
    this.codes = {};

    var _iterator4 = _createForOfIteratorHelper(codeDefs),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var code = _step4.value;
        this.codes[code.name] = new CodeDef(code);
      } // concepts

    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    var conceptDefs = json.library.concepts && json.library.concepts.def || [];
    this.concepts = {};

    var _iterator5 = _createForOfIteratorHelper(conceptDefs),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var concept = _step5.value;
        this.concepts[concept.name] = new ConceptDef(concept);
      } // expressions

    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }

    var exprDefs = json.library.statements && json.library.statements.def || [];
    this.expressions = {};
    this.functions = {};

    var _iterator6 = _createForOfIteratorHelper(exprDefs),
        _step6;

    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var expr = _step6.value;

        if (expr.type === 'FunctionDef') {
          if (!this.functions[expr.name]) {
            this.functions[expr.name] = [];
          }

          this.functions[expr.name].push(new FunctionDef(expr));
        } else {
          this.expressions[expr.name] = new ExpressionDef(expr);
        }
      } // includes

    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }

    var inclDefs = json.library.includes && json.library.includes.def || [];
    this.includes = {};

    var _iterator7 = _createForOfIteratorHelper(inclDefs),
        _step7;

    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var incl = _step7.value;

        if (libraryManager) {
          this.includes[incl.localIdentifier] = libraryManager.resolve(incl.path, incl.version);
        }
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
  }

  _createClass(Library, [{
    key: "getFunction",
    value: function getFunction(identifier) {
      return this.functions[identifier];
    }
  }, {
    key: "get",
    value: function get(identifier) {
      return this.expressions[identifier] || this.includes[identifier] || this.getFunction(identifier);
    }
  }, {
    key: "getValueSet",
    value: function getValueSet(identifier, libraryName) {
      if (this.valuesets[identifier] != null) {
        return this.valuesets[identifier];
      }

      return this.includes[libraryName] != null ? this.includes[libraryName].valuesets[identifier] : undefined;
    }
  }, {
    key: "getCodeSystem",
    value: function getCodeSystem(identifier) {
      return this.codesystems[identifier];
    }
  }, {
    key: "getCode",
    value: function getCode(identifier) {
      return this.codes[identifier];
    }
  }, {
    key: "getConcept",
    value: function getConcept(identifier) {
      return this.concepts[identifier];
    }
  }, {
    key: "getParameter",
    value: function getParameter(name) {
      return this.parameters[name];
    }
  }]);

  return Library;
}(); // These requires are at the end of the file because having them first in the
// file creates errors due to the order that the libraries are loaded.


var _require = require('./expressions'),
    ExpressionDef = _require.ExpressionDef,
    FunctionDef = _require.FunctionDef,
    ParameterDef = _require.ParameterDef,
    ValueSetDef = _require.ValueSetDef,
    CodeSystemDef = _require.CodeSystemDef,
    CodeDef = _require.CodeDef,
    ConceptDef = _require.ConceptDef;

module.exports = {
  Library: Library
};
},{"./expressions":23}],28:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression,
    UnimplementedExpression = _require.UnimplementedExpression;

var _require2 = require('./builder'),
    build = _require2.build;

var _require3 = require('../util/util'),
    typeIsArray = _require3.typeIsArray;

var _require4 = require('../util/comparison'),
    equals = _require4.equals;

var List = /*#__PURE__*/function (_Expression) {
  _inherits(List, _Expression);

  var _super = _createSuper(List);

  function List(json) {
    var _this;

    _classCallCheck(this, List);

    _this = _super.call(this, json);
    _this.elements = build(json.element) || [];
    return _this;
  }

  _createClass(List, [{
    key: "exec",
    value: function exec(ctx) {
      return this.elements.map(function (item) {
        return item.execute(ctx);
      });
    }
  }, {
    key: "isList",
    get: function get() {
      return true;
    }
  }]);

  return List;
}(Expression);

var Exists = /*#__PURE__*/function (_Expression2) {
  _inherits(Exists, _Expression2);

  var _super2 = _createSuper(Exists);

  function Exists(json) {
    _classCallCheck(this, Exists);

    return _super2.call(this, json);
  }

  _createClass(Exists, [{
    key: "exec",
    value: function exec(ctx) {
      var list = this.execArgs(ctx); // if list exists and has non empty length we need to make sure it isnt just full of nulls

      if (list) {
        return list.some(function (item) {
          return item != null;
        });
      }

      return false;
    }
  }]);

  return Exists;
}(Expression); // Equal is completely handled by overloaded#Equal
// NotEqual is completely handled by overloaded#Equal
// Delegated to by overloaded#Union


function doUnion(a, b) {
  var distinct = doDistinct(a.concat(b));
  return removeDuplicateNulls(distinct);
} // Delegated to by overloaded#Except


function doExcept(a, b) {
  var distinct = doDistinct(a);
  var setList = removeDuplicateNulls(distinct);
  return setList.filter(function (item) {
    return !doContains(b, item);
  });
} // Delegated to by overloaded#Intersect


function doIntersect(a, b) {
  var distinct = doDistinct(a);
  var setList = removeDuplicateNulls(distinct);
  return setList.filter(function (item) {
    return doContains(b, item);
  });
} // ELM-only, not a product of CQL


var Times = /*#__PURE__*/function (_UnimplementedExpress) {
  _inherits(Times, _UnimplementedExpress);

  var _super3 = _createSuper(Times);

  function Times() {
    _classCallCheck(this, Times);

    return _super3.apply(this, arguments);
  }

  return Times;
}(UnimplementedExpression); // ELM-only, not a product of CQL


var Filter = /*#__PURE__*/function (_UnimplementedExpress2) {
  _inherits(Filter, _UnimplementedExpress2);

  var _super4 = _createSuper(Filter);

  function Filter() {
    _classCallCheck(this, Filter);

    return _super4.apply(this, arguments);
  }

  return Filter;
}(UnimplementedExpression);

var SingletonFrom = /*#__PURE__*/function (_Expression3) {
  _inherits(SingletonFrom, _Expression3);

  var _super5 = _createSuper(SingletonFrom);

  function SingletonFrom(json) {
    _classCallCheck(this, SingletonFrom);

    return _super5.call(this, json);
  }

  _createClass(SingletonFrom, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null && arg.length > 1) {
        throw new Error("IllegalArgument: 'SingletonFrom' requires a 0 or 1 arg array");
      } else if (arg != null && arg.length === 1) {
        return arg[0];
      } else {
        return null;
      }
    }
  }]);

  return SingletonFrom;
}(Expression);

var ToList = /*#__PURE__*/function (_Expression4) {
  _inherits(ToList, _Expression4);

  var _super6 = _createSuper(ToList);

  function ToList(json) {
    _classCallCheck(this, ToList);

    return _super6.call(this, json);
  }

  _createClass(ToList, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return [arg];
      } else {
        return [];
      }
    }
  }]);

  return ToList;
}(Expression);

var IndexOf = /*#__PURE__*/function (_Expression5) {
  _inherits(IndexOf, _Expression5);

  var _super7 = _createSuper(IndexOf);

  function IndexOf(json) {
    var _this2;

    _classCallCheck(this, IndexOf);

    _this2 = _super7.call(this, json);
    _this2.source = build(json.source);
    _this2.element = build(json.element);
    return _this2;
  }

  _createClass(IndexOf, [{
    key: "exec",
    value: function exec(ctx) {
      var index;
      var src = this.source.execute(ctx);
      var el = this.element.execute(ctx);

      if (src == null || el == null) {
        return null;
      }

      for (var i = 0; i < src.length; i++) {
        var itm = src[i];

        if (equals(itm, el)) {
          index = i;
          break;
        }
      }

      if (index != null) {
        return index;
      } else {
        return -1;
      }
    }
  }]);

  return IndexOf;
}(Expression); // Indexer is completely handled by overloaded#Indexer
// Delegated to by overloaded#Contains and overloaded#In


function doContains(container, item) {
  return container.some(function (element) {
    return equals(element, item);
  });
} // Delegated to by overloaded#Includes and overloaded@IncludedIn


function doIncludes(list, sublist) {
  return sublist.every(function (x) {
    return doContains(list, x);
  });
} // Delegated to by overloaded#ProperIncludes and overloaded@ProperIncludedIn


function doProperIncludes(list, sublist) {
  return list.length > sublist.length && doIncludes(list, sublist);
} // ELM-only, not a product of CQL


var ForEach = /*#__PURE__*/function (_UnimplementedExpress3) {
  _inherits(ForEach, _UnimplementedExpress3);

  var _super8 = _createSuper(ForEach);

  function ForEach() {
    _classCallCheck(this, ForEach);

    return _super8.apply(this, arguments);
  }

  return ForEach;
}(UnimplementedExpression);

var Flatten = /*#__PURE__*/function (_Expression6) {
  _inherits(Flatten, _Expression6);

  var _super9 = _createSuper(Flatten);

  function Flatten(json) {
    _classCallCheck(this, Flatten);

    return _super9.call(this, json);
  }

  _createClass(Flatten, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (typeIsArray(arg) && arg.every(function (x) {
        return typeIsArray(x);
      })) {
        return arg.reduce(function (x, y) {
          return x.concat(y);
        }, []);
      } else {
        return arg;
      }
    }
  }]);

  return Flatten;
}(Expression);

var Distinct = /*#__PURE__*/function (_Expression7) {
  _inherits(Distinct, _Expression7);

  var _super10 = _createSuper(Distinct);

  function Distinct(json) {
    _classCallCheck(this, Distinct);

    return _super10.call(this, json);
  }

  _createClass(Distinct, [{
    key: "exec",
    value: function exec(ctx) {
      var result = this.execArgs(ctx);

      if (result == null) {
        return null;
      }

      return doDistinct(result);
    }
  }]);

  return Distinct;
}(Expression);

function doDistinct(list) {
  var distinct = [];
  list.forEach(function (item) {
    var isNew = distinct.every(function (seenItem) {
      return !equals(item, seenItem);
    });

    if (isNew) {
      distinct.push(item);
    }
  });
  return distinct;
}

function removeDuplicateNulls(list) {
  // Remove duplicate null elements
  var firstNullFound = false;
  var setList = [];

  var _iterator = _createForOfIteratorHelper(list),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;

      if (item !== null) {
        setList.push(item);
      } else if (item === null && !firstNullFound) {
        setList.push(item);
        firstNullFound = true;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return setList;
} // ELM-only, not a product of CQL


var Current = /*#__PURE__*/function (_UnimplementedExpress4) {
  _inherits(Current, _UnimplementedExpress4);

  var _super11 = _createSuper(Current);

  function Current() {
    _classCallCheck(this, Current);

    return _super11.apply(this, arguments);
  }

  return Current;
}(UnimplementedExpression);

var First = /*#__PURE__*/function (_Expression8) {
  _inherits(First, _Expression8);

  var _super12 = _createSuper(First);

  function First(json) {
    var _this3;

    _classCallCheck(this, First);

    _this3 = _super12.call(this, json);
    _this3.source = build(json.source);
    return _this3;
  }

  _createClass(First, [{
    key: "exec",
    value: function exec(ctx) {
      var src = this.source.exec(ctx);

      if (src != null && typeIsArray(src) && src.length > 0) {
        return src[0];
      } else {
        return null;
      }
    }
  }]);

  return First;
}(Expression);

var Last = /*#__PURE__*/function (_Expression9) {
  _inherits(Last, _Expression9);

  var _super13 = _createSuper(Last);

  function Last(json) {
    var _this4;

    _classCallCheck(this, Last);

    _this4 = _super13.call(this, json);
    _this4.source = build(json.source);
    return _this4;
  }

  _createClass(Last, [{
    key: "exec",
    value: function exec(ctx) {
      var src = this.source.exec(ctx);

      if (src != null && typeIsArray(src) && src.length > 0) {
        return src[src.length - 1];
      } else {
        return null;
      }
    }
  }]);

  return Last;
}(Expression); // Length is completely handled by overloaded#Length


module.exports = {
  Current: Current,
  Distinct: Distinct,
  Exists: Exists,
  Filter: Filter,
  First: First,
  Flatten: Flatten,
  ForEach: ForEach,
  IndexOf: IndexOf,
  Last: Last,
  List: List,
  SingletonFrom: SingletonFrom,
  Times: Times,
  ToList: ToList,
  doContains: doContains,
  doIncludes: doIncludes,
  doProperIncludes: doProperIncludes,
  doUnion: doUnion,
  doExcept: doExcept,
  doIntersect: doIntersect
};
},{"../util/comparison":45,"../util/util":47,"./builder":16,"./expression":22}],29:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var Literal = /*#__PURE__*/function (_Expression) {
  _inherits(Literal, _Expression);

  var _super = _createSuper(Literal);

  _createClass(Literal, null, [{
    key: "from",
    value: function from(json) {
      switch (json.valueType) {
        case '{urn:hl7-org:elm-types:r1}Boolean':
          return new BooleanLiteral(json);

        case '{urn:hl7-org:elm-types:r1}Integer':
          return new IntegerLiteral(json);

        case '{urn:hl7-org:elm-types:r1}Decimal':
          return new DecimalLiteral(json);

        case '{urn:hl7-org:elm-types:r1}String':
          return new StringLiteral(json);

        default:
          return new Literal(json);
      }
    }
  }]);

  function Literal(json) {
    var _this;

    _classCallCheck(this, Literal);

    _this = _super.call(this, json);
    _this.valueType = json.valueType;
    _this.value = json.value;
    return _this;
  }

  _createClass(Literal, [{
    key: "exec",
    value: function exec(ctx) {
      return this.value;
    }
  }]);

  return Literal;
}(Expression); // The following are not defined in ELM, but helpful for execution


var BooleanLiteral = /*#__PURE__*/function (_Literal) {
  _inherits(BooleanLiteral, _Literal);

  var _super2 = _createSuper(BooleanLiteral);

  function BooleanLiteral(json) {
    var _this2;

    _classCallCheck(this, BooleanLiteral);

    _this2 = _super2.call(this, json);
    _this2.value = _this2.value === 'true';
    return _this2;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(BooleanLiteral, [{
    key: "exec",
    value: function exec(ctx) {
      return this.value;
    }
  }, {
    key: "isBooleanLiteral",
    get: function get() {
      return true;
    }
  }]);

  return BooleanLiteral;
}(Literal);

var IntegerLiteral = /*#__PURE__*/function (_Literal2) {
  _inherits(IntegerLiteral, _Literal2);

  var _super3 = _createSuper(IntegerLiteral);

  function IntegerLiteral(json) {
    var _this3;

    _classCallCheck(this, IntegerLiteral);

    _this3 = _super3.call(this, json);
    _this3.value = parseInt(_this3.value, 10);
    return _this3;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(IntegerLiteral, [{
    key: "exec",
    value: function exec(ctx) {
      return this.value;
    }
  }, {
    key: "isIntegerLiteral",
    get: function get() {
      return true;
    }
  }]);

  return IntegerLiteral;
}(Literal);

var DecimalLiteral = /*#__PURE__*/function (_Literal3) {
  _inherits(DecimalLiteral, _Literal3);

  var _super4 = _createSuper(DecimalLiteral);

  function DecimalLiteral(json) {
    var _this4;

    _classCallCheck(this, DecimalLiteral);

    _this4 = _super4.call(this, json);
    _this4.value = parseFloat(_this4.value);
    return _this4;
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(DecimalLiteral, [{
    key: "exec",
    value: function exec(ctx) {
      return this.value;
    }
  }, {
    key: "isDecimalLiteral",
    get: function get() {
      return true;
    }
  }]);

  return DecimalLiteral;
}(Literal);

var StringLiteral = /*#__PURE__*/function (_Literal4) {
  _inherits(StringLiteral, _Literal4);

  var _super5 = _createSuper(StringLiteral);

  function StringLiteral(json) {
    _classCallCheck(this, StringLiteral);

    return _super5.call(this, json);
  } // Define a simple getter to allow type-checking of this class without instanceof
  // and in a way that survives minification (as opposed to checking constructor.name)


  _createClass(StringLiteral, [{
    key: "exec",
    value: function exec(ctx) {
      // TODO: Remove these replacements when CQL-to-ELM fixes bug: https://github.com/cqframework/clinical_quality_language/issues/82
      return this.value.replace(/\\'/g, "'").replace(/\\"/g, '"');
    }
  }, {
    key: "isStringLiteral",
    get: function get() {
      return true;
    }
  }]);

  return StringLiteral;
}(Literal);

module.exports = {
  BooleanLiteral: BooleanLiteral,
  DecimalLiteral: DecimalLiteral,
  IntegerLiteral: IntegerLiteral,
  Literal: Literal,
  StringLiteral: StringLiteral
};
},{"./expression":22}],30:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('../datatypes/datatypes'),
    ThreeValuedLogic = _require2.ThreeValuedLogic;

var And = /*#__PURE__*/function (_Expression) {
  _inherits(And, _Expression);

  var _super = _createSuper(And);

  function And(json) {
    _classCallCheck(this, And);

    return _super.call(this, json);
  }

  _createClass(And, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.and.apply(ThreeValuedLogic, _toConsumableArray(this.execArgs(ctx)));
    }
  }]);

  return And;
}(Expression);

var Or = /*#__PURE__*/function (_Expression2) {
  _inherits(Or, _Expression2);

  var _super2 = _createSuper(Or);

  function Or(json) {
    _classCallCheck(this, Or);

    return _super2.call(this, json);
  }

  _createClass(Or, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.or.apply(ThreeValuedLogic, _toConsumableArray(this.execArgs(ctx)));
    }
  }]);

  return Or;
}(Expression);

var Not = /*#__PURE__*/function (_Expression3) {
  _inherits(Not, _Expression3);

  var _super3 = _createSuper(Not);

  function Not(json) {
    _classCallCheck(this, Not);

    return _super3.call(this, json);
  }

  _createClass(Not, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.not(this.execArgs(ctx));
    }
  }]);

  return Not;
}(Expression);

var Xor = /*#__PURE__*/function (_Expression4) {
  _inherits(Xor, _Expression4);

  var _super4 = _createSuper(Xor);

  function Xor(json) {
    _classCallCheck(this, Xor);

    return _super4.call(this, json);
  }

  _createClass(Xor, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.xor.apply(ThreeValuedLogic, _toConsumableArray(this.execArgs(ctx)));
    }
  }]);

  return Xor;
}(Expression);

var IsTrue = /*#__PURE__*/function (_Expression5) {
  _inherits(IsTrue, _Expression5);

  var _super5 = _createSuper(IsTrue);

  function IsTrue(json) {
    _classCallCheck(this, IsTrue);

    return _super5.call(this, json);
  }

  _createClass(IsTrue, [{
    key: "exec",
    value: function exec(ctx) {
      return true === this.execArgs(ctx);
    }
  }]);

  return IsTrue;
}(Expression);

var IsFalse = /*#__PURE__*/function (_Expression6) {
  _inherits(IsFalse, _Expression6);

  var _super6 = _createSuper(IsFalse);

  function IsFalse(json) {
    _classCallCheck(this, IsFalse);

    return _super6.call(this, json);
  }

  _createClass(IsFalse, [{
    key: "exec",
    value: function exec(ctx) {
      return false === this.execArgs(ctx);
    }
  }]);

  return IsFalse;
}(Expression);

module.exports = {
  And: And,
  IsFalse: IsFalse,
  IsTrue: IsTrue,
  Not: Not,
  Or: Or,
  Xor: Xor
};
},{"../datatypes/datatypes":6,"./expression":22}],31:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var Null = /*#__PURE__*/function (_Expression) {
  _inherits(Null, _Expression);

  var _super = _createSuper(Null);

  function Null(json) {
    _classCallCheck(this, Null);

    return _super.call(this, json);
  }

  _createClass(Null, [{
    key: "exec",
    value: function exec(ctx) {
      return null;
    }
  }]);

  return Null;
}(Expression);

var IsNull = /*#__PURE__*/function (_Expression2) {
  _inherits(IsNull, _Expression2);

  var _super2 = _createSuper(IsNull);

  function IsNull(json) {
    _classCallCheck(this, IsNull);

    return _super2.call(this, json);
  }

  _createClass(IsNull, [{
    key: "exec",
    value: function exec(ctx) {
      return this.execArgs(ctx) == null;
    }
  }]);

  return IsNull;
}(Expression);

var Coalesce = /*#__PURE__*/function (_Expression3) {
  _inherits(Coalesce, _Expression3);

  var _super3 = _createSuper(Coalesce);

  function Coalesce(json) {
    _classCallCheck(this, Coalesce);

    return _super3.call(this, json);
  }

  _createClass(Coalesce, [{
    key: "exec",
    value: function exec(ctx) {
      var _iterator = _createForOfIteratorHelper(this.args),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var arg = _step.value;
          var result = arg.execute(ctx); // if a single arg that's a list, coalesce over the list

          if (this.args.length === 1 && Array.isArray(result)) {
            var item = result.find(function (item) {
              return item != null;
            });

            if (item != null) {
              return item;
            }
          } else {
            if (result != null) {
              return result;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return null;
    }
  }]);

  return Coalesce;
}(Expression);

module.exports = {
  Coalesce: Coalesce,
  IsNull: IsNull,
  Null: Null
};
},{"./expression":22}],32:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('../datatypes/logic'),
    ThreeValuedLogic = _require2.ThreeValuedLogic;

var _require3 = require('../datatypes/datetime'),
    DateTime = _require3.DateTime;

var _require4 = require('../util/util'),
    typeIsArray = _require4.typeIsArray;

var _require5 = require('../util/comparison'),
    equals = _require5.equals,
    equivalent = _require5.equivalent;

var DT = require('./datetime');

var LIST = require('./list');

var IVL = require('./interval');

var Equal = /*#__PURE__*/function (_Expression) {
  _inherits(Equal, _Expression);

  var _super = _createSuper(Equal);

  function Equal(json) {
    _classCallCheck(this, Equal);

    return _super.call(this, json);
  }

  _createClass(Equal, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return equals.apply(void 0, _toConsumableArray(this.execArgs(ctx)));
    }
  }]);

  return Equal;
}(Expression);

var Equivalent = /*#__PURE__*/function (_Expression2) {
  _inherits(Equivalent, _Expression2);

  var _super2 = _createSuper(Equivalent);

  function Equivalent(json) {
    _classCallCheck(this, Equivalent);

    return _super2.call(this, json);
  }

  _createClass(Equivalent, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs = this.execArgs(ctx),
          _this$execArgs2 = _slicedToArray(_this$execArgs, 2),
          a = _this$execArgs2[0],
          b = _this$execArgs2[1];

      if (a == null && b == null) {
        return true;
      } else if (a == null || b == null) {
        return false;
      } else {
        return equivalent(a, b);
      }
    }
  }]);

  return Equivalent;
}(Expression);

var NotEqual = /*#__PURE__*/function (_Expression3) {
  _inherits(NotEqual, _Expression3);

  var _super3 = _createSuper(NotEqual);

  function NotEqual(json) {
    _classCallCheck(this, NotEqual);

    return _super3.call(this, json);
  }

  _createClass(NotEqual, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args[0] == null || args[1] == null) {
        return null;
      }

      return ThreeValuedLogic.not(equals.apply(void 0, _toConsumableArray(this.execArgs(ctx))));
    }
  }]);

  return NotEqual;
}(Expression);

var Union = /*#__PURE__*/function (_Expression4) {
  _inherits(Union, _Expression4);

  var _super4 = _createSuper(Union);

  function Union(json) {
    _classCallCheck(this, Union);

    return _super4.call(this, json);
  }

  _createClass(Union, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs3 = this.execArgs(ctx),
          _this$execArgs4 = _slicedToArray(_this$execArgs3, 2),
          a = _this$execArgs4[0],
          b = _this$execArgs4[1];

      if (a == null || b == null) {
        return null;
      }

      var lib = typeIsArray(a) ? LIST : IVL;
      return lib.doUnion(a, b);
    }
  }]);

  return Union;
}(Expression);

var Except = /*#__PURE__*/function (_Expression5) {
  _inherits(Except, _Expression5);

  var _super5 = _createSuper(Except);

  function Except(json) {
    _classCallCheck(this, Except);

    return _super5.call(this, json);
  }

  _createClass(Except, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs5 = this.execArgs(ctx),
          _this$execArgs6 = _slicedToArray(_this$execArgs5, 2),
          a = _this$execArgs6[0],
          b = _this$execArgs6[1];

      if (a == null || b == null) {
        return null;
      }

      var lib = typeIsArray(a) ? LIST : IVL;
      return lib.doExcept(a, b);
    }
  }]);

  return Except;
}(Expression);

var Intersect = /*#__PURE__*/function (_Expression6) {
  _inherits(Intersect, _Expression6);

  var _super6 = _createSuper(Intersect);

  function Intersect(json) {
    _classCallCheck(this, Intersect);

    return _super6.call(this, json);
  }

  _createClass(Intersect, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs7 = this.execArgs(ctx),
          _this$execArgs8 = _slicedToArray(_this$execArgs7, 2),
          a = _this$execArgs8[0],
          b = _this$execArgs8[1];

      if (a == null || b == null) {
        return null;
      }

      var lib = typeIsArray(a) ? LIST : IVL;
      return lib.doIntersect(a, b);
    }
  }]);

  return Intersect;
}(Expression);

var Indexer = /*#__PURE__*/function (_Expression7) {
  _inherits(Indexer, _Expression7);

  var _super7 = _createSuper(Indexer);

  function Indexer(json) {
    _classCallCheck(this, Indexer);

    return _super7.call(this, json);
  }

  _createClass(Indexer, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs9 = this.execArgs(ctx),
          _this$execArgs10 = _slicedToArray(_this$execArgs9, 2),
          operand = _this$execArgs10[0],
          index = _this$execArgs10[1];

      if (operand == null || index == null) {
        return null;
      }

      if (index < 0 || index >= operand.length) {
        return null;
      }

      return operand[index];
    }
  }]);

  return Indexer;
}(Expression);

var In = /*#__PURE__*/function (_Expression8) {
  _inherits(In, _Expression8);

  var _super8 = _createSuper(In);

  function In(json) {
    var _this;

    _classCallCheck(this, In);

    _this = _super8.call(this, json);
    _this.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this;
  }

  _createClass(In, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs11 = this.execArgs(ctx),
          _this$execArgs12 = _slicedToArray(_this$execArgs11, 2),
          item = _this$execArgs12[0],
          container = _this$execArgs12[1];

      if (container == null || item == null) {
        return null;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doContains(container, item, this.precision);
    }
  }]);

  return In;
}(Expression);

var Contains = /*#__PURE__*/function (_Expression9) {
  _inherits(Contains, _Expression9);

  var _super9 = _createSuper(Contains);

  function Contains(json) {
    var _this2;

    _classCallCheck(this, Contains);

    _this2 = _super9.call(this, json);
    _this2.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this2;
  }

  _createClass(Contains, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs13 = this.execArgs(ctx),
          _this$execArgs14 = _slicedToArray(_this$execArgs13, 2),
          container = _this$execArgs14[0],
          item = _this$execArgs14[1];

      if (container == null || item == null) {
        return null;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doContains(container, item, this.precision);
    }
  }]);

  return Contains;
}(Expression);

var Includes = /*#__PURE__*/function (_Expression10) {
  _inherits(Includes, _Expression10);

  var _super10 = _createSuper(Includes);

  function Includes(json) {
    var _this3;

    _classCallCheck(this, Includes);

    _this3 = _super10.call(this, json);
    _this3.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this3;
  }

  _createClass(Includes, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs15 = this.execArgs(ctx),
          _this$execArgs16 = _slicedToArray(_this$execArgs15, 2),
          container = _this$execArgs16[0],
          contained = _this$execArgs16[1];

      if (container == null || contained == null) {
        return null;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doIncludes(container, contained, this.precision);
    }
  }]);

  return Includes;
}(Expression);

var IncludedIn = /*#__PURE__*/function (_Expression11) {
  _inherits(IncludedIn, _Expression11);

  var _super11 = _createSuper(IncludedIn);

  function IncludedIn(json) {
    var _this4;

    _classCallCheck(this, IncludedIn);

    _this4 = _super11.call(this, json);
    _this4.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this4;
  }

  _createClass(IncludedIn, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs17 = this.execArgs(ctx),
          _this$execArgs18 = _slicedToArray(_this$execArgs17, 2),
          contained = _this$execArgs18[0],
          container = _this$execArgs18[1];

      if (container == null || contained == null) {
        return null;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doIncludes(container, contained, this.precision);
    }
  }]);

  return IncludedIn;
}(Expression);

var ProperIncludes = /*#__PURE__*/function (_Expression12) {
  _inherits(ProperIncludes, _Expression12);

  var _super12 = _createSuper(ProperIncludes);

  function ProperIncludes(json) {
    var _this5;

    _classCallCheck(this, ProperIncludes);

    _this5 = _super12.call(this, json);
    _this5.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this5;
  }

  _createClass(ProperIncludes, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs19 = this.execArgs(ctx),
          _this$execArgs20 = _slicedToArray(_this$execArgs19, 2),
          container = _this$execArgs20[0],
          contained = _this$execArgs20[1];

      if (container == null || contained == null) {
        return null;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doProperIncludes(container, contained, this.precision);
    }
  }]);

  return ProperIncludes;
}(Expression);

var ProperIncludedIn = /*#__PURE__*/function (_Expression13) {
  _inherits(ProperIncludedIn, _Expression13);

  var _super13 = _createSuper(ProperIncludedIn);

  function ProperIncludedIn(json) {
    var _this6;

    _classCallCheck(this, ProperIncludedIn);

    _this6 = _super13.call(this, json);
    _this6.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this6;
  }

  _createClass(ProperIncludedIn, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs21 = this.execArgs(ctx),
          _this$execArgs22 = _slicedToArray(_this$execArgs21, 2),
          contained = _this$execArgs22[0],
          container = _this$execArgs22[1];

      if (container == null || contained == null) {
        return null;
      }

      var lib = typeIsArray(container) ? LIST : IVL;
      return lib.doProperIncludes(container, contained, this.precision);
    }
  }]);

  return ProperIncludedIn;
}(Expression);

var Length = /*#__PURE__*/function (_Expression14) {
  _inherits(Length, _Expression14);

  var _super14 = _createSuper(Length);

  function Length(json) {
    _classCallCheck(this, Length);

    return _super14.call(this, json);
  }

  _createClass(Length, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return arg.length;
      } else {
        return null;
      }
    }
  }]);

  return Length;
}(Expression);

var After = /*#__PURE__*/function (_Expression15) {
  _inherits(After, _Expression15);

  var _super15 = _createSuper(After);

  function After(json) {
    var _this7;

    _classCallCheck(this, After);

    _this7 = _super15.call(this, json);
    _this7.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this7;
  }

  _createClass(After, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs23 = this.execArgs(ctx),
          _this$execArgs24 = _slicedToArray(_this$execArgs23, 2),
          a = _this$execArgs24[0],
          b = _this$execArgs24[1];

      if (a == null || b == null) {
        return null;
      }

      var lib = a instanceof DateTime ? DT : IVL;
      return lib.doAfter(a, b, this.precision);
    }
  }]);

  return After;
}(Expression);

var Before = /*#__PURE__*/function (_Expression16) {
  _inherits(Before, _Expression16);

  var _super16 = _createSuper(Before);

  function Before(json) {
    var _this8;

    _classCallCheck(this, Before);

    _this8 = _super16.call(this, json);
    _this8.precision = json.precision != null ? json.precision.toLowerCase() : undefined;
    return _this8;
  }

  _createClass(Before, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs25 = this.execArgs(ctx),
          _this$execArgs26 = _slicedToArray(_this$execArgs25, 2),
          a = _this$execArgs26[0],
          b = _this$execArgs26[1];

      if (a == null || b == null) {
        return null;
      }

      var lib = a instanceof DateTime ? DT : IVL;
      return lib.doBefore(a, b, this.precision);
    }
  }]);

  return Before;
}(Expression);

var SameAs = /*#__PURE__*/function (_Expression17) {
  _inherits(SameAs, _Expression17);

  var _super17 = _createSuper(SameAs);

  function SameAs(json) {
    var _this9;

    _classCallCheck(this, SameAs);

    _this9 = _super17.call(this, json);
    _this9.precision = json.precision;
    return _this9;
  }

  _createClass(SameAs, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs27 = this.execArgs(ctx),
          _this$execArgs28 = _slicedToArray(_this$execArgs27, 2),
          a = _this$execArgs28[0],
          b = _this$execArgs28[1];

      if (a != null && b != null) {
        return a.sameAs(b, this.precision != null ? this.precision.toLowerCase() : undefined);
      } else {
        return null;
      }
    }
  }]);

  return SameAs;
}(Expression);

var SameOrAfter = /*#__PURE__*/function (_Expression18) {
  _inherits(SameOrAfter, _Expression18);

  var _super18 = _createSuper(SameOrAfter);

  function SameOrAfter(json) {
    var _this10;

    _classCallCheck(this, SameOrAfter);

    _this10 = _super18.call(this, json);
    _this10.precision = json.precision;
    return _this10;
  }

  _createClass(SameOrAfter, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs29 = this.execArgs(ctx),
          _this$execArgs30 = _slicedToArray(_this$execArgs29, 2),
          d1 = _this$execArgs30[0],
          d2 = _this$execArgs30[1];

      if (d1 != null && d2 != null) {
        return d1.sameOrAfter(d2, this.precision != null ? this.precision.toLowerCase() : undefined);
      } else {
        return null;
      }
    }
  }]);

  return SameOrAfter;
}(Expression);

var SameOrBefore = /*#__PURE__*/function (_Expression19) {
  _inherits(SameOrBefore, _Expression19);

  var _super19 = _createSuper(SameOrBefore);

  function SameOrBefore(json) {
    var _this11;

    _classCallCheck(this, SameOrBefore);

    _this11 = _super19.call(this, json);
    _this11.precision = json.precision;
    return _this11;
  }

  _createClass(SameOrBefore, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs31 = this.execArgs(ctx),
          _this$execArgs32 = _slicedToArray(_this$execArgs31, 2),
          d1 = _this$execArgs32[0],
          d2 = _this$execArgs32[1];

      if (d1 != null && d2 != null) {
        return d1.sameOrBefore(d2, this.precision != null ? this.precision.toLowerCase() : undefined);
      } else {
        return null;
      }
    }
  }]);

  return SameOrBefore;
}(Expression);

module.exports = {
  After: After,
  Before: Before,
  Contains: Contains,
  Equal: Equal,
  Equivalent: Equivalent,
  Except: Except,
  In: In,
  IncludedIn: IncludedIn,
  Includes: Includes,
  Indexer: Indexer,
  Intersect: Intersect,
  Length: Length,
  NotEqual: NotEqual,
  ProperIncludedIn: ProperIncludedIn,
  ProperIncludes: ProperIncludes,
  SameAs: SameAs,
  SameOrAfter: SameOrAfter,
  SameOrBefore: SameOrBefore,
  Union: Union
};
},{"../datatypes/datetime":7,"../datatypes/logic":10,"../util/comparison":45,"../util/util":47,"./datetime":20,"./expression":22,"./interval":26,"./list":28}],33:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var ParameterDef = /*#__PURE__*/function (_Expression) {
  _inherits(ParameterDef, _Expression);

  var _super = _createSuper(ParameterDef);

  function ParameterDef(json) {
    var _this;

    _classCallCheck(this, ParameterDef);

    _this = _super.call(this, json);
    _this.name = json.name;
    _this.default = build(json.default);
    _this.parameterTypeSpecifier = json.parameterTypeSpecifier;
    return _this;
  }

  _createClass(ParameterDef, [{
    key: "exec",
    value: function exec(ctx) {
      // If context parameters contains the name, return value.
      if (ctx && ctx.parameters[this.name] !== undefined) {
        return ctx.parameters[this.name]; // If the parent context contains the name, return that
      } else if (ctx.getParentParameter(this.name) !== undefined) {
        var parentParam = ctx.getParentParameter(this.name);
        return parentParam.default != null ? parentParam.default.execute(ctx) : parentParam; // If default type exists, execute the default type
      } else if (this.default != null) {
        this.default.execute(ctx);
      }
    }
  }]);

  return ParameterDef;
}(Expression);

var ParameterRef = /*#__PURE__*/function (_Expression2) {
  _inherits(ParameterRef, _Expression2);

  var _super2 = _createSuper(ParameterRef);

  function ParameterRef(json) {
    var _this2;

    _classCallCheck(this, ParameterRef);

    _this2 = _super2.call(this, json);
    _this2.name = json.name;
    _this2.library = json.libraryName;
    return _this2;
  }

  _createClass(ParameterRef, [{
    key: "exec",
    value: function exec(ctx) {
      ctx = this.library ? ctx.getLibraryContext(this.library) : ctx;
      var param = ctx.getParameter(this.name);
      return param != null ? param.execute(ctx) : undefined;
    }
  }]);

  return ParameterRef;
}(Expression);

module.exports = {
  ParameterDef: ParameterDef,
  ParameterRef: ParameterRef
};
},{"./builder":16,"./expression":22}],34:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var DT = require('../datatypes/datatypes'); // Unit conversation is currently implemented on for time duration comparison operations
// TODO: Implement unit conversation for time duration mathematical operations


var Quantity = /*#__PURE__*/function (_Expression) {
  _inherits(Quantity, _Expression);

  var _super = _createSuper(Quantity);

  function Quantity(json) {
    var _this;

    _classCallCheck(this, Quantity);

    _this = _super.call(this, json);
    _this.value = parseFloat(json.value);
    _this.unit = json.unit;
    return _this;
  }

  _createClass(Quantity, [{
    key: "exec",
    value: function exec(ctx) {
      return new DT.Quantity(this.value, this.unit);
    }
  }]);

  return Quantity;
}(Expression);

module.exports = {
  Quantity: Quantity
};
},{"../datatypes/datatypes":6,"./expression":22}],35:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('./expression'),
    Expression = _require.Expression,
    UnimplementedExpression = _require.UnimplementedExpression;

var _require2 = require('../runtime/context'),
    Context = _require2.Context;

var _require3 = require('./builder'),
    build = _require3.build;

var _require4 = require('../util/util'),
    typeIsArray = _require4.typeIsArray,
    allTrue = _require4.allTrue;

var _require5 = require('../util/comparison'),
    equals = _require5.equals;

var AliasedQuerySource = function AliasedQuerySource(json) {
  _classCallCheck(this, AliasedQuerySource);

  this.alias = json.alias;
  this.expression = build(json.expression);
};

var LetClause = function LetClause(json) {
  _classCallCheck(this, LetClause);

  this.identifier = json.identifier;
  this.expression = build(json.expression);
};

var With = /*#__PURE__*/function (_Expression) {
  _inherits(With, _Expression);

  var _super = _createSuper(With);

  function With(json) {
    var _this;

    _classCallCheck(this, With);

    _this = _super.call(this, json);
    _this.alias = json.alias;
    _this.expression = build(json.expression);
    _this.suchThat = build(json.suchThat);
    return _this;
  }

  _createClass(With, [{
    key: "exec",
    value: function exec(ctx) {
      var _this2 = this;

      var records = this.expression.execute(ctx);

      if (!typeIsArray(records)) {
        records = [records];
      }

      var returns = records.map(function (rec) {
        var childCtx = ctx.childContext();
        childCtx.set(_this2.alias, rec);
        return _this2.suchThat.execute(childCtx);
      });
      return returns.some(function (x) {
        return x;
      });
    }
  }]);

  return With;
}(Expression);

var Without = /*#__PURE__*/function (_With) {
  _inherits(Without, _With);

  var _super2 = _createSuper(Without);

  function Without(json) {
    _classCallCheck(this, Without);

    return _super2.call(this, json);
  }

  _createClass(Without, [{
    key: "exec",
    value: function exec(ctx) {
      return !_get(_getPrototypeOf(Without.prototype), "exec", this).call(this, ctx);
    }
  }]);

  return Without;
}(With); // ELM-only, not a product of CQL


var Sort = /*#__PURE__*/function (_UnimplementedExpress) {
  _inherits(Sort, _UnimplementedExpress);

  var _super3 = _createSuper(Sort);

  function Sort() {
    _classCallCheck(this, Sort);

    return _super3.apply(this, arguments);
  }

  return Sort;
}(UnimplementedExpression);

var ByDirection = /*#__PURE__*/function (_Expression2) {
  _inherits(ByDirection, _Expression2);

  var _super4 = _createSuper(ByDirection);

  function ByDirection(json) {
    var _this3;

    _classCallCheck(this, ByDirection);

    _this3 = _super4.call(this, json);
    _this3.direction = json.direction;
    _this3.low_order = _this3.direction === 'asc' ? -1 : 1;
    _this3.high_order = _this3.low_order * -1;
    return _this3;
  }

  _createClass(ByDirection, [{
    key: "exec",
    value: function exec(ctx, a, b) {
      if (a === b) {
        return 0;
      } else if (a.isQuantity && b.isQuantity) {
        if (a.before(b)) {
          return this.low_order;
        } else {
          return this.high_order;
        }
      } else if (a < b) {
        return this.low_order;
      } else {
        return this.high_order;
      }
    }
  }]);

  return ByDirection;
}(Expression);

var ByExpression = /*#__PURE__*/function (_Expression3) {
  _inherits(ByExpression, _Expression3);

  var _super5 = _createSuper(ByExpression);

  function ByExpression(json) {
    var _this4;

    _classCallCheck(this, ByExpression);

    _this4 = _super5.call(this, json);
    _this4.expression = build(json.expression);
    _this4.direction = json.direction;
    _this4.low_order = _this4.direction === 'asc' ? -1 : 1;
    _this4.high_order = _this4.low_order * -1;
    return _this4;
  }

  _createClass(ByExpression, [{
    key: "exec",
    value: function exec(ctx, a, b) {
      var sctx = ctx.childContext(a);
      var a_val = this.expression.execute(sctx);
      sctx = ctx.childContext(b);
      var b_val = this.expression.execute(sctx);

      if (a_val === b_val) {
        return 0;
      } else if (a_val.isQuantity && b_val.isQuantity) {
        if (a_val.before(b_val)) {
          return this.low_order;
        } else {
          return this.high_order;
        }
      } else if (a_val < b_val) {
        return this.low_order;
      } else {
        return this.high_order;
      }
    }
  }]);

  return ByExpression;
}(Expression);

var ByColumn = /*#__PURE__*/function (_ByExpression) {
  _inherits(ByColumn, _ByExpression);

  var _super6 = _createSuper(ByColumn);

  function ByColumn(json) {
    var _this5;

    _classCallCheck(this, ByColumn);

    _this5 = _super6.call(this, json);
    _this5.expression = build({
      name: json.path,
      type: 'IdentifierRef'
    });
    return _this5;
  }

  return ByColumn;
}(ByExpression);

var ReturnClause = function ReturnClause(json) {
  _classCallCheck(this, ReturnClause);

  this.expression = build(json.expression);
  this.distinct = json.distinct != null ? json.distinct : true;
};

var SortClause = /*#__PURE__*/function () {
  function SortClause(json) {
    _classCallCheck(this, SortClause);

    this.by = build(json != null ? json.by : undefined);
  }

  _createClass(SortClause, [{
    key: "sort",
    value: function sort(ctx, values) {
      var _this6 = this;

      if (this.by) {
        return values.sort(function (a, b) {
          var order = 0;

          var _iterator = _createForOfIteratorHelper(_this6.by),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var item = _step.value;
              // Do not use execute here because the value of the sort order is not important.
              order = item.exec(ctx, a, b);

              if (order !== 0) {
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return order;
        });
      }
    }
  }]);

  return SortClause;
}();

var toDistinctList = function toDistinctList(xList) {
  var yList = [];
  xList.forEach(function (x) {
    if (!yList.some(function (y) {
      return equals(x, y);
    })) {
      yList.push(x);
    }
  });
  return yList;
};

var Query = /*#__PURE__*/function (_Expression4) {
  _inherits(Query, _Expression4);

  var _super7 = _createSuper(Query);

  function Query(json) {
    var _this7;

    _classCallCheck(this, Query);

    _this7 = _super7.call(this, json);
    _this7.sources = new MultiSource(json.source.map(function (s) {
      return new AliasedQuerySource(s);
    }));
    _this7.letClauses = json.let != null ? json.let.map(function (d) {
      return new LetClause(d);
    }) : [];
    _this7.relationship = json.relationship != null ? build(json.relationship) : [];
    _this7.where = build(json.where);
    _this7.returnClause = json.return != null ? new ReturnClause(json.return) : null;
    _this7.aliases = _this7.sources.aliases();
    _this7.sortClause = json.sort != null ? new SortClause(json.sort) : null;
    return _this7;
  }

  _createClass(Query, [{
    key: "exec",
    value: function exec(ctx) {
      var _this8 = this;

      var returnedValues = [];
      this.sources.forEach(ctx, function (rctx) {
        var _iterator2 = _createForOfIteratorHelper(_this8.letClauses),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var def = _step2.value;
            rctx.set(def.identifier, def.expression.execute(rctx));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        var relations = _this8.relationship.map(function (rel) {
          var child_ctx = rctx.childContext();
          return rel.execute(child_ctx);
        });

        var passed = allTrue(relations) && (_this8.where ? _this8.where.execute(rctx) : true);

        if (passed) {
          if (_this8.returnClause != null) {
            var val = _this8.returnClause.expression.execute(rctx);

            returnedValues.push(val);
          } else {
            if (_this8.aliases.length === 1) {
              returnedValues.push(rctx.get(_this8.aliases[0]));
            } else {
              returnedValues.push(rctx.context_values);
            }
          }
        }
      });
      var distinct = this.returnClause != null ? this.returnClause.distinct : true;

      if (distinct) {
        returnedValues = toDistinctList(returnedValues);
      }

      if (this.sortClause != null) {
        this.sortClause.sort(ctx, returnedValues);
      }

      if (this.sources.returnsList()) {
        return returnedValues;
      } else {
        return returnedValues[0];
      }
    }
  }]);

  return Query;
}(Expression);

var AliasRef = /*#__PURE__*/function (_Expression5) {
  _inherits(AliasRef, _Expression5);

  var _super8 = _createSuper(AliasRef);

  function AliasRef(json) {
    var _this9;

    _classCallCheck(this, AliasRef);

    _this9 = _super8.call(this, json);
    _this9.name = json.name;
    return _this9;
  }

  _createClass(AliasRef, [{
    key: "exec",
    value: function exec(ctx) {
      return ctx != null ? ctx.get(this.name) : undefined;
    }
  }]);

  return AliasRef;
}(Expression);

var QueryLetRef = /*#__PURE__*/function (_AliasRef) {
  _inherits(QueryLetRef, _AliasRef);

  var _super9 = _createSuper(QueryLetRef);

  function QueryLetRef(json) {
    _classCallCheck(this, QueryLetRef);

    return _super9.call(this, json);
  }

  return QueryLetRef;
}(AliasRef); // The following is not defined by ELM but is helpful for execution


var MultiSource = /*#__PURE__*/function () {
  function MultiSource(sources) {
    _classCallCheck(this, MultiSource);

    this.sources = sources;
    this.alias = this.sources[0].alias;
    this.expression = this.sources[0].expression;
    this.isList = true;

    if (this.sources.length > 1) {
      this.rest = new MultiSource(this.sources.slice(1));
    }
  }

  _createClass(MultiSource, [{
    key: "aliases",
    value: function aliases() {
      var a = [this.alias];

      if (this.rest) {
        a = a.concat(this.rest.aliases());
      }

      return a;
    }
  }, {
    key: "returnsList",
    value: function returnsList() {
      return this.isList || this.rest && this.rest.returnsList();
    }
  }, {
    key: "forEach",
    value: function forEach(ctx, func) {
      var _this10 = this;

      var records = this.expression.execute(ctx);
      this.isList = typeIsArray(records);
      records = this.isList ? records : [records];
      return records.map(function (rec) {
        var rctx = new Context(ctx);
        rctx.set(_this10.alias, rec);

        if (_this10.rest) {
          return _this10.rest.forEach(rctx, func);
        } else {
          return func(rctx);
        }
      });
    }
  }]);

  return MultiSource;
}();

module.exports = {
  AliasedQuerySource: AliasedQuerySource,
  AliasRef: AliasRef,
  ByColumn: ByColumn,
  ByDirection: ByDirection,
  ByExpression: ByExpression,
  LetClause: LetClause,
  Query: Query,
  QueryLetRef: QueryLetRef,
  ReturnClause: ReturnClause,
  Sort: Sort,
  SortClause: SortClause,
  With: With,
  Without: Without
};
},{"../runtime/context":41,"../util/comparison":45,"../util/util":47,"./builder":16,"./expression":22}],36:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('../datatypes/quantity'),
    Quantity = _require2.Quantity;

var DT = require('../datatypes/datatypes');

var Ratio = /*#__PURE__*/function (_Expression) {
  _inherits(Ratio, _Expression);

  var _super = _createSuper(Ratio);

  function Ratio(json) {
    var _this;

    _classCallCheck(this, Ratio);

    _this = _super.call(this, json);

    if (json.numerator == null) {
      throw new Error('Cannot create a ratio with an undefined numerator value');
    } else {
      _this.numerator = new Quantity(json.numerator.value, json.numerator.unit);
    }

    if (json.denominator == null) {
      throw new Error('Cannot create a ratio with an undefined denominator value');
    } else {
      _this.denominator = new Quantity(json.denominator.value, json.denominator.unit);
    }

    return _this;
  }

  _createClass(Ratio, [{
    key: "exec",
    value: function exec(ctx) {
      return new DT.Ratio(this.numerator, this.denominator);
    }
  }]);

  return Ratio;
}(Expression);

module.exports = {
  Ratio: Ratio
};
},{"../datatypes/datatypes":6,"../datatypes/quantity":11,"./expression":22}],37:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var ExpressionDef = /*#__PURE__*/function (_Expression) {
  _inherits(ExpressionDef, _Expression);

  var _super = _createSuper(ExpressionDef);

  function ExpressionDef(json) {
    var _this;

    _classCallCheck(this, ExpressionDef);

    _this = _super.call(this, json);
    _this.name = json.name;
    _this.context = json.context;
    _this.expression = build(json.expression);
    return _this;
  }

  _createClass(ExpressionDef, [{
    key: "exec",
    value: function exec(ctx) {
      var value = this.expression != null ? this.expression.execute(ctx) : undefined;
      ctx.rootContext().set(this.name, value);
      return value;
    }
  }]);

  return ExpressionDef;
}(Expression);

var ExpressionRef = /*#__PURE__*/function (_Expression2) {
  _inherits(ExpressionRef, _Expression2);

  var _super2 = _createSuper(ExpressionRef);

  function ExpressionRef(json) {
    var _this2;

    _classCallCheck(this, ExpressionRef);

    _this2 = _super2.call(this, json);
    _this2.name = json.name;
    _this2.library = json.libraryName;
    return _this2;
  }

  _createClass(ExpressionRef, [{
    key: "exec",
    value: function exec(ctx) {
      ctx = this.library ? ctx.getLibraryContext(this.library) : ctx;
      var value = ctx.get(this.name);

      if (value instanceof Expression) {
        value = value.execute(ctx);
      }

      return value;
    }
  }]);

  return ExpressionRef;
}(Expression);

var FunctionDef = /*#__PURE__*/function (_Expression3) {
  _inherits(FunctionDef, _Expression3);

  var _super3 = _createSuper(FunctionDef);

  function FunctionDef(json) {
    var _this3;

    _classCallCheck(this, FunctionDef);

    _this3 = _super3.call(this, json);
    _this3.name = json.name;
    _this3.expression = build(json.expression);
    _this3.parameters = json.operand;
    return _this3;
  }

  _createClass(FunctionDef, [{
    key: "exec",
    value: function exec(ctx) {
      return this;
    }
  }]);

  return FunctionDef;
}(Expression);

var FunctionRef = /*#__PURE__*/function (_Expression4) {
  _inherits(FunctionRef, _Expression4);

  var _super4 = _createSuper(FunctionRef);

  function FunctionRef(json) {
    var _this4;

    _classCallCheck(this, FunctionRef);

    _this4 = _super4.call(this, json);
    _this4.name = json.name;
    _this4.library = json.libraryName;
    return _this4;
  }

  _createClass(FunctionRef, [{
    key: "exec",
    value: function exec(ctx) {
      var functionDefs, child_ctx;

      if (this.library) {
        var lib = ctx.get(this.library);
        functionDefs = lib ? lib.getFunction(this.name) : undefined;
        var libCtx = ctx.getLibraryContext(this.library);
        child_ctx = libCtx ? libCtx.childContext() : undefined;
      } else {
        functionDefs = ctx.get(this.name);
        child_ctx = ctx.childContext();
      }

      var args = this.execArgs(ctx); // Filter out functions w/ wrong number of arguments.

      functionDefs = functionDefs.filter(function (f) {
        return f.parameters.length === args.length;
      }); // If there is still > 1 matching function, filter by argument types

      if (functionDefs.length > 1) {
        functionDefs = functionDefs.filter(function (f) {
          var match = true;

          for (var i = 0; i < args.length && match; i++) {
            if (args[i] !== null) {
              var operandTypeSpecifier = f.parameters[i].operandTypeSpecifier;

              if (operandTypeSpecifier == null && f.parameters[i].operandType != null) {
                // convert it to a NamedTypedSpecifier
                operandTypeSpecifier = {
                  name: f.parameters[i].operandType,
                  type: 'NamedTypeSpecifier'
                };
              }

              match = ctx.matchesTypeSpecifier(args[i], operandTypeSpecifier);
            }
          }

          return match;
        });
      } // If there is still > 1 matching function, calculate a score based on quality of matches


      if (functionDefs.length > 1) {// TODO
      }

      if (functionDefs.length === 0) {
        throw new Error('no function with matching signature could be found');
      } // By this point, we should have only one function, but until implementation is completed,
      // use the last one (no matter how many still remain)


      var functionDef = functionDefs[functionDefs.length - 1];

      for (var i = 0; i < functionDef.parameters.length; i++) {
        child_ctx.set(functionDef.parameters[i].name, args[i]);
      }

      return functionDef.expression.execute(child_ctx);
    }
  }]);

  return FunctionRef;
}(Expression);

var OperandRef = /*#__PURE__*/function (_Expression5) {
  _inherits(OperandRef, _Expression5);

  var _super5 = _createSuper(OperandRef);

  function OperandRef(json) {
    var _this5;

    _classCallCheck(this, OperandRef);

    _this5 = _super5.call(this, json);
    _this5.name = json.name;
    return _this5;
  }

  _createClass(OperandRef, [{
    key: "exec",
    value: function exec(ctx) {
      return ctx.get(this.name);
    }
  }]);

  return OperandRef;
}(Expression);

var IdentifierRef = /*#__PURE__*/function (_Expression6) {
  _inherits(IdentifierRef, _Expression6);

  var _super6 = _createSuper(IdentifierRef);

  function IdentifierRef(json) {
    var _this6;

    _classCallCheck(this, IdentifierRef);

    _this6 = _super6.call(this, json);
    _this6.name = json.name;
    _this6.library = json.libraryName;
    return _this6;
  }

  _createClass(IdentifierRef, [{
    key: "exec",
    value: function exec(ctx) {
      // TODO: Technically, the ELM Translator should never output one of these
      // but this code is needed since it does, as a work-around to get queries
      // to work properly when sorting by a field in a tuple
      var lib = this.library ? ctx.get(this.library) : undefined;
      var val = lib ? lib.get(this.name) : ctx.get(this.name);

      if (val == null) {
        var parts = this.name.split('.');
        val = ctx.get(parts[0]);

        if (val != null && parts.length > 1) {
          var curr_obj = val;

          var _iterator = _createForOfIteratorHelper(parts.slice(1)),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var part = _step.value;

              // _obj = curr_obj?[part] ? curr_obj?.get?(part)
              // curr_obj = if _obj instanceof Function then _obj.call(curr_obj) else _obj
              var _obj = void 0;

              if (curr_obj != null) {
                _obj = curr_obj[part];

                if (_obj === undefined && typeof curr_obj.get === 'function') {
                  _obj = curr_obj.get(part);
                }
              }

              curr_obj = _obj instanceof Function ? _obj.call(curr_obj) : _obj;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          val = curr_obj;
        }
      }

      if (val instanceof Function) {
        return val.call(ctx.context_values);
      } else {
        return val;
      }
    }
  }]);

  return IdentifierRef;
}(Expression);

module.exports = {
  ExpressionDef: ExpressionDef,
  ExpressionRef: ExpressionRef,
  FunctionDef: FunctionDef,
  FunctionRef: FunctionRef,
  IdentifierRef: IdentifierRef,
  OperandRef: OperandRef
};
},{"./builder":16,"./expression":22}],38:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('./builder'),
    build = _require2.build;

var Concatenate = /*#__PURE__*/function (_Expression) {
  _inherits(Concatenate, _Expression);

  var _super = _createSuper(Concatenate);

  function Concatenate(json) {
    _classCallCheck(this, Concatenate);

    return _super.call(this, json);
  }

  _createClass(Concatenate, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args.some(function (x) {
        return x == null;
      })) {
        return null;
      } else {
        return args.reduce(function (x, y) {
          return x + y;
        });
      }
    }
  }]);

  return Concatenate;
}(Expression);

var Combine = /*#__PURE__*/function (_Expression2) {
  _inherits(Combine, _Expression2);

  var _super2 = _createSuper(Combine);

  function Combine(json) {
    var _this;

    _classCallCheck(this, Combine);

    _this = _super2.call(this, json);
    _this.source = build(json.source);
    _this.separator = build(json.separator);
    return _this;
  }

  _createClass(Combine, [{
    key: "exec",
    value: function exec(ctx) {
      var source = this.source.execute(ctx);
      var separator = this.separator != null ? this.separator.execute(ctx) : '';

      if (source == null) {
        return null;
      } else {
        var filteredArray = source.filter(function (x) {
          return x != null;
        });

        if (filteredArray.length === 0) {
          return null;
        } else {
          return filteredArray.join(separator);
        }
      }
    }
  }]);

  return Combine;
}(Expression);

var Split = /*#__PURE__*/function (_Expression3) {
  _inherits(Split, _Expression3);

  var _super3 = _createSuper(Split);

  function Split(json) {
    var _this2;

    _classCallCheck(this, Split);

    _this2 = _super3.call(this, json);
    _this2.stringToSplit = build(json.stringToSplit);
    _this2.separator = build(json.separator);
    return _this2;
  }

  _createClass(Split, [{
    key: "exec",
    value: function exec(ctx) {
      var stringToSplit = this.stringToSplit.execute(ctx);
      var separator = this.separator.execute(ctx);

      if (stringToSplit && separator) {
        return stringToSplit.split(separator);
      }

      return stringToSplit ? [stringToSplit] : null;
    }
  }]);

  return Split;
}(Expression);

var SplitOnMatches = /*#__PURE__*/function (_Expression4) {
  _inherits(SplitOnMatches, _Expression4);

  var _super4 = _createSuper(SplitOnMatches);

  function SplitOnMatches(json) {
    var _this3;

    _classCallCheck(this, SplitOnMatches);

    _this3 = _super4.call(this, json);
    _this3.stringToSplit = build(json.stringToSplit);
    _this3.separatorPattern = build(json.separatorPattern);
    return _this3;
  }

  _createClass(SplitOnMatches, [{
    key: "exec",
    value: function exec(ctx) {
      var stringToSplit = this.stringToSplit.execute(ctx);
      var separatorPattern = this.separatorPattern.execute(ctx);

      if (stringToSplit && separatorPattern) {
        return stringToSplit.split(new RegExp(separatorPattern));
      }

      return stringToSplit ? [stringToSplit] : null;
    }
  }]);

  return SplitOnMatches;
}(Expression); // Length is completely handled by overloaded#Length


var Upper = /*#__PURE__*/function (_Expression5) {
  _inherits(Upper, _Expression5);

  var _super5 = _createSuper(Upper);

  function Upper(json) {
    _classCallCheck(this, Upper);

    return _super5.call(this, json);
  }

  _createClass(Upper, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return arg.toUpperCase();
      } else {
        return null;
      }
    }
  }]);

  return Upper;
}(Expression);

var Lower = /*#__PURE__*/function (_Expression6) {
  _inherits(Lower, _Expression6);

  var _super6 = _createSuper(Lower);

  function Lower(json) {
    _classCallCheck(this, Lower);

    return _super6.call(this, json);
  }

  _createClass(Lower, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return arg.toLowerCase();
      } else {
        return null;
      }
    }
  }]);

  return Lower;
}(Expression); // Indexer is completely handled by overloaded#Indexer


var PositionOf = /*#__PURE__*/function (_Expression7) {
  _inherits(PositionOf, _Expression7);

  var _super7 = _createSuper(PositionOf);

  function PositionOf(json) {
    var _this4;

    _classCallCheck(this, PositionOf);

    _this4 = _super7.call(this, json);
    _this4.pattern = build(json.pattern);
    _this4.string = build(json.string);
    return _this4;
  }

  _createClass(PositionOf, [{
    key: "exec",
    value: function exec(ctx) {
      var pattern = this.pattern.execute(ctx);
      var string = this.string.execute(ctx);

      if (pattern == null || string == null) {
        return null;
      } else {
        return string.indexOf(pattern);
      }
    }
  }]);

  return PositionOf;
}(Expression);

var LastPositionOf = /*#__PURE__*/function (_Expression8) {
  _inherits(LastPositionOf, _Expression8);

  var _super8 = _createSuper(LastPositionOf);

  function LastPositionOf(json) {
    var _this5;

    _classCallCheck(this, LastPositionOf);

    _this5 = _super8.call(this, json);
    _this5.pattern = build(json.pattern);
    _this5.string = build(json.string);
    return _this5;
  }

  _createClass(LastPositionOf, [{
    key: "exec",
    value: function exec(ctx) {
      var pattern = this.pattern.execute(ctx);
      var string = this.string.execute(ctx);

      if (pattern == null || string == null) {
        return null;
      } else {
        return string.lastIndexOf(pattern);
      }
    }
  }]);

  return LastPositionOf;
}(Expression);

var Matches = /*#__PURE__*/function (_Expression9) {
  _inherits(Matches, _Expression9);

  var _super9 = _createSuper(Matches);

  function Matches(json) {
    _classCallCheck(this, Matches);

    return _super9.call(this, json);
  }

  _createClass(Matches, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs = this.execArgs(ctx),
          _this$execArgs2 = _slicedToArray(_this$execArgs, 2),
          string = _this$execArgs2[0],
          pattern = _this$execArgs2[1];

      if (string == null || pattern == null) {
        return null;
      }

      return new RegExp('^' + pattern + '$').test(string);
    }
  }]);

  return Matches;
}(Expression);

var Substring = /*#__PURE__*/function (_Expression10) {
  _inherits(Substring, _Expression10);

  var _super10 = _createSuper(Substring);

  function Substring(json) {
    var _this6;

    _classCallCheck(this, Substring);

    _this6 = _super10.call(this, json);
    _this6.stringToSub = build(json.stringToSub);
    _this6.startIndex = build(json.startIndex);
    _this6.length = build(json['length']);
    return _this6;
  }

  _createClass(Substring, [{
    key: "exec",
    value: function exec(ctx) {
      var stringToSub = this.stringToSub.execute(ctx);
      var startIndex = this.startIndex.execute(ctx);
      var length = this.length != null ? this.length.execute(ctx) : null; // According to spec: If stringToSub or startIndex is null, or startIndex is out of range, the result is null.

      if (stringToSub == null || startIndex == null || startIndex < 0 || startIndex >= stringToSub.length) {
        return null;
      } else if (length != null) {
        return stringToSub.substr(startIndex, length);
      } else {
        return stringToSub.substr(startIndex);
      }
    }
  }]);

  return Substring;
}(Expression);

var StartsWith = /*#__PURE__*/function (_Expression11) {
  _inherits(StartsWith, _Expression11);

  var _super11 = _createSuper(StartsWith);

  function StartsWith(json) {
    _classCallCheck(this, StartsWith);

    return _super11.call(this, json);
  }

  _createClass(StartsWith, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args.some(function (x) {
        return x == null;
      })) {
        return null;
      } else {
        return args[0].slice(0, args[1].length) === args[1];
      }
    }
  }]);

  return StartsWith;
}(Expression);

var EndsWith = /*#__PURE__*/function (_Expression12) {
  _inherits(EndsWith, _Expression12);

  var _super12 = _createSuper(EndsWith);

  function EndsWith(json) {
    _classCallCheck(this, EndsWith);

    return _super12.call(this, json);
  }

  _createClass(EndsWith, [{
    key: "exec",
    value: function exec(ctx) {
      var args = this.execArgs(ctx);

      if (args.some(function (x) {
        return x == null;
      })) {
        return null;
      } else {
        return args[1] === '' || args[0].slice(-args[1].length) === args[1];
      }
    }
  }]);

  return EndsWith;
}(Expression);

module.exports = {
  Combine: Combine,
  Concatenate: Concatenate,
  EndsWith: EndsWith,
  LastPositionOf: LastPositionOf,
  Lower: Lower,
  Matches: Matches,
  PositionOf: PositionOf,
  Split: Split,
  SplitOnMatches: SplitOnMatches,
  StartsWith: StartsWith,
  Substring: Substring,
  Upper: Upper
};
},{"./builder":16,"./expression":22}],39:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression,
    UnimplementedExpression = _require.UnimplementedExpression;

var _require2 = require('./builder'),
    build = _require2.build;

var Property = /*#__PURE__*/function (_Expression) {
  _inherits(Property, _Expression);

  var _super = _createSuper(Property);

  function Property(json) {
    var _this;

    _classCallCheck(this, Property);

    _this = _super.call(this, json);
    _this.scope = json.scope;
    _this.source = build(json.source);
    _this.path = json.path;
    return _this;
  }

  _createClass(Property, [{
    key: "exec",
    value: function exec(ctx) {
      var obj = this.scope != null ? ctx.get(this.scope) : this.source;

      if (obj instanceof Expression) {
        obj = obj.execute(ctx);
      }

      var val = getPropertyFromObject(obj, this.path);

      if (val == null) {
        var parts = this.path.split('.');
        var curr_obj = obj;

        var _iterator = _createForOfIteratorHelper(parts),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var part = _step.value;

            var _obj = getPropertyFromObject(curr_obj, part);

            curr_obj = _obj instanceof Function ? _obj.call(curr_obj) : _obj;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        val = curr_obj != null ? curr_obj : null; // convert undefined to null
      }

      if (val instanceof Function) {
        return val.call(obj);
      } else {
        return val;
      }
    }
  }]);

  return Property;
}(Expression);

function getPropertyFromObject(obj, path) {
  var val;

  if (obj != null) {
    val = obj[path];

    if (val === undefined && typeof obj.get === 'function') {
      val = obj.get(path);
    }
  }

  return val;
}

var Tuple = /*#__PURE__*/function (_Expression2) {
  _inherits(Tuple, _Expression2);

  var _super2 = _createSuper(Tuple);

  function Tuple(json) {
    var _this2;

    _classCallCheck(this, Tuple);

    _this2 = _super2.call(this, json);
    var elements = json.element != null ? json.element : [];
    _this2.elements = elements.map(function (el) {
      return {
        name: el.name,
        value: build(el.value)
      };
    });
    return _this2;
  }

  _createClass(Tuple, [{
    key: "exec",
    value: function exec(ctx) {
      var val = {};

      var _iterator2 = _createForOfIteratorHelper(this.elements),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var el = _step2.value;
          val[el.name] = el.value != null ? el.value.execute(ctx) : undefined;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return val;
    }
  }, {
    key: "isTuple",
    get: function get() {
      return true;
    }
  }]);

  return Tuple;
}(Expression);

var TupleElement = /*#__PURE__*/function (_UnimplementedExpress) {
  _inherits(TupleElement, _UnimplementedExpress);

  var _super3 = _createSuper(TupleElement);

  function TupleElement() {
    _classCallCheck(this, TupleElement);

    return _super3.apply(this, arguments);
  }

  return TupleElement;
}(UnimplementedExpression);

var TupleElementDefinition = /*#__PURE__*/function (_UnimplementedExpress2) {
  _inherits(TupleElementDefinition, _UnimplementedExpress2);

  var _super4 = _createSuper(TupleElementDefinition);

  function TupleElementDefinition() {
    _classCallCheck(this, TupleElementDefinition);

    return _super4.apply(this, arguments);
  }

  return TupleElementDefinition;
}(UnimplementedExpression);

module.exports = {
  Property: Property,
  Tuple: Tuple,
  TupleElement: TupleElement,
  TupleElementDefinition: TupleElementDefinition
};
},{"./builder":16,"./expression":22}],40:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression,
    UnimplementedExpression = _require.UnimplementedExpression;

var _require2 = require('../datatypes/datetime'),
    DateTime = _require2.DateTime,
    _Date = _require2.Date;

var _require3 = require('../datatypes/clinical'),
    Concept = _require3.Concept;

var _require4 = require('../datatypes/quantity'),
    parseQuantity = _require4.parseQuantity;

var _require5 = require('../util/math'),
    isValidDecimal = _require5.isValidDecimal,
    isValidInteger = _require5.isValidInteger,
    limitDecimalPrecision = _require5.limitDecimalPrecision;

var _require6 = require('../util/util'),
    normalizeMillisecondsField = _require6.normalizeMillisecondsField;

var _require7 = require('../datatypes/ratio'),
    Ratio = _require7.Ratio; // TODO: Casting and Conversion needs unit tests!


var As = /*#__PURE__*/function (_Expression) {
  _inherits(As, _Expression);

  var _super = _createSuper(As);

  function As(json) {
    var _this;

    _classCallCheck(this, As);

    _this = _super.call(this, json);

    if (json.asTypeSpecifier) {
      _this.asTypeSpecifier = json.asTypeSpecifier;
    } else if (json.asType) {
      // convert it to a NamedTypedSpecifier
      _this.asTypeSpecifier = {
        name: json.asType,
        type: 'NamedTypeSpecifier'
      };
    }

    _this.strict = json.strict != null ? json.strict : false;
    return _this;
  }

  _createClass(As, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx); // If it is null, return null

      if (arg == null) {
        return null;
      }

      if (typeof arg._is !== 'function' && !isSystemType(this.asTypeSpecifier)) {
        // We need an _is implementation in order to check non System types
        // If this is not found then we should just return the arg to match old functionality.
        return arg;
      }

      if (ctx.matchesTypeSpecifier(arg, this.asTypeSpecifier)) {
        // TODO: request patient source to change type identification
        return arg;
      } else {
        return null;
      }
    }
  }]);

  return As;
}(Expression);

var ToBoolean = /*#__PURE__*/function (_Expression2) {
  _inherits(ToBoolean, _Expression2);

  var _super2 = _createSuper(ToBoolean);

  function ToBoolean(json) {
    _classCallCheck(this, ToBoolean);

    return _super2.call(this, json);
  }

  _createClass(ToBoolean, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        var strArg = arg.toString().toLowerCase();

        if (['true', 't', 'yes', 'y', '1'].includes(strArg)) {
          return true;
        } else if (['false', 'f', 'no', 'n', '0'].includes(strArg)) {
          return false;
        }
      }

      return null;
    }
  }]);

  return ToBoolean;
}(Expression);

var ToConcept = /*#__PURE__*/function (_Expression3) {
  _inherits(ToConcept, _Expression3);

  var _super3 = _createSuper(ToConcept);

  function ToConcept(json) {
    _classCallCheck(this, ToConcept);

    return _super3.call(this, json);
  }

  _createClass(ToConcept, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return new Concept([arg], arg.display);
      } else {
        return null;
      }
    }
  }]);

  return ToConcept;
}(Expression);

var ToDate = /*#__PURE__*/function (_Expression4) {
  _inherits(ToDate, _Expression4);

  var _super4 = _createSuper(ToDate);

  function ToDate(json) {
    _classCallCheck(this, ToDate);

    return _super4.call(this, json);
  }

  _createClass(ToDate, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      } else if (arg.isDateTime) {
        return arg.getDate();
      } else {
        return _Date.parse(arg.toString());
      }
    }
  }]);

  return ToDate;
}(Expression);

var ToDateTime = /*#__PURE__*/function (_Expression5) {
  _inherits(ToDateTime, _Expression5);

  var _super5 = _createSuper(ToDateTime);

  function ToDateTime(json) {
    _classCallCheck(this, ToDateTime);

    return _super5.call(this, json);
  }

  _createClass(ToDateTime, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg == null) {
        return null;
      } else if (arg.isDate) {
        return arg.getDateTime();
      } else {
        return DateTime.parse(arg.toString());
      }
    }
  }]);

  return ToDateTime;
}(Expression);

var ToDecimal = /*#__PURE__*/function (_Expression6) {
  _inherits(ToDecimal, _Expression6);

  var _super6 = _createSuper(ToDecimal);

  function ToDecimal(json) {
    _classCallCheck(this, ToDecimal);

    return _super6.call(this, json);
  }

  _createClass(ToDecimal, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        var decimal = limitDecimalPrecision(parseFloat(arg.toString()));

        if (isValidDecimal(decimal)) {
          return decimal;
        }
      }

      return null;
    }
  }]);

  return ToDecimal;
}(Expression);

var ToInteger = /*#__PURE__*/function (_Expression7) {
  _inherits(ToInteger, _Expression7);

  var _super7 = _createSuper(ToInteger);

  function ToInteger(json) {
    _classCallCheck(this, ToInteger);

    return _super7.call(this, json);
  }

  _createClass(ToInteger, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        var integer = parseInt(arg.toString());

        if (isValidInteger(integer)) {
          return integer;
        }
      }

      return null;
    }
  }]);

  return ToInteger;
}(Expression);

var ToQuantity = /*#__PURE__*/function (_Expression8) {
  _inherits(ToQuantity, _Expression8);

  var _super8 = _createSuper(ToQuantity);

  function ToQuantity(json) {
    _classCallCheck(this, ToQuantity);

    return _super8.call(this, json);
  }

  _createClass(ToQuantity, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return parseQuantity(arg.toString());
      } else {
        return null;
      }
    }
  }]);

  return ToQuantity;
}(Expression);

var ToRatio = /*#__PURE__*/function (_Expression9) {
  _inherits(ToRatio, _Expression9);

  var _super9 = _createSuper(ToRatio);

  function ToRatio(json) {
    _classCallCheck(this, ToRatio);

    return _super9.call(this, json);
  }

  _createClass(ToRatio, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        // Argument will be of form '<quantity>:<quantity>'
        var denominator, numerator;

        try {
          // String will be split into an array. Numerator will be at index 1, Denominator will be at index 4
          var splitRatioString = arg.toString().match(/^(\d+(\.\d+)?\s*('.+')?)\s*:\s*(\d+(\.\d+)?\s*('.+')?)$/);

          if (splitRatioString == null) {
            return null;
          }

          numerator = parseQuantity(splitRatioString[1]);
          denominator = parseQuantity(splitRatioString[4]);
        } catch (error) {
          // If the input string is not formatted correctly, or cannot be
          // interpreted as a valid Quantity value, the result is null.
          return null;
        } // The value element of a Quantity must be present.


        if (numerator == null || denominator == null) {
          return null;
        }

        return new Ratio(numerator, denominator);
      } else {
        return null;
      }
    }
  }]);

  return ToRatio;
}(Expression);

var ToString = /*#__PURE__*/function (_Expression10) {
  _inherits(ToString, _Expression10);

  var _super10 = _createSuper(ToString);

  function ToString(json) {
    _classCallCheck(this, ToString);

    return _super10.call(this, json);
  }

  _createClass(ToString, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        return arg.toString();
      } else {
        return null;
      }
    }
  }]);

  return ToString;
}(Expression);

var ToTime = /*#__PURE__*/function (_Expression11) {
  _inherits(ToTime, _Expression11);

  var _super11 = _createSuper(ToTime);

  function ToTime(json) {
    _classCallCheck(this, ToTime);

    return _super11.call(this, json);
  }

  _createClass(ToTime, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg != null) {
        var timeString = arg.toString(); // Return null if string doesn't represent a valid ISO-8601 Time
        // hh:mm:ss.fff or hh:mm:ss.fff

        var matches = /^T?((\d{2})(:(\d{2})(:(\d{2})(\.(\d+))?)?)?)?(Z|(([+-])(\d{2})(:?(\d{2}))?))?$/.exec(timeString);

        if (matches == null) {
          return null;
        }

        var hours = matches[2];
        var minutes = matches[4];
        var seconds = matches[6]; // Validate h/m/s if they exist, but allow null

        if (hours != null) {
          if (hours < 0 || hours > 23) {
            return null;
          }

          hours = parseInt(hours, 10);
        }

        if (minutes != null) {
          if (minutes < 0 || minutes > 59) {
            return null;
          }

          minutes = parseInt(minutes, 10);
        }

        if (seconds != null) {
          if (seconds < 0 || seconds > 59) {
            return null;
          }

          seconds = parseInt(seconds, 10);
        }

        var milliseconds = matches[8];

        if (milliseconds != null) {
          milliseconds = parseInt(normalizeMillisecondsField(milliseconds));
        } // Time is implemented as Datetime with year 0, month 1, day 1 and null timezoneOffset


        return new DateTime(0, 1, 1, hours, minutes, seconds, milliseconds, null);
      } else {
        return null;
      }
    }
  }]);

  return ToTime;
}(Expression);

var Convert = /*#__PURE__*/function (_Expression12) {
  _inherits(Convert, _Expression12);

  var _super12 = _createSuper(Convert);

  function Convert(json) {
    var _this2;

    _classCallCheck(this, Convert);

    _this2 = _super12.call(this, json);
    _this2.operand = json.operand;
    _this2.toType = json.toType;
    return _this2;
  }

  _createClass(Convert, [{
    key: "exec",
    value: function exec(ctx) {
      switch (this.toType) {
        case '{urn:hl7-org:elm-types:r1}Boolean':
          return new ToBoolean({
            type: 'ToBoolean',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Concept':
          return new ToConcept({
            type: 'ToConcept',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Decimal':
          return new ToDecimal({
            type: 'ToDecimal',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Integer':
          return new ToInteger({
            type: 'ToInteger',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}String':
          return new ToString({
            type: 'ToString',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Quantity':
          return new ToQuantity({
            type: 'ToQuantity',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}DateTime':
          return new ToDateTime({
            type: 'ToDateTime',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Date':
          return new ToDate({
            type: 'ToDate',
            operand: this.operand
          }).execute(ctx);

        case '{urn:hl7-org:elm-types:r1}Time':
          return new ToTime({
            type: 'ToTime',
            operand: this.operand
          }).execute(ctx);

        default:
          return this.execArgs(ctx);
      }
    }
  }]);

  return Convert;
}(Expression);

var ConvertsToBoolean = /*#__PURE__*/function (_Expression13) {
  _inherits(ConvertsToBoolean, _Expression13);

  var _super13 = _createSuper(ConvertsToBoolean);

  function ConvertsToBoolean(json) {
    var _this3;

    _classCallCheck(this, ConvertsToBoolean);

    _this3 = _super13.call(this, json);
    _this3.operand = json.operand;
    return _this3;
  }

  _createClass(ConvertsToBoolean, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToBoolean, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToBoolean;
}(Expression);

var ConvertsToDate = /*#__PURE__*/function (_Expression14) {
  _inherits(ConvertsToDate, _Expression14);

  var _super14 = _createSuper(ConvertsToDate);

  function ConvertsToDate(json) {
    var _this4;

    _classCallCheck(this, ConvertsToDate);

    _this4 = _super14.call(this, json);
    _this4.operand = json.operand;
    return _this4;
  }

  _createClass(ConvertsToDate, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToDate, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToDate;
}(Expression);

var ConvertsToDateTime = /*#__PURE__*/function (_Expression15) {
  _inherits(ConvertsToDateTime, _Expression15);

  var _super15 = _createSuper(ConvertsToDateTime);

  function ConvertsToDateTime(json) {
    var _this5;

    _classCallCheck(this, ConvertsToDateTime);

    _this5 = _super15.call(this, json);
    _this5.operand = json.operand;
    return _this5;
  }

  _createClass(ConvertsToDateTime, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToDateTime, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToDateTime;
}(Expression);

var ConvertsToDecimal = /*#__PURE__*/function (_Expression16) {
  _inherits(ConvertsToDecimal, _Expression16);

  var _super16 = _createSuper(ConvertsToDecimal);

  function ConvertsToDecimal(json) {
    var _this6;

    _classCallCheck(this, ConvertsToDecimal);

    _this6 = _super16.call(this, json);
    _this6.operand = json.operand;
    return _this6;
  }

  _createClass(ConvertsToDecimal, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToDecimal, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToDecimal;
}(Expression);

var ConvertsToInteger = /*#__PURE__*/function (_Expression17) {
  _inherits(ConvertsToInteger, _Expression17);

  var _super17 = _createSuper(ConvertsToInteger);

  function ConvertsToInteger(json) {
    var _this7;

    _classCallCheck(this, ConvertsToInteger);

    _this7 = _super17.call(this, json);
    _this7.operand = json.operand;
    return _this7;
  }

  _createClass(ConvertsToInteger, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToInteger, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToInteger;
}(Expression);

var ConvertsToQuantity = /*#__PURE__*/function (_Expression18) {
  _inherits(ConvertsToQuantity, _Expression18);

  var _super18 = _createSuper(ConvertsToQuantity);

  function ConvertsToQuantity(json) {
    var _this8;

    _classCallCheck(this, ConvertsToQuantity);

    _this8 = _super18.call(this, json);
    _this8.operand = json.operand;
    return _this8;
  }

  _createClass(ConvertsToQuantity, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToQuantity, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToQuantity;
}(Expression);

var ConvertsToRatio = /*#__PURE__*/function (_Expression19) {
  _inherits(ConvertsToRatio, _Expression19);

  var _super19 = _createSuper(ConvertsToRatio);

  function ConvertsToRatio(json) {
    var _this9;

    _classCallCheck(this, ConvertsToRatio);

    _this9 = _super19.call(this, json);
    _this9.operand = json.operand;
    return _this9;
  }

  _createClass(ConvertsToRatio, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToRatio, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToRatio;
}(Expression);

var ConvertsToString = /*#__PURE__*/function (_Expression20) {
  _inherits(ConvertsToString, _Expression20);

  var _super20 = _createSuper(ConvertsToString);

  function ConvertsToString(json) {
    var _this10;

    _classCallCheck(this, ConvertsToString);

    _this10 = _super20.call(this, json);
    _this10.operand = json.operand;
    return _this10;
  }

  _createClass(ConvertsToString, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToString, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToString;
}(Expression);

var ConvertsToTime = /*#__PURE__*/function (_Expression21) {
  _inherits(ConvertsToTime, _Expression21);

  var _super21 = _createSuper(ConvertsToTime);

  function ConvertsToTime(json) {
    var _this11;

    _classCallCheck(this, ConvertsToTime);

    _this11 = _super21.call(this, json);
    _this11.operand = json.operand;
    return _this11;
  }

  _createClass(ConvertsToTime, [{
    key: "exec",
    value: function exec(ctx) {
      var operatorValue = this.execArgs(ctx);

      if (operatorValue === null) {
        return null;
      } else {
        return canConvertToType(ToTime, this.operand, ctx);
      }
    }
  }]);

  return ConvertsToTime;
}(Expression);

function canConvertToType(toFunction, operand, ctx) {
  try {
    var value = new toFunction({
      type: toFunction.name,
      operand: operand
    }).execute(ctx);

    if (value != null) {
      return true;
    } else {
      return false;
    }
  } catch (error) {
    return false;
  }
}

var ConvertQuantity = /*#__PURE__*/function (_Expression22) {
  _inherits(ConvertQuantity, _Expression22);

  var _super22 = _createSuper(ConvertQuantity);

  function ConvertQuantity(json) {
    _classCallCheck(this, ConvertQuantity);

    return _super22.call(this, json);
  }

  _createClass(ConvertQuantity, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs = this.execArgs(ctx),
          _this$execArgs2 = _slicedToArray(_this$execArgs, 2),
          quantity = _this$execArgs2[0],
          newUnit = _this$execArgs2[1];

      if (quantity != null && newUnit != null) {
        try {
          return quantity.convertUnit(newUnit);
        } catch (error) {
          // Cannot convert input to target unit, spec says to return null
          return null;
        }
      }
    }
  }]);

  return ConvertQuantity;
}(Expression);

var CanConvertQuantity = /*#__PURE__*/function (_Expression23) {
  _inherits(CanConvertQuantity, _Expression23);

  var _super23 = _createSuper(CanConvertQuantity);

  function CanConvertQuantity(json) {
    _classCallCheck(this, CanConvertQuantity);

    return _super23.call(this, json);
  }

  _createClass(CanConvertQuantity, [{
    key: "exec",
    value: function exec(ctx) {
      var _this$execArgs3 = this.execArgs(ctx),
          _this$execArgs4 = _slicedToArray(_this$execArgs3, 2),
          quantity = _this$execArgs4[0],
          newUnit = _this$execArgs4[1];

      if (quantity != null && newUnit != null) {
        try {
          quantity.convertUnit(newUnit);
          return true;
        } catch (error) {
          return false;
        }
      }

      return null;
    }
  }]);

  return CanConvertQuantity;
}(Expression);

var Is = /*#__PURE__*/function (_Expression24) {
  _inherits(Is, _Expression24);

  var _super24 = _createSuper(Is);

  function Is(json) {
    var _this12;

    _classCallCheck(this, Is);

    _this12 = _super24.call(this, json);

    if (json.isTypeSpecifier) {
      _this12.isTypeSpecifier = json.isTypeSpecifier;
    } else if (json.isType) {
      // Convert it to a NamedTypeSpecifier
      _this12.isTypeSpecifier = {
        name: json.isType,
        type: 'NamedTypeSpecifier'
      };
    }

    return _this12;
  }

  _createClass(Is, [{
    key: "exec",
    value: function exec(ctx) {
      var arg = this.execArgs(ctx);

      if (arg === null) {
        return false;
      }

      if (typeof arg._is !== 'function' && !isSystemType(this.isTypeSpecifier)) {
        // We need an _is implementation in order to check non System types
        throw new Error("Patient Source does not support Is operation for localId: ".concat(this.localId));
      }

      return ctx.matchesTypeSpecifier(arg, this.isTypeSpecifier);
    }
  }]);

  return Is;
}(Expression);

function isSystemType(spec) {
  switch (spec.type) {
    case 'NamedTypeSpecifier':
      return spec.name.startsWith('{urn:hl7-org:elm-types:r1}');

    case 'ListTypeSpecifier':
      return isSystemType(spec.elementType);

    case 'TupleTypeSpecifier':
      return spec.element.every(function (e) {
        return isSystemType(e.elementType);
      });

    case 'IntervalTypeSpecifier':
      return isSystemType(spec.pointType);

    case 'ChoiceTypeSpecifier':
      return spec.choice.every(function (c) {
        return isSystemType(c);
      });

    default:
      return false;
  }
}

var IntervalTypeSpecifier = /*#__PURE__*/function (_UnimplementedExpress) {
  _inherits(IntervalTypeSpecifier, _UnimplementedExpress);

  var _super25 = _createSuper(IntervalTypeSpecifier);

  function IntervalTypeSpecifier() {
    _classCallCheck(this, IntervalTypeSpecifier);

    return _super25.apply(this, arguments);
  }

  return IntervalTypeSpecifier;
}(UnimplementedExpression);

var ListTypeSpecifier = /*#__PURE__*/function (_UnimplementedExpress2) {
  _inherits(ListTypeSpecifier, _UnimplementedExpress2);

  var _super26 = _createSuper(ListTypeSpecifier);

  function ListTypeSpecifier() {
    _classCallCheck(this, ListTypeSpecifier);

    return _super26.apply(this, arguments);
  }

  return ListTypeSpecifier;
}(UnimplementedExpression);

var NamedTypeSpecifier = /*#__PURE__*/function (_UnimplementedExpress3) {
  _inherits(NamedTypeSpecifier, _UnimplementedExpress3);

  var _super27 = _createSuper(NamedTypeSpecifier);

  function NamedTypeSpecifier() {
    _classCallCheck(this, NamedTypeSpecifier);

    return _super27.apply(this, arguments);
  }

  return NamedTypeSpecifier;
}(UnimplementedExpression);

var TupleTypeSpecifier = /*#__PURE__*/function (_UnimplementedExpress4) {
  _inherits(TupleTypeSpecifier, _UnimplementedExpress4);

  var _super28 = _createSuper(TupleTypeSpecifier);

  function TupleTypeSpecifier() {
    _classCallCheck(this, TupleTypeSpecifier);

    return _super28.apply(this, arguments);
  }

  return TupleTypeSpecifier;
}(UnimplementedExpression);

module.exports = {
  As: As,
  CanConvertQuantity: CanConvertQuantity,
  Convert: Convert,
  ConvertQuantity: ConvertQuantity,
  ConvertsToBoolean: ConvertsToBoolean,
  ConvertsToDate: ConvertsToDate,
  ConvertsToDateTime: ConvertsToDateTime,
  ConvertsToDecimal: ConvertsToDecimal,
  ConvertsToInteger: ConvertsToInteger,
  ConvertsToQuantity: ConvertsToQuantity,
  ConvertsToRatio: ConvertsToRatio,
  ConvertsToString: ConvertsToString,
  ConvertsToTime: ConvertsToTime,
  IntervalTypeSpecifier: IntervalTypeSpecifier,
  Is: Is,
  ListTypeSpecifier: ListTypeSpecifier,
  NamedTypeSpecifier: NamedTypeSpecifier,
  ToBoolean: ToBoolean,
  ToConcept: ToConcept,
  ToDate: ToDate,
  ToDateTime: ToDateTime,
  ToDecimal: ToDecimal,
  ToInteger: ToInteger,
  ToQuantity: ToQuantity,
  ToRatio: ToRatio,
  ToString: ToString,
  ToTime: ToTime,
  TupleTypeSpecifier: TupleTypeSpecifier
};
},{"../datatypes/clinical":5,"../datatypes/datetime":7,"../datatypes/quantity":11,"../datatypes/ratio":12,"../util/math":46,"../util/util":47,"./expression":22}],41:[function(require,module,exports){
"use strict";

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('../datatypes/exception'),
    Exception = _require.Exception;

var _require2 = require('../util/util'),
    typeIsArray = _require2.typeIsArray;

var dt = require('../datatypes/datatypes');

var Context = /*#__PURE__*/function () {
  function Context(parent) {
    var _codeService = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var _parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Context);

    this.parent = parent;
    this._codeService = _codeService;
    this.context_values = {};
    this.library_context = {};
    this.localId_context = {};
    this.evaluatedRecords = []; // TODO: If there is an issue with number of parameters look into cql4browsers fix: 387ea77538182833283af65e6341e7a05192304c

    this.checkParameters(_parameters); // not crazy about possibly throwing an error in a constructor, but...

    this._parameters = _parameters;
  }

  _createClass(Context, [{
    key: "withParameters",
    value: function withParameters(params) {
      this.parameters = params || {};
      return this;
    }
  }, {
    key: "withCodeService",
    value: function withCodeService(cs) {
      this.codeService = cs;
      return this;
    }
  }, {
    key: "rootContext",
    value: function rootContext() {
      if (this.parent) {
        return this.parent.rootContext();
      } else {
        return this;
      }
    }
  }, {
    key: "findRecords",
    value: function findRecords(profile) {
      return this.parent && this.parent.findRecords(profile);
    }
  }, {
    key: "childContext",
    value: function childContext() {
      var context_values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var ctx = new Context(this);
      ctx.context_values = context_values;
      return ctx;
    }
  }, {
    key: "getLibraryContext",
    value: function getLibraryContext(library) {
      return this.parent && this.parent.getLibraryContext(library);
    }
  }, {
    key: "getLocalIdContext",
    value: function getLocalIdContext(localId) {
      return this.parent && this.parent.getLocalIdContext(localId);
    }
  }, {
    key: "getParameter",
    value: function getParameter(name) {
      return this.parent && this.parent.getParameter(name);
    }
  }, {
    key: "getParentParameter",
    value: function getParentParameter(name) {
      if (this.parent) {
        if (this.parent.parameters[name] != null) {
          return this.parent.parameters[name];
        } else {
          return this.parent.getParentParameter(name);
        }
      }
    }
  }, {
    key: "getTimezoneOffset",
    value: function getTimezoneOffset() {
      if (this.executionDateTime != null) {
        return this.executionDateTime.timezoneOffset;
      } else if (this.parent && this.parent.getTimezoneOffset != null) {
        return this.parent.getTimezoneOffset();
      } else {
        throw new Exception('No Timezone Offset has been set');
      }
    }
  }, {
    key: "getExecutionDateTime",
    value: function getExecutionDateTime() {
      if (this.executionDateTime != null) {
        return this.executionDateTime;
      } else if (this.parent && this.parent.getExecutionDateTime != null) {
        return this.parent.getExecutionDateTime();
      } else {
        throw new Exception('No Execution DateTime has been set');
      }
    }
  }, {
    key: "getValueSet",
    value: function getValueSet(name, library) {
      return this.parent && this.parent.getValueSet(name, library);
    }
  }, {
    key: "getCodeSystem",
    value: function getCodeSystem(name) {
      return this.parent && this.parent.getCodeSystem(name);
    }
  }, {
    key: "getCode",
    value: function getCode(name) {
      return this.parent && this.parent.getCode(name);
    }
  }, {
    key: "getConcept",
    value: function getConcept(name) {
      return this.parent && this.parent.getConcept(name);
    }
  }, {
    key: "get",
    value: function get(identifier) {
      // Check for undefined because if its null, we actually *do* want to return null (rather than
      // looking at parent), but if it's really undefined, *then* look at the parent
      if (typeof this.context_values[identifier] !== 'undefined') {
        return this.context_values[identifier];
      } else if (identifier === '$this') {
        return this.context_values;
      } else {
        return this.parent != null && this.parent.get(identifier);
      }
    }
  }, {
    key: "set",
    value: function set(identifier, value) {
      this.context_values[identifier] = value;
    }
  }, {
    key: "setLocalIdWithResult",
    value: function setLocalIdWithResult(localId, value) {
      // Temporary fix. Real fix will be to return a list of all result values for a given localId.
      var ctx = this.localId_context[localId];

      if (ctx === false || ctx === null || ctx === undefined || ctx.length === 0) {
        this.localId_context[localId] = value;
      }
    }
  }, {
    key: "getLocalIdResult",
    value: function getLocalIdResult(localId) {
      return this.localId_context[localId];
    } // Returns an object of objects containing each library name
    // with the localIds and result values

  }, {
    key: "getAllLocalIds",
    value: function getAllLocalIds() {
      var localIdResults = {}; // Add the localIds and result values from the main library

      localIdResults[this.parent.source.library.identifier.id] = {};
      localIdResults[this.parent.source.library.identifier.id] = this.localId_context; // Iterate over support libraries and store localIds

      for (var libName in this.library_context) {
        var lib = this.library_context[libName];
        this.supportLibraryLocalIds(lib, localIdResults);
      }

      return localIdResults;
    } // Recursive function that will grab nested support library localId results

  }, {
    key: "supportLibraryLocalIds",
    value: function supportLibraryLocalIds(lib, localIdResults) {
      var _this = this;

      // Set library identifier name as the key and the object of localIds with their results as the value
      // if it already exists then we need to merge the results instead of overwriting
      if (localIdResults[lib.library.source.library.identifier.id] != null) {
        this.mergeLibraryLocalIdResults(localIdResults, lib.library.source.library.identifier.id, lib.localId_context);
      } else {
        localIdResults[lib.library.source.library.identifier.id] = lib.localId_context;
      } // Iterate over any support libraries in the current support library


      Object.values(lib.library_context).forEach(function (supportLib) {
        _this.supportLibraryLocalIds(supportLib, localIdResults);
      });
    } // Merges the localId results for a library into the already collected results. The logic used for which result
    // to keep is the same as the logic used above in setLocalIdWithResult, "falsey" results are always replaced.

  }, {
    key: "mergeLibraryLocalIdResults",
    value: function mergeLibraryLocalIdResults(localIdResults, libraryId, libraryResults) {
      for (var localId in libraryResults) {
        var localIdResult = libraryResults[localId];
        var existingResult = localIdResults[libraryId][localId]; // overwite this localid result if the existing result is "falsey". future work could track all results for each localid

        if (existingResult === false || existingResult === null || existingResult === undefined || existingResult.length === 0) {
          localIdResults[libraryId][localId] = localIdResult;
        }
      }
    }
  }, {
    key: "checkParameters",
    value: function checkParameters(params) {
      for (var pName in params) {
        var pVal = params[pName];
        var pDef = this.getParameter(pName);

        if (pVal == null) {
          return; // Null can theoretically be any type
        }

        if (typeof pDef === 'undefined') {
          return; // This will happen if the parameter is declared in a different (included) library
        } else if (pDef.parameterTypeSpecifier != null && !this.matchesTypeSpecifier(pVal, pDef.parameterTypeSpecifier)) {
          throw new Error("Passed in parameter '".concat(pName, "' is wrong type"));
        } else if (pDef['default'] != null && !this.matchesInstanceType(pVal, pDef['default'])) {
          throw new Error("Passed in parameter '".concat(pName, "' is wrong type"));
        }
      }

      return true;
    }
  }, {
    key: "matchesTypeSpecifier",
    value: function matchesTypeSpecifier(val, spec) {
      switch (spec.type) {
        case 'NamedTypeSpecifier':
          return this.matchesNamedTypeSpecifier(val, spec);

        case 'ListTypeSpecifier':
          return this.matchesListTypeSpecifier(val, spec);

        case 'TupleTypeSpecifier':
          return this.matchesTupleTypeSpecifier(val, spec);

        case 'IntervalTypeSpecifier':
          return this.matchesIntervalTypeSpecifier(val, spec);

        case 'ChoiceTypeSpecifier':
          return this.matchesChoiceTypeSpecifier(val, spec);

        default:
          return true;
        // default to true when we don't know
      }
    }
  }, {
    key: "matchesListTypeSpecifier",
    value: function matchesListTypeSpecifier(val, spec) {
      var _this2 = this;

      return typeIsArray(val) && val.every(function (x) {
        return _this2.matchesTypeSpecifier(x, spec.elementType);
      });
    }
  }, {
    key: "matchesTupleTypeSpecifier",
    value: function matchesTupleTypeSpecifier(val, spec) {
      var _this3 = this;

      return _typeof(val) === 'object' && !typeIsArray(val) && spec.element.every(function (x) {
        return typeof val[x.name] === 'undefined' || _this3.matchesTypeSpecifier(val[x.name], x.elementType);
      });
    }
  }, {
    key: "matchesIntervalTypeSpecifier",
    value: function matchesIntervalTypeSpecifier(val, spec) {
      return val.isInterval && (val.low == null || this.matchesTypeSpecifier(val.low, spec.pointType)) && (val.high == null || this.matchesTypeSpecifier(val.high, spec.pointType));
    }
  }, {
    key: "matchesChoiceTypeSpecifier",
    value: function matchesChoiceTypeSpecifier(val, spec) {
      var _this4 = this;

      return spec.choice.some(function (c) {
        return _this4.matchesTypeSpecifier(val, c);
      });
    }
  }, {
    key: "matchesNamedTypeSpecifier",
    value: function matchesNamedTypeSpecifier(val, spec) {
      if (val == null) {
        return true;
      }

      switch (spec.name) {
        case '{urn:hl7-org:elm-types:r1}Boolean':
          return typeof val === 'boolean';

        case '{urn:hl7-org:elm-types:r1}Decimal':
          return typeof val === 'number';

        case '{urn:hl7-org:elm-types:r1}Integer':
          return typeof val === 'number' && Math.floor(val) === val;

        case '{urn:hl7-org:elm-types:r1}String':
          return typeof val === 'string';

        case '{urn:hl7-org:elm-types:r1}Concept':
          return val && val.isConcept;

        case '{urn:hl7-org:elm-types:r1}Code':
          return val && val.isCode;

        case '{urn:hl7-org:elm-types:r1}DateTime':
          return val && val.isDateTime;

        case '{urn:hl7-org:elm-types:r1}Date':
          return val && val.isDate;

        case '{urn:hl7-org:elm-types:r1}Quantity':
          return val && val.isQuantity;

        case '{urn:hl7-org:elm-types:r1}Time':
          return val && val.isDateTime && val.isTime();

        default:
          // Use the data model's implementation of _is, if it is available
          if (typeof val._is === 'function') {
            return val._is(spec);
          } // otherwise just default to true


          return true;
      }
    }
  }, {
    key: "matchesInstanceType",
    value: function matchesInstanceType(val, inst) {
      switch (false) {
        case !inst.isBooleanLiteral:
          return typeof val === 'boolean';

        case !inst.isDecimalLiteral:
          return typeof val === 'number';

        case !inst.isIntegerLiteral:
          return typeof val === 'number' && Math.floor(val) === val;

        case !inst.isStringLiteral:
          return typeof val === 'string';

        case !inst.isCode:
          return val && val.isCode;

        case !inst.isConcept:
          return val && val.isConcept;

        case !inst.isDateTime:
          return val && val.isDateTime;

        case !inst.isQuantity:
          return val && val.isQuantity;

        case !inst.isTime:
          return val && val.isDateTime && val.isTime();

        case !inst.isList:
          return this.matchesListInstanceType(val, inst);

        case !inst.isTuple:
          return this.matchesTupleInstanceType(val, inst);

        case !inst.isInterval:
          return this.matchesIntervalInstanceType(val, inst);

        default:
          return true;
        // default to true when we don't know for sure
      }
    }
  }, {
    key: "matchesListInstanceType",
    value: function matchesListInstanceType(val, list) {
      var _this5 = this;

      return typeIsArray(val) && val.every(function (x) {
        return _this5.matchesInstanceType(x, list.elements[0]);
      });
    }
  }, {
    key: "matchesTupleInstanceType",
    value: function matchesTupleInstanceType(val, tpl) {
      var _this6 = this;

      return _typeof(val) === 'object' && !typeIsArray(val) && tpl.elements.every(function (x) {
        return typeof val[x.name] === 'undefined' || _this6.matchesInstanceType(val[x.name], x.value);
      });
    }
  }, {
    key: "matchesIntervalInstanceType",
    value: function matchesIntervalInstanceType(val, ivl) {
      var pointType = ivl.low != null ? ivl.low : ivl.high;
      return val.isInterval && (val.low == null || this.matchesInstanceType(val.low, pointType)) && (val.high == null || this.matchesInstanceType(val.high, pointType));
    }
  }, {
    key: "parameters",
    get: function get() {
      return this._parameters || this.parent && this.parent.parameters;
    },
    set: function set(params) {
      this.checkParameters(params);
      this._parameters = params;
    }
  }, {
    key: "codeService",
    get: function get() {
      return this._codeService || this.parent && this.parent.codeService;
    },
    set: function set(cs) {
      this._codeService = cs;
    }
  }]);

  return Context;
}();

var PatientContext = /*#__PURE__*/function (_Context) {
  _inherits(PatientContext, _Context);

  var _super = _createSuper(PatientContext);

  function PatientContext(library, patient, codeService, parameters) {
    var _this7;

    var executionDateTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : dt.DateTime.fromJSDate(new Date());

    _classCallCheck(this, PatientContext);

    _this7 = _super.call(this, library, codeService, parameters);
    _this7.library = library;
    _this7.patient = patient;
    _this7.executionDateTime = executionDateTime;
    return _this7;
  }

  _createClass(PatientContext, [{
    key: "rootContext",
    value: function rootContext() {
      return this;
    }
  }, {
    key: "getLibraryContext",
    value: function getLibraryContext(library) {
      if (this.library_context[library] == null) {
        this.library_context[library] = new PatientContext(this.get(library), this.patient, this.codeService, this.parameters, this.executionDateTime);
      }

      return this.library_context[library];
    }
  }, {
    key: "getLocalIdContext",
    value: function getLocalIdContext(localId) {
      if (this.localId_context[localId] == null) {
        this.localId_context[localId] = new PatientContext(this.get(localId), this.patient, this.codeService, this.parameters, this.executionDateTime);
      }

      return this.localId_context[localId];
    }
  }, {
    key: "findRecords",
    value: function findRecords(profile) {
      return this.patient && this.patient.findRecords(profile);
    }
  }]);

  return PatientContext;
}(Context);

var UnfilteredContext = /*#__PURE__*/function (_Context2) {
  _inherits(UnfilteredContext, _Context2);

  var _super2 = _createSuper(UnfilteredContext);

  function UnfilteredContext(library, results, codeService, parameters) {
    var _this8;

    var executionDateTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : dt.DateTime.fromJSDate(new Date());

    _classCallCheck(this, UnfilteredContext);

    _this8 = _super2.call(this, library, codeService, parameters);
    _this8.library = library;
    _this8.results = results;
    _this8.executionDateTime = executionDateTime;
    return _this8;
  }

  _createClass(UnfilteredContext, [{
    key: "rootContext",
    value: function rootContext() {
      return this;
    }
  }, {
    key: "findRecords",
    value: function findRecords(template) {
      throw new Exception('Retreives are not currently supported in Unfiltered Context');
    }
  }, {
    key: "getLibraryContext",
    value: function getLibraryContext(library) {
      throw new Exception('Library expressions are not currently supported in Unfiltered Context');
    }
  }, {
    key: "get",
    value: function get(identifier) {
      //First check to see if the identifier is a unfiltered context expression that has already been cached
      if (this.context_values[identifier]) {
        return this.context_values[identifier];
      } //if not look to see if the library has a unfiltered expression of that identifier


      if (this.library[identifier] && this.library[identifier].context === 'Unfiltered') {
        return this.library.expressions[identifier];
      } //lastley attempt to gather all patient level results that have that identifier
      // should this compact null values before return ?


      return Object.values(this.results.patientResults).map(function (pr) {
        return pr[identifier];
      });
    }
  }]);

  return UnfilteredContext;
}(Context);

module.exports = {
  Context: Context,
  PatientContext: PatientContext,
  UnfilteredContext: UnfilteredContext
};
},{"../datatypes/datatypes":6,"../datatypes/exception":8,"../util/util":47}],42:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./results'),
    Results = _require.Results;

var _require2 = require('./context'),
    UnfilteredContext = _require2.UnfilteredContext,
    PatientContext = _require2.PatientContext;

var Executor = /*#__PURE__*/function () {
  function Executor(library, codeService, parameters) {
    _classCallCheck(this, Executor);

    this.library = library;
    this.codeService = codeService;
    this.parameters = parameters;
  }

  _createClass(Executor, [{
    key: "withLibrary",
    value: function withLibrary(lib) {
      this.library = lib;
      return this;
    }
  }, {
    key: "withParameters",
    value: function withParameters(params) {
      this.parameters = params != null ? params : {};
      return this;
    }
  }, {
    key: "withCodeService",
    value: function withCodeService(cs) {
      this.codeService = cs;
      return this;
    }
  }, {
    key: "exec_expression",
    value: function exec_expression(expression, patientSource) {
      var r = new Results();
      var expr = this.library.expressions[expression];

      if (expr != null) {
        while (patientSource.currentPatient()) {
          var patient_ctx = new PatientContext(this.library, patientSource.currentPatient(), this.codeService, this.parameters);
          r.recordPatientResult(patient_ctx, expression, expr.execute(patient_ctx));
          patientSource.nextPatient();
        }
      }

      return r;
    }
  }, {
    key: "exec",
    value: function exec(patientSource, executionDateTime) {
      var r = this.exec_patient_context(patientSource, executionDateTime);
      var unfilteredContext = new UnfilteredContext(this.library, r, this.codeService, this.parameters);

      for (var key in this.library.expressions) {
        var expr = this.library.expressions[key];

        if (expr.context === 'Unfiltered') {
          r.recordUnfilteredResult(key, expr.exec(unfilteredContext));
        }
      }

      return r;
    }
  }, {
    key: "exec_patient_context",
    value: function exec_patient_context(patientSource, executionDateTime) {
      var r = new Results();

      while (patientSource.currentPatient()) {
        var patient_ctx = new PatientContext(this.library, patientSource.currentPatient(), this.codeService, this.parameters, executionDateTime);

        for (var key in this.library.expressions) {
          var expr = this.library.expressions[key];

          if (expr.context === 'Patient') {
            r.recordPatientResult(patient_ctx, key, expr.execute(patient_ctx));
          }
        }

        patientSource.nextPatient();
      }

      return r;
    }
  }]);

  return Executor;
}();

module.exports = {
  Executor: Executor
};
},{"./context":41,"./results":44}],43:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('../elm/library'),
    Library = _require.Library;

var Repository = /*#__PURE__*/function () {
  function Repository(data) {
    _classCallCheck(this, Repository);

    this.data = data;
    this.libraries = Array.from(Object.values(data));
  }

  _createClass(Repository, [{
    key: "resolve",
    value: function resolve(library, version) {
      var _iterator = _createForOfIteratorHelper(this.libraries),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var lib = _step.value;

          if (lib.library && lib.library.identifier) {
            var id = lib.library.identifier;

            if (id.id === library && id.version === version) {
              return new Library(lib, this);
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);

  return Repository;
}();

module.exports = {
  Repository: Repository
};
},{"../elm/library":27}],44:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Results = /*#__PURE__*/function () {
  function Results() {
    _classCallCheck(this, Results);

    this.patientResults = {};
    this.unfilteredResults = {};
    this.localIdPatientResultsMap = {};
    this.evaluatedRecords = [];
  }

  _createClass(Results, [{
    key: "recordPatientResult",
    value: function recordPatientResult(patient_ctx, resultName, result) {
      var _this = this;

      var p = patient_ctx.patient; // NOTE: From now on prefer getId() over id() because some data models may have an id property
      // that is not a string (e.g., FHIR) -- so reserve getId() for the API (and expect a string
      // representation) but leave id() for data-model specific formats.

      var patientId = typeof p.getId === 'function' ? p.getId() : p.id();

      if (this.patientResults[patientId] == null) {
        this.patientResults[patientId] = {};
      }

      this.patientResults[patientId][resultName] = result;
      this.localIdPatientResultsMap[patientId] = patient_ctx.getAllLocalIds(); // Merge evaluatedRecords with an aggregated array across all libraries

      this.evaluatedRecords = _toConsumableArray(patient_ctx.evaluatedRecords);
      Object.values(patient_ctx.library_context).forEach(function (ctx) {
        var _this$evaluatedRecord;

        (_this$evaluatedRecord = _this.evaluatedRecords).push.apply(_this$evaluatedRecord, _toConsumableArray(ctx.evaluatedRecords));
      });
    }
  }, {
    key: "recordUnfilteredResult",
    value: function recordUnfilteredResult(resultName, result) {
      this.unfilteredResults[resultName] = result;
    }
  }]);

  return Results;
}();

module.exports = {
  Results: Results
};
},{}],45:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('../datatypes/uncertainty'),
    Uncertainty = _require.Uncertainty;

function areNumbers(a, b) {
  return typeof a === 'number' && typeof b === 'number';
}

function areDateTimesOrQuantities(a, b) {
  return a && a.isDateTime && b && b.isDateTime || a && a.isDate && b && b.isDate || a && a.isTime && b && b.isTime || a && a.isQuantity && b && b.isQuantity;
}

function isUncertainty(x) {
  return x instanceof Uncertainty;
}

function lessThan(a, b, precision) {
  if (areNumbers(a, b)) {
    return a < b;
  } else if (areDateTimesOrQuantities(a, b)) {
    return a.before(b, precision);
  } else if (isUncertainty(a)) {
    return a.lessThan(b);
  } else if (isUncertainty(b)) {
    return Uncertainty.from(a).lessThan(b);
  } else {
    return null;
  }
}

function lessThanOrEquals(a, b, precision) {
  if (areNumbers(a, b)) {
    return a <= b;
  } else if (areDateTimesOrQuantities(a, b)) {
    return a.sameOrBefore(b, precision);
  } else if (isUncertainty(a)) {
    return a.lessThanOrEquals(b);
  } else if (isUncertainty(b)) {
    return Uncertainty.from(a).lessThanOrEquals(b);
  } else {
    return null;
  }
}

function greaterThan(a, b, precision) {
  if (areNumbers(a, b)) {
    return a > b;
  } else if (areDateTimesOrQuantities(a, b)) {
    return a.after(b, precision);
  } else if (isUncertainty(a)) {
    return a.greaterThan(b);
  } else if (isUncertainty(b)) {
    return Uncertainty.from(a).greaterThan(b);
  } else {
    return null;
  }
}

function greaterThanOrEquals(a, b, precision) {
  if (areNumbers(a, b)) {
    return a >= b;
  } else if (areDateTimesOrQuantities(a, b)) {
    return a.sameOrAfter(b, precision);
  } else if (isUncertainty(a)) {
    return a.greaterThanOrEquals(b);
  } else if (isUncertainty(b)) {
    return Uncertainty.from(a).greaterThanOrEquals(b);
  } else {
    return null;
  }
}

function equivalent(a, b) {
  if (a == null && b == null) {
    return true;
  }

  if (a == null || b == null) {
    return false;
  }

  if (isCode(a)) {
    return codesAreEquivalent(a, b);
  } // Use overloaded 'equivalent' function if it is available


  if (typeof a.equivalent === 'function') {
    return a.equivalent(b);
  }

  var _getClassOfObjects = getClassOfObjects(a, b),
      _getClassOfObjects2 = _slicedToArray(_getClassOfObjects, 2),
      aClass = _getClassOfObjects2[0],
      bClass = _getClassOfObjects2[1];

  switch (aClass) {
    case '[object Array]':
      return compareEveryItemInArrays(a, b, equivalent);

    case '[object Object]':
      return compareObjects(a, b, equivalent);

    case '[object String]':
      // Make sure b is also a string
      if (bClass === '[object String]') {
        // String equivalence is case- and locale insensitive
        a = a.replace(/\s/g, ' ');
        b = b.replace(/\s/g, ' ');
        return a.localeCompare(b, 'en', {
          sensitivity: 'base'
        }) === 0;
      }

      break;
  }

  return equals(a, b);
}

function isCode(object) {
  return object.hasMatch && typeof object.hasMatch === 'function';
}

function codesAreEquivalent(code1, code2) {
  return code1.hasMatch(code2);
}

function getClassOfObjects(object1, object2) {
  return [object1, object2].map(function (obj) {
    return {}.toString.call(obj);
  });
}

function compareEveryItemInArrays(array1, array2, comparisonFunction) {
  return array1.length === array2.length && array1.every(function (item, i) {
    return comparisonFunction(item, array2[i]);
  });
}

function compareObjects(a, b, comparisonFunction) {
  if (!classesEqual(a, b)) {
    return false;
  }

  return deepCompareKeysAndValues(a, b, comparisonFunction);
}

function classesEqual(object1, object2) {
  return object2 instanceof object1.constructor && object1 instanceof object2.constructor;
}

function deepCompareKeysAndValues(a, b, comparisonFunction) {
  var finalComparisonResult;
  var aKeys = getKeysFromObject(a).sort();
  var bKeys = getKeysFromObject(b).sort(); // Array.every() will only return true or false, so set a flag for if we should return null

  var shouldReturnNull = false; // Check if both arrays of keys are the same length and key names match

  if (aKeys.length === bKeys.length && aKeys.every(function (value, index) {
    return value === bKeys[index];
  })) {
    finalComparisonResult = aKeys.every(function (key) {
      // if both are null we should return true to satisfy ignoring empty values in tuples
      if (a[key] == null && b[key] == null) {
        return true;
      }

      var comparisonResult = comparisonFunction(a[key], b[key]);

      if (comparisonResult === null) {
        shouldReturnNull = true;
      }

      return comparisonResult;
    });
  } else {
    finalComparisonResult = false;
  }

  if (shouldReturnNull) {
    return null;
  }

  return finalComparisonResult;
}

function getKeysFromObject(object) {
  return Object.keys(object).filter(function (k) {
    return !isFunction(object[k]);
  });
}

function isFunction(input) {
  return input instanceof Function || {}.toString.call(input) === '[object Function]';
}

function equals(a, b) {
  // Handle null cases first: spec says if either is null, return null
  if (a == null || b == null) {
    return null;
  } // If one is a Quantity, use the Quantity equals function


  if (a && a.isQuantity) {
    return a.equals(b);
  } // If one is a Ratio, use the ratio equals function


  if (a && a.isRatio) {
    return a.equals(b);
  } // If one is an Uncertainty, convert the other to an Uncertainty


  if (a instanceof Uncertainty) {
    b = Uncertainty.from(b);
  } else if (b instanceof Uncertainty) {
    a = Uncertainty.from(a);
  } // Use overloaded 'equals' function if it is available


  if (typeof a.equals === 'function') {
    return a.equals(b);
  } // Return true of the objects are primitives and are strictly equal


  if (_typeof(a) === _typeof(b) && typeof a === 'string' || typeof a === 'number' || typeof a === 'boolean') {
    return a === b;
  } // Return false if they are instances of different classes


  var _getClassOfObjects3 = getClassOfObjects(a, b),
      _getClassOfObjects4 = _slicedToArray(_getClassOfObjects3, 2),
      aClass = _getClassOfObjects4[0],
      bClass = _getClassOfObjects4[1];

  if (aClass !== bClass) {
    return false;
  }

  switch (aClass) {
    case '[object Date]':
      // Compare the ms since epoch
      return a.getTime() === b.getTime();

    case '[object RegExp]':
      // Compare the components of the regular expression
      return ['source', 'global', 'ignoreCase', 'multiline'].every(function (p) {
        return a[p] === b[p];
      });

    case '[object Array]':
      if (a.indexOf(null) >= 0 || a.indexOf(undefined) >= 0 || b.indexOf(null) >= 0 || b.indexOf(undefined) >= 0) {
        return null;
      }

      return compareEveryItemInArrays(a, b, equals);

    case '[object Object]':
      return compareObjects(a, b, equals);

    case '[object Function]':
      return a.toString() === b.toString();
  } // If we made it this far, we can't handle it


  return false;
}

module.exports = {
  lessThan: lessThan,
  lessThanOrEquals: lessThanOrEquals,
  greaterThan: greaterThan,
  greaterThanOrEquals: greaterThanOrEquals,
  equivalent: equivalent,
  equals: equals
};
},{"../datatypes/uncertainty":13}],46:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('../datatypes/exception'),
    Exception = _require.Exception;

var _require2 = require('../datatypes/datetime'),
    MIN_DATETIME_VALUE = _require2.MIN_DATETIME_VALUE,
    MAX_DATETIME_VALUE = _require2.MAX_DATETIME_VALUE,
    MIN_DATE_VALUE = _require2.MIN_DATE_VALUE,
    MAX_DATE_VALUE = _require2.MAX_DATE_VALUE,
    MIN_TIME_VALUE = _require2.MIN_TIME_VALUE,
    MAX_TIME_VALUE = _require2.MAX_TIME_VALUE;

var _require3 = require('../datatypes/uncertainty'),
    Uncertainty = _require3.Uncertainty;

var MAX_INT_VALUE = Math.pow(2, 31) - 1;
var MIN_INT_VALUE = Math.pow(-2, 31);
var MAX_FLOAT_VALUE = 99999999999999999999999999999.99999999;
var MIN_FLOAT_VALUE = -99999999999999999999999999999.99999999;
var MIN_FLOAT_PRECISION_VALUE = Math.pow(10, -8);

function overflowsOrUnderflows(value) {
  if (value == null) {
    return false;
  }

  if (value.isQuantity) {
    if (!isValidDecimal(value.value)) {
      return true;
    }
  } else if (value.isTime != null && value.isTime()) {
    if (value.after(MAX_TIME_VALUE)) {
      return true;
    }

    if (value.before(MIN_TIME_VALUE)) {
      return true;
    }
  } else if (value.isDateTime) {
    if (value.after(MAX_DATETIME_VALUE)) {
      return true;
    }

    if (value.before(MIN_DATETIME_VALUE)) {
      return true;
    }
  } else if (value.isDate) {
    if (value.after(MAX_DATE_VALUE)) {
      return true;
    }

    if (value.before(MIN_DATE_VALUE)) {
      return true;
    }
  } else if (Number.isInteger(value)) {
    if (!isValidInteger(value)) {
      return true;
    }
  } else {
    if (!isValidDecimal(value)) {
      return true;
    }
  }

  return false;
}

function isValidInteger(integer) {
  if (isNaN(integer)) {
    return false;
  }

  if (integer > MAX_INT_VALUE) {
    return false;
  }

  if (integer < MIN_INT_VALUE) {
    return false;
  }

  return true;
}

function isValidDecimal(decimal) {
  if (isNaN(decimal)) {
    return false;
  }

  if (decimal > MAX_FLOAT_VALUE) {
    return false;
  }

  if (decimal < MIN_FLOAT_VALUE) {
    return false;
  }

  return true;
}

function limitDecimalPrecision(decimal) {
  var decimalString = decimal.toString(); // For decimals so large that they are represented in scientific notation, javascript has already limited
  // the decimal to its own constraints, so we can't determine the original precision.  Leave as-is unless
  // this becomes problematic, in which case we would need our own parseFloat.

  if (decimalString.indexOf('e') !== -1) {
    return decimal;
  }

  var splitDecimalString = decimalString.split('.');
  var decimalPoints = splitDecimalString[1];

  if (decimalPoints != null && decimalPoints.length > 8) {
    decimalString = splitDecimalString[0] + '.' + splitDecimalString[1].substring(0, 8);
  }

  return parseFloat(decimalString);
}

var OverFlowException = /*#__PURE__*/function (_Exception) {
  _inherits(OverFlowException, _Exception);

  var _super = _createSuper(OverFlowException);

  function OverFlowException() {
    _classCallCheck(this, OverFlowException);

    return _super.apply(this, arguments);
  }

  return OverFlowException;
}(Exception);

function successor(val) {
  if (typeof val === 'number') {
    if (parseInt(val) === val) {
      if (val === MAX_INT_VALUE) {
        throw new OverFlowException();
      } else {
        return val + 1;
      }
    } else {
      if (val === MAX_FLOAT_VALUE) {
        throw new OverFlowException();
      } else {
        return val + MIN_FLOAT_PRECISION_VALUE;
      }
    }
  } else if (val && val.isDateTime) {
    if (val.sameAs(MAX_DATETIME_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.successor();
    }
  } else if (val && val.isDate) {
    if (val.sameAs(MAX_DATE_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.successor();
    }
  } else if (val && val.isTime) {
    if (val.sameAs(MAX_TIME_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.successor();
    }
  } else if (val && val.isUncertainty) {
    // For uncertainties, if the high is the max val, don't increment it
    var high = function () {
      try {
        return successor(val.high);
      } catch (e) {
        return val.high;
      }
    }();

    return new Uncertainty(successor(val.low), high);
  } else if (val && val.isQuantity) {
    var succ = val.clone();
    succ.value = successor(val.value);
    return succ;
  } else if (val == null) {
    return null;
  }
}

function predecessor(val) {
  if (typeof val === 'number') {
    if (parseInt(val) === val) {
      if (val === MIN_INT_VALUE) {
        throw new OverFlowException();
      } else {
        return val - 1;
      }
    } else {
      if (val === MIN_FLOAT_VALUE) {
        throw new OverFlowException();
      } else {
        return val - MIN_FLOAT_PRECISION_VALUE;
      }
    }
  } else if (val && val.isDateTime) {
    if (val.sameAs(MIN_DATETIME_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.predecessor();
    }
  } else if (val && val.isDate) {
    if (val.sameAs(MIN_DATE_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.predecessor();
    }
  } else if (val && val.isTime) {
    if (val.sameAs(MIN_TIME_VALUE)) {
      throw new OverFlowException();
    } else {
      return val.predecessor();
    }
  } else if (val && val.isUncertainty) {
    // For uncertainties, if the low is the min val, don't decrement it
    var low = function () {
      try {
        return predecessor(val.low);
      } catch (e) {
        return val.low;
      }
    }();

    return new Uncertainty(low, predecessor(val.high));
  } else if (val && val.isQuantity) {
    var pred = val.clone();
    pred.value = predecessor(val.value);
    return pred;
  } else if (val == null) {
    return null;
  }
}

function maxValueForInstance(val) {
  if (typeof val === 'number') {
    if (parseInt(val) === val) {
      return MAX_INT_VALUE;
    } else {
      return MAX_FLOAT_VALUE;
    }
  } else if (val && val.isDateTime) {
    return MAX_DATETIME_VALUE.copy();
  } else if (val && val.isDate) {
    return MAX_DATE_VALUE.copy();
  } else if (val && val.isTime) {
    return MAX_TIME_VALUE.copy();
  } else if (val && val.isQuantity) {
    var val2 = val.clone();
    val2.value = maxValueForInstance(val2.value);
    return val2;
  } else {
    return null;
  }
}

function minValueForInstance(val) {
  if (typeof val === 'number') {
    if (parseInt(val) === val) {
      return MIN_INT_VALUE;
    } else {
      return MIN_FLOAT_VALUE;
    }
  } else if (val && val.isDateTime) {
    return MIN_DATETIME_VALUE.copy();
  } else if (val && val.isDate) {
    return MIN_DATE_VALUE.copy();
  } else if (val && val.isTime) {
    return MIN_TIME_VALUE.copy();
  } else if (val && val.isQuantity) {
    var val2 = val.clone();
    val2.value = minValueForInstance(val2.value);
    return val2;
  } else {
    return null;
  }
}

function decimalAdjust(type, value, exp) {
  //If the exp is undefined or zero...
  if (typeof exp === 'undefined' || +exp === 0) {
    return Math[type](value);
  }

  value = +value;
  exp = +exp; //If the value is not a number or the exp is not an integer...

  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
    return NaN;
  } //Shift


  value = value.toString().split('e');
  var v = value[1] ? +value[1] - exp : -exp;
  value = Math[type](+(value[0] + 'e' + v)); //Shift back

  value = value.toString().split('e');
  v = value[1] ? +value[1] + exp : exp;
  return +(value[0] + 'e' + v);
}

function decimalOrNull(value) {
  return isValidDecimal(value) ? value : null;
}

module.exports = {
  MAX_INT_VALUE: MAX_INT_VALUE,
  MIN_INT_VALUE: MIN_INT_VALUE,
  MAX_FLOAT_VALUE: MAX_FLOAT_VALUE,
  MIN_FLOAT_VALUE: MIN_FLOAT_VALUE,
  MIN_FLOAT_PRECISION_VALUE: MIN_FLOAT_PRECISION_VALUE,
  MIN_DATETIME_VALUE: MIN_DATETIME_VALUE,
  MAX_DATETIME_VALUE: MAX_DATETIME_VALUE,
  MIN_DATE_VALUE: MIN_DATE_VALUE,
  MAX_DATE_VALUE: MAX_DATE_VALUE,
  MIN_TIME_VALUE: MIN_TIME_VALUE,
  MAX_TIME_VALUE: MAX_TIME_VALUE,
  overflowsOrUnderflows: overflowsOrUnderflows,
  isValidInteger: isValidInteger,
  isValidDecimal: isValidDecimal,
  limitDecimalPrecision: limitDecimalPrecision,
  OverFlowException: OverFlowException,
  successor: successor,
  predecessor: predecessor,
  maxValueForInstance: maxValueForInstance,
  minValueForInstance: minValueForInstance,
  decimalAdjust: decimalAdjust,
  decimalOrNull: decimalOrNull
};
},{"../datatypes/datetime":7,"../datatypes/exception":8,"../datatypes/uncertainty":13}],47:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function removeNulls(things) {
  return things.filter(function (x) {
    return x != null;
  });
}

function numerical_sort(things, direction) {
  return things.sort(function (a, b) {
    if (direction == null || direction === 'asc') {
      return a - b;
    } else {
      return b - a;
    }
  });
}

function isNull(value) {
  return value === null;
}

var typeIsArray = Array.isArray || function (value) {
  return {}.toString.call(value) === '[object Array]';
};

function allTrue(things) {
  if (typeIsArray(things)) {
    return things.every(function (x) {
      return x;
    });
  } else {
    return things;
  }
}

function anyTrue(things) {
  if (typeIsArray(things)) {
    return things.some(function (x) {
      return x;
    });
  } else {
    return things;
  }
} //The export below is to make it easier if js Date is overwritten with CQL Date


var jsDate = Date;

function normalizeMillisecondsFieldInString(string, msString) {
  // TODO: verify we are only removing numeral digits
  var timezoneField;
  msString = normalizeMillisecondsField(msString);

  var _string$split = string.split('.'),
      _string$split2 = _slicedToArray(_string$split, 2),
      beforeMs = _string$split2[0],
      msAndAfter = _string$split2[1];

  var timezoneSeparator = getTimezoneSeparatorFromString(msAndAfter);

  if (timezoneSeparator) {
    timezoneField = msAndAfter != null ? msAndAfter.split(timezoneSeparator)[1] : undefined;
  }

  if (timezoneField == null) {
    timezoneField = '';
  }

  return string = beforeMs + '.' + msString + timezoneSeparator + timezoneField;
}

function normalizeMillisecondsField(msString) {
  // fix up milliseconds by padding zeros and/or truncating (5 --> 500, 50 --> 500, 54321 --> 543, etc.)
  return msString = (msString + '00').substring(0, 3);
}

function getTimezoneSeparatorFromString(string) {
  if (string != null) {
    var matches = string.match(/-/);

    if (matches && matches.length === 1) {
      return '-';
    }

    matches = string.match(/\+/);

    if (matches && matches.length === 1) {
      return '+';
    }
  }

  return '';
}

module.exports = {
  removeNulls: removeNulls,
  numerical_sort: numerical_sort,
  isNull: isNull,
  typeIsArray: typeIsArray,
  allTrue: allTrue,
  anyTrue: anyTrue,
  jsDate: jsDate,
  normalizeMillisecondsFieldInString: normalizeMillisecondsFieldInString,
  normalizeMillisecondsField: normalizeMillisecondsField,
  getTimezoneSeparatorFromString: getTimezoneSeparatorFromString
};
},{}],48:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(n);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o) {
  var i = 0;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  i = o[Symbol.iterator]();
  return i.next.bind(i);
}

// these aren't really private, but nor are they really useful to document

/**
 * @private
 */
var LuxonError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(LuxonError, _Error);

  function LuxonError() {
    return _Error.apply(this, arguments) || this;
  }

  return LuxonError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * @private
 */


var InvalidDateTimeError = /*#__PURE__*/function (_LuxonError) {
  _inheritsLoose(InvalidDateTimeError, _LuxonError);

  function InvalidDateTimeError(reason) {
    return _LuxonError.call(this, "Invalid DateTime: " + reason.toMessage()) || this;
  }

  return InvalidDateTimeError;
}(LuxonError);
/**
 * @private
 */

var InvalidIntervalError = /*#__PURE__*/function (_LuxonError2) {
  _inheritsLoose(InvalidIntervalError, _LuxonError2);

  function InvalidIntervalError(reason) {
    return _LuxonError2.call(this, "Invalid Interval: " + reason.toMessage()) || this;
  }

  return InvalidIntervalError;
}(LuxonError);
/**
 * @private
 */

var InvalidDurationError = /*#__PURE__*/function (_LuxonError3) {
  _inheritsLoose(InvalidDurationError, _LuxonError3);

  function InvalidDurationError(reason) {
    return _LuxonError3.call(this, "Invalid Duration: " + reason.toMessage()) || this;
  }

  return InvalidDurationError;
}(LuxonError);
/**
 * @private
 */

var ConflictingSpecificationError = /*#__PURE__*/function (_LuxonError4) {
  _inheritsLoose(ConflictingSpecificationError, _LuxonError4);

  function ConflictingSpecificationError() {
    return _LuxonError4.apply(this, arguments) || this;
  }

  return ConflictingSpecificationError;
}(LuxonError);
/**
 * @private
 */

var InvalidUnitError = /*#__PURE__*/function (_LuxonError5) {
  _inheritsLoose(InvalidUnitError, _LuxonError5);

  function InvalidUnitError(unit) {
    return _LuxonError5.call(this, "Invalid unit " + unit) || this;
  }

  return InvalidUnitError;
}(LuxonError);
/**
 * @private
 */

var InvalidArgumentError = /*#__PURE__*/function (_LuxonError6) {
  _inheritsLoose(InvalidArgumentError, _LuxonError6);

  function InvalidArgumentError() {
    return _LuxonError6.apply(this, arguments) || this;
  }

  return InvalidArgumentError;
}(LuxonError);
/**
 * @private
 */

var ZoneIsAbstractError = /*#__PURE__*/function (_LuxonError7) {
  _inheritsLoose(ZoneIsAbstractError, _LuxonError7);

  function ZoneIsAbstractError() {
    return _LuxonError7.call(this, "Zone is an abstract class") || this;
  }

  return ZoneIsAbstractError;
}(LuxonError);

/**
 * @private
 */
var n = "numeric",
    s = "short",
    l = "long";
var DATE_SHORT = {
  year: n,
  month: n,
  day: n
};
var DATE_MED = {
  year: n,
  month: s,
  day: n
};
var DATE_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s
};
var DATE_FULL = {
  year: n,
  month: l,
  day: n
};
var DATE_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l
};
var TIME_SIMPLE = {
  hour: n,
  minute: n
};
var TIME_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n
};
var TIME_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var TIME_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};
var TIME_24_SIMPLE = {
  hour: n,
  minute: n,
  hour12: false
};
/**
 * {@link toLocaleString}; format like '09:30:23', always 24-hour.
 */

var TIME_24_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
  hour12: false
};
/**
 * {@link toLocaleString}; format like '09:30:23 EDT', always 24-hour.
 */

var TIME_24_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hour12: false,
  timeZoneName: s
};
/**
 * {@link toLocaleString}; format like '09:30:23 Eastern Daylight Time', always 24-hour.
 */

var TIME_24_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hour12: false,
  timeZoneName: l
};
/**
 * {@link toLocaleString}; format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
 */

var DATETIME_SHORT = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n
};
/**
 * {@link toLocaleString}; format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
 */

var DATETIME_SHORT_WITH_SECONDS = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_MED_WITH_SECONDS = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s,
  hour: n,
  minute: n
};
var DATETIME_FULL = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  timeZoneName: s
};
var DATETIME_FULL_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var DATETIME_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  timeZoneName: l
};
var DATETIME_HUGE_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};

/*
  This is just a junk drawer, containing anything used across multiple classes.
  Because Luxon is small(ish), this should stay small and we won't worry about splitting
  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
*/
/**
 * @private
 */
// TYPES

function isUndefined(o) {
  return typeof o === "undefined";
}
function isNumber(o) {
  return typeof o === "number";
}
function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}
function isString(o) {
  return typeof o === "string";
}
function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
} // CAPABILITIES

function hasIntl() {
  try {
    return typeof Intl !== "undefined" && Intl.DateTimeFormat;
  } catch (e) {
    return false;
  }
}
function hasFormatToParts() {
  return !isUndefined(Intl.DateTimeFormat.prototype.formatToParts);
}
function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
} // OBJECTS AND ARRAYS

function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}
function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return undefined;
  }

  return arr.reduce(function (best, next) {
    var pair = [by(next), next];

    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}
function pick(obj, keys) {
  return keys.reduce(function (a, k) {
    a[k] = obj[k];
    return a;
  }, {});
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
} // NUMBERS AND STRINGS

function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
} // x % n but takes the sign of n instead of x

function floorMod(x, n) {
  return x - n * Math.floor(x / n);
}
function padStart(input, n) {
  if (n === void 0) {
    n = 2;
  }

  if (input.toString().length < n) {
    return ("0".repeat(n) + input).slice(-n);
  } else {
    return input.toString();
  }
}
function parseInteger(string) {
  if (isUndefined(string) || string === null || string === "") {
    return undefined;
  } else {
    return parseInt(string, 10);
  }
}
function parseMillis(fraction) {
  // Return undefined (instead of 0) in these cases, where fraction is not set
  if (isUndefined(fraction) || fraction === null || fraction === "") {
    return undefined;
  } else {
    var f = parseFloat("0." + fraction) * 1000;
    return Math.floor(f);
  }
}
function roundTo(number, digits, towardZero) {
  if (towardZero === void 0) {
    towardZero = false;
  }

  var factor = Math.pow(10, digits),
      rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
} // DATE BASICS

function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
  var modMonth = floorMod(month - 1, 12) + 1,
      modYear = year + (month - modMonth) / 12;

  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
} // covert a calendar object to a local timestamp (epoch, but with the offset baked in)

function objToLocalTS(obj) {
  var d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond); // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that

  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }

  return +d;
}
function weeksInWeekYear(weekYear) {
  var p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7,
      last = weekYear - 1,
      p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
  return p1 === 4 || p2 === 3 ? 53 : 52;
}
function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else return year > 60 ? 1900 + year : 2000 + year;
} // PARSING

function parseZoneInfo(ts, offsetFormat, locale, timeZone) {
  if (timeZone === void 0) {
    timeZone = null;
  }

  var date = new Date(ts),
      intlOpts = {
    hour12: false,
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  };

  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }

  var modified = Object.assign({
    timeZoneName: offsetFormat
  }, intlOpts),
      intl = hasIntl();

  if (intl && hasFormatToParts()) {
    var parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find(function (m) {
      return m.type.toLowerCase() === "timezonename";
    });
    return parsed ? parsed.value : null;
  } else if (intl) {
    // this probably doesn't work for all locales
    var without = new Intl.DateTimeFormat(locale, intlOpts).format(date),
        included = new Intl.DateTimeFormat(locale, modified).format(date),
        diffed = included.substring(without.length),
        trimmed = diffed.replace(/^[, \u200e]+/, "");
    return trimmed;
  } else {
    return null;
  }
} // signedOffset('-5', '30') -> -330

function signedOffset(offHourStr, offMinuteStr) {
  var offHour = parseInt(offHourStr, 10); // don't || this because we want to preserve -0

  if (Number.isNaN(offHour)) {
    offHour = 0;
  }

  var offMin = parseInt(offMinuteStr, 10) || 0,
      offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
} // COERCION

function asNumber(value) {
  var numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue)) throw new InvalidArgumentError("Invalid unit value " + value);
  return numericValue;
}
function normalizeObject(obj, normalizer, nonUnitKeys) {
  var normalized = {};

  for (var u in obj) {
    if (hasOwnProperty(obj, u)) {
      if (nonUnitKeys.indexOf(u) >= 0) continue;
      var v = obj[u];
      if (v === undefined || v === null) continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }

  return normalized;
}
function formatOffset(offset, format) {
  var hours = Math.trunc(Math.abs(offset / 60)),
      minutes = Math.trunc(Math.abs(offset % 60)),
      sign = offset >= 0 ? "+" : "-";

  switch (format) {
    case "short":
      return "" + sign + padStart(hours, 2) + ":" + padStart(minutes, 2);

    case "narrow":
      return "" + sign + hours + (minutes > 0 ? ":" + minutes : "");

    case "techie":
      return "" + sign + padStart(hours, 2) + padStart(minutes, 2);

    default:
      throw new RangeError("Value format " + format + " is out of range for property format");
  }
}
function timeObject(obj) {
  return pick(obj, ["hour", "minute", "second", "millisecond"]);
}
var ianaRegex = /[A-Za-z_+-]{1,256}(:?\/[A-Za-z_+-]{1,256}(\/[A-Za-z_+-]{1,256})?)?/;

function stringify(obj) {
  return JSON.stringify(obj, Object.keys(obj).sort());
}
/**
 * @private
 */


var monthsLong = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var monthsShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
function months(length) {
  switch (length) {
    case "narrow":
      return monthsNarrow;

    case "short":
      return monthsShort;

    case "long":
      return monthsLong;

    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];

    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];

    default:
      return null;
  }
}
var weekdaysLong = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
var weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
var weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
function weekdays(length) {
  switch (length) {
    case "narrow":
      return weekdaysNarrow;

    case "short":
      return weekdaysShort;

    case "long":
      return weekdaysLong;

    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];

    default:
      return null;
  }
}
var meridiems = ["AM", "PM"];
var erasLong = ["Before Christ", "Anno Domini"];
var erasShort = ["BC", "AD"];
var erasNarrow = ["B", "A"];
function eras(length) {
  switch (length) {
    case "narrow":
      return erasNarrow;

    case "short":
      return erasShort;

    case "long":
      return erasLong;

    default:
      return null;
  }
}
function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}
function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}
function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric, narrow) {
  if (numeric === void 0) {
    numeric = "always";
  }

  if (narrow === void 0) {
    narrow = false;
  }

  var units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."]
  };
  var lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

  if (numeric === "auto" && lastable) {
    var isDay = unit === "days";

    switch (count) {
      case 1:
        return isDay ? "tomorrow" : "next " + units[unit][0];

      case -1:
        return isDay ? "yesterday" : "last " + units[unit][0];

      case 0:
        return isDay ? "today" : "this " + units[unit][0];

    }
  }

  var isInPast = Object.is(count, -0) || count < 0,
      fmtValue = Math.abs(count),
      singular = fmtValue === 1,
      lilUnits = units[unit],
      fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
  return isInPast ? fmtValue + " " + fmtUnit + " ago" : "in " + fmtValue + " " + fmtUnit;
}
function formatString(knownFormat) {
  // these all have the offsets removed because we don't have access to them
  // without all the intl stuff this is backfilling
  var filtered = pick(knownFormat, ["weekday", "era", "year", "month", "day", "hour", "minute", "second", "timeZoneName", "hour12"]),
      key = stringify(filtered),
      dateTimeHuge = "EEEE, LLLL d, yyyy, h:mm a";

  switch (key) {
    case stringify(DATE_SHORT):
      return "M/d/yyyy";

    case stringify(DATE_MED):
      return "LLL d, yyyy";

    case stringify(DATE_MED_WITH_WEEKDAY):
      return "EEE, LLL d, yyyy";

    case stringify(DATE_FULL):
      return "LLLL d, yyyy";

    case stringify(DATE_HUGE):
      return "EEEE, LLLL d, yyyy";

    case stringify(TIME_SIMPLE):
      return "h:mm a";

    case stringify(TIME_WITH_SECONDS):
      return "h:mm:ss a";

    case stringify(TIME_WITH_SHORT_OFFSET):
      return "h:mm a";

    case stringify(TIME_WITH_LONG_OFFSET):
      return "h:mm a";

    case stringify(TIME_24_SIMPLE):
      return "HH:mm";

    case stringify(TIME_24_WITH_SECONDS):
      return "HH:mm:ss";

    case stringify(TIME_24_WITH_SHORT_OFFSET):
      return "HH:mm";

    case stringify(TIME_24_WITH_LONG_OFFSET):
      return "HH:mm";

    case stringify(DATETIME_SHORT):
      return "M/d/yyyy, h:mm a";

    case stringify(DATETIME_MED):
      return "LLL d, yyyy, h:mm a";

    case stringify(DATETIME_FULL):
      return "LLLL d, yyyy, h:mm a";

    case stringify(DATETIME_HUGE):
      return dateTimeHuge;

    case stringify(DATETIME_SHORT_WITH_SECONDS):
      return "M/d/yyyy, h:mm:ss a";

    case stringify(DATETIME_MED_WITH_SECONDS):
      return "LLL d, yyyy, h:mm:ss a";

    case stringify(DATETIME_MED_WITH_WEEKDAY):
      return "EEE, d LLL yyyy, h:mm a";

    case stringify(DATETIME_FULL_WITH_SECONDS):
      return "LLLL d, yyyy, h:mm:ss a";

    case stringify(DATETIME_HUGE_WITH_SECONDS):
      return "EEEE, LLLL d, yyyy, h:mm:ss a";

    default:
      return dateTimeHuge;
  }
}

function stringifyTokens(splits, tokenToString) {
  var s = "";

  for (var _iterator = _createForOfIteratorHelperLoose(splits), _step; !(_step = _iterator()).done;) {
    var token = _step.value;

    if (token.literal) {
      s += token.val;
    } else {
      s += tokenToString(token.val);
    }
  }

  return s;
}

var _macroTokenToFormatOpts = {
  D: DATE_SHORT,
  DD: DATE_MED,
  DDD: DATE_FULL,
  DDDD: DATE_HUGE,
  t: TIME_SIMPLE,
  tt: TIME_WITH_SECONDS,
  ttt: TIME_WITH_SHORT_OFFSET,
  tttt: TIME_WITH_LONG_OFFSET,
  T: TIME_24_SIMPLE,
  TT: TIME_24_WITH_SECONDS,
  TTT: TIME_24_WITH_SHORT_OFFSET,
  TTTT: TIME_24_WITH_LONG_OFFSET,
  f: DATETIME_SHORT,
  ff: DATETIME_MED,
  fff: DATETIME_FULL,
  ffff: DATETIME_HUGE,
  F: DATETIME_SHORT_WITH_SECONDS,
  FF: DATETIME_MED_WITH_SECONDS,
  FFF: DATETIME_FULL_WITH_SECONDS,
  FFFF: DATETIME_HUGE_WITH_SECONDS
};
/**
 * @private
 */

var Formatter = /*#__PURE__*/function () {
  Formatter.create = function create(locale, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return new Formatter(locale, opts);
  };

  Formatter.parseFormat = function parseFormat(fmt) {
    var current = null,
        currentFull = "",
        bracketed = false;
    var splits = [];

    for (var i = 0; i < fmt.length; i++) {
      var c = fmt.charAt(i);

      if (c === "'") {
        if (currentFull.length > 0) {
          splits.push({
            literal: bracketed,
            val: currentFull
          });
        }

        current = null;
        currentFull = "";
        bracketed = !bracketed;
      } else if (bracketed) {
        currentFull += c;
      } else if (c === current) {
        currentFull += c;
      } else {
        if (currentFull.length > 0) {
          splits.push({
            literal: false,
            val: currentFull
          });
        }

        currentFull = c;
        current = c;
      }
    }

    if (currentFull.length > 0) {
      splits.push({
        literal: bracketed,
        val: currentFull
      });
    }

    return splits;
  };

  Formatter.macroTokenToFormatOpts = function macroTokenToFormatOpts(token) {
    return _macroTokenToFormatOpts[token];
  };

  function Formatter(locale, formatOpts) {
    this.opts = formatOpts;
    this.loc = locale;
    this.systemLoc = null;
  }

  var _proto = Formatter.prototype;

  _proto.formatWithSystemDefault = function formatWithSystemDefault(dt, opts) {
    if (this.systemLoc === null) {
      this.systemLoc = this.loc.redefaultToSystem();
    }

    var df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.format();
  };

  _proto.formatDateTime = function formatDateTime(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.format();
  };

  _proto.formatDateTimeParts = function formatDateTimeParts(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.formatToParts();
  };

  _proto.resolvedOptions = function resolvedOptions(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.resolvedOptions();
  };

  _proto.num = function num(n, p) {
    if (p === void 0) {
      p = 0;
    }

    // we get some perf out of doing this here, annoyingly
    if (this.opts.forceSimple) {
      return padStart(n, p);
    }

    var opts = Object.assign({}, this.opts);

    if (p > 0) {
      opts.padTo = p;
    }

    return this.loc.numberFormatter(opts).format(n);
  };

  _proto.formatDateTimeFromString = function formatDateTimeFromString(dt, fmt) {
    var _this = this;

    var knownEnglish = this.loc.listingMode() === "en",
        useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory" && hasFormatToParts(),
        string = function string(opts, extract) {
      return _this.loc.extract(dt, opts, extract);
    },
        formatOffset = function formatOffset(opts) {
      if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
        return "Z";
      }

      return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
    },
        meridiem = function meridiem() {
      return knownEnglish ? meridiemForDateTime(dt) : string({
        hour: "numeric",
        hour12: true
      }, "dayperiod");
    },
        month = function month(length, standalone) {
      return knownEnglish ? monthForDateTime(dt, length) : string(standalone ? {
        month: length
      } : {
        month: length,
        day: "numeric"
      }, "month");
    },
        weekday = function weekday(length, standalone) {
      return knownEnglish ? weekdayForDateTime(dt, length) : string(standalone ? {
        weekday: length
      } : {
        weekday: length,
        month: "long",
        day: "numeric"
      }, "weekday");
    },
        maybeMacro = function maybeMacro(token) {
      var formatOpts = Formatter.macroTokenToFormatOpts(token);

      if (formatOpts) {
        return _this.formatWithSystemDefault(dt, formatOpts);
      } else {
        return token;
      }
    },
        era = function era(length) {
      return knownEnglish ? eraForDateTime(dt, length) : string({
        era: length
      }, "era");
    },
        tokenToString = function tokenToString(token) {
      // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles
      switch (token) {
        // ms
        case "S":
          return _this.num(dt.millisecond);

        case "u": // falls through

        case "SSS":
          return _this.num(dt.millisecond, 3);
        // seconds

        case "s":
          return _this.num(dt.second);

        case "ss":
          return _this.num(dt.second, 2);
        // minutes

        case "m":
          return _this.num(dt.minute);

        case "mm":
          return _this.num(dt.minute, 2);
        // hours

        case "h":
          return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);

        case "hh":
          return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);

        case "H":
          return _this.num(dt.hour);

        case "HH":
          return _this.num(dt.hour, 2);
        // offset

        case "Z":
          // like +6
          return formatOffset({
            format: "narrow",
            allowZ: _this.opts.allowZ
          });

        case "ZZ":
          // like +06:00
          return formatOffset({
            format: "short",
            allowZ: _this.opts.allowZ
          });

        case "ZZZ":
          // like +0600
          return formatOffset({
            format: "techie",
            allowZ: _this.opts.allowZ
          });

        case "ZZZZ":
          // like EST
          return dt.zone.offsetName(dt.ts, {
            format: "short",
            locale: _this.loc.locale
          });

        case "ZZZZZ":
          // like Eastern Standard Time
          return dt.zone.offsetName(dt.ts, {
            format: "long",
            locale: _this.loc.locale
          });
        // zone

        case "z":
          // like America/New_York
          return dt.zoneName;
        // meridiems

        case "a":
          return meridiem();
        // dates

        case "d":
          return useDateTimeFormatter ? string({
            day: "numeric"
          }, "day") : _this.num(dt.day);

        case "dd":
          return useDateTimeFormatter ? string({
            day: "2-digit"
          }, "day") : _this.num(dt.day, 2);
        // weekdays - standalone

        case "c":
          // like 1
          return _this.num(dt.weekday);

        case "ccc":
          // like 'Tues'
          return weekday("short", true);

        case "cccc":
          // like 'Tuesday'
          return weekday("long", true);

        case "ccccc":
          // like 'T'
          return weekday("narrow", true);
        // weekdays - format

        case "E":
          // like 1
          return _this.num(dt.weekday);

        case "EEE":
          // like 'Tues'
          return weekday("short", false);

        case "EEEE":
          // like 'Tuesday'
          return weekday("long", false);

        case "EEEEE":
          // like 'T'
          return weekday("narrow", false);
        // months - standalone

        case "L":
          // like 1
          return useDateTimeFormatter ? string({
            month: "numeric",
            day: "numeric"
          }, "month") : _this.num(dt.month);

        case "LL":
          // like 01, doesn't seem to work
          return useDateTimeFormatter ? string({
            month: "2-digit",
            day: "numeric"
          }, "month") : _this.num(dt.month, 2);

        case "LLL":
          // like Jan
          return month("short", true);

        case "LLLL":
          // like January
          return month("long", true);

        case "LLLLL":
          // like J
          return month("narrow", true);
        // months - format

        case "M":
          // like 1
          return useDateTimeFormatter ? string({
            month: "numeric"
          }, "month") : _this.num(dt.month);

        case "MM":
          // like 01
          return useDateTimeFormatter ? string({
            month: "2-digit"
          }, "month") : _this.num(dt.month, 2);

        case "MMM":
          // like Jan
          return month("short", false);

        case "MMMM":
          // like January
          return month("long", false);

        case "MMMMM":
          // like J
          return month("narrow", false);
        // years

        case "y":
          // like 2014
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year);

        case "yy":
          // like 14
          return useDateTimeFormatter ? string({
            year: "2-digit"
          }, "year") : _this.num(dt.year.toString().slice(-2), 2);

        case "yyyy":
          // like 0012
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year, 4);

        case "yyyyyy":
          // like 000012
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year, 6);
        // eras

        case "G":
          // like AD
          return era("short");

        case "GG":
          // like Anno Domini
          return era("long");

        case "GGGGG":
          return era("narrow");

        case "kk":
          return _this.num(dt.weekYear.toString().slice(-2), 2);

        case "kkkk":
          return _this.num(dt.weekYear, 4);

        case "W":
          return _this.num(dt.weekNumber);

        case "WW":
          return _this.num(dt.weekNumber, 2);

        case "o":
          return _this.num(dt.ordinal);

        case "ooo":
          return _this.num(dt.ordinal, 3);

        case "q":
          // like 1
          return _this.num(dt.quarter);

        case "qq":
          // like 01
          return _this.num(dt.quarter, 2);

        case "X":
          return _this.num(Math.floor(dt.ts / 1000));

        case "x":
          return _this.num(dt.ts);

        default:
          return maybeMacro(token);
      }
    };

    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
  };

  _proto.formatDurationFromString = function formatDurationFromString(dur, fmt) {
    var _this2 = this;

    var tokenToField = function tokenToField(token) {
      switch (token[0]) {
        case "S":
          return "millisecond";

        case "s":
          return "second";

        case "m":
          return "minute";

        case "h":
          return "hour";

        case "d":
          return "day";

        case "M":
          return "month";

        case "y":
          return "year";

        default:
          return null;
      }
    },
        tokenToString = function tokenToString(lildur) {
      return function (token) {
        var mapped = tokenToField(token);

        if (mapped) {
          return _this2.num(lildur.get(mapped), token.length);
        } else {
          return token;
        }
      };
    },
        tokens = Formatter.parseFormat(fmt),
        realTokens = tokens.reduce(function (found, _ref) {
      var literal = _ref.literal,
          val = _ref.val;
      return literal ? found : found.concat(val);
    }, []),
        collapsed = dur.shiftTo.apply(dur, realTokens.map(tokenToField).filter(function (t) {
      return t;
    }));

    return stringifyTokens(tokens, tokenToString(collapsed));
  };

  return Formatter;
}();

var Invalid = /*#__PURE__*/function () {
  function Invalid(reason, explanation) {
    this.reason = reason;
    this.explanation = explanation;
  }

  var _proto = Invalid.prototype;

  _proto.toMessage = function toMessage() {
    if (this.explanation) {
      return this.reason + ": " + this.explanation;
    } else {
      return this.reason;
    }
  };

  return Invalid;
}();

/**
 * @interface
 */

var Zone = /*#__PURE__*/function () {
  function Zone() {}

  var _proto = Zone.prototype;

  /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */
  _proto.offsetName = function offsetName(ts, opts) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Returns the offset's value as a string
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  ;

  _proto.formatOffset = function formatOffset(ts, format) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */
  ;

  _proto.offset = function offset(ts) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return whether this Zone is equal to another zone
   * @abstract
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(otherZone) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return whether this Zone is valid.
   * @abstract
   * @type {boolean}
   */
  ;

  _createClass(Zone, [{
    key: "type",

    /**
     * The type of zone
     * @abstract
     * @type {string}
     */
    get: function get() {
      throw new ZoneIsAbstractError();
    }
    /**
     * The name of this zone.
     * @abstract
     * @type {string}
     */

  }, {
    key: "name",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
    /**
     * Returns whether the offset is known to be fixed for the whole year.
     * @abstract
     * @type {boolean}
     */

  }, {
    key: "universal",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }, {
    key: "isValid",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }]);

  return Zone;
}();

var singleton = null;
/**
 * Represents the local zone for this Javascript environment.
 * @implements {Zone}
 */

var LocalZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(LocalZone, _Zone);

  function LocalZone() {
    return _Zone.apply(this, arguments) || this;
  }

  var _proto = LocalZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName(ts, _ref) {
    var format = _ref.format,
        locale = _ref.locale;
    return parseZoneInfo(ts, format, locale);
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.offset(ts), format);
  }
  /** @override **/
  ;

  _proto.offset = function offset(ts) {
    return -new Date(ts).getTimezoneOffset();
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "local";
  }
  /** @override **/
  ;

  _createClass(LocalZone, [{
    key: "type",

    /** @override **/
    get: function get() {
      return "local";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      if (hasIntl()) {
        return new Intl.DateTimeFormat().resolvedOptions().timeZone;
      } else return "local";
    }
    /** @override **/

  }, {
    key: "universal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return true;
    }
  }], [{
    key: "instance",

    /**
     * Get a singleton instance of the local zone
     * @return {LocalZone}
     */
    get: function get() {
      if (singleton === null) {
        singleton = new LocalZone();
      }

      return singleton;
    }
  }]);

  return LocalZone;
}(Zone);

var matchingRegex = RegExp("^" + ianaRegex.source + "$");
var dtfCache = {};

function makeDTF(zone) {
  if (!dtfCache[zone]) {
    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit"
    });
  }

  return dtfCache[zone];
}

var typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  hour: 3,
  minute: 4,
  second: 5
};

function hackyOffset(dtf, date) {
  var formatted = dtf.format(date).replace(/\u200E/g, ""),
      parsed = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(formatted),
      fMonth = parsed[1],
      fDay = parsed[2],
      fYear = parsed[3],
      fHour = parsed[4],
      fMinute = parsed[5],
      fSecond = parsed[6];
  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];
}

function partsOffset(dtf, date) {
  var formatted = dtf.formatToParts(date),
      filled = [];

  for (var i = 0; i < formatted.length; i++) {
    var _formatted$i = formatted[i],
        type = _formatted$i.type,
        value = _formatted$i.value,
        pos = typeToPos[type];

    if (!isUndefined(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }

  return filled;
}

var ianaZoneCache = {};
/**
 * A zone identified by an IANA identifier, like America/New_York
 * @implements {Zone}
 */

var IANAZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(IANAZone, _Zone);

  /**
   * @param {string} name - Zone name
   * @return {IANAZone}
   */
  IANAZone.create = function create(name) {
    if (!ianaZoneCache[name]) {
      ianaZoneCache[name] = new IANAZone(name);
    }

    return ianaZoneCache[name];
  }
  /**
   * Reset local caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  ;

  IANAZone.resetCache = function resetCache() {
    ianaZoneCache = {};
    dtfCache = {};
  }
  /**
   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
   * @param {string} s - The string to check validity on
   * @example IANAZone.isValidSpecifier("America/New_York") //=> true
   * @example IANAZone.isValidSpecifier("Fantasia/Castle") //=> true
   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
   * @return {boolean}
   */
  ;

  IANAZone.isValidSpecifier = function isValidSpecifier(s) {
    return !!(s && s.match(matchingRegex));
  }
  /**
   * Returns whether the provided string identifies a real zone
   * @param {string} zone - The string to check
   * @example IANAZone.isValidZone("America/New_York") //=> true
   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
   * @example IANAZone.isValidZone("Sport~~blorp") //=> false
   * @return {boolean}
   */
  ;

  IANAZone.isValidZone = function isValidZone(zone) {
    try {
      new Intl.DateTimeFormat("en-US", {
        timeZone: zone
      }).format();
      return true;
    } catch (e) {
      return false;
    }
  } // Etc/GMT+8 -> -480

  /** @ignore */
  ;

  IANAZone.parseGMTOffset = function parseGMTOffset(specifier) {
    if (specifier) {
      var match = specifier.match(/^Etc\/GMT([+-]\d{1,2})$/i);

      if (match) {
        return -60 * parseInt(match[1]);
      }
    }

    return null;
  };

  function IANAZone(name) {
    var _this;

    _this = _Zone.call(this) || this;
    /** @private **/

    _this.zoneName = name;
    /** @private **/

    _this.valid = IANAZone.isValidZone(name);
    return _this;
  }
  /** @override **/


  var _proto = IANAZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName(ts, _ref) {
    var format = _ref.format,
        locale = _ref.locale;
    return parseZoneInfo(ts, format, locale, this.name);
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.offset(ts), format);
  }
  /** @override **/
  ;

  _proto.offset = function offset(ts) {
    var date = new Date(ts),
        dtf = makeDTF(this.name),
        _ref2 = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date),
        year = _ref2[0],
        month = _ref2[1],
        day = _ref2[2],
        hour = _ref2[3],
        minute = _ref2[4],
        second = _ref2[5],
        adjustedHour = hour === 24 ? 0 : hour;

    var asUTC = objToLocalTS({
      year: year,
      month: month,
      day: day,
      hour: adjustedHour,
      minute: minute,
      second: second,
      millisecond: 0
    });
    var asTS = +date;
    var over = asTS % 1000;
    asTS -= over >= 0 ? over : 1000 + over;
    return (asUTC - asTS) / (60 * 1000);
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "iana" && otherZone.name === this.name;
  }
  /** @override **/
  ;

  _createClass(IANAZone, [{
    key: "type",
    get: function get() {
      return "iana";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.zoneName;
    }
    /** @override **/

  }, {
    key: "universal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return this.valid;
    }
  }]);

  return IANAZone;
}(Zone);

var singleton$1 = null;
/**
 * A zone with a fixed offset (meaning no DST)
 * @implements {Zone}
 */

var FixedOffsetZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(FixedOffsetZone, _Zone);

  /**
   * Get an instance with a specified offset
   * @param {number} offset - The offset in minutes
   * @return {FixedOffsetZone}
   */
  FixedOffsetZone.instance = function instance(offset) {
    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
  }
  /**
   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
   * @param {string} s - The offset string to parse
   * @example FixedOffsetZone.parseSpecifier("UTC+6")
   * @example FixedOffsetZone.parseSpecifier("UTC+06")
   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
   * @return {FixedOffsetZone}
   */
  ;

  FixedOffsetZone.parseSpecifier = function parseSpecifier(s) {
    if (s) {
      var r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);

      if (r) {
        return new FixedOffsetZone(signedOffset(r[1], r[2]));
      }
    }

    return null;
  };

  _createClass(FixedOffsetZone, null, [{
    key: "utcInstance",

    /**
     * Get a singleton instance of UTC
     * @return {FixedOffsetZone}
     */
    get: function get() {
      if (singleton$1 === null) {
        singleton$1 = new FixedOffsetZone(0);
      }

      return singleton$1;
    }
  }]);

  function FixedOffsetZone(offset) {
    var _this;

    _this = _Zone.call(this) || this;
    /** @private **/

    _this.fixed = offset;
    return _this;
  }
  /** @override **/


  var _proto = FixedOffsetZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName() {
    return this.name;
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.fixed, format);
  }
  /** @override **/
  ;

  /** @override **/
  _proto.offset = function offset() {
    return this.fixed;
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
  }
  /** @override **/
  ;

  _createClass(FixedOffsetZone, [{
    key: "type",
    get: function get() {
      return "fixed";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.fixed === 0 ? "UTC" : "UTC" + formatOffset(this.fixed, "narrow");
    }
  }, {
    key: "universal",
    get: function get() {
      return true;
    }
  }, {
    key: "isValid",
    get: function get() {
      return true;
    }
  }]);

  return FixedOffsetZone;
}(Zone);

/**
 * A zone that failed to parse. You should never need to instantiate this.
 * @implements {Zone}
 */

var InvalidZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(InvalidZone, _Zone);

  function InvalidZone(zoneName) {
    var _this;

    _this = _Zone.call(this) || this;
    /**  @private */

    _this.zoneName = zoneName;
    return _this;
  }
  /** @override **/


  var _proto = InvalidZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName() {
    return null;
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset() {
    return "";
  }
  /** @override **/
  ;

  _proto.offset = function offset() {
    return NaN;
  }
  /** @override **/
  ;

  _proto.equals = function equals() {
    return false;
  }
  /** @override **/
  ;

  _createClass(InvalidZone, [{
    key: "type",
    get: function get() {
      return "invalid";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.zoneName;
    }
    /** @override **/

  }, {
    key: "universal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return false;
    }
  }]);

  return InvalidZone;
}(Zone);

/**
 * @private
 */
function normalizeZone(input, defaultZone) {
  var offset;

  if (isUndefined(input) || input === null) {
    return defaultZone;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString(input)) {
    var lowered = input.toLowerCase();
    if (lowered === "local") return defaultZone;else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;else if ((offset = IANAZone.parseGMTOffset(input)) != null) {
      // handle Etc/GMT-4, which V8 chokes on
      return FixedOffsetZone.instance(offset);
    } else if (IANAZone.isValidSpecifier(lowered)) return IANAZone.create(input);else return FixedOffsetZone.parseSpecifier(lowered) || new InvalidZone(input);
  } else if (isNumber(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
    // This is dumb, but the instanceof check above doesn't seem to really work
    // so we're duck checking it
    return input;
  } else {
    return new InvalidZone(input);
  }
}

var now = function now() {
  return Date.now();
},
    defaultZone = null,
    // not setting this directly to LocalZone.instance bc loading order issues
defaultLocale = null,
    defaultNumberingSystem = null,
    defaultOutputCalendar = null,
    throwOnInvalid = false;
/**
 * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
 */


var Settings = /*#__PURE__*/function () {
  function Settings() {}

  /**
   * Reset Luxon's global caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  Settings.resetCaches = function resetCaches() {
    Locale.resetCache();
    IANAZone.resetCache();
  };

  _createClass(Settings, null, [{
    key: "now",

    /**
     * Get the callback for returning the current timestamp.
     * @type {function}
     */
    get: function get() {
      return now;
    }
    /**
     * Set the callback for returning the current timestamp.
     * The function should return a number, which will be interpreted as an Epoch millisecond count
     * @type {function}
     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
     */
    ,
    set: function set(n) {
      now = n;
    }
    /**
     * Get the default time zone to create DateTimes in.
     * @type {string}
     */

  }, {
    key: "defaultZoneName",
    get: function get() {
      return Settings.defaultZone.name;
    }
    /**
     * Set the default time zone to create DateTimes in. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(z) {
      if (!z) {
        defaultZone = null;
      } else {
        defaultZone = normalizeZone(z);
      }
    }
    /**
     * Get the default time zone object to create DateTimes in. Does not affect existing instances.
     * @type {Zone}
     */

  }, {
    key: "defaultZone",
    get: function get() {
      return defaultZone || LocalZone.instance;
    }
    /**
     * Get the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */

  }, {
    key: "defaultLocale",
    get: function get() {
      return defaultLocale;
    }
    /**
     * Set the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(locale) {
      defaultLocale = locale;
    }
    /**
     * Get the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */

  }, {
    key: "defaultNumberingSystem",
    get: function get() {
      return defaultNumberingSystem;
    }
    /**
     * Set the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(numberingSystem) {
      defaultNumberingSystem = numberingSystem;
    }
    /**
     * Get the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */

  }, {
    key: "defaultOutputCalendar",
    get: function get() {
      return defaultOutputCalendar;
    }
    /**
     * Set the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(outputCalendar) {
      defaultOutputCalendar = outputCalendar;
    }
    /**
     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */

  }, {
    key: "throwOnInvalid",
    get: function get() {
      return throwOnInvalid;
    }
    /**
     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    ,
    set: function set(t) {
      throwOnInvalid = t;
    }
  }]);

  return Settings;
}();

var intlDTCache = {};

function getCachedDTF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var key = JSON.stringify([locString, opts]);
  var dtf = intlDTCache[key];

  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }

  return dtf;
}

var intlNumCache = {};

function getCachedINF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var key = JSON.stringify([locString, opts]);
  var inf = intlNumCache[key];

  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }

  return inf;
}

var intlRelCache = {};

function getCachedRTF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var _opts = opts,
      base = _opts.base,
      cacheKeyOpts = _objectWithoutPropertiesLoose(_opts, ["base"]); // exclude `base` from the options


  var key = JSON.stringify([locString, cacheKeyOpts]);
  var inf = intlRelCache[key];

  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }

  return inf;
}

var sysLocaleCache = null;

function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else if (hasIntl()) {
    var computedSys = new Intl.DateTimeFormat().resolvedOptions().locale; // node sometimes defaults to "und". Override that because that is dumb

    sysLocaleCache = !computedSys || computedSys === "und" ? "en-US" : computedSys;
    return sysLocaleCache;
  } else {
    sysLocaleCache = "en-US";
    return sysLocaleCache;
  }
}

function parseLocaleString(localeStr) {
  // I really want to avoid writing a BCP 47 parser
  // see, e.g. https://github.com/wooorm/bcp-47
  // Instead, we'll do this:
  // a) if the string has no -u extensions, just leave it alone
  // b) if it does, use Intl to resolve everything
  // c) if Intl fails, try again without the -u
  var uIndex = localeStr.indexOf("-u-");

  if (uIndex === -1) {
    return [localeStr];
  } else {
    var options;
    var smaller = localeStr.substring(0, uIndex);

    try {
      options = getCachedDTF(localeStr).resolvedOptions();
    } catch (e) {
      options = getCachedDTF(smaller).resolvedOptions();
    }

    var _options = options,
        numberingSystem = _options.numberingSystem,
        calendar = _options.calendar; // return the smaller one so that we can append the calendar and numbering overrides to it

    return [smaller, numberingSystem, calendar];
  }
}

function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (hasIntl()) {
    if (outputCalendar || numberingSystem) {
      localeStr += "-u";

      if (outputCalendar) {
        localeStr += "-ca-" + outputCalendar;
      }

      if (numberingSystem) {
        localeStr += "-nu-" + numberingSystem;
      }

      return localeStr;
    } else {
      return localeStr;
    }
  } else {
    return [];
  }
}

function mapMonths(f) {
  var ms = [];

  for (var i = 1; i <= 12; i++) {
    var dt = DateTime.utc(2016, i, 1);
    ms.push(f(dt));
  }

  return ms;
}

function mapWeekdays(f) {
  var ms = [];

  for (var i = 1; i <= 7; i++) {
    var dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }

  return ms;
}

function listStuff(loc, length, defaultOK, englishFn, intlFn) {
  var mode = loc.listingMode(defaultOK);

  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}

function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || hasIntl() && new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
  }
}
/**
 * @private
 */


var PolyNumberFormatter = /*#__PURE__*/function () {
  function PolyNumberFormatter(intl, forceSimple, opts) {
    this.padTo = opts.padTo || 0;
    this.floor = opts.floor || false;

    if (!forceSimple && hasIntl()) {
      var intlOpts = {
        useGrouping: false
      };
      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
      this.inf = getCachedINF(intl, intlOpts);
    }
  }

  var _proto = PolyNumberFormatter.prototype;

  _proto.format = function format(i) {
    if (this.inf) {
      var fixed = this.floor ? Math.floor(i) : i;
      return this.inf.format(fixed);
    } else {
      // to match the browser's numberformatter defaults
      var _fixed = this.floor ? Math.floor(i) : roundTo(i, 3);

      return padStart(_fixed, this.padTo);
    }
  };

  return PolyNumberFormatter;
}();
/**
 * @private
 */


var PolyDateFormatter = /*#__PURE__*/function () {
  function PolyDateFormatter(dt, intl, opts) {
    this.opts = opts;
    this.hasIntl = hasIntl();
    var z;

    if (dt.zone.universal && this.hasIntl) {
      // Chromium doesn't support fixed-offset zones like Etc/GMT+8 in its formatter,
      // See https://bugs.chromium.org/p/chromium/issues/detail?id=364374.
      // So we have to make do. Two cases:
      // 1. The format options tell us to show the zone. We can't do that, so the best
      // we can do is format the date in UTC.
      // 2. The format options don't tell us to show the zone. Then we can adjust them
      // the time and tell the formatter to show it to us in UTC, so that the time is right
      // and the bad zone doesn't show up.
      // We can clean all this up when Chrome fixes this.
      z = "UTC";

      if (opts.timeZoneName) {
        this.dt = dt;
      } else {
        this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);
      }
    } else if (dt.zone.type === "local") {
      this.dt = dt;
    } else {
      this.dt = dt;
      z = dt.zone.name;
    }

    if (this.hasIntl) {
      var intlOpts = Object.assign({}, this.opts);

      if (z) {
        intlOpts.timeZone = z;
      }

      this.dtf = getCachedDTF(intl, intlOpts);
    }
  }

  var _proto2 = PolyDateFormatter.prototype;

  _proto2.format = function format() {
    if (this.hasIntl) {
      return this.dtf.format(this.dt.toJSDate());
    } else {
      var tokenFormat = formatString(this.opts),
          loc = Locale.create("en-US");
      return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);
    }
  };

  _proto2.formatToParts = function formatToParts() {
    if (this.hasIntl && hasFormatToParts()) {
      return this.dtf.formatToParts(this.dt.toJSDate());
    } else {
      // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings
      // and IMO it's too weird to have an uncanny valley like that
      return [];
    }
  };

  _proto2.resolvedOptions = function resolvedOptions() {
    if (this.hasIntl) {
      return this.dtf.resolvedOptions();
    } else {
      return {
        locale: "en-US",
        numberingSystem: "latn",
        outputCalendar: "gregory"
      };
    }
  };

  return PolyDateFormatter;
}();
/**
 * @private
 */


var PolyRelFormatter = /*#__PURE__*/function () {
  function PolyRelFormatter(intl, isEnglish, opts) {
    this.opts = Object.assign({
      style: "long"
    }, opts);

    if (!isEnglish && hasRelative()) {
      this.rtf = getCachedRTF(intl, opts);
    }
  }

  var _proto3 = PolyRelFormatter.prototype;

  _proto3.format = function format(count, unit) {
    if (this.rtf) {
      return this.rtf.format(count, unit);
    } else {
      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    }
  };

  _proto3.formatToParts = function formatToParts(count, unit) {
    if (this.rtf) {
      return this.rtf.formatToParts(count, unit);
    } else {
      return [];
    }
  };

  return PolyRelFormatter;
}();
/**
 * @private
 */


var Locale = /*#__PURE__*/function () {
  Locale.fromOpts = function fromOpts(opts) {
    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
  };

  Locale.create = function create(locale, numberingSystem, outputCalendar, defaultToEN) {
    if (defaultToEN === void 0) {
      defaultToEN = false;
    }

    var specifiedLocale = locale || Settings.defaultLocale,
        // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
    localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale()),
        numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,
        outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
  };

  Locale.resetCache = function resetCache() {
    sysLocaleCache = null;
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
  };

  Locale.fromObject = function fromObject(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        locale = _ref.locale,
        numberingSystem = _ref.numberingSystem,
        outputCalendar = _ref.outputCalendar;

    return Locale.create(locale, numberingSystem, outputCalendar);
  };

  function Locale(locale, numbering, outputCalendar, specifiedLocale) {
    var _parseLocaleString = parseLocaleString(locale),
        parsedLocale = _parseLocaleString[0],
        parsedNumberingSystem = _parseLocaleString[1],
        parsedOutputCalendar = _parseLocaleString[2];

    this.locale = parsedLocale;
    this.numberingSystem = numbering || parsedNumberingSystem || null;
    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
    this.weekdaysCache = {
      format: {},
      standalone: {}
    };
    this.monthsCache = {
      format: {},
      standalone: {}
    };
    this.meridiemCache = null;
    this.eraCache = {};
    this.specifiedLocale = specifiedLocale;
    this.fastNumbersCached = null;
  }

  var _proto4 = Locale.prototype;

  _proto4.listingMode = function listingMode(defaultOK) {
    if (defaultOK === void 0) {
      defaultOK = true;
    }

    var intl = hasIntl(),
        hasFTP = intl && hasFormatToParts(),
        isActuallyEn = this.isEnglish(),
        hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");

    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {
      return "error";
    } else if (!hasFTP || isActuallyEn && hasNoWeirdness) {
      return "en";
    } else {
      return "intl";
    }
  };

  _proto4.clone = function clone(alts) {
    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
      return this;
    } else {
      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);
    }
  };

  _proto4.redefaultToEN = function redefaultToEN(alts) {
    if (alts === void 0) {
      alts = {};
    }

    return this.clone(Object.assign({}, alts, {
      defaultToEN: true
    }));
  };

  _proto4.redefaultToSystem = function redefaultToSystem(alts) {
    if (alts === void 0) {
      alts = {};
    }

    return this.clone(Object.assign({}, alts, {
      defaultToEN: false
    }));
  };

  _proto4.months = function months$1(length, format, defaultOK) {
    var _this = this;

    if (format === void 0) {
      format = false;
    }

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, months, function () {
      var intl = format ? {
        month: length,
        day: "numeric"
      } : {
        month: length
      },
          formatStr = format ? "format" : "standalone";

      if (!_this.monthsCache[formatStr][length]) {
        _this.monthsCache[formatStr][length] = mapMonths(function (dt) {
          return _this.extract(dt, intl, "month");
        });
      }

      return _this.monthsCache[formatStr][length];
    });
  };

  _proto4.weekdays = function weekdays$1(length, format, defaultOK) {
    var _this2 = this;

    if (format === void 0) {
      format = false;
    }

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, weekdays, function () {
      var intl = format ? {
        weekday: length,
        year: "numeric",
        month: "long",
        day: "numeric"
      } : {
        weekday: length
      },
          formatStr = format ? "format" : "standalone";

      if (!_this2.weekdaysCache[formatStr][length]) {
        _this2.weekdaysCache[formatStr][length] = mapWeekdays(function (dt) {
          return _this2.extract(dt, intl, "weekday");
        });
      }

      return _this2.weekdaysCache[formatStr][length];
    });
  };

  _proto4.meridiems = function meridiems$1(defaultOK) {
    var _this3 = this;

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, undefined, defaultOK, function () {
      return meridiems;
    }, function () {
      // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
      // for AM and PM. This is probably wrong, but it's makes parsing way easier.
      if (!_this3.meridiemCache) {
        var intl = {
          hour: "numeric",
          hour12: true
        };
        _this3.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(function (dt) {
          return _this3.extract(dt, intl, "dayperiod");
        });
      }

      return _this3.meridiemCache;
    });
  };

  _proto4.eras = function eras$1(length, defaultOK) {
    var _this4 = this;

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, eras, function () {
      var intl = {
        era: length
      }; // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
      // to definitely enumerate them.

      if (!_this4.eraCache[length]) {
        _this4.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(function (dt) {
          return _this4.extract(dt, intl, "era");
        });
      }

      return _this4.eraCache[length];
    });
  };

  _proto4.extract = function extract(dt, intlOpts, field) {
    var df = this.dtFormatter(dt, intlOpts),
        results = df.formatToParts(),
        matching = results.find(function (m) {
      return m.type.toLowerCase() === field;
    });
    return matching ? matching.value : null;
  };

  _proto4.numberFormatter = function numberFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }

    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
    // (in contrast, the rest of the condition is used heavily)
    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
  };

  _proto4.dtFormatter = function dtFormatter(dt, intlOpts) {
    if (intlOpts === void 0) {
      intlOpts = {};
    }

    return new PolyDateFormatter(dt, this.intl, intlOpts);
  };

  _proto4.relFormatter = function relFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }

    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
  };

  _proto4.isEnglish = function isEnglish() {
    return this.locale === "en" || this.locale.toLowerCase() === "en-us" || hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
  };

  _proto4.equals = function equals(other) {
    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
  };

  _createClass(Locale, [{
    key: "fastNumbers",
    get: function get() {
      if (this.fastNumbersCached == null) {
        this.fastNumbersCached = supportsFastNumbers(this);
      }

      return this.fastNumbersCached;
    }
  }]);

  return Locale;
}();

/*
 * This file handles parsing for well-specified formats. Here's how it works:
 * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
 * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
 * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
 * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
 * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
 * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
 */

function combineRegexes() {
  for (var _len = arguments.length, regexes = new Array(_len), _key = 0; _key < _len; _key++) {
    regexes[_key] = arguments[_key];
  }

  var full = regexes.reduce(function (f, r) {
    return f + r.source;
  }, "");
  return RegExp("^" + full + "$");
}

function combineExtractors() {
  for (var _len2 = arguments.length, extractors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    extractors[_key2] = arguments[_key2];
  }

  return function (m) {
    return extractors.reduce(function (_ref, ex) {
      var mergedVals = _ref[0],
          mergedZone = _ref[1],
          cursor = _ref[2];

      var _ex = ex(m, cursor),
          val = _ex[0],
          zone = _ex[1],
          next = _ex[2];

      return [Object.assign(mergedVals, val), mergedZone || zone, next];
    }, [{}, null, 1]).slice(0, 2);
  };
}

function parse(s) {
  if (s == null) {
    return [null, null];
  }

  for (var _len3 = arguments.length, patterns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    patterns[_key3 - 1] = arguments[_key3];
  }

  for (var _i = 0, _patterns = patterns; _i < _patterns.length; _i++) {
    var _patterns$_i = _patterns[_i],
        regex = _patterns$_i[0],
        extractor = _patterns$_i[1];
    var m = regex.exec(s);

    if (m) {
      return extractor(m);
    }
  }

  return [null, null];
}

function simpleParse() {
  for (var _len4 = arguments.length, keys = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    keys[_key4] = arguments[_key4];
  }

  return function (match, cursor) {
    var ret = {};
    var i;

    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match[cursor + i]);
    }

    return [ret, null, cursor + i];
  };
} // ISO and SQL parsing


var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,
    isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,
    isoTimeRegex = RegExp("" + isoTimeBaseRegex.source + offsetRegex.source + "?"),
    isoTimeExtensionRegex = RegExp("(?:T" + isoTimeRegex.source + ")?"),
    isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,
    isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/,
    isoOrdinalRegex = /(\d{4})-?(\d{3})/,
    extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay"),
    extractISOOrdinalData = simpleParse("year", "ordinal"),
    sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/,
    // dumbed-down version of the ISO one
sqlTimeRegex = RegExp(isoTimeBaseRegex.source + " ?(?:" + offsetRegex.source + "|(" + ianaRegex.source + "))?"),
    sqlTimeExtensionRegex = RegExp("(?: " + sqlTimeRegex.source + ")?");

function int(match, pos, fallback) {
  var m = match[pos];
  return isUndefined(m) ? fallback : parseInteger(m);
}

function extractISOYmd(match, cursor) {
  var item = {
    year: int(match, cursor),
    month: int(match, cursor + 1, 1),
    day: int(match, cursor + 2, 1)
  };
  return [item, null, cursor + 3];
}

function extractISOTime(match, cursor) {
  var item = {
    hour: int(match, cursor, 0),
    minute: int(match, cursor + 1, 0),
    second: int(match, cursor + 2, 0),
    millisecond: parseMillis(match[cursor + 3])
  };
  return [item, null, cursor + 4];
}

function extractISOOffset(match, cursor) {
  var local = !match[cursor] && !match[cursor + 1],
      fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
      zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone, cursor + 3];
}

function extractIANAZone(match, cursor) {
  var zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
  return [{}, zone, cursor + 1];
} // ISO duration parsing


var isoDuration = /^-?P(?:(?:(-?\d{1,9})Y)?(?:(-?\d{1,9})M)?(?:(-?\d{1,9})W)?(?:(-?\d{1,9})D)?(?:T(?:(-?\d{1,9})H)?(?:(-?\d{1,9})M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,9}))?S)?)?)$/;

function extractISODuration(match) {
  var s = match[0],
      yearStr = match[1],
      monthStr = match[2],
      weekStr = match[3],
      dayStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      millisecondsStr = match[8];
  var hasNegativePrefix = s[0] === "-";

  var maybeNegate = function maybeNegate(num) {
    return num && hasNegativePrefix ? -num : num;
  };

  return [{
    years: maybeNegate(parseInteger(yearStr)),
    months: maybeNegate(parseInteger(monthStr)),
    weeks: maybeNegate(parseInteger(weekStr)),
    days: maybeNegate(parseInteger(dayStr)),
    hours: maybeNegate(parseInteger(hourStr)),
    minutes: maybeNegate(parseInteger(minuteStr)),
    seconds: maybeNegate(parseInteger(secondStr)),
    milliseconds: maybeNegate(parseMillis(millisecondsStr))
  }];
} // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
// and not just that we're in -240 *right now*. But since I don't think these are used that often
// I'm just going to ignore that


var obsOffsets = {
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};

function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr)
  };
  if (secondStr) result.second = parseInteger(secondStr);

  if (weekdayStr) {
    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
  }

  return result;
} // RFC 2822/5322


var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

function extractRFC2822(match) {
  var weekdayStr = match[1],
      dayStr = match[2],
      monthStr = match[3],
      yearStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      obsOffset = match[8],
      milOffset = match[9],
      offHourStr = match[10],
      offMinuteStr = match[11],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  var offset;

  if (obsOffset) {
    offset = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset = 0;
  } else {
    offset = signedOffset(offHourStr, offMinuteStr);
  }

  return [result, new FixedOffsetZone(offset)];
}

function preprocessRFC2822(s) {
  // Remove comments and folding whitespace and replace multiple-spaces with a single space
  return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
} // http date


var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
    rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
    ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

function extractRFC1123Or850(match) {
  var weekdayStr = match[1],
      dayStr = match[2],
      monthStr = match[3],
      yearStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

function extractASCII(match) {
  var weekdayStr = match[1],
      monthStr = match[2],
      dayStr = match[3],
      hourStr = match[4],
      minuteStr = match[5],
      secondStr = match[6],
      yearStr = match[7],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
var extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset);
var extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset);
var extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);
var extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);
/**
 * @private
 */

function parseISODate(s) {
  return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);
}
function parseRFC2822Date(s) {
  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
}
function parseHTTPDate(s) {
  return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);
}
function parseISODuration(s) {
  return parse(s, [isoDuration, extractISODuration]);
}
var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
var extractISOYmdTimeOffsetAndIANAZone = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseSQL(s) {
  return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);
}

var INVALID = "Invalid Duration"; // unit conversion constants

var lowOrderMatrix = {
  weeks: {
    days: 7,
    hours: 7 * 24,
    minutes: 7 * 24 * 60,
    seconds: 7 * 24 * 60 * 60,
    milliseconds: 7 * 24 * 60 * 60 * 1000
  },
  days: {
    hours: 24,
    minutes: 24 * 60,
    seconds: 24 * 60 * 60,
    milliseconds: 24 * 60 * 60 * 1000
  },
  hours: {
    minutes: 60,
    seconds: 60 * 60,
    milliseconds: 60 * 60 * 1000
  },
  minutes: {
    seconds: 60,
    milliseconds: 60 * 1000
  },
  seconds: {
    milliseconds: 1000
  }
},
    casualMatrix = Object.assign({
  years: {
    quarters: 4,
    months: 12,
    weeks: 52,
    days: 365,
    hours: 365 * 24,
    minutes: 365 * 24 * 60,
    seconds: 365 * 24 * 60 * 60,
    milliseconds: 365 * 24 * 60 * 60 * 1000
  },
  quarters: {
    months: 3,
    weeks: 13,
    days: 91,
    hours: 91 * 24,
    minutes: 91 * 24 * 60,
    seconds: 91 * 24 * 60 * 60,
    milliseconds: 91 * 24 * 60 * 60 * 1000
  },
  months: {
    weeks: 4,
    days: 30,
    hours: 30 * 24,
    minutes: 30 * 24 * 60,
    seconds: 30 * 24 * 60 * 60,
    milliseconds: 30 * 24 * 60 * 60 * 1000
  }
}, lowOrderMatrix),
    daysInYearAccurate = 146097.0 / 400,
    daysInMonthAccurate = 146097.0 / 4800,
    accurateMatrix = Object.assign({
  years: {
    quarters: 4,
    months: 12,
    weeks: daysInYearAccurate / 7,
    days: daysInYearAccurate,
    hours: daysInYearAccurate * 24,
    minutes: daysInYearAccurate * 24 * 60,
    seconds: daysInYearAccurate * 24 * 60 * 60,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000
  },
  quarters: {
    months: 3,
    weeks: daysInYearAccurate / 28,
    days: daysInYearAccurate / 4,
    hours: daysInYearAccurate * 24 / 4,
    minutes: daysInYearAccurate * 24 * 60 / 4,
    seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000 / 4
  },
  months: {
    weeks: daysInMonthAccurate / 7,
    days: daysInMonthAccurate,
    hours: daysInMonthAccurate * 24,
    minutes: daysInMonthAccurate * 24 * 60,
    seconds: daysInMonthAccurate * 24 * 60 * 60,
    milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000
  }
}, lowOrderMatrix); // units ordered by size

var orderedUnits = ["years", "quarters", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"];
var reverseUnits = orderedUnits.slice(0).reverse(); // clone really means "create another instance just like this one, but with these changes"

function clone(dur, alts, clear) {
  if (clear === void 0) {
    clear = false;
  }

  // deep merge for vals
  var conf = {
    values: clear ? alts.values : Object.assign({}, dur.values, alts.values || {}),
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy
  };
  return new Duration(conf);
}

function antiTrunc(n) {
  return n < 0 ? Math.floor(n) : Math.ceil(n);
} // NB: mutates parameters


function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
  var conv = matrix[toUnit][fromUnit],
      raw = fromMap[fromUnit] / conv,
      sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),
      // ok, so this is wild, but see the matrix in the tests
  added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
  toMap[toUnit] += added;
  fromMap[fromUnit] -= added * conv;
} // NB: mutates parameters


function normalizeValues(matrix, vals) {
  reverseUnits.reduce(function (previous, current) {
    if (!isUndefined(vals[current])) {
      if (previous) {
        convert(matrix, vals, previous, vals, current);
      }

      return current;
    } else {
      return previous;
    }
  }, null);
}
/**
 * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.
 *
 * Here is a brief overview of commonly used methods and getters in Duration:
 *
 * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
 * * **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.
 * * **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.
 * * **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.
 * * **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}
 *
 * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
 */


var Duration = /*#__PURE__*/function () {
  /**
   * @private
   */
  function Duration(config) {
    var accurate = config.conversionAccuracy === "longterm" || false;
    /**
     * @access private
     */

    this.values = config.values;
    /**
     * @access private
     */

    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */

    this.conversionAccuracy = accurate ? "longterm" : "casual";
    /**
     * @access private
     */

    this.invalid = config.invalid || null;
    /**
     * @access private
     */

    this.matrix = accurate ? accurateMatrix : casualMatrix;
    /**
     * @access private
     */

    this.isLuxonDuration = true;
  }
  /**
   * Create Duration from a number of milliseconds.
   * @param {number} count of milliseconds
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */


  Duration.fromMillis = function fromMillis(count, opts) {
    return Duration.fromObject(Object.assign({
      milliseconds: count
    }, opts));
  }
  /**
   * Create a Duration from a Javascript object with keys like 'years' and 'hours.
   * If this object is empty then a zero milliseconds duration is returned.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.years
   * @param {number} obj.quarters
   * @param {number} obj.months
   * @param {number} obj.weeks
   * @param {number} obj.days
   * @param {number} obj.hours
   * @param {number} obj.minutes
   * @param {number} obj.seconds
   * @param {number} obj.milliseconds
   * @param {string} [obj.locale='en-US'] - the locale to use
   * @param {string} obj.numberingSystem - the numbering system to use
   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  ;

  Duration.fromObject = function fromObject(obj) {
    if (obj == null || typeof obj !== "object") {
      throw new InvalidArgumentError("Duration.fromObject: argument expected to be an object, got " + (obj === null ? "null" : typeof obj));
    }

    return new Duration({
      values: normalizeObject(obj, Duration.normalizeUnit, ["locale", "numberingSystem", "conversionAccuracy", "zone" // a bit of debt; it's super inconvenient internally not to be able to blindly pass this
      ]),
      loc: Locale.fromObject(obj),
      conversionAccuracy: obj.conversionAccuracy
    });
  }
  /**
   * Create a Duration from an ISO 8601 duration string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
   * @return {Duration}
   */
  ;

  Duration.fromISO = function fromISO(text, opts) {
    var _parseISODuration = parseISODuration(text),
        parsed = _parseISODuration[0];

    if (parsed) {
      var obj = Object.assign(parsed, opts);
      return Duration.fromObject(obj);
    } else {
      return Duration.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
    }
  }
  /**
   * Create an invalid Duration.
   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Duration}
   */
  ;

  Duration.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDurationError(invalid);
    } else {
      return new Duration({
        invalid: invalid
      });
    }
  }
  /**
   * @private
   */
  ;

  Duration.normalizeUnit = function normalizeUnit(unit) {
    var normalized = {
      year: "years",
      years: "years",
      quarter: "quarters",
      quarters: "quarters",
      month: "months",
      months: "months",
      week: "weeks",
      weeks: "weeks",
      day: "days",
      days: "days",
      hour: "hours",
      hours: "hours",
      minute: "minutes",
      minutes: "minutes",
      second: "seconds",
      seconds: "seconds",
      millisecond: "milliseconds",
      milliseconds: "milliseconds"
    }[unit ? unit.toLowerCase() : unit];
    if (!normalized) throw new InvalidUnitError(unit);
    return normalized;
  }
  /**
   * Check if an object is a Duration. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  Duration.isDuration = function isDuration(o) {
    return o && o.isLuxonDuration || false;
  }
  /**
   * Get  the locale of a Duration, such 'en-GB'
   * @type {string}
   */
  ;

  var _proto = Duration.prototype;

  /**
   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
   * * `S` for milliseconds
   * * `s` for seconds
   * * `m` for minutes
   * * `h` for hours
   * * `d` for days
   * * `M` for months
   * * `y` for years
   * Notes:
   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
   * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.
   * @param {string} fmt - the format string
   * @param {Object} opts - options
   * @param {boolean} [opts.floor=true] - floor numerical values
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
   * @return {string}
   */
  _proto.toFormat = function toFormat(fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    // reverse-compat since 1.2; we always round down now, never up, and we do it by default
    var fmtOpts = Object.assign({}, opts, {
      floor: opts.round !== false && opts.floor !== false
    });
    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;
  }
  /**
   * Returns a Javascript object with this Duration's values.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
   * @return {Object}
   */
  ;

  _proto.toObject = function toObject(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) return {};
    var base = Object.assign({}, this.values);

    if (opts.includeConfig) {
      base.conversionAccuracy = this.conversionAccuracy;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }

    return base;
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Duration.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
   * @return {string}
   */
  ;

  _proto.toISO = function toISO() {
    // we could use the formatter, but this is an easier way to get the minimum string
    if (!this.isValid) return null;
    var s = "P";
    if (this.years !== 0) s += this.years + "Y";
    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
    if (this.weeks !== 0) s += this.weeks + "W";
    if (this.days !== 0) s += this.days + "D";
    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s += "T";
    if (this.hours !== 0) s += this.hours + "H";
    if (this.minutes !== 0) s += this.minutes + "M";
    if (this.seconds !== 0 || this.milliseconds !== 0) // this will handle "floating point madness" by removing extra decimal places
      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
    if (s === "P") s += "T0S";
    return s;
  }
  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
   * @return {string}
   */
  ;

  _proto.toJSON = function toJSON() {
    return this.toISO();
  }
  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    return this.toISO();
  }
  /**
   * Returns an milliseconds value of this Duration.
   * @return {number}
   */
  ;

  _proto.valueOf = function valueOf() {
    return this.as("milliseconds");
  }
  /**
   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  ;

  _proto.plus = function plus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration),
        result = {};

    for (var _iterator = _createForOfIteratorHelperLoose(orderedUnits), _step; !(_step = _iterator()).done;) {
      var k = _step.value;

      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
        result[k] = dur.get(k) + this.get(k);
      }
    }

    return clone(this, {
      values: result
    }, true);
  }
  /**
   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  ;

  _proto.minus = function minus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration);
    return this.plus(dur.negate());
  }
  /**
   * Scale this Duration by the specified amount. Return a newly-constructed Duration.
   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === "hour" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
   * @return {Duration}
   */
  ;

  _proto.mapUnits = function mapUnits(fn) {
    if (!this.isValid) return this;
    var result = {};

    for (var _i = 0, _Object$keys = Object.keys(this.values); _i < _Object$keys.length; _i++) {
      var k = _Object$keys[_i];
      result[k] = asNumber(fn(this.values[k], k));
    }

    return clone(this, {
      values: result
    }, true);
  }
  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2
   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0
   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3
   * @return {number}
   */
  ;

  _proto.get = function get(unit) {
    return this[Duration.normalizeUnit(unit)];
  }
  /**
   * "Set" the values of specified units. Return a newly-constructed Duration.
   * @param {Object} values - a mapping of units to numbers
   * @example dur.set({ years: 2017 })
   * @example dur.set({ hours: 8, minutes: 30 })
   * @return {Duration}
   */
  ;

  _proto.set = function set(values) {
    if (!this.isValid) return this;
    var mixed = Object.assign(this.values, normalizeObject(values, Duration.normalizeUnit, []));
    return clone(this, {
      values: mixed
    });
  }
  /**
   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
   * @example dur.reconfigure({ locale: 'en-GB' })
   * @return {Duration}
   */
  ;

  _proto.reconfigure = function reconfigure(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        locale = _ref.locale,
        numberingSystem = _ref.numberingSystem,
        conversionAccuracy = _ref.conversionAccuracy;

    var loc = this.loc.clone({
      locale: locale,
      numberingSystem: numberingSystem
    }),
        opts = {
      loc: loc
    };

    if (conversionAccuracy) {
      opts.conversionAccuracy = conversionAccuracy;
    }

    return clone(this, opts);
  }
  /**
   * Return the length of the duration in the specified unit.
   * @param {string} unit - a unit such as 'minutes' or 'days'
   * @example Duration.fromObject({years: 1}).as('days') //=> 365
   * @example Duration.fromObject({years: 1}).as('months') //=> 12
   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
   * @return {number}
   */
  ;

  _proto.as = function as(unit) {
    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
  }
  /**
   * Reduce this Duration to its canonical representation in its current units.
   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
   * @return {Duration}
   */
  ;

  _proto.normalize = function normalize() {
    if (!this.isValid) return this;
    var vals = this.toObject();
    normalizeValues(this.matrix, vals);
    return clone(this, {
      values: vals
    }, true);
  }
  /**
   * Convert this Duration into its representation in a different set of units.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
   * @return {Duration}
   */
  ;

  _proto.shiftTo = function shiftTo() {
    for (var _len = arguments.length, units = new Array(_len), _key = 0; _key < _len; _key++) {
      units[_key] = arguments[_key];
    }

    if (!this.isValid) return this;

    if (units.length === 0) {
      return this;
    }

    units = units.map(function (u) {
      return Duration.normalizeUnit(u);
    });
    var built = {},
        accumulated = {},
        vals = this.toObject();
    var lastUnit;

    for (var _iterator2 = _createForOfIteratorHelperLoose(orderedUnits), _step2; !(_step2 = _iterator2()).done;) {
      var k = _step2.value;

      if (units.indexOf(k) >= 0) {
        lastUnit = k;
        var own = 0; // anything we haven't boiled down yet should get boiled to this unit

        for (var ak in accumulated) {
          own += this.matrix[ak][k] * accumulated[ak];
          accumulated[ak] = 0;
        } // plus anything that's already in this unit


        if (isNumber(vals[k])) {
          own += vals[k];
        }

        var i = Math.trunc(own);
        built[k] = i;
        accumulated[k] = own - i; // we'd like to absorb these fractions in another unit
        // plus anything further down the chain that should be rolled up in to this

        for (var down in vals) {
          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {
            convert(this.matrix, vals, down, built, k);
          }
        } // otherwise, keep it in the wings to boil it later

      } else if (isNumber(vals[k])) {
        accumulated[k] = vals[k];
      }
    } // anything leftover becomes the decimal for the last unit
    // lastUnit must be defined since units is not empty


    for (var key in accumulated) {
      if (accumulated[key] !== 0) {
        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
      }
    }

    return clone(this, {
      values: built
    }, true).normalize();
  }
  /**
   * Return the negative of this Duration.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
   * @return {Duration}
   */
  ;

  _proto.negate = function negate() {
    if (!this.isValid) return this;
    var negated = {};

    for (var _i2 = 0, _Object$keys2 = Object.keys(this.values); _i2 < _Object$keys2.length; _i2++) {
      var k = _Object$keys2[_i2];
      negated[k] = -this.values[k];
    }

    return clone(this, {
      values: negated
    }, true);
  }
  /**
   * Get the years.
   * @type {number}
   */
  ;

  /**
   * Equality check
   * Two Durations are equal iff they have the same units and the same values for each unit.
   * @param {Duration} other
   * @return {boolean}
   */
  _proto.equals = function equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    if (!this.loc.equals(other.loc)) {
      return false;
    }

    for (var _iterator3 = _createForOfIteratorHelperLoose(orderedUnits), _step3; !(_step3 = _iterator3()).done;) {
      var u = _step3.value;

      if (this.values[u] !== other.values[u]) {
        return false;
      }
    }

    return true;
  };

  _createClass(Duration, [{
    key: "locale",
    get: function get() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
     *
     * @type {string}
     */

  }, {
    key: "numberingSystem",
    get: function get() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
  }, {
    key: "years",
    get: function get() {
      return this.isValid ? this.values.years || 0 : NaN;
    }
    /**
     * Get the quarters.
     * @type {number}
     */

  }, {
    key: "quarters",
    get: function get() {
      return this.isValid ? this.values.quarters || 0 : NaN;
    }
    /**
     * Get the months.
     * @type {number}
     */

  }, {
    key: "months",
    get: function get() {
      return this.isValid ? this.values.months || 0 : NaN;
    }
    /**
     * Get the weeks
     * @type {number}
     */

  }, {
    key: "weeks",
    get: function get() {
      return this.isValid ? this.values.weeks || 0 : NaN;
    }
    /**
     * Get the days.
     * @type {number}
     */

  }, {
    key: "days",
    get: function get() {
      return this.isValid ? this.values.days || 0 : NaN;
    }
    /**
     * Get the hours.
     * @type {number}
     */

  }, {
    key: "hours",
    get: function get() {
      return this.isValid ? this.values.hours || 0 : NaN;
    }
    /**
     * Get the minutes.
     * @type {number}
     */

  }, {
    key: "minutes",
    get: function get() {
      return this.isValid ? this.values.minutes || 0 : NaN;
    }
    /**
     * Get the seconds.
     * @return {number}
     */

  }, {
    key: "seconds",
    get: function get() {
      return this.isValid ? this.values.seconds || 0 : NaN;
    }
    /**
     * Get the milliseconds.
     * @return {number}
     */

  }, {
    key: "milliseconds",
    get: function get() {
      return this.isValid ? this.values.milliseconds || 0 : NaN;
    }
    /**
     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
     * on invalid DateTimes or Intervals.
     * @return {boolean}
     */

  }, {
    key: "isValid",
    get: function get() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this Duration became invalid, or null if the Duration is valid
     * @return {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
  }]);

  return Duration;
}();
function friendlyDuration(durationish) {
  if (isNumber(durationish)) {
    return Duration.fromMillis(durationish);
  } else if (Duration.isDuration(durationish)) {
    return durationish;
  } else if (typeof durationish === "object") {
    return Duration.fromObject(durationish);
  } else {
    throw new InvalidArgumentError("Unknown duration argument " + durationish + " of type " + typeof durationish);
  }
}

var INVALID$1 = "Invalid Interval"; // checks if the start is equal to or before the end

function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid("end before start", "The end of an interval must be after its start, but you had start=" + start.toISO() + " and end=" + end.toISO());
  } else {
    return null;
  }
}
/**
 * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
 *
 * Here is a brief overview of the most commonly used methods and getters in Interval:
 *
 * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.
 * * **Accessors** Use {@link start} and {@link end} to get the start and end.
 * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.
 * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.
 * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}.
 * * **Output** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toISODate}, {@link toISOTime}, {@link toFormat}, and {@link toDuration}.
 */


var Interval = /*#__PURE__*/function () {
  /**
   * @private
   */
  function Interval(config) {
    /**
     * @access private
     */
    this.s = config.start;
    /**
     * @access private
     */

    this.e = config.end;
    /**
     * @access private
     */

    this.invalid = config.invalid || null;
    /**
     * @access private
     */

    this.isLuxonInterval = true;
  }
  /**
   * Create an invalid Interval.
   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Interval}
   */


  Interval.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidIntervalError(invalid);
    } else {
      return new Interval({
        invalid: invalid
      });
    }
  }
  /**
   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
   * @param {DateTime|Date|Object} start
   * @param {DateTime|Date|Object} end
   * @return {Interval}
   */
  ;

  Interval.fromDateTimes = function fromDateTimes(start, end) {
    var builtStart = friendlyDateTime(start),
        builtEnd = friendlyDateTime(end);
    var validateError = validateStartEnd(builtStart, builtEnd);

    if (validateError == null) {
      return new Interval({
        start: builtStart,
        end: builtEnd
      });
    } else {
      return validateError;
    }
  }
  /**
   * Create an Interval from a start DateTime and a Duration to extend to.
   * @param {DateTime|Date|Object} start
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  ;

  Interval.after = function after(start, duration) {
    var dur = friendlyDuration(duration),
        dt = friendlyDateTime(start);
    return Interval.fromDateTimes(dt, dt.plus(dur));
  }
  /**
   * Create an Interval from an end DateTime and a Duration to extend backwards to.
   * @param {DateTime|Date|Object} end
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  ;

  Interval.before = function before(end, duration) {
    var dur = friendlyDuration(duration),
        dt = friendlyDateTime(end);
    return Interval.fromDateTimes(dt.minus(dur), dt);
  }
  /**
   * Create an Interval from an ISO 8601 string.
   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
   * @param {string} text - the ISO string to parse
   * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {Interval}
   */
  ;

  Interval.fromISO = function fromISO(text, opts) {
    var _split = (text || "").split("/", 2),
        s = _split[0],
        e = _split[1];

    if (s && e) {
      var start, startIsValid;

      try {
        start = DateTime.fromISO(s, opts);
        startIsValid = start.isValid;
      } catch (e) {
        startIsValid = false;
      }

      var end, endIsValid;

      try {
        end = DateTime.fromISO(e, opts);
        endIsValid = end.isValid;
      } catch (e) {
        endIsValid = false;
      }

      if (startIsValid && endIsValid) {
        return Interval.fromDateTimes(start, end);
      }

      if (startIsValid) {
        var dur = Duration.fromISO(e, opts);

        if (dur.isValid) {
          return Interval.after(start, dur);
        }
      } else if (endIsValid) {
        var _dur = Duration.fromISO(s, opts);

        if (_dur.isValid) {
          return Interval.before(end, _dur);
        }
      }
    }

    return Interval.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
  }
  /**
   * Check if an object is an Interval. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  Interval.isInterval = function isInterval(o) {
    return o && o.isLuxonInterval || false;
  }
  /**
   * Returns the start of the Interval
   * @type {DateTime}
   */
  ;

  var _proto = Interval.prototype;

  /**
   * Returns the length of the Interval in the specified unit.
   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
   * @return {number}
   */
  _proto.length = function length(unit) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    return this.isValid ? this.toDuration.apply(this, [unit]).get(unit) : NaN;
  }
  /**
   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
   * @param {string} [unit='milliseconds'] - the unit of time to count.
   * @return {number}
   */
  ;

  _proto.count = function count(unit) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (!this.isValid) return NaN;
    var start = this.start.startOf(unit),
        end = this.end.startOf(unit);
    return Math.floor(end.diff(start, unit).get(unit)) + 1;
  }
  /**
   * Returns whether this Interval's start and end are both in the same unit of time
   * @param {string} unit - the unit of time to check sameness on
   * @return {boolean}
   */
  ;

  _proto.hasSame = function hasSame(unit) {
    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
  }
  /**
   * Return whether this Interval has the same start and end DateTimes.
   * @return {boolean}
   */
  ;

  _proto.isEmpty = function isEmpty() {
    return this.s.valueOf() === this.e.valueOf();
  }
  /**
   * Return whether this Interval's start is after the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.isAfter = function isAfter(dateTime) {
    if (!this.isValid) return false;
    return this.s > dateTime;
  }
  /**
   * Return whether this Interval's end is before the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.isBefore = function isBefore(dateTime) {
    if (!this.isValid) return false;
    return this.e <= dateTime;
  }
  /**
   * Return whether this Interval contains the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.contains = function contains(dateTime) {
    if (!this.isValid) return false;
    return this.s <= dateTime && this.e > dateTime;
  }
  /**
   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
   * @param {Object} values - the values to set
   * @param {DateTime} values.start - the starting DateTime
   * @param {DateTime} values.end - the ending DateTime
   * @return {Interval}
   */
  ;

  _proto.set = function set(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        start = _ref.start,
        end = _ref.end;

    if (!this.isValid) return this;
    return Interval.fromDateTimes(start || this.s, end || this.e);
  }
  /**
   * Split this Interval at each of the specified DateTimes
   * @param {...[DateTime]} dateTimes - the unit of time to count.
   * @return {[Interval]}
   */
  ;

  _proto.splitAt = function splitAt() {
    var _this = this;

    if (!this.isValid) return [];

    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
      dateTimes[_key] = arguments[_key];
    }

    var sorted = dateTimes.map(friendlyDateTime).filter(function (d) {
      return _this.contains(d);
    }).sort(),
        results = [];
    var s = this.s,
        i = 0;

    while (s < this.e) {
      var added = sorted[i] || this.e,
          next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
      i += 1;
    }

    return results;
  }
  /**
   * Split this Interval into smaller Intervals, each of the specified length.
   * Left over time is grouped into a smaller interval
   * @param {Duration|Object|number} duration - The length of each resulting interval.
   * @return {[Interval]}
   */
  ;

  _proto.splitBy = function splitBy(duration) {
    var dur = friendlyDuration(duration);

    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
      return [];
    }

    var s = this.s,
        added,
        next;
    var results = [];

    while (s < this.e) {
      added = s.plus(dur);
      next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
    }

    return results;
  }
  /**
   * Split this Interval into the specified number of smaller intervals.
   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
   * @return {[Interval]}
   */
  ;

  _proto.divideEqually = function divideEqually(numberOfParts) {
    if (!this.isValid) return [];
    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
  }
  /**
   * Return whether this Interval overlaps with the specified Interval
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.overlaps = function overlaps(other) {
    return this.e > other.s && this.s < other.e;
  }
  /**
   * Return whether this Interval's end is adjacent to the specified Interval's start.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.abutsStart = function abutsStart(other) {
    if (!this.isValid) return false;
    return +this.e === +other.s;
  }
  /**
   * Return whether this Interval's start is adjacent to the specified Interval's end.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.abutsEnd = function abutsEnd(other) {
    if (!this.isValid) return false;
    return +other.e === +this.s;
  }
  /**
   * Return whether this Interval engulfs the start and end of the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.engulfs = function engulfs(other) {
    if (!this.isValid) return false;
    return this.s <= other.s && this.e >= other.e;
  }
  /**
   * Return whether this Interval has the same start and end as the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    return this.s.equals(other.s) && this.e.equals(other.e);
  }
  /**
   * Return an Interval representing the intersection of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
   * Returns null if the intersection is empty, meaning, the intervals don't intersect.
   * @param {Interval} other
   * @return {Interval}
   */
  ;

  _proto.intersection = function intersection(other) {
    if (!this.isValid) return this;
    var s = this.s > other.s ? this.s : other.s,
        e = this.e < other.e ? this.e : other.e;

    if (s > e) {
      return null;
    } else {
      return Interval.fromDateTimes(s, e);
    }
  }
  /**
   * Return an Interval representing the union of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
   * @param {Interval} other
   * @return {Interval}
   */
  ;

  _proto.union = function union(other) {
    if (!this.isValid) return this;
    var s = this.s < other.s ? this.s : other.s,
        e = this.e > other.e ? this.e : other.e;
    return Interval.fromDateTimes(s, e);
  }
  /**
   * Merge an array of Intervals into a equivalent minimal set of Intervals.
   * Combines overlapping and adjacent Intervals.
   * @param {[Interval]} intervals
   * @return {[Interval]}
   */
  ;

  Interval.merge = function merge(intervals) {
    var _intervals$sort$reduc = intervals.sort(function (a, b) {
      return a.s - b.s;
    }).reduce(function (_ref2, item) {
      var sofar = _ref2[0],
          current = _ref2[1];

      if (!current) {
        return [sofar, item];
      } else if (current.overlaps(item) || current.abutsStart(item)) {
        return [sofar, current.union(item)];
      } else {
        return [sofar.concat([current]), item];
      }
    }, [[], null]),
        found = _intervals$sort$reduc[0],
        final = _intervals$sort$reduc[1];

    if (final) {
      found.push(final);
    }

    return found;
  }
  /**
   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
   * @param {[Interval]} intervals
   * @return {[Interval]}
   */
  ;

  Interval.xor = function xor(intervals) {
    var _Array$prototype;

    var start = null,
        currentCount = 0;

    var results = [],
        ends = intervals.map(function (i) {
      return [{
        time: i.s,
        type: "s"
      }, {
        time: i.e,
        type: "e"
      }];
    }),
        flattened = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, ends),
        arr = flattened.sort(function (a, b) {
      return a.time - b.time;
    });

    for (var _iterator = _createForOfIteratorHelperLoose(arr), _step; !(_step = _iterator()).done;) {
      var i = _step.value;
      currentCount += i.type === "s" ? 1 : -1;

      if (currentCount === 1) {
        start = i.time;
      } else {
        if (start && +start !== +i.time) {
          results.push(Interval.fromDateTimes(start, i.time));
        }

        start = null;
      }
    }

    return Interval.merge(results);
  }
  /**
   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
   * @param {...Interval} intervals
   * @return {[Interval]}
   */
  ;

  _proto.difference = function difference() {
    var _this2 = this;

    for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      intervals[_key2] = arguments[_key2];
    }

    return Interval.xor([this].concat(intervals)).map(function (i) {
      return _this2.intersection(i);
    }).filter(function (i) {
      return i && !i.isEmpty();
    });
  }
  /**
   * Returns a string representation of this Interval appropriate for debugging.
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    if (!this.isValid) return INVALID$1;
    return "[" + this.s.toISO() + " \u2013 " + this.e.toISO() + ")";
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Interval.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime.toISO}
   * @return {string}
   */
  ;

  _proto.toISO = function toISO(opts) {
    if (!this.isValid) return INVALID$1;
    return this.s.toISO(opts) + "/" + this.e.toISO(opts);
  }
  /**
   * Returns an ISO 8601-compliant string representation of date of this Interval.
   * The time components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {string}
   */
  ;

  _proto.toISODate = function toISODate() {
    if (!this.isValid) return INVALID$1;
    return this.s.toISODate() + "/" + this.e.toISODate();
  }
  /**
   * Returns an ISO 8601-compliant string representation of time of this Interval.
   * The date components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime.toISO}
   * @return {string}
   */
  ;

  _proto.toISOTime = function toISOTime(opts) {
    if (!this.isValid) return INVALID$1;
    return this.s.toISOTime(opts) + "/" + this.e.toISOTime(opts);
  }
  /**
   * Returns a string representation of this Interval formatted according to the specified format string.
   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.
   * @param {Object} opts - options
   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations
   * @return {string}
   */
  ;

  _proto.toFormat = function toFormat(dateFormat, _temp2) {
    var _ref3 = _temp2 === void 0 ? {} : _temp2,
        _ref3$separator = _ref3.separator,
        separator = _ref3$separator === void 0 ? " – " : _ref3$separator;

    if (!this.isValid) return INVALID$1;
    return "" + this.s.toFormat(dateFormat) + separator + this.e.toFormat(dateFormat);
  }
  /**
   * Return a Duration representing the time spanned by this interval.
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
   * @return {Duration}
   */
  ;

  _proto.toDuration = function toDuration(unit, opts) {
    if (!this.isValid) {
      return Duration.invalid(this.invalidReason);
    }

    return this.e.diff(this.s, unit, opts);
  }
  /**
   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
   * @param {function} mapFn
   * @return {Interval}
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
   */
  ;

  _proto.mapEndpoints = function mapEndpoints(mapFn) {
    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
  };

  _createClass(Interval, [{
    key: "start",
    get: function get() {
      return this.isValid ? this.s : null;
    }
    /**
     * Returns the end of the Interval
     * @type {DateTime}
     */

  }, {
    key: "end",
    get: function get() {
      return this.isValid ? this.e : null;
    }
    /**
     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
     * @type {boolean}
     */

  }, {
    key: "isValid",
    get: function get() {
      return this.invalidReason === null;
    }
    /**
     * Returns an error code if this Interval is invalid, or null if the Interval is valid
     * @type {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
  }]);

  return Interval;
}();

/**
 * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
 */

var Info = /*#__PURE__*/function () {
  function Info() {}

  /**
   * Return whether the specified zone contains a DST.
   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
   * @return {boolean}
   */
  Info.hasDST = function hasDST(zone) {
    if (zone === void 0) {
      zone = Settings.defaultZone;
    }

    var proto = DateTime.local().setZone(zone).set({
      month: 12
    });
    return !zone.universal && proto.offset !== proto.set({
      month: 6
    }).offset;
  }
  /**
   * Return whether the specified zone is a valid IANA specifier.
   * @param {string} zone - Zone to check
   * @return {boolean}
   */
  ;

  Info.isValidIANAZone = function isValidIANAZone(zone) {
    return IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);
  }
  /**
   * Converts the input into a {@link Zone} instance.
   *
   * * If `input` is already a Zone instance, it is returned unchanged.
   * * If `input` is a string containing a valid time zone name, a Zone instance
   *   with that name is returned.
   * * If `input` is a string that doesn't refer to a known time zone, a Zone
   *   instance with {@link Zone.isValid} == false is returned.
   * * If `input is a number, a Zone instance with the specified fixed offset
   *   in minutes is returned.
   * * If `input` is `null` or `undefined`, the default zone is returned.
   * @param {string|Zone|number} [input] - the value to be converted
   * @return {Zone}
   */
  ;

  Info.normalizeZone = function normalizeZone$1(input) {
    return normalizeZone(input, Settings.defaultZone);
  }
  /**
   * Return an array of standalone month names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @example Info.months()[0] //=> 'January'
   * @example Info.months('short')[0] //=> 'Jan'
   * @example Info.months('numeric')[0] //=> '1'
   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
   * @return {[string]}
   */
  ;

  Info.months = function months(length, _temp) {
    if (length === void 0) {
      length = "long";
    }

    var _ref = _temp === void 0 ? {} : _temp,
        _ref$locale = _ref.locale,
        locale = _ref$locale === void 0 ? null : _ref$locale,
        _ref$numberingSystem = _ref.numberingSystem,
        numberingSystem = _ref$numberingSystem === void 0 ? null : _ref$numberingSystem,
        _ref$outputCalendar = _ref.outputCalendar,
        outputCalendar = _ref$outputCalendar === void 0 ? "gregory" : _ref$outputCalendar;

    return Locale.create(locale, numberingSystem, outputCalendar).months(length);
  }
  /**
   * Return an array of format month names.
   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
   * changes the string.
   * See {@link months}
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @return {[string]}
   */
  ;

  Info.monthsFormat = function monthsFormat(length, _temp2) {
    if (length === void 0) {
      length = "long";
    }

    var _ref2 = _temp2 === void 0 ? {} : _temp2,
        _ref2$locale = _ref2.locale,
        locale = _ref2$locale === void 0 ? null : _ref2$locale,
        _ref2$numberingSystem = _ref2.numberingSystem,
        numberingSystem = _ref2$numberingSystem === void 0 ? null : _ref2$numberingSystem,
        _ref2$outputCalendar = _ref2.outputCalendar,
        outputCalendar = _ref2$outputCalendar === void 0 ? "gregory" : _ref2$outputCalendar;

    return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);
  }
  /**
   * Return an array of standalone week names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @example Info.weekdays()[0] //=> 'Monday'
   * @example Info.weekdays('short')[0] //=> 'Mon'
   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
   * @return {[string]}
   */
  ;

  Info.weekdays = function weekdays(length, _temp3) {
    if (length === void 0) {
      length = "long";
    }

    var _ref3 = _temp3 === void 0 ? {} : _temp3,
        _ref3$locale = _ref3.locale,
        locale = _ref3$locale === void 0 ? null : _ref3$locale,
        _ref3$numberingSystem = _ref3.numberingSystem,
        numberingSystem = _ref3$numberingSystem === void 0 ? null : _ref3$numberingSystem;

    return Locale.create(locale, numberingSystem, null).weekdays(length);
  }
  /**
   * Return an array of format week names.
   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
   * changes the string.
   * See {@link weekdays}
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale=null] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @return {[string]}
   */
  ;

  Info.weekdaysFormat = function weekdaysFormat(length, _temp4) {
    if (length === void 0) {
      length = "long";
    }

    var _ref4 = _temp4 === void 0 ? {} : _temp4,
        _ref4$locale = _ref4.locale,
        locale = _ref4$locale === void 0 ? null : _ref4$locale,
        _ref4$numberingSystem = _ref4.numberingSystem,
        numberingSystem = _ref4$numberingSystem === void 0 ? null : _ref4$numberingSystem;

    return Locale.create(locale, numberingSystem, null).weekdays(length, true);
  }
  /**
   * Return an array of meridiems.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.meridiems() //=> [ 'AM', 'PM' ]
   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
   * @return {[string]}
   */
  ;

  Info.meridiems = function meridiems(_temp5) {
    var _ref5 = _temp5 === void 0 ? {} : _temp5,
        _ref5$locale = _ref5.locale,
        locale = _ref5$locale === void 0 ? null : _ref5$locale;

    return Locale.create(locale).meridiems();
  }
  /**
   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
   * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.eras() //=> [ 'BC', 'AD' ]
   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
   * @return {[string]}
   */
  ;

  Info.eras = function eras(length, _temp6) {
    if (length === void 0) {
      length = "short";
    }

    var _ref6 = _temp6 === void 0 ? {} : _temp6,
        _ref6$locale = _ref6.locale,
        locale = _ref6$locale === void 0 ? null : _ref6$locale;

    return Locale.create(locale, null, "gregory").eras(length);
  }
  /**
   * Return the set of available features in this environment.
   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.
   * Keys:
   * * `zones`: whether this environment supports IANA timezones
   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing
   * * `intl`: whether this environment supports general internationalization
   * * `relative`: whether this environment supports relative time formatting
   * @example Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }
   * @return {Object}
   */
  ;

  Info.features = function features() {
    var intl = false,
        intlTokens = false,
        zones = false,
        relative = false;

    if (hasIntl()) {
      intl = true;
      intlTokens = hasFormatToParts();
      relative = hasRelative();

      try {
        zones = new Intl.DateTimeFormat("en", {
          timeZone: "America/New_York"
        }).resolvedOptions().timeZone === "America/New_York";
      } catch (e) {
        zones = false;
      }
    }

    return {
      intl: intl,
      intlTokens: intlTokens,
      zones: zones,
      relative: relative
    };
  };

  return Info;
}();

function dayDiff(earlier, later) {
  var utcDayStart = function utcDayStart(dt) {
    return dt.toUTC(0, {
      keepLocalTime: true
    }).startOf("day").valueOf();
  },
      ms = utcDayStart(later) - utcDayStart(earlier);

  return Math.floor(Duration.fromMillis(ms).as("days"));
}

function highOrderDiffs(cursor, later, units) {
  var differs = [["years", function (a, b) {
    return b.year - a.year;
  }], ["months", function (a, b) {
    return b.month - a.month + (b.year - a.year) * 12;
  }], ["weeks", function (a, b) {
    var days = dayDiff(a, b);
    return (days - days % 7) / 7;
  }], ["days", dayDiff]];
  var results = {};
  var lowestOrder, highWater;

  for (var _i = 0, _differs = differs; _i < _differs.length; _i++) {
    var _differs$_i = _differs[_i],
        unit = _differs$_i[0],
        differ = _differs$_i[1];

    if (units.indexOf(unit) >= 0) {
      var _cursor$plus;

      lowestOrder = unit;
      var delta = differ(cursor, later);
      highWater = cursor.plus((_cursor$plus = {}, _cursor$plus[unit] = delta, _cursor$plus));

      if (highWater > later) {
        var _cursor$plus2;

        cursor = cursor.plus((_cursor$plus2 = {}, _cursor$plus2[unit] = delta - 1, _cursor$plus2));
        delta -= 1;
      } else {
        cursor = highWater;
      }

      results[unit] = delta;
    }
  }

  return [cursor, results, highWater, lowestOrder];
}

function _diff (earlier, later, units, opts) {
  var _highOrderDiffs = highOrderDiffs(earlier, later, units),
      cursor = _highOrderDiffs[0],
      results = _highOrderDiffs[1],
      highWater = _highOrderDiffs[2],
      lowestOrder = _highOrderDiffs[3];

  var remainingMillis = later - cursor;
  var lowerOrderUnits = units.filter(function (u) {
    return ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0;
  });

  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      var _cursor$plus3;

      highWater = cursor.plus((_cursor$plus3 = {}, _cursor$plus3[lowestOrder] = 1, _cursor$plus3));
    }

    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }

  var duration = Duration.fromObject(Object.assign(results, opts));

  if (lowerOrderUnits.length > 0) {
    var _Duration$fromMillis;

    return (_Duration$fromMillis = Duration.fromMillis(remainingMillis, opts)).shiftTo.apply(_Duration$fromMillis, lowerOrderUnits).plus(duration);
  } else {
    return duration;
  }
}

var numberingSystems = {
  arab: "[\u0660-\u0669]",
  arabext: "[\u06F0-\u06F9]",
  bali: "[\u1B50-\u1B59]",
  beng: "[\u09E6-\u09EF]",
  deva: "[\u0966-\u096F]",
  fullwide: "[\uFF10-\uFF19]",
  gujr: "[\u0AE6-\u0AEF]",
  hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
  khmr: "[\u17E0-\u17E9]",
  knda: "[\u0CE6-\u0CEF]",
  laoo: "[\u0ED0-\u0ED9]",
  limb: "[\u1946-\u194F]",
  mlym: "[\u0D66-\u0D6F]",
  mong: "[\u1810-\u1819]",
  mymr: "[\u1040-\u1049]",
  orya: "[\u0B66-\u0B6F]",
  tamldec: "[\u0BE6-\u0BEF]",
  telu: "[\u0C66-\u0C6F]",
  thai: "[\u0E50-\u0E59]",
  tibt: "[\u0F20-\u0F29]",
  latn: "\\d"
};
var numberingSystemsUTF16 = {
  arab: [1632, 1641],
  arabext: [1776, 1785],
  bali: [6992, 7001],
  beng: [2534, 2543],
  deva: [2406, 2415],
  fullwide: [65296, 65303],
  gujr: [2790, 2799],
  khmr: [6112, 6121],
  knda: [3302, 3311],
  laoo: [3792, 3801],
  limb: [6470, 6479],
  mlym: [3430, 3439],
  mong: [6160, 6169],
  mymr: [4160, 4169],
  orya: [2918, 2927],
  tamldec: [3046, 3055],
  telu: [3174, 3183],
  thai: [3664, 3673],
  tibt: [3872, 3881]
}; // eslint-disable-next-line

var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function parseDigits(str) {
  var value = parseInt(str, 10);

  if (isNaN(value)) {
    value = "";

    for (var i = 0; i < str.length; i++) {
      var code = str.charCodeAt(i);

      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (var key in numberingSystemsUTF16) {
          var _numberingSystemsUTF = numberingSystemsUTF16[key],
              min = _numberingSystemsUTF[0],
              max = _numberingSystemsUTF[1];

          if (code >= min && code <= max) {
            value += code - min;
          }
        }
      }
    }

    return parseInt(value, 10);
  } else {
    return value;
  }
}
function digitRegex(_ref, append) {
  var numberingSystem = _ref.numberingSystem;

  if (append === void 0) {
    append = "";
  }

  return new RegExp("" + numberingSystems[numberingSystem || "latn"] + append);
}

var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

function intUnit(regex, post) {
  if (post === void 0) {
    post = function post(i) {
      return i;
    };
  }

  return {
    regex: regex,
    deser: function deser(_ref) {
      var s = _ref[0];
      return post(parseDigits(s));
    }
  };
}

var NBSP = String.fromCharCode(160);
var spaceOrNBSP = "( |" + NBSP + ")";
var spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");

function fixListRegex(s) {
  // make dots optional and also make them literal
  // make space and non breakable space characters interchangeable
  return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}

function stripInsensitivities(s) {
  return s.replace(/\./g, "") // ignore dots that were made optional
  .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
  .toLowerCase();
}

function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: function deser(_ref2) {
        var s = _ref2[0];
        return strings.findIndex(function (i) {
          return stripInsensitivities(s) === stripInsensitivities(i);
        }) + startIndex;
      }
    };
  }
}

function offset(regex, groups) {
  return {
    regex: regex,
    deser: function deser(_ref3) {
      var h = _ref3[1],
          m = _ref3[2];
      return signedOffset(h, m);
    },
    groups: groups
  };
}

function simple(regex) {
  return {
    regex: regex,
    deser: function deser(_ref4) {
      var s = _ref4[0];
      return s;
    }
  };
}

function escapeToken(value) {
  // eslint-disable-next-line no-useless-escape
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}

function unitForToken(token, loc) {
  var one = digitRegex(loc),
      two = digitRegex(loc, "{2}"),
      three = digitRegex(loc, "{3}"),
      four = digitRegex(loc, "{4}"),
      six = digitRegex(loc, "{6}"),
      oneOrTwo = digitRegex(loc, "{1,2}"),
      oneToThree = digitRegex(loc, "{1,3}"),
      oneToSix = digitRegex(loc, "{1,6}"),
      oneToNine = digitRegex(loc, "{1,9}"),
      twoToFour = digitRegex(loc, "{2,4}"),
      fourToSix = digitRegex(loc, "{4,6}"),
      literal = function literal(t) {
    return {
      regex: RegExp(escapeToken(t.val)),
      deser: function deser(_ref5) {
        var s = _ref5[0];
        return s;
      },
      literal: true
    };
  },
      unitate = function unitate(t) {
    if (token.literal) {
      return literal(t);
    }

    switch (t.val) {
      // era
      case "G":
        return oneOf(loc.eras("short", false), 0);

      case "GG":
        return oneOf(loc.eras("long", false), 0);
      // years

      case "y":
        return intUnit(oneToSix);

      case "yy":
        return intUnit(twoToFour, untruncateYear);

      case "yyyy":
        return intUnit(four);

      case "yyyyy":
        return intUnit(fourToSix);

      case "yyyyyy":
        return intUnit(six);
      // months

      case "M":
        return intUnit(oneOrTwo);

      case "MM":
        return intUnit(two);

      case "MMM":
        return oneOf(loc.months("short", true, false), 1);

      case "MMMM":
        return oneOf(loc.months("long", true, false), 1);

      case "L":
        return intUnit(oneOrTwo);

      case "LL":
        return intUnit(two);

      case "LLL":
        return oneOf(loc.months("short", false, false), 1);

      case "LLLL":
        return oneOf(loc.months("long", false, false), 1);
      // dates

      case "d":
        return intUnit(oneOrTwo);

      case "dd":
        return intUnit(two);
      // ordinals

      case "o":
        return intUnit(oneToThree);

      case "ooo":
        return intUnit(three);
      // time

      case "HH":
        return intUnit(two);

      case "H":
        return intUnit(oneOrTwo);

      case "hh":
        return intUnit(two);

      case "h":
        return intUnit(oneOrTwo);

      case "mm":
        return intUnit(two);

      case "m":
        return intUnit(oneOrTwo);

      case "q":
        return intUnit(oneOrTwo);

      case "qq":
        return intUnit(two);

      case "s":
        return intUnit(oneOrTwo);

      case "ss":
        return intUnit(two);

      case "S":
        return intUnit(oneToThree);

      case "SSS":
        return intUnit(three);

      case "u":
        return simple(oneToNine);
      // meridiem

      case "a":
        return oneOf(loc.meridiems(), 0);
      // weekYear (k)

      case "kkkk":
        return intUnit(four);

      case "kk":
        return intUnit(twoToFour, untruncateYear);
      // weekNumber (W)

      case "W":
        return intUnit(oneOrTwo);

      case "WW":
        return intUnit(two);
      // weekdays

      case "E":
      case "c":
        return intUnit(one);

      case "EEE":
        return oneOf(loc.weekdays("short", false, false), 1);

      case "EEEE":
        return oneOf(loc.weekdays("long", false, false), 1);

      case "ccc":
        return oneOf(loc.weekdays("short", true, false), 1);

      case "cccc":
        return oneOf(loc.weekdays("long", true, false), 1);
      // offset/zone

      case "Z":
      case "ZZ":
        return offset(new RegExp("([+-]" + oneOrTwo.source + ")(?::(" + two.source + "))?"), 2);

      case "ZZZ":
        return offset(new RegExp("([+-]" + oneOrTwo.source + ")(" + two.source + ")?"), 2);
      // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
      // because we don't have any way to figure out what they are

      case "z":
        return simple(/[a-z_+-/]{1,256}?/i);

      default:
        return literal(t);
    }
  };

  var unit = unitate(token) || {
    invalidReason: MISSING_FTP
  };
  unit.token = token;
  return unit;
}

var partTypeStyleToTokenVal = {
  year: {
    "2-digit": "yy",
    numeric: "yyyyy"
  },
  month: {
    numeric: "M",
    "2-digit": "MM",
    short: "MMM",
    long: "MMMM"
  },
  day: {
    numeric: "d",
    "2-digit": "dd"
  },
  weekday: {
    short: "EEE",
    long: "EEEE"
  },
  dayperiod: "a",
  dayPeriod: "a",
  hour: {
    numeric: "h",
    "2-digit": "hh"
  },
  minute: {
    numeric: "m",
    "2-digit": "mm"
  },
  second: {
    numeric: "s",
    "2-digit": "ss"
  }
};

function tokenForPart(part, locale, formatOpts) {
  var type = part.type,
      value = part.value;

  if (type === "literal") {
    return {
      literal: true,
      val: value
    };
  }

  var style = formatOpts[type];
  var val = partTypeStyleToTokenVal[type];

  if (typeof val === "object") {
    val = val[style];
  }

  if (val) {
    return {
      literal: false,
      val: val
    };
  }

  return undefined;
}

function buildRegex(units) {
  var re = units.map(function (u) {
    return u.regex;
  }).reduce(function (f, r) {
    return f + "(" + r.source + ")";
  }, "");
  return ["^" + re + "$", units];
}

function match(input, regex, handlers) {
  var matches = input.match(regex);

  if (matches) {
    var all = {};
    var matchIndex = 1;

    for (var i in handlers) {
      if (hasOwnProperty(handlers, i)) {
        var h = handlers[i],
            groups = h.groups ? h.groups + 1 : 1;

        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }

        matchIndex += groups;
      }
    }

    return [matches, all];
  } else {
    return [matches, {}];
  }
}

function dateTimeFromMatches(matches) {
  var toField = function toField(token) {
    switch (token) {
      case "S":
        return "millisecond";

      case "s":
        return "second";

      case "m":
        return "minute";

      case "h":
      case "H":
        return "hour";

      case "d":
        return "day";

      case "o":
        return "ordinal";

      case "L":
      case "M":
        return "month";

      case "y":
        return "year";

      case "E":
      case "c":
        return "weekday";

      case "W":
        return "weekNumber";

      case "k":
        return "weekYear";

      case "q":
        return "quarter";

      default:
        return null;
    }
  };

  var zone;

  if (!isUndefined(matches.Z)) {
    zone = new FixedOffsetZone(matches.Z);
  } else if (!isUndefined(matches.z)) {
    zone = IANAZone.create(matches.z);
  } else {
    zone = null;
  }

  if (!isUndefined(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }

  if (!isUndefined(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }

  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }

  if (!isUndefined(matches.u)) {
    matches.S = parseMillis(matches.u);
  }

  var vals = Object.keys(matches).reduce(function (r, k) {
    var f = toField(k);

    if (f) {
      r[f] = matches[k];
    }

    return r;
  }, {});
  return [vals, zone];
}

var dummyDateTimeCache = null;

function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }

  return dummyDateTimeCache;
}

function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }

  var formatOpts = Formatter.macroTokenToFormatOpts(token.val);

  if (!formatOpts) {
    return token;
  }

  var formatter = Formatter.create(locale, formatOpts);
  var parts = formatter.formatDateTimeParts(getDummyDateTime());
  var tokens = parts.map(function (p) {
    return tokenForPart(p, locale, formatOpts);
  });

  if (tokens.includes(undefined)) {
    return token;
  }

  return tokens;
}

function expandMacroTokens(tokens, locale) {
  var _Array$prototype;

  return (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, tokens.map(function (t) {
    return maybeExpandMacroToken(t, locale);
  }));
}
/**
 * @private
 */


function explainFromTokens(locale, input, format) {
  var tokens = expandMacroTokens(Formatter.parseFormat(format), locale),
      units = tokens.map(function (t) {
    return unitForToken(t, locale);
  }),
      disqualifyingUnit = units.find(function (t) {
    return t.invalidReason;
  });

  if (disqualifyingUnit) {
    return {
      input: input,
      tokens: tokens,
      invalidReason: disqualifyingUnit.invalidReason
    };
  } else {
    var _buildRegex = buildRegex(units),
        regexString = _buildRegex[0],
        handlers = _buildRegex[1],
        regex = RegExp(regexString, "i"),
        _match = match(input, regex, handlers),
        rawMatches = _match[0],
        matches = _match[1],
        _ref6 = matches ? dateTimeFromMatches(matches) : [null, null],
        result = _ref6[0],
        zone = _ref6[1];

    if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
      throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
    }

    return {
      input: input,
      tokens: tokens,
      regex: regex,
      rawMatches: rawMatches,
      matches: matches,
      result: result,
      zone: zone
    };
  }
}
function parseFromTokens(locale, input, format) {
  var _explainFromTokens = explainFromTokens(locale, input, format),
      result = _explainFromTokens.result,
      zone = _explainFromTokens.zone,
      invalidReason = _explainFromTokens.invalidReason;

  return [result, zone, invalidReason];
}

var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
    leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

function unitOutOfRange(unit, value) {
  return new Invalid("unit out of range", "you specified " + value + " (of type " + typeof value + ") as a " + unit + ", which is invalid");
}

function dayOfWeek(year, month, day) {
  var js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();
  return js === 0 ? 7 : js;
}

function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}

function uncomputeOrdinal(year, ordinal) {
  var table = isLeapYear(year) ? leapLadder : nonLeapLadder,
      month0 = table.findIndex(function (i) {
    return i < ordinal;
  }),
      day = ordinal - table[month0];
  return {
    month: month0 + 1,
    day: day
  };
}
/**
 * @private
 */


function gregorianToWeek(gregObj) {
  var year = gregObj.year,
      month = gregObj.month,
      day = gregObj.day,
      ordinal = computeOrdinal(year, month, day),
      weekday = dayOfWeek(year, month, day);
  var weekNumber = Math.floor((ordinal - weekday + 10) / 7),
      weekYear;

  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear);
  } else if (weekNumber > weeksInWeekYear(year)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }

  return Object.assign({
    weekYear: weekYear,
    weekNumber: weekNumber,
    weekday: weekday
  }, timeObject(gregObj));
}
function weekToGregorian(weekData) {
  var weekYear = weekData.weekYear,
      weekNumber = weekData.weekNumber,
      weekday = weekData.weekday,
      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),
      yearInDays = daysInYear(weekYear);
  var ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,
      year;

  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }

  var _uncomputeOrdinal = uncomputeOrdinal(year, ordinal),
      month = _uncomputeOrdinal.month,
      day = _uncomputeOrdinal.day;

  return Object.assign({
    year: year,
    month: month,
    day: day
  }, timeObject(weekData));
}
function gregorianToOrdinal(gregData) {
  var year = gregData.year,
      month = gregData.month,
      day = gregData.day,
      ordinal = computeOrdinal(year, month, day);
  return Object.assign({
    year: year,
    ordinal: ordinal
  }, timeObject(gregData));
}
function ordinalToGregorian(ordinalData) {
  var year = ordinalData.year,
      ordinal = ordinalData.ordinal,
      _uncomputeOrdinal2 = uncomputeOrdinal(year, ordinal),
      month = _uncomputeOrdinal2.month,
      day = _uncomputeOrdinal2.day;

  return Object.assign({
    year: year,
    month: month,
    day: day
  }, timeObject(ordinalData));
}
function hasInvalidWeekData(obj) {
  var validYear = isInteger(obj.weekYear),
      validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),
      validWeekday = integerBetween(obj.weekday, 1, 7);

  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.week);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else return false;
}
function hasInvalidOrdinalData(obj) {
  var validYear = isInteger(obj.year),
      validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else return false;
}
function hasInvalidGregorianData(obj) {
  var validYear = isInteger(obj.year),
      validMonth = integerBetween(obj.month, 1, 12),
      validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else return false;
}
function hasInvalidTimeData(obj) {
  var hour = obj.hour,
      minute = obj.minute,
      second = obj.second,
      millisecond = obj.millisecond;
  var validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0,
      validMinute = integerBetween(minute, 0, 59),
      validSecond = integerBetween(second, 0, 59),
      validMillisecond = integerBetween(millisecond, 0, 999);

  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else return false;
}

var INVALID$2 = "Invalid DateTime";
var MAX_DATE = 8.64e15;

function unsupportedZone(zone) {
  return new Invalid("unsupported zone", "the zone \"" + zone.name + "\" is not supported");
} // we cache week data on the DT object and this intermediates the cache


function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }

  return dt.weekData;
} // clone really means, "make a new object with these modifications". all "setters" really use this
// to create a new object while only changing some of the properties


function clone$1(inst, alts) {
  var current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid
  };
  return new DateTime(Object.assign({}, current, alts, {
    old: current
  }));
} // find the right offset a given local time. The o input is our guess, which determines which
// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)


function fixOffset(localTS, o, tz) {
  // Our UTC time is just a guess because our offset is just a guess
  var utcGuess = localTS - o * 60 * 1000; // Test whether the zone matches the offset for this ts

  var o2 = tz.offset(utcGuess); // If so, offset didn't change and we're done

  if (o === o2) {
    return [utcGuess, o];
  } // If not, change the ts by the difference in the offset


  utcGuess -= (o2 - o) * 60 * 1000; // If that gives us the local time we want, we're done

  var o3 = tz.offset(utcGuess);

  if (o2 === o3) {
    return [utcGuess, o2];
  } // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time


  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
} // convert an epoch timestamp into a calendar object with the given offset


function tsToObj(ts, offset) {
  ts += offset * 60 * 1000;
  var d = new Date(ts);
  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds()
  };
} // convert a calendar object to a epoch timestamp


function objToTS(obj, offset, zone) {
  return fixOffset(objToLocalTS(obj), offset, zone);
} // create a new DT instance by adding a duration, adjusting for DSTs


function adjustTime(inst, dur) {
  var oPre = inst.o,
      year = inst.c.year + Math.trunc(dur.years),
      month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,
      c = Object.assign({}, inst.c, {
    year: year,
    month: month,
    day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
  }),
      millisToAdd = Duration.fromObject({
    years: dur.years - Math.trunc(dur.years),
    quarters: dur.quarters - Math.trunc(dur.quarters),
    months: dur.months - Math.trunc(dur.months),
    weeks: dur.weeks - Math.trunc(dur.weeks),
    days: dur.days - Math.trunc(dur.days),
    hours: dur.hours,
    minutes: dur.minutes,
    seconds: dur.seconds,
    milliseconds: dur.milliseconds
  }).as("milliseconds"),
      localTS = objToLocalTS(c);

  var _fixOffset = fixOffset(localTS, oPre, inst.zone),
      ts = _fixOffset[0],
      o = _fixOffset[1];

  if (millisToAdd !== 0) {
    ts += millisToAdd; // that could have changed the offset by going over a DST, but we want to keep the ts the same

    o = inst.zone.offset(ts);
  }

  return {
    ts: ts,
    o: o
  };
} // helper useful in turning the results of parsing into real dates
// by handling the zone options


function parseDataToDateTime(parsed, parsedZone, opts, format, text) {
  var setZone = opts.setZone,
      zone = opts.zone;

  if (parsed && Object.keys(parsed).length !== 0) {
    var interpretationZone = parsedZone || zone,
        inst = DateTime.fromObject(Object.assign(parsed, opts, {
      zone: interpretationZone,
      // setZone is a valid option in the calling methods, but not in fromObject
      setZone: undefined
    }));
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(new Invalid("unparsable", "the input \"" + text + "\" can't be parsed as " + format));
  }
} // if you want to output a technical format (e.g. RFC 2822), this helper
// helps handle the details


function toTechFormat(dt, format, allowZ) {
  if (allowZ === void 0) {
    allowZ = true;
  }

  return dt.isValid ? Formatter.create(Locale.create("en-US"), {
    allowZ: allowZ,
    forceSimple: true
  }).formatDateTimeFromString(dt, format) : null;
} // technical time formats (e.g. the time part of ISO 8601), take some options
// and this commonizes their handling


function toTechTimeFormat(dt, _ref) {
  var _ref$suppressSeconds = _ref.suppressSeconds,
      suppressSeconds = _ref$suppressSeconds === void 0 ? false : _ref$suppressSeconds,
      _ref$suppressMillisec = _ref.suppressMilliseconds,
      suppressMilliseconds = _ref$suppressMillisec === void 0 ? false : _ref$suppressMillisec,
      includeOffset = _ref.includeOffset,
      _ref$includeZone = _ref.includeZone,
      includeZone = _ref$includeZone === void 0 ? false : _ref$includeZone,
      _ref$spaceZone = _ref.spaceZone,
      spaceZone = _ref$spaceZone === void 0 ? false : _ref$spaceZone,
      _ref$format = _ref.format,
      format = _ref$format === void 0 ? "extended" : _ref$format;
  var fmt = format === "basic" ? "HHmm" : "HH:mm";

  if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {
    fmt += format === "basic" ? "ss" : ":ss";

    if (!suppressMilliseconds || dt.millisecond !== 0) {
      fmt += ".SSS";
    }
  }

  if ((includeZone || includeOffset) && spaceZone) {
    fmt += " ";
  }

  if (includeZone) {
    fmt += "z";
  } else if (includeOffset) {
    fmt += format === "basic" ? "ZZZ" : "ZZ";
  }

  return toTechFormat(dt, fmt);
} // defaults for unspecified units in the supported calendars


var defaultUnitValues = {
  month: 1,
  day: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
},
    defaultWeekUnitValues = {
  weekNumber: 1,
  weekday: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
},
    defaultOrdinalUnitValues = {
  ordinal: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
}; // Units in the supported calendars, sorted by bigness

var orderedUnits$1 = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
    orderedWeekUnits = ["weekYear", "weekNumber", "weekday", "hour", "minute", "second", "millisecond"],
    orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"]; // standardize case and plurality in units

function normalizeUnit(unit) {
  var normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
  }[unit.toLowerCase()];
  if (!normalized) throw new InvalidUnitError(unit);
  return normalized;
} // this is a dumbed down version of fromObject() that runs about 60% faster
// but doesn't do any validation, makes a bunch of assumptions about what units
// are present, and so on.


function quickDT(obj, zone) {
  // assume we have the higher-order units
  for (var _iterator = _createForOfIteratorHelperLoose(orderedUnits$1), _step; !(_step = _iterator()).done;) {
    var u = _step.value;

    if (isUndefined(obj[u])) {
      obj[u] = defaultUnitValues[u];
    }
  }

  var invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);

  if (invalid) {
    return DateTime.invalid(invalid);
  }

  var tsNow = Settings.now(),
      offsetProvis = zone.offset(tsNow),
      _objToTS = objToTS(obj, offsetProvis, zone),
      ts = _objToTS[0],
      o = _objToTS[1];

  return new DateTime({
    ts: ts,
    zone: zone,
    o: o
  });
}

function diffRelative(start, end, opts) {
  var round = isUndefined(opts.round) ? true : opts.round,
      format = function format(c, unit) {
    c = roundTo(c, round || opts.calendary ? 0 : 2, true);
    var formatter = end.loc.clone(opts).relFormatter(opts);
    return formatter.format(c, unit);
  },
      differ = function differ(unit) {
    if (opts.calendary) {
      if (!end.hasSame(start, unit)) {
        return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
      } else return 0;
    } else {
      return end.diff(start, unit).get(unit);
    }
  };

  if (opts.unit) {
    return format(differ(opts.unit), opts.unit);
  }

  for (var _iterator2 = _createForOfIteratorHelperLoose(opts.units), _step2; !(_step2 = _iterator2()).done;) {
    var unit = _step2.value;
    var count = differ(unit);

    if (Math.abs(count) >= 1) {
      return format(count, unit);
    }
  }

  return format(0, opts.units[opts.units.length - 1]);
}
/**
 * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
 *
 * A DateTime comprises of:
 * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
 * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
 * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
 *
 * Here is a brief overview of the most commonly used functionality it provides:
 *
 * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.
 * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},
 * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.
 * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.
 * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.
 * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.
 * * **Output**: To convert the DateTime to other representations, use the {@link toRelative}, {@link toRelativeCalendar}, {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.
 *
 * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
 */


var DateTime = /*#__PURE__*/function () {
  /**
   * @access private
   */
  function DateTime(config) {
    var zone = config.zone || Settings.defaultZone;
    var invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
    /**
     * @access private
     */

    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
    var c = null,
        o = null;

    if (!invalid) {
      var unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

      if (unchanged) {
        var _ref2 = [config.old.c, config.old.o];
        c = _ref2[0];
        o = _ref2[1];
      } else {
        var ot = zone.offset(this.ts);
        c = tsToObj(this.ts, ot);
        invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
        c = invalid ? null : c;
        o = invalid ? null : ot;
      }
    }
    /**
     * @access private
     */


    this._zone = zone;
    /**
     * @access private
     */

    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */

    this.invalid = invalid;
    /**
     * @access private
     */

    this.weekData = null;
    /**
     * @access private
     */

    this.c = c;
    /**
     * @access private
     */

    this.o = o;
    /**
     * @access private
     */

    this.isLuxonDateTime = true;
  } // CONSTRUCT

  /**
   * Create a local DateTime
   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.local()                            //~> now
   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00
   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00
   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00
   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00
   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00
   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10
   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765
   * @return {DateTime}
   */


  DateTime.local = function local(year, month, day, hour, minute, second, millisecond) {
    if (isUndefined(year)) {
      return new DateTime({
        ts: Settings.now()
      });
    } else {
      return quickDT({
        year: year,
        month: month,
        day: day,
        hour: hour,
        minute: minute,
        second: second,
        millisecond: millisecond
      }, Settings.defaultZone);
    }
  }
  /**
   * Create a DateTime in UTC
   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.utc()                            //~> now
   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z
   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z
   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z
   * @return {DateTime}
   */
  ;

  DateTime.utc = function utc(year, month, day, hour, minute, second, millisecond) {
    if (isUndefined(year)) {
      return new DateTime({
        ts: Settings.now(),
        zone: FixedOffsetZone.utcInstance
      });
    } else {
      return quickDT({
        year: year,
        month: month,
        day: day,
        hour: hour,
        minute: minute,
        second: second,
        millisecond: millisecond
      }, FixedOffsetZone.utcInstance);
    }
  }
  /**
   * Create a DateTime from a Javascript Date object. Uses the default zone.
   * @param {Date} date - a Javascript Date object
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @return {DateTime}
   */
  ;

  DateTime.fromJSDate = function fromJSDate(date, options) {
    if (options === void 0) {
      options = {};
    }

    var ts = isDate(date) ? date.valueOf() : NaN;

    if (Number.isNaN(ts)) {
      return DateTime.invalid("invalid input");
    }

    var zoneToUse = normalizeZone(options.zone, Settings.defaultZone);

    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    return new DateTime({
      ts: ts,
      zone: zoneToUse,
      loc: Locale.fromObject(options)
    });
  }
  /**
   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} milliseconds - a number of milliseconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromMillis = function fromMillis(milliseconds, options) {
    if (options === void 0) {
      options = {};
    }

    if (!isNumber(milliseconds)) {
      throw new InvalidArgumentError("fromMillis requires a numerical input, but received a " + typeof milliseconds + " with value " + milliseconds);
    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
      // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
      return DateTime.invalid("Timestamp out of range");
    } else {
      return new DateTime({
        ts: milliseconds,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} seconds - a number of seconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromSeconds = function fromSeconds(seconds, options) {
    if (options === void 0) {
      options = {};
    }

    if (!isNumber(seconds)) {
      throw new InvalidArgumentError("fromSeconds requires a numerical input");
    } else {
      return new DateTime({
        ts: seconds * 1000,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
   * Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.year - a year, such as 1987
   * @param {number} obj.month - a month, 1-12
   * @param {number} obj.day - a day of the month, 1-31, depending on the month
   * @param {number} obj.ordinal - day of the year, 1-365 or 366
   * @param {number} obj.weekYear - an ISO week year
   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
   * @param {number} obj.hour - hour of the day, 0-23
   * @param {number} obj.minute - minute of the hour, 0-59
   * @param {number} obj.second - second of the minute, 0-59
   * @param {number} obj.millisecond - millisecond of the second, 0-999
   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
   * @param {string} [obj.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })
   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
   * @return {DateTime}
   */
  ;

  DateTime.fromObject = function fromObject(obj) {
    var zoneToUse = normalizeZone(obj.zone, Settings.defaultZone);

    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    var tsNow = Settings.now(),
        offsetProvis = zoneToUse.offset(tsNow),
        normalized = normalizeObject(obj, normalizeUnit, ["zone", "locale", "outputCalendar", "numberingSystem"]),
        containsOrdinal = !isUndefined(normalized.ordinal),
        containsGregorYear = !isUndefined(normalized.year),
        containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
        containsGregor = containsGregorYear || containsGregorMD,
        definiteWeekDef = normalized.weekYear || normalized.weekNumber,
        loc = Locale.fromObject(obj); // cases:
    // just a weekday -> this week's instance of that weekday, no worries
    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
    // (gregorian month or day) + ordinal -> error
    // otherwise just use weeks or ordinals or gregorian, depending on what's specified

    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }

    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }

    var useWeekData = definiteWeekDef || normalized.weekday && !containsGregor; // configure ourselves to deal with gregorian dates or week stuff

    var units,
        defaultValues,
        objNow = tsToObj(tsNow, offsetProvis);

    if (useWeekData) {
      units = orderedWeekUnits;
      defaultValues = defaultWeekUnitValues;
      objNow = gregorianToWeek(objNow);
    } else if (containsOrdinal) {
      units = orderedOrdinalUnits;
      defaultValues = defaultOrdinalUnitValues;
      objNow = gregorianToOrdinal(objNow);
    } else {
      units = orderedUnits$1;
      defaultValues = defaultUnitValues;
    } // set default values for missing stuff


    var foundFirst = false;

    for (var _iterator3 = _createForOfIteratorHelperLoose(units), _step3; !(_step3 = _iterator3()).done;) {
      var u = _step3.value;
      var v = normalized[u];

      if (!isUndefined(v)) {
        foundFirst = true;
      } else if (foundFirst) {
        normalized[u] = defaultValues[u];
      } else {
        normalized[u] = objNow[u];
      }
    } // make sure the values we have are in range


    var higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized),
        invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

    if (invalid) {
      return DateTime.invalid(invalid);
    } // compute the actual time


    var gregorian = useWeekData ? weekToGregorian(normalized) : containsOrdinal ? ordinalToGregorian(normalized) : normalized,
        _objToTS2 = objToTS(gregorian, offsetProvis, zoneToUse),
        tsFinal = _objToTS2[0],
        offsetFinal = _objToTS2[1],
        inst = new DateTime({
      ts: tsFinal,
      zone: zoneToUse,
      o: offsetFinal,
      loc: loc
    }); // gregorian data + weekday serves only to validate


    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
      return DateTime.invalid("mismatched weekday", "you can't specify both a weekday of " + normalized.weekday + " and a date of " + inst.toISO());
    }

    return inst;
  }
  /**
   * Create a DateTime from an ISO 8601 string
   * @param {string} text - the ISO string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromISO('2016-05-25T09:08:34.123')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
   * @example DateTime.fromISO('2016-W05-4')
   * @return {DateTime}
   */
  ;

  DateTime.fromISO = function fromISO(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseISODate = parseISODate(text),
        vals = _parseISODate[0],
        parsedZone = _parseISODate[1];

    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
  }
  /**
   * Create a DateTime from an RFC 2822 string
   * @param {string} text - the RFC 2822 string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
   * @return {DateTime}
   */
  ;

  DateTime.fromRFC2822 = function fromRFC2822(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseRFC2822Date = parseRFC2822Date(text),
        vals = _parseRFC2822Date[0],
        parsedZone = _parseRFC2822Date[1];

    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
  }
  /**
   * Create a DateTime from an HTTP header date
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @param {string} text - the HTTP header date
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
   * @return {DateTime}
   */
  ;

  DateTime.fromHTTP = function fromHTTP(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseHTTPDate = parseHTTPDate(text),
        vals = _parseHTTPDate[0],
        parsedZone = _parseHTTPDate[1];

    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
  }
  /**
   * Create a DateTime from an input string and format string.
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromFormat = function fromFormat(text, fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (isUndefined(text) || isUndefined(fmt)) {
      throw new InvalidArgumentError("fromFormat requires an input string and a format");
    }

    var _opts = opts,
        _opts$locale = _opts.locale,
        locale = _opts$locale === void 0 ? null : _opts$locale,
        _opts$numberingSystem = _opts.numberingSystem,
        numberingSystem = _opts$numberingSystem === void 0 ? null : _opts$numberingSystem,
        localeToUse = Locale.fromOpts({
      locale: locale,
      numberingSystem: numberingSystem,
      defaultToEN: true
    }),
        _parseFromTokens = parseFromTokens(localeToUse, text, fmt),
        vals = _parseFromTokens[0],
        parsedZone = _parseFromTokens[1],
        invalid = _parseFromTokens[2];

    if (invalid) {
      return DateTime.invalid(invalid);
    } else {
      return parseDataToDateTime(vals, parsedZone, opts, "format " + fmt, text);
    }
  }
  /**
   * @deprecated use fromFormat instead
   */
  ;

  DateTime.fromString = function fromString(text, fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return DateTime.fromFormat(text, fmt, opts);
  }
  /**
   * Create a DateTime from a SQL date, time, or datetime
   * Defaults to en-US if no locale has been specified, regardless of the system's locale
   * @param {string} text - the string to parse
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @example DateTime.fromSQL('2017-05-15')
   * @example DateTime.fromSQL('2017-05-15 09:12:34')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
   * @example DateTime.fromSQL('09:12:34.342')
   * @return {DateTime}
   */
  ;

  DateTime.fromSQL = function fromSQL(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseSQL = parseSQL(text),
        vals = _parseSQL[0],
        parsedZone = _parseSQL[1];

    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
  }
  /**
   * Create an invalid DateTime.
   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {DateTime}
   */
  ;

  DateTime.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDateTimeError(invalid);
    } else {
      return new DateTime({
        invalid: invalid
      });
    }
  }
  /**
   * Check if an object is a DateTime. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  DateTime.isDateTime = function isDateTime(o) {
    return o && o.isLuxonDateTime || false;
  } // INFO

  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
   * @return {number}
   */
  ;

  var _proto = DateTime.prototype;

  _proto.get = function get(unit) {
    return this[unit];
  }
  /**
   * Returns whether the DateTime is valid. Invalid DateTimes occur when:
   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
   * * The DateTime was created by an operation on another invalid date
   * @type {boolean}
   */
  ;

  /**
   * Returns the resolved Intl options for this DateTime.
   * This is useful in understanding the behavior of formatting methods
   * @param {Object} opts - the same options as toLocaleString
   * @return {Object}
   */
  _proto.resolvedLocaleOpts = function resolvedLocaleOpts(opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _Formatter$create$res = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this),
        locale = _Formatter$create$res.locale,
        numberingSystem = _Formatter$create$res.numberingSystem,
        calendar = _Formatter$create$res.calendar;

    return {
      locale: locale,
      numberingSystem: numberingSystem,
      outputCalendar: calendar
    };
  } // TRANSFORM

  /**
   * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
   *
   * Equivalent to {@link setZone}('utc')
   * @param {number} [offset=0] - optionally, an offset from UTC in minutes
   * @param {Object} [opts={}] - options to pass to `setZone()`
   * @return {DateTime}
   */
  ;

  _proto.toUTC = function toUTC(offset, opts) {
    if (offset === void 0) {
      offset = 0;
    }

    if (opts === void 0) {
      opts = {};
    }

    return this.setZone(FixedOffsetZone.instance(offset), opts);
  }
  /**
   * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
   *
   * Equivalent to `setZone('local')`
   * @return {DateTime}
   */
  ;

  _proto.toLocal = function toLocal() {
    return this.setZone(Settings.defaultZone);
  }
  /**
   * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
   *
   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.
   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.
   * @param {Object} opts - options
   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
   * @return {DateTime}
   */
  ;

  _proto.setZone = function setZone(zone, _temp) {
    var _ref3 = _temp === void 0 ? {} : _temp,
        _ref3$keepLocalTime = _ref3.keepLocalTime,
        keepLocalTime = _ref3$keepLocalTime === void 0 ? false : _ref3$keepLocalTime,
        _ref3$keepCalendarTim = _ref3.keepCalendarTime,
        keepCalendarTime = _ref3$keepCalendarTim === void 0 ? false : _ref3$keepCalendarTim;

    zone = normalizeZone(zone, Settings.defaultZone);

    if (zone.equals(this.zone)) {
      return this;
    } else if (!zone.isValid) {
      return DateTime.invalid(unsupportedZone(zone));
    } else {
      var newTS = this.ts;

      if (keepLocalTime || keepCalendarTime) {
        var offsetGuess = zone.offset(this.ts);
        var asObj = this.toObject();

        var _objToTS3 = objToTS(asObj, offsetGuess, zone);

        newTS = _objToTS3[0];
      }

      return clone$1(this, {
        ts: newTS,
        zone: zone
      });
    }
  }
  /**
   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
   * @param {Object} properties - the properties to set
   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
   * @return {DateTime}
   */
  ;

  _proto.reconfigure = function reconfigure(_temp2) {
    var _ref4 = _temp2 === void 0 ? {} : _temp2,
        locale = _ref4.locale,
        numberingSystem = _ref4.numberingSystem,
        outputCalendar = _ref4.outputCalendar;

    var loc = this.loc.clone({
      locale: locale,
      numberingSystem: numberingSystem,
      outputCalendar: outputCalendar
    });
    return clone$1(this, {
      loc: loc
    });
  }
  /**
   * "Set" the locale. Returns a newly-constructed DateTime.
   * Just a convenient alias for reconfigure({ locale })
   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
   * @return {DateTime}
   */
  ;

  _proto.setLocale = function setLocale(locale) {
    return this.reconfigure({
      locale: locale
    });
  }
  /**
   * "Set" the values of specified units. Returns a newly-constructed DateTime.
   * You can only set units with this method; for "setting" metadata, see {@link reconfigure} and {@link setZone}.
   * @param {Object} values - a mapping of units to numbers
   * @example dt.set({ year: 2017 })
   * @example dt.set({ hour: 8, minute: 30 })
   * @example dt.set({ weekday: 5 })
   * @example dt.set({ year: 2005, ordinal: 234 })
   * @return {DateTime}
   */
  ;

  _proto.set = function set(values) {
    if (!this.isValid) return this;
    var normalized = normalizeObject(values, normalizeUnit, []),
        settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday);
    var mixed;

    if (settingWeekStuff) {
      mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));
    } else if (!isUndefined(normalized.ordinal)) {
      mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));
    } else {
      mixed = Object.assign(this.toObject(), normalized); // if we didn't set the day but we ended up on an overflow date,
      // use the last day of the right month

      if (isUndefined(normalized.day)) {
        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
      }
    }

    var _objToTS4 = objToTS(mixed, this.o, this.zone),
        ts = _objToTS4[0],
        o = _objToTS4[1];

    return clone$1(this, {
      ts: ts,
      o: o
    });
  }
  /**
   * Add a period of time to this DateTime and return the resulting DateTime
   *
   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @example DateTime.local().plus(123) //~> in 123 milliseconds
   * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes
   * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow
   * @example DateTime.local().plus({ days: -1 }) //~> this time yesterday
   * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
   * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
   * @return {DateTime}
   */
  ;

  _proto.plus = function plus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration);
    return clone$1(this, adjustTime(this, dur));
  }
  /**
   * Subtract a period of time to this DateTime and return the resulting DateTime
   * See {@link plus}
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   @return {DateTime}
  */
  ;

  _proto.minus = function minus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration).negate();
    return clone$1(this, adjustTime(this, dur));
  }
  /**
   * "Set" this DateTime to the beginning of a unit of time.
   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
   * @return {DateTime}
   */
  ;

  _proto.startOf = function startOf(unit) {
    if (!this.isValid) return this;
    var o = {},
        normalizedUnit = Duration.normalizeUnit(unit);

    switch (normalizedUnit) {
      case "years":
        o.month = 1;
      // falls through

      case "quarters":
      case "months":
        o.day = 1;
      // falls through

      case "weeks":
      case "days":
        o.hour = 0;
      // falls through

      case "hours":
        o.minute = 0;
      // falls through

      case "minutes":
        o.second = 0;
      // falls through

      case "seconds":
        o.millisecond = 0;
        break;
      // no default, invalid units throw in normalizeUnit()
    }

    if (normalizedUnit === "weeks") {
      o.weekday = 1;
    }

    if (normalizedUnit === "quarters") {
      var q = Math.ceil(this.month / 3);
      o.month = (q - 1) * 3 + 1;
    }

    return this.set(o);
  }
  /**
   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
   * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
   * @return {DateTime}
   */
  ;

  _proto.endOf = function endOf(unit) {
    var _this$plus;

    return this.isValid ? this.plus((_this$plus = {}, _this$plus[unit] = 1, _this$plus)).startOf(unit).minus(1) : this;
  } // OUTPUT

  /**
   * Returns a string representation of this DateTime formatted according to the specified format string.
   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens
   * @param {string} fmt - the format string
   * @param {Object} opts - opts to override the configuration options
   * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
   * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
   * @example DateTime.local().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
   * @example DateTime.local().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
   * @return {string}
   */
  ;

  _proto.toFormat = function toFormat(fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID$2;
  }
  /**
   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
   * of the DateTime in the assigned locale.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param opts {Object} - Intl.DateTimeFormat constructor options and configuration options
   * @example DateTime.local().toLocaleString(); //=> 4/20/2017
   * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
   * @example DateTime.local().toLocaleString({ locale: 'en-gb' }); //=> '20/04/2017'
   * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
   * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
   * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
   * @example DateTime.local().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
   * @example DateTime.local().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
   * @example DateTime.local().toLocaleString({ hour: '2-digit', minute: '2-digit', hour12: false }); //=> '11:32'
   * @return {string}
   */
  ;

  _proto.toLocaleString = function toLocaleString(opts) {
    if (opts === void 0) {
      opts = DATE_SHORT;
    }

    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this) : INVALID$2;
  }
  /**
   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
   * @example DateTime.local().toLocaleParts(); //=> [
   *                                   //=>   { type: 'day', value: '25' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'month', value: '05' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'year', value: '1982' }
   *                                   //=> ]
   */
  ;

  _proto.toLocaleParts = function toLocaleParts(opts) {
    if (opts === void 0) {
      opts = {};
    }

    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
   * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'
   * @example DateTime.local().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
   * @example DateTime.local().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
   * @return {string}
   */
  ;

  _proto.toISO = function toISO(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) {
      return null;
    }

    return this.toISODate(opts) + "T" + this.toISOTime(opts);
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's date component
   * @param {Object} opts - options
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
   * @return {string}
   */
  ;

  _proto.toISODate = function toISODate(_temp3) {
    var _ref5 = _temp3 === void 0 ? {} : _temp3,
        _ref5$format = _ref5.format,
        format = _ref5$format === void 0 ? "extended" : _ref5$format;

    var fmt = format === "basic" ? "yyyyMMdd" : "yyyy-MM-dd";

    if (this.year > 9999) {
      fmt = "+" + fmt;
    }

    return toTechFormat(this, fmt);
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's week date
   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
   * @return {string}
   */
  ;

  _proto.toISOWeekDate = function toISOWeekDate() {
    return toTechFormat(this, "kkkk-'W'WW-c");
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's time component
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
   * @return {string}
   */
  ;

  _proto.toISOTime = function toISOTime(_temp4) {
    var _ref6 = _temp4 === void 0 ? {} : _temp4,
        _ref6$suppressMillise = _ref6.suppressMilliseconds,
        suppressMilliseconds = _ref6$suppressMillise === void 0 ? false : _ref6$suppressMillise,
        _ref6$suppressSeconds = _ref6.suppressSeconds,
        suppressSeconds = _ref6$suppressSeconds === void 0 ? false : _ref6$suppressSeconds,
        _ref6$includeOffset = _ref6.includeOffset,
        includeOffset = _ref6$includeOffset === void 0 ? true : _ref6$includeOffset,
        _ref6$format = _ref6.format,
        format = _ref6$format === void 0 ? "extended" : _ref6$format;

    return toTechTimeFormat(this, {
      suppressSeconds: suppressSeconds,
      suppressMilliseconds: suppressMilliseconds,
      includeOffset: includeOffset,
      format: format
    });
  }
  /**
   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC
   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
   * @return {string}
   */
  ;

  _proto.toRFC2822 = function toRFC2822() {
    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in HTTP headers.
   * Specifically, the string conforms to RFC 1123.
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
   * @return {string}
   */
  ;

  _proto.toHTTP = function toHTTP() {
    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Date
   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
   * @return {string}
   */
  ;

  _proto.toSQLDate = function toSQLDate() {
    return toTechFormat(this, "yyyy-MM-dd");
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Time
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @example DateTime.utc().toSQL() //=> '05:15:16.345'
   * @example DateTime.local().toSQL() //=> '05:15:16.345 -04:00'
   * @example DateTime.local().toSQL({ includeOffset: false }) //=> '05:15:16.345'
   * @example DateTime.local().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
   * @return {string}
   */
  ;

  _proto.toSQLTime = function toSQLTime(_temp5) {
    var _ref7 = _temp5 === void 0 ? {} : _temp5,
        _ref7$includeOffset = _ref7.includeOffset,
        includeOffset = _ref7$includeOffset === void 0 ? true : _ref7$includeOffset,
        _ref7$includeZone = _ref7.includeZone,
        includeZone = _ref7$includeZone === void 0 ? false : _ref7$includeZone;

    return toTechTimeFormat(this, {
      includeOffset: includeOffset,
      includeZone: includeZone,
      spaceZone: true
    });
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
   * @return {string}
   */
  ;

  _proto.toSQL = function toSQL(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) {
      return null;
    }

    return this.toSQLDate() + " " + this.toSQLTime(opts);
  }
  /**
   * Returns a string representation of this DateTime appropriate for debugging
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    return this.isValid ? this.toISO() : INVALID$2;
  }
  /**
   * Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}
   * @return {number}
   */
  ;

  _proto.valueOf = function valueOf() {
    return this.toMillis();
  }
  /**
   * Returns the epoch milliseconds of this DateTime.
   * @return {number}
   */
  ;

  _proto.toMillis = function toMillis() {
    return this.isValid ? this.ts : NaN;
  }
  /**
   * Returns the epoch seconds of this DateTime.
   * @return {number}
   */
  ;

  _proto.toSeconds = function toSeconds() {
    return this.isValid ? this.ts / 1000 : NaN;
  }
  /**
   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
   * @return {string}
   */
  ;

  _proto.toJSON = function toJSON() {
    return this.toISO();
  }
  /**
   * Returns a BSON serializable equivalent to this DateTime.
   * @return {Date}
   */
  ;

  _proto.toBSON = function toBSON() {
    return this.toJSDate();
  }
  /**
   * Returns a Javascript object with this DateTime's year, month, day, and so on.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
   * @return {Object}
   */
  ;

  _proto.toObject = function toObject(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) return {};
    var base = Object.assign({}, this.c);

    if (opts.includeConfig) {
      base.outputCalendar = this.outputCalendar;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }

    return base;
  }
  /**
   * Returns a Javascript Date equivalent to this DateTime.
   * @return {Date}
   */
  ;

  _proto.toJSDate = function toJSDate() {
    return new Date(this.isValid ? this.ts : NaN);
  } // COMPARE

  /**
   * Return the difference between two DateTimes as a Duration.
   * @param {DateTime} otherDateTime - the DateTime to compare this one to
   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example
   * var i1 = DateTime.fromISO('1982-05-25T09:45'),
   *     i2 = DateTime.fromISO('1983-10-14T10:30');
   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
   * @return {Duration}
   */
  ;

  _proto.diff = function diff(otherDateTime, unit, opts) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid || !otherDateTime.isValid) {
      return Duration.invalid(this.invalid || otherDateTime.invalid, "created by diffing an invalid DateTime");
    }

    var durOpts = Object.assign({
      locale: this.locale,
      numberingSystem: this.numberingSystem
    }, opts);

    var units = maybeArray(unit).map(Duration.normalizeUnit),
        otherIsLater = otherDateTime.valueOf() > this.valueOf(),
        earlier = otherIsLater ? this : otherDateTime,
        later = otherIsLater ? otherDateTime : this,
        diffed = _diff(earlier, later, units, durOpts);

    return otherIsLater ? diffed.negate() : diffed;
  }
  /**
   * Return the difference between this DateTime and right now.
   * See {@link diff}
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  ;

  _proto.diffNow = function diffNow(unit, opts) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (opts === void 0) {
      opts = {};
    }

    return this.diff(DateTime.local(), unit, opts);
  }
  /**
   * Return an Interval spanning between this DateTime and another DateTime
   * @param {DateTime} otherDateTime - the other end point of the Interval
   * @return {Interval}
   */
  ;

  _proto.until = function until(otherDateTime) {
    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
  }
  /**
   * Return whether this DateTime is in the same unit of time as another DateTime
   * @param {DateTime} otherDateTime - the other DateTime
   * @param {string} unit - the unit of time to check sameness on
   * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day
   * @return {boolean}
   */
  ;

  _proto.hasSame = function hasSame(otherDateTime, unit) {
    if (!this.isValid) return false;

    if (unit === "millisecond") {
      return this.valueOf() === otherDateTime.valueOf();
    } else {
      var inputMs = otherDateTime.valueOf();
      return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);
    }
  }
  /**
   * Equality check
   * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.
   * To compare just the millisecond values, use `+dt1 === +dt2`.
   * @param {DateTime} other - the other DateTime
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(other) {
    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
  }
  /**
   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
   * platform supports Intl.RelativeTimeFormat. Rounds down by default.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
   * @param {boolean} [options.round=true] - whether to round the numbers in the output.
   * @param {boolean} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.local().plus({ days: 1 }).toRelative() //=> "in 1 day"
   * @example DateTime.local().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
   * @example DateTime.local().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
   * @example DateTime.local().minus({ days: 2 }).toRelative() //=> "2 days ago"
   * @example DateTime.local().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
   * @example DateTime.local().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
   */
  ;

  _proto.toRelative = function toRelative(options) {
    if (options === void 0) {
      options = {};
    }

    if (!this.isValid) return null;
    var base = options.base || DateTime.fromObject({
      zone: this.zone
    }),
        padding = options.padding ? this < base ? -options.padding : options.padding : 0;
    return diffRelative(base, this.plus(padding), Object.assign(options, {
      numeric: "always",
      units: ["years", "months", "days", "hours", "minutes", "seconds"]
    }));
  }
  /**
   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
   * @example DateTime.local().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
   * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
   * @example DateTime.local().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
   */
  ;

  _proto.toRelativeCalendar = function toRelativeCalendar(options) {
    if (options === void 0) {
      options = {};
    }

    if (!this.isValid) return null;
    return diffRelative(options.base || DateTime.fromObject({
      zone: this.zone
    }), this, Object.assign(options, {
      numeric: "auto",
      units: ["years", "months", "days"],
      calendary: true
    }));
  }
  /**
   * Return the min of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
   * @return {DateTime} the min DateTime, or undefined if called with no argument
   */
  ;

  DateTime.min = function min() {
    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
      dateTimes[_key] = arguments[_key];
    }

    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("min requires all arguments be DateTimes");
    }

    return bestBy(dateTimes, function (i) {
      return i.valueOf();
    }, Math.min);
  }
  /**
   * Return the max of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
   * @return {DateTime} the max DateTime, or undefined if called with no argument
   */
  ;

  DateTime.max = function max() {
    for (var _len2 = arguments.length, dateTimes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      dateTimes[_key2] = arguments[_key2];
    }

    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("max requires all arguments be DateTimes");
    }

    return bestBy(dateTimes, function (i) {
      return i.valueOf();
    }, Math.max);
  } // MISC

  /**
   * Explain how a string would be parsed by fromFormat()
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see description)
   * @param {Object} options - options taken by fromFormat()
   * @return {Object}
   */
  ;

  DateTime.fromFormatExplain = function fromFormatExplain(text, fmt, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$locale = _options.locale,
        locale = _options$locale === void 0 ? null : _options$locale,
        _options$numberingSys = _options.numberingSystem,
        numberingSystem = _options$numberingSys === void 0 ? null : _options$numberingSys,
        localeToUse = Locale.fromOpts({
      locale: locale,
      numberingSystem: numberingSystem,
      defaultToEN: true
    });
    return explainFromTokens(localeToUse, text, fmt);
  }
  /**
   * @deprecated use fromFormatExplain instead
   */
  ;

  DateTime.fromStringExplain = function fromStringExplain(text, fmt, options) {
    if (options === void 0) {
      options = {};
    }

    return DateTime.fromFormatExplain(text, fmt, options);
  } // FORMAT PRESETS

  /**
   * {@link toLocaleString} format like 10/14/1983
   * @type {Object}
   */
  ;

  _createClass(DateTime, [{
    key: "isValid",
    get: function get() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
     * @type {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "locale",
    get: function get() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "numberingSystem",
    get: function get() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "outputCalendar",
    get: function get() {
      return this.isValid ? this.loc.outputCalendar : null;
    }
    /**
     * Get the time zone associated with this DateTime.
     * @type {Zone}
     */

  }, {
    key: "zone",
    get: function get() {
      return this._zone;
    }
    /**
     * Get the name of the time zone.
     * @type {string}
     */

  }, {
    key: "zoneName",
    get: function get() {
      return this.isValid ? this.zone.name : null;
    }
    /**
     * Get the year
     * @example DateTime.local(2017, 5, 25).year //=> 2017
     * @type {number}
     */

  }, {
    key: "year",
    get: function get() {
      return this.isValid ? this.c.year : NaN;
    }
    /**
     * Get the quarter
     * @example DateTime.local(2017, 5, 25).quarter //=> 2
     * @type {number}
     */

  }, {
    key: "quarter",
    get: function get() {
      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }
    /**
     * Get the month (1-12).
     * @example DateTime.local(2017, 5, 25).month //=> 5
     * @type {number}
     */

  }, {
    key: "month",
    get: function get() {
      return this.isValid ? this.c.month : NaN;
    }
    /**
     * Get the day of the month (1-30ish).
     * @example DateTime.local(2017, 5, 25).day //=> 25
     * @type {number}
     */

  }, {
    key: "day",
    get: function get() {
      return this.isValid ? this.c.day : NaN;
    }
    /**
     * Get the hour of the day (0-23).
     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
     * @type {number}
     */

  }, {
    key: "hour",
    get: function get() {
      return this.isValid ? this.c.hour : NaN;
    }
    /**
     * Get the minute of the hour (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
     * @type {number}
     */

  }, {
    key: "minute",
    get: function get() {
      return this.isValid ? this.c.minute : NaN;
    }
    /**
     * Get the second of the minute (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
     * @type {number}
     */

  }, {
    key: "second",
    get: function get() {
      return this.isValid ? this.c.second : NaN;
    }
    /**
     * Get the millisecond of the second (0-999).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
     * @type {number}
     */

  }, {
    key: "millisecond",
    get: function get() {
      return this.isValid ? this.c.millisecond : NaN;
    }
    /**
     * Get the week year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekYear //=> 2015
     * @type {number}
     */

  }, {
    key: "weekYear",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
    }
    /**
     * Get the week number of the week year (1-52ish).
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
     * @type {number}
     */

  }, {
    key: "weekNumber",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
    }
    /**
     * Get the day of the week.
     * 1 is Monday and 7 is Sunday
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekday //=> 4
     * @type {number}
     */

  }, {
    key: "weekday",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
    }
    /**
     * Get the ordinal (meaning the day of the year)
     * @example DateTime.local(2017, 5, 25).ordinal //=> 145
     * @type {number|DateTime}
     */

  }, {
    key: "ordinal",
    get: function get() {
      return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
    }
    /**
     * Get the human readable short month name, such as 'Oct'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
     * @type {string}
     */

  }, {
    key: "monthShort",
    get: function get() {
      return this.isValid ? Info.months("short", {
        locale: this.locale
      })[this.month - 1] : null;
    }
    /**
     * Get the human readable long month name, such as 'October'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthLong //=> October
     * @type {string}
     */

  }, {
    key: "monthLong",
    get: function get() {
      return this.isValid ? Info.months("long", {
        locale: this.locale
      })[this.month - 1] : null;
    }
    /**
     * Get the human readable short weekday, such as 'Mon'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
     * @type {string}
     */

  }, {
    key: "weekdayShort",
    get: function get() {
      return this.isValid ? Info.weekdays("short", {
        locale: this.locale
      })[this.weekday - 1] : null;
    }
    /**
     * Get the human readable long weekday, such as 'Monday'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
     * @type {string}
     */

  }, {
    key: "weekdayLong",
    get: function get() {
      return this.isValid ? Info.weekdays("long", {
        locale: this.locale
      })[this.weekday - 1] : null;
    }
    /**
     * Get the UTC offset of this DateTime in minutes
     * @example DateTime.local().offset //=> -240
     * @example DateTime.utc().offset //=> 0
     * @type {number}
     */

  }, {
    key: "offset",
    get: function get() {
      return this.isValid ? +this.o : NaN;
    }
    /**
     * Get the short human name for the zone's current offset, for example "EST" or "EDT".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */

  }, {
    key: "offsetNameShort",
    get: function get() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "short",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */

  }, {
    key: "offsetNameLong",
    get: function get() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "long",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get whether this zone's offset ever changes, as in a DST.
     * @type {boolean}
     */

  }, {
    key: "isOffsetFixed",
    get: function get() {
      return this.isValid ? this.zone.universal : null;
    }
    /**
     * Get whether the DateTime is in a DST.
     * @type {boolean}
     */

  }, {
    key: "isInDST",
    get: function get() {
      if (this.isOffsetFixed) {
        return false;
      } else {
        return this.offset > this.set({
          month: 1
        }).offset || this.offset > this.set({
          month: 5
        }).offset;
      }
    }
    /**
     * Returns true if this DateTime is in a leap year, false otherwise
     * @example DateTime.local(2016).isInLeapYear //=> true
     * @example DateTime.local(2013).isInLeapYear //=> false
     * @type {boolean}
     */

  }, {
    key: "isInLeapYear",
    get: function get() {
      return isLeapYear(this.year);
    }
    /**
     * Returns the number of days in this DateTime's month
     * @example DateTime.local(2016, 2).daysInMonth //=> 29
     * @example DateTime.local(2016, 3).daysInMonth //=> 31
     * @type {number}
     */

  }, {
    key: "daysInMonth",
    get: function get() {
      return daysInMonth(this.year, this.month);
    }
    /**
     * Returns the number of days in this DateTime's year
     * @example DateTime.local(2016).daysInYear //=> 366
     * @example DateTime.local(2013).daysInYear //=> 365
     * @type {number}
     */

  }, {
    key: "daysInYear",
    get: function get() {
      return this.isValid ? daysInYear(this.year) : NaN;
    }
    /**
     * Returns the number of weeks in this DateTime's year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2004).weeksInWeekYear //=> 53
     * @example DateTime.local(2013).weeksInWeekYear //=> 52
     * @type {number}
     */

  }, {
    key: "weeksInWeekYear",
    get: function get() {
      return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
    }
  }], [{
    key: "DATE_SHORT",
    get: function get() {
      return DATE_SHORT;
    }
    /**
     * {@link toLocaleString} format like 'Oct 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_MED",
    get: function get() {
      return DATE_MED;
    }
    /**
     * {@link toLocaleString} format like 'Fri, Oct 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_MED_WITH_WEEKDAY",
    get: function get() {
      return DATE_MED_WITH_WEEKDAY;
    }
    /**
     * {@link toLocaleString} format like 'October 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_FULL",
    get: function get() {
      return DATE_FULL;
    }
    /**
     * {@link toLocaleString} format like 'Tuesday, October 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_HUGE",
    get: function get() {
      return DATE_HUGE;
    }
    /**
     * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_SIMPLE",
    get: function get() {
      return TIME_SIMPLE;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_SECONDS",
    get: function get() {
      return TIME_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_SHORT_OFFSET",
    get: function get() {
      return TIME_WITH_SHORT_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_LONG_OFFSET",
    get: function get() {
      return TIME_WITH_LONG_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '09:30', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_SIMPLE",
    get: function get() {
      return TIME_24_SIMPLE;
    }
    /**
     * {@link toLocaleString} format like '09:30:23', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_SECONDS",
    get: function get() {
      return TIME_24_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_SHORT_OFFSET",
    get: function get() {
      return TIME_24_WITH_SHORT_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_LONG_OFFSET",
    get: function get() {
      return TIME_24_WITH_LONG_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_SHORT",
    get: function get() {
      return DATETIME_SHORT;
    }
    /**
     * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_SHORT_WITH_SECONDS",
    get: function get() {
      return DATETIME_SHORT_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED",
    get: function get() {
      return DATETIME_MED;
    }
    /**
     * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED_WITH_SECONDS",
    get: function get() {
      return DATETIME_MED_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED_WITH_WEEKDAY",
    get: function get() {
      return DATETIME_MED_WITH_WEEKDAY;
    }
    /**
     * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_FULL",
    get: function get() {
      return DATETIME_FULL;
    }
    /**
     * {@link toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_FULL_WITH_SECONDS",
    get: function get() {
      return DATETIME_FULL_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_HUGE",
    get: function get() {
      return DATETIME_HUGE;
    }
    /**
     * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_HUGE_WITH_SECONDS",
    get: function get() {
      return DATETIME_HUGE_WITH_SECONDS;
    }
  }]);

  return DateTime;
}();
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError("Unknown datetime argument: " + dateTimeish + ", of type " + typeof dateTimeish);
  }
}

exports.DateTime = DateTime;
exports.Duration = Duration;
exports.FixedOffsetZone = FixedOffsetZone;
exports.IANAZone = IANAZone;
exports.Info = Info;
exports.Interval = Interval;
exports.InvalidZone = InvalidZone;
exports.LocalZone = LocalZone;
exports.Settings = Settings;
exports.Zone = Zone;


},{}],49:[function(require,module,exports){
module.exports={
  "10*": {
    "value": 10,
    "ucum": "1"
  },
  "10^": {
    "value": 10,
    "ucum": "1"
  },
  "[pi]": {
    "value": 3.141592653589793,
    "ucum": "1"
  },
  "%": {
    "value": 1,
    "ucum": "10*-2"
  },
  "[ppth]": {
    "value": 1,
    "ucum": "10*-3"
  },
  "[ppm]": {
    "value": 1,
    "ucum": "10*-6"
  },
  "[ppb]": {
    "value": 1,
    "ucum": "10*-9"
  },
  "[pptr]": {
    "value": 1,
    "ucum": "10*-12"
  },
  "mol": {
    "value": 6.0221367,
    "ucum": "10*23"
  },
  "sr": {
    "value": 1,
    "ucum": "rad2"
  },
  "Hz": {
    "value": 1,
    "ucum": "s-1"
  },
  "N": {
    "value": 1,
    "ucum": "kg.m/s2"
  },
  "Pa": {
    "value": 1,
    "ucum": "N/m2"
  },
  "J": {
    "value": 1,
    "ucum": "N.m"
  },
  "W": {
    "value": 1,
    "ucum": "J/s"
  },
  "A": {
    "value": 1,
    "ucum": "C/s"
  },
  "V": {
    "value": 1,
    "ucum": "J/C"
  },
  "F": {
    "value": 1,
    "ucum": "C/V"
  },
  "Ohm": {
    "value": 1,
    "ucum": "V/A"
  },
  "S": {
    "value": 1,
    "ucum": "Ohm-1"
  },
  "Wb": {
    "value": 1,
    "ucum": "V.s"
  },
  "Cel": {
    "value": null,
    "ucum": "cel(1 K)"
  },
  "T": {
    "value": 1,
    "ucum": "Wb/m2"
  },
  "H": {
    "value": 1,
    "ucum": "Wb/A"
  },
  "lm": {
    "value": 1,
    "ucum": "cd.sr"
  },
  "lx": {
    "value": 1,
    "ucum": "lm/m2"
  },
  "Bq": {
    "value": 1,
    "ucum": "s-1"
  },
  "Gy": {
    "value": 1,
    "ucum": "J/kg"
  },
  "Sv": {
    "value": 1,
    "ucum": "J/kg"
  },
  "gon": {
    "value": 0.9,
    "ucum": "deg"
  },
  "deg": {
    "value": 2,
    "ucum": "[pi].rad/360"
  },
  "'": {
    "value": 1,
    "ucum": "deg/60"
  },
  "''": {
    "value": 1,
    "ucum": "'/60"
  },
  "l": {
    "value": 1,
    "ucum": "dm3"
  },
  "L": {
    "value": 1,
    "ucum": "l"
  },
  "ar": {
    "value": 100,
    "ucum": "m2"
  },
  "min": {
    "value": 60,
    "ucum": "s"
  },
  "h": {
    "value": 60,
    "ucum": "min"
  },
  "d": {
    "value": 24,
    "ucum": "h"
  },
  "a_t": {
    "value": 365.24219,
    "ucum": "d"
  },
  "a_j": {
    "value": 365.25,
    "ucum": "d"
  },
  "a_g": {
    "value": 365.2425,
    "ucum": "d"
  },
  "a": {
    "value": 1,
    "ucum": "a_j"
  },
  "wk": {
    "value": 7,
    "ucum": "d"
  },
  "mo_s": {
    "value": 29.53059,
    "ucum": "d"
  },
  "mo_j": {
    "value": 1,
    "ucum": "a_j/12"
  },
  "mo_g": {
    "value": 1,
    "ucum": "a_g/12"
  },
  "mo": {
    "value": 1,
    "ucum": "mo_j"
  },
  "t": {
    "value": 1000,
    "ucum": "kg"
  },
  "bar": {
    "value": 100000,
    "ucum": "Pa"
  },
  "u": {
    "value": 1.6605402e-24,
    "ucum": "g"
  },
  "eV": {
    "value": 1,
    "ucum": "[e].V"
  },
  "AU": {
    "value": 149597.870691,
    "ucum": "Mm"
  },
  "pc": {
    "value": 30856780000000000,
    "ucum": "m"
  },
  "[c]": {
    "value": 299792458,
    "ucum": "m/s"
  },
  "[h]": {
    "value": 6.6260755e-24,
    "ucum": "J.s"
  },
  "[k]": {
    "value": 1.380658e-23,
    "ucum": "J/K"
  },
  "[eps_0]": {
    "value": 8.854187817e-12,
    "ucum": "F/m"
  },
  "[mu_0]": {
    "value": 1,
    "ucum": "4.[pi].10*-7.N/A2"
  },
  "[e]": {
    "value": 1.60217733e-19,
    "ucum": "C"
  },
  "[m_e]": {
    "value": 9.1093897e-28,
    "ucum": "g"
  },
  "[m_p]": {
    "value": 1.6726231e-24,
    "ucum": "g"
  },
  "[G]": {
    "value": 6.67259e-11,
    "ucum": "m3.kg-1.s-2"
  },
  "[g]": {
    "value": 9.80665,
    "ucum": "m/s2"
  },
  "atm": {
    "value": 101325,
    "ucum": "Pa"
  },
  "[ly]": {
    "value": 1,
    "ucum": "[c].a_j"
  },
  "gf": {
    "value": 1,
    "ucum": "g.[g]"
  },
  "[lbf_av]": {
    "value": 1,
    "ucum": "[lb_av].[g]"
  },
  "Ky": {
    "value": 1,
    "ucum": "cm-1"
  },
  "Gal": {
    "value": 1,
    "ucum": "cm/s2"
  },
  "dyn": {
    "value": 1,
    "ucum": "g.cm/s2"
  },
  "erg": {
    "value": 1,
    "ucum": "dyn.cm"
  },
  "P": {
    "value": 1,
    "ucum": "dyn.s/cm2"
  },
  "Bi": {
    "value": 10,
    "ucum": "A"
  },
  "St": {
    "value": 1,
    "ucum": "cm2/s"
  },
  "Mx": {
    "value": 1e-8,
    "ucum": "Wb"
  },
  "G": {
    "value": 0.0001,
    "ucum": "T"
  },
  "Oe": {
    "value": 250,
    "ucum": "/[pi].A/m"
  },
  "Gb": {
    "value": 1,
    "ucum": "Oe.cm"
  },
  "sb": {
    "value": 1,
    "ucum": "cd/cm2"
  },
  "Lmb": {
    "value": 1,
    "ucum": "cd/cm2/[pi]"
  },
  "ph": {
    "value": 0.0001,
    "ucum": "lx"
  },
  "Ci": {
    "value": 37000000000,
    "ucum": "Bq"
  },
  "R": {
    "value": 0.000258,
    "ucum": "C/kg"
  },
  "RAD": {
    "value": 100,
    "ucum": "erg/g"
  },
  "REM": {
    "value": 1,
    "ucum": "RAD"
  },
  "[in_i]": {
    "value": 2.54,
    "ucum": "cm"
  },
  "[ft_i]": {
    "value": 12,
    "ucum": "[in_i]"
  },
  "[yd_i]": {
    "value": 3,
    "ucum": "[ft_i]"
  },
  "[mi_i]": {
    "value": 5280,
    "ucum": "[ft_i]"
  },
  "[fth_i]": {
    "value": 6,
    "ucum": "[ft_i]"
  },
  "[nmi_i]": {
    "value": 1852,
    "ucum": "m"
  },
  "[kn_i]": {
    "value": 1,
    "ucum": "[nmi_i]/h"
  },
  "[sin_i]": {
    "value": 1,
    "ucum": "[in_i]2"
  },
  "[sft_i]": {
    "value": 1,
    "ucum": "[ft_i]2"
  },
  "[syd_i]": {
    "value": 1,
    "ucum": "[yd_i]2"
  },
  "[cin_i]": {
    "value": 1,
    "ucum": "[in_i]3"
  },
  "[cft_i]": {
    "value": 1,
    "ucum": "[ft_i]3"
  },
  "[cyd_i]": {
    "value": 1,
    "ucum": "[yd_i]3"
  },
  "[bf_i]": {
    "value": 144,
    "ucum": "[in_i]3"
  },
  "[cr_i]": {
    "value": 128,
    "ucum": "[ft_i]3"
  },
  "[mil_i]": {
    "value": 0.001,
    "ucum": "[in_i]"
  },
  "[cml_i]": {
    "value": 1,
    "ucum": "[pi]/4.[mil_i]2"
  },
  "[hd_i]": {
    "value": 4,
    "ucum": "[in_i]"
  },
  "[ft_us]": {
    "value": 1200,
    "ucum": "m/3937"
  },
  "[yd_us]": {
    "value": 3,
    "ucum": "[ft_us]"
  },
  "[in_us]": {
    "value": 1,
    "ucum": "[ft_us]/12"
  },
  "[rd_us]": {
    "value": 16.5,
    "ucum": "[ft_us]"
  },
  "[ch_us]": {
    "value": 4,
    "ucum": "[rd_us]"
  },
  "[lk_us]": {
    "value": 1,
    "ucum": "[ch_us]/100"
  },
  "[rch_us]": {
    "value": 100,
    "ucum": "[ft_us]"
  },
  "[rlk_us]": {
    "value": 1,
    "ucum": "[rch_us]/100"
  },
  "[fth_us]": {
    "value": 6,
    "ucum": "[ft_us]"
  },
  "[fur_us]": {
    "value": 40,
    "ucum": "[rd_us]"
  },
  "[mi_us]": {
    "value": 8,
    "ucum": "[fur_us]"
  },
  "[acr_us]": {
    "value": 160,
    "ucum": "[rd_us]2"
  },
  "[srd_us]": {
    "value": 1,
    "ucum": "[rd_us]2"
  },
  "[smi_us]": {
    "value": 1,
    "ucum": "[mi_us]2"
  },
  "[sct]": {
    "value": 1,
    "ucum": "[mi_us]2"
  },
  "[twp]": {
    "value": 36,
    "ucum": "[sct]"
  },
  "[mil_us]": {
    "value": 0.001,
    "ucum": "[in_us]"
  },
  "[in_br]": {
    "value": 2.539998,
    "ucum": "cm"
  },
  "[ft_br]": {
    "value": 12,
    "ucum": "[in_br]"
  },
  "[rd_br]": {
    "value": 16.5,
    "ucum": "[ft_br]"
  },
  "[ch_br]": {
    "value": 4,
    "ucum": "[rd_br]"
  },
  "[lk_br]": {
    "value": 1,
    "ucum": "[ch_br]/100"
  },
  "[fth_br]": {
    "value": 6,
    "ucum": "[ft_br]"
  },
  "[pc_br]": {
    "value": 2.5,
    "ucum": "[ft_br]"
  },
  "[yd_br]": {
    "value": 3,
    "ucum": "[ft_br]"
  },
  "[mi_br]": {
    "value": 5280,
    "ucum": "[ft_br]"
  },
  "[nmi_br]": {
    "value": 6080,
    "ucum": "[ft_br]"
  },
  "[kn_br]": {
    "value": 1,
    "ucum": "[nmi_br]/h"
  },
  "[acr_br]": {
    "value": 4840,
    "ucum": "[yd_br]2"
  },
  "[gal_us]": {
    "value": 231,
    "ucum": "[in_i]3"
  },
  "[bbl_us]": {
    "value": 42,
    "ucum": "[gal_us]"
  },
  "[qt_us]": {
    "value": 1,
    "ucum": "[gal_us]/4"
  },
  "[pt_us]": {
    "value": 1,
    "ucum": "[qt_us]/2"
  },
  "[gil_us]": {
    "value": 1,
    "ucum": "[pt_us]/4"
  },
  "[foz_us]": {
    "value": 1,
    "ucum": "[gil_us]/4"
  },
  "[fdr_us]": {
    "value": 1,
    "ucum": "[foz_us]/8"
  },
  "[min_us]": {
    "value": 1,
    "ucum": "[fdr_us]/60"
  },
  "[crd_us]": {
    "value": 128,
    "ucum": "[ft_i]3"
  },
  "[bu_us]": {
    "value": 2150.42,
    "ucum": "[in_i]3"
  },
  "[gal_wi]": {
    "value": 1,
    "ucum": "[bu_us]/8"
  },
  "[pk_us]": {
    "value": 1,
    "ucum": "[bu_us]/4"
  },
  "[dqt_us]": {
    "value": 1,
    "ucum": "[pk_us]/8"
  },
  "[dpt_us]": {
    "value": 1,
    "ucum": "[dqt_us]/2"
  },
  "[tbs_us]": {
    "value": 1,
    "ucum": "[foz_us]/2"
  },
  "[tsp_us]": {
    "value": 1,
    "ucum": "[tbs_us]/3"
  },
  "[cup_us]": {
    "value": 16,
    "ucum": "[tbs_us]"
  },
  "[foz_m]": {
    "value": 30,
    "ucum": "mL"
  },
  "[cup_m]": {
    "value": 240,
    "ucum": "mL"
  },
  "[tsp_m]": {
    "value": 5,
    "ucum": "mL"
  },
  "[tbs_m]": {
    "value": 15,
    "ucum": "mL"
  },
  "[gal_br]": {
    "value": 4.54609,
    "ucum": "l"
  },
  "[pk_br]": {
    "value": 2,
    "ucum": "[gal_br]"
  },
  "[bu_br]": {
    "value": 4,
    "ucum": "[pk_br]"
  },
  "[qt_br]": {
    "value": 1,
    "ucum": "[gal_br]/4"
  },
  "[pt_br]": {
    "value": 1,
    "ucum": "[qt_br]/2"
  },
  "[gil_br]": {
    "value": 1,
    "ucum": "[pt_br]/4"
  },
  "[foz_br]": {
    "value": 1,
    "ucum": "[gil_br]/5"
  },
  "[fdr_br]": {
    "value": 1,
    "ucum": "[foz_br]/8"
  },
  "[min_br]": {
    "value": 1,
    "ucum": "[fdr_br]/60"
  },
  "[gr]": {
    "value": 64.79891,
    "ucum": "mg"
  },
  "[lb_av]": {
    "value": 7000,
    "ucum": "[gr]"
  },
  "[oz_av]": {
    "value": 1,
    "ucum": "[lb_av]/16"
  },
  "[dr_av]": {
    "value": 1,
    "ucum": "[oz_av]/16"
  },
  "[scwt_av]": {
    "value": 100,
    "ucum": "[lb_av]"
  },
  "[lcwt_av]": {
    "value": 112,
    "ucum": "[lb_av]"
  },
  "[ston_av]": {
    "value": 20,
    "ucum": "[scwt_av]"
  },
  "[lton_av]": {
    "value": 20,
    "ucum": "[lcwt_av]"
  },
  "[stone_av]": {
    "value": 14,
    "ucum": "[lb_av]"
  },
  "[pwt_tr]": {
    "value": 24,
    "ucum": "[gr]"
  },
  "[oz_tr]": {
    "value": 20,
    "ucum": "[pwt_tr]"
  },
  "[lb_tr]": {
    "value": 12,
    "ucum": "[oz_tr]"
  },
  "[sc_ap]": {
    "value": 20,
    "ucum": "[gr]"
  },
  "[dr_ap]": {
    "value": 3,
    "ucum": "[sc_ap]"
  },
  "[oz_ap]": {
    "value": 8,
    "ucum": "[dr_ap]"
  },
  "[lb_ap]": {
    "value": 12,
    "ucum": "[oz_ap]"
  },
  "[oz_m]": {
    "value": 28,
    "ucum": "g"
  },
  "[lne]": {
    "value": 1,
    "ucum": "[in_i]/12"
  },
  "[pnt]": {
    "value": 1,
    "ucum": "[lne]/6"
  },
  "[pca]": {
    "value": 12,
    "ucum": "[pnt]"
  },
  "[pnt_pr]": {
    "value": 0.013837,
    "ucum": "[in_i]"
  },
  "[pca_pr]": {
    "value": 12,
    "ucum": "[pnt_pr]"
  },
  "[pied]": {
    "value": 32.48,
    "ucum": "cm"
  },
  "[pouce]": {
    "value": 1,
    "ucum": "[pied]/12"
  },
  "[ligne]": {
    "value": 1,
    "ucum": "[pouce]/12"
  },
  "[didot]": {
    "value": 1,
    "ucum": "[ligne]/6"
  },
  "[cicero]": {
    "value": 12,
    "ucum": "[didot]"
  },
  "[degF]": {
    "value": null,
    "ucum": "degf(5 K/9)"
  },
  "[degR]": {
    "value": 5,
    "ucum": "K/9"
  },
  "cal_[15]": {
    "value": 4.1858,
    "ucum": "J"
  },
  "cal_[20]": {
    "value": 4.1819,
    "ucum": "J"
  },
  "cal_m": {
    "value": 4.19002,
    "ucum": "J"
  },
  "cal_IT": {
    "value": 4.1868,
    "ucum": "J"
  },
  "cal_th": {
    "value": 4.184,
    "ucum": "J"
  },
  "cal": {
    "value": 1,
    "ucum": "cal_th"
  },
  "[Cal]": {
    "value": 1,
    "ucum": "kcal_th"
  },
  "[Btu_39]": {
    "value": 1.05967,
    "ucum": "kJ"
  },
  "[Btu_59]": {
    "value": 1.0548,
    "ucum": "kJ"
  },
  "[Btu_60]": {
    "value": 1.05468,
    "ucum": "kJ"
  },
  "[Btu_m]": {
    "value": 1.05587,
    "ucum": "kJ"
  },
  "[Btu_IT]": {
    "value": 1.05505585262,
    "ucum": "kJ"
  },
  "[Btu_th]": {
    "value": 1.05435,
    "ucum": "kJ"
  },
  "[Btu]": {
    "value": 1,
    "ucum": "[Btu_th]"
  },
  "[HP]": {
    "value": 550,
    "ucum": "[ft_i].[lbf_av]/s"
  },
  "tex": {
    "value": 1,
    "ucum": "g/km"
  },
  "[den]": {
    "value": 1,
    "ucum": "g/9/km"
  },
  "m[H2O]": {
    "value": 9.80665,
    "ucum": "kPa"
  },
  "m[Hg]": {
    "value": 133.322,
    "ucum": "kPa"
  },
  "[in_i'H2O]": {
    "value": 1,
    "ucum": "m[H2O].[in_i]/m"
  },
  "[in_i'Hg]": {
    "value": 1,
    "ucum": "m[Hg].[in_i]/m"
  },
  "[PRU]": {
    "value": 1,
    "ucum": "mm[Hg].s/ml"
  },
  "[wood'U]": {
    "value": 1,
    "ucum": "mm[Hg].min/L"
  },
  "[diop]": {
    "value": 1,
    "ucum": "/m"
  },
  "[p'diop]": {
    "value": null,
    "ucum": "100tan(1 rad)"
  },
  "%[slope]": {
    "value": null,
    "ucum": "100tan(1 rad)"
  },
  "[mesh_i]": {
    "value": 1,
    "ucum": "/[in_i]"
  },
  "[Ch]": {
    "value": 1,
    "ucum": "mm/3"
  },
  "[drp]": {
    "value": 1,
    "ucum": "ml/20"
  },
  "[hnsf'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[MET]": {
    "value": 3.5,
    "ucum": "mL/min/kg"
  },
  "[hp'_X]": {
    "value": null,
    "ucum": "hpX(1 1)"
  },
  "[hp'_C]": {
    "value": null,
    "ucum": "hpC(1 1)"
  },
  "[hp'_M]": {
    "value": null,
    "ucum": "hpM(1 1)"
  },
  "[hp'_Q]": {
    "value": null,
    "ucum": "hpQ(1 1)"
  },
  "[hp_X]": {
    "value": 1,
    "ucum": "1"
  },
  "[hp_C]": {
    "value": 1,
    "ucum": "1"
  },
  "[hp_M]": {
    "value": 1,
    "ucum": "1"
  },
  "[hp_Q]": {
    "value": 1,
    "ucum": "1"
  },
  "[kp_X]": {
    "value": 1,
    "ucum": "1"
  },
  "[kp_C]": {
    "value": 1,
    "ucum": "1"
  },
  "[kp_M]": {
    "value": 1,
    "ucum": "1"
  },
  "[kp_Q]": {
    "value": 1,
    "ucum": "1"
  },
  "eq": {
    "value": 1,
    "ucum": "mol"
  },
  "osm": {
    "value": 1,
    "ucum": "mol"
  },
  "[pH]": {
    "value": null,
    "ucum": "pH(1 mol/l)"
  },
  "g%": {
    "value": 1,
    "ucum": "g/dl"
  },
  "[S]": {
    "value": 1,
    "ucum": "10*-13.s"
  },
  "[HPF]": {
    "value": 1,
    "ucum": "1"
  },
  "[LPF]": {
    "value": 100,
    "ucum": "1"
  },
  "kat": {
    "value": 1,
    "ucum": "mol/s"
  },
  "U": {
    "value": 1,
    "ucum": "umol/min"
  },
  "[iU]": {
    "value": 1,
    "ucum": "1"
  },
  "[IU]": {
    "value": 1,
    "ucum": "[iU]"
  },
  "[arb'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[USP'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[GPL'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[MPL'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[APL'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[beth'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[anti'Xa'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[todd'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[dye'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[smgy'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[bdsk'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[ka'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[knk'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[mclg'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[tb'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[CCID_50]": {
    "value": 1,
    "ucum": "1"
  },
  "[TCID_50]": {
    "value": 1,
    "ucum": "1"
  },
  "[EID_50]": {
    "value": 1,
    "ucum": "1"
  },
  "[PFU]": {
    "value": 1,
    "ucum": "1"
  },
  "[FFU]": {
    "value": 1,
    "ucum": "1"
  },
  "[CFU]": {
    "value": 1,
    "ucum": "1"
  },
  "[BAU]": {
    "value": 1,
    "ucum": "1"
  },
  "[AU]": {
    "value": 1,
    "ucum": "1"
  },
  "[Amb'a'1'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[PNU]": {
    "value": 1,
    "ucum": "1"
  },
  "[Lf]": {
    "value": 1,
    "ucum": "1"
  },
  "[D'ag'U]": {
    "value": 1,
    "ucum": "1"
  },
  "[FEU]": {
    "value": 1,
    "ucum": "1"
  },
  "[ELU]": {
    "value": 1,
    "ucum": "1"
  },
  "[EU]": {
    "value": 1,
    "ucum": "1"
  },
  "Np": {
    "value": null,
    "ucum": "ln(1 1)"
  },
  "B": {
    "value": null,
    "ucum": "lg(1 1)"
  },
  "B[SPL]": {
    "value": null,
    "ucum": "2lg(2 10*-5.Pa)"
  },
  "B[V]": {
    "value": null,
    "ucum": "2lg(1 V)"
  },
  "B[mV]": {
    "value": null,
    "ucum": "2lg(1 mV)"
  },
  "B[uV]": {
    "value": null,
    "ucum": "2lg(1 uV)"
  },
  "B[10.nV]": {
    "value": null,
    "ucum": "2lg(10 nV)"
  },
  "B[W]": {
    "value": null,
    "ucum": "lg(1 W)"
  },
  "B[kW]": {
    "value": null,
    "ucum": "lg(1 kW)"
  },
  "st": {
    "value": 1,
    "ucum": "m3"
  },
  "Ao": {
    "value": 0.1,
    "ucum": "nm"
  },
  "b": {
    "value": 100,
    "ucum": "fm2"
  },
  "att": {
    "value": 1,
    "ucum": "kgf/cm2"
  },
  "mho": {
    "value": 1,
    "ucum": "S"
  },
  "[psi]": {
    "value": 1,
    "ucum": "[lbf_av]/[in_i]2"
  },
  "circ": {
    "value": 2,
    "ucum": "[pi].rad"
  },
  "sph": {
    "value": 4,
    "ucum": "[pi].sr"
  },
  "[car_m]": {
    "value": 0.2,
    "ucum": "g"
  },
  "[car_Au]": {
    "value": 1,
    "ucum": "/24"
  },
  "[smoot]": {
    "value": 67,
    "ucum": "[in_i]"
  },
  "bit_s": {
    "value": null,
    "ucum": "ld(1 1)"
  },
  "bit": {
    "value": 1,
    "ucum": "1"
  },
  "By": {
    "value": 8,
    "ucum": "bit"
  },
  "Bd": {
    "value": 1,
    "ucum": "/s"
  }
}

},{}],50:[function(require,module,exports){
module.exports={"mol":true,"sr":true,"Hz":true,"N":true,"Pa":true,"J":true,"W":true,"A":true,"V":true,"F":true,"Ohm":true,"S":true,"Wb":true,"Cel":true,"T":true,"H":true,"lm":true,"lx":true,"Bq":true,"Gy":true,"Sv":true,"l":true,"L":true,"ar":true,"t":true,"bar":true,"u":true,"eV":true,"pc":true,"[c]":true,"[h]":true,"[k]":true,"[eps_0]":true,"[mu_0]":true,"[e]":true,"[m_e]":true,"[m_p]":true,"[G]":true,"[g]":true,"[ly]":true,"gf":true,"Ky":true,"Gal":true,"dyn":true,"erg":true,"P":true,"Bi":true,"St":true,"Mx":true,"G":true,"Oe":true,"Gb":true,"sb":true,"Lmb":true,"ph":true,"Ci":true,"R":true,"RAD":true,"REM":true,"cal_[15]":true,"cal_[20]":true,"cal_m":true,"cal_IT":true,"cal_th":true,"cal":true,"tex":true,"m[H2O]":true,"m[Hg]":true,"eq":true,"osm":true,"g%":true,"kat":true,"U":true,"[iU]":true,"[IU]":true,"Np":true,"B":true,"B[SPL]":true,"B[V]":true,"B[mV]":true,"B[uV]":true,"B[10.nV]":true,"B[W]":true,"B[kW]":true,"st":true,"mho":true,"bit":true,"By":true,"Bd":true,"m":true,"s":true,"g":true,"rad":true,"K":true,"C":true,"cd":true}

},{}],51:[function(require,module,exports){
module.exports={
  "Y": {
    "CODE": "YA",
    "names": [
      "yotta"
    ],
    "printSymbols": [
      "Y"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>24</sup>",
        "numeric": 1e+24
      }
    ]
  },
  "Z": {
    "CODE": "ZA",
    "names": [
      "zetta"
    ],
    "printSymbols": [
      "Z"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>21</sup>",
        "numeric": 1e+21
      }
    ]
  },
  "E": {
    "CODE": "EX",
    "names": [
      "exa"
    ],
    "printSymbols": [
      "E"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>18</sup>",
        "numeric": 1000000000000000000
      }
    ]
  },
  "P": {
    "CODE": "PT",
    "names": [
      "peta"
    ],
    "printSymbols": [
      "P"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>15</sup>",
        "numeric": 1000000000000000
      }
    ]
  },
  "T": {
    "CODE": "TR",
    "names": [
      "tera"
    ],
    "printSymbols": [
      "T"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>12</sup>",
        "numeric": 1000000000000
      }
    ]
  },
  "G": {
    "CODE": "GA",
    "names": [
      "giga"
    ],
    "printSymbols": [
      "G"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>9</sup>",
        "numeric": 1000000000
      }
    ]
  },
  "M": {
    "CODE": "MA",
    "names": [
      "mega"
    ],
    "printSymbols": [
      "M"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>6</sup>",
        "numeric": 1000000
      }
    ]
  },
  "k": {
    "CODE": "K",
    "names": [
      "kilo"
    ],
    "printSymbols": [
      "k"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>3</sup>",
        "numeric": 1000
      }
    ]
  },
  "h": {
    "CODE": "H",
    "names": [
      "hecto"
    ],
    "printSymbols": [
      "h"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>2</sup>",
        "numeric": 100
      }
    ]
  },
  "da": {
    "CODE": "DA",
    "names": [
      "deka"
    ],
    "printSymbols": [
      "da"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>1</sup>",
        "numeric": 10
      }
    ]
  },
  "d": {
    "CODE": "D",
    "names": [
      "deci"
    ],
    "printSymbols": [
      "d"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-1</sup>",
        "numeric": 0.1
      }
    ]
  },
  "c": {
    "CODE": "C",
    "names": [
      "centi"
    ],
    "printSymbols": [
      "c"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-2</sup>",
        "numeric": 0.01
      }
    ]
  },
  "m": {
    "CODE": "M",
    "names": [
      "milli"
    ],
    "printSymbols": [
      "m"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-3</sup>",
        "numeric": 0.001
      }
    ]
  },
  "u": {
    "CODE": "U",
    "names": [
      "micro"
    ],
    "printSymbols": [
      "&#956;"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-6</sup>",
        "numeric": 0.000001
      }
    ]
  },
  "n": {
    "CODE": "N",
    "names": [
      "nano"
    ],
    "printSymbols": [
      "n"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-9</sup>",
        "numeric": 1e-9
      }
    ]
  },
  "p": {
    "CODE": "P",
    "names": [
      "pico"
    ],
    "printSymbols": [
      "p"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-12</sup>",
        "numeric": 1e-12
      }
    ]
  },
  "f": {
    "CODE": "F",
    "names": [
      "femto"
    ],
    "printSymbols": [
      "f"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-15</sup>",
        "numeric": 1e-15
      }
    ]
  },
  "a": {
    "CODE": "A",
    "names": [
      "atto"
    ],
    "printSymbols": [
      "a"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-18</sup>",
        "numeric": 1e-18
      }
    ]
  },
  "z": {
    "CODE": "ZO",
    "names": [
      "zepto"
    ],
    "printSymbols": [
      "z"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-21</sup>",
        "numeric": 1e-21
      }
    ]
  },
  "y": {
    "CODE": "YO",
    "names": [
      "yocto"
    ],
    "printSymbols": [
      "y"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-24</sup>",
        "numeric": 1e-24
      }
    ]
  },
  "Ki": {
    "CODE": "KIB",
    "names": [
      "kibi"
    ],
    "printSymbols": [
      "Ki"
    ],
    "values": [
      {
        "printable": "1024",
        "numeric": 1024
      }
    ]
  },
  "Mi": {
    "CODE": "MIB",
    "names": [
      "mebi"
    ],
    "printSymbols": [
      "Mi"
    ],
    "values": [
      {
        "printable": "1048576",
        "numeric": 1048576
      }
    ]
  },
  "Gi": {
    "CODE": "GIB",
    "names": [
      "gibi"
    ],
    "printSymbols": [
      "Gi"
    ],
    "values": [
      {
        "printable": "1073741824",
        "numeric": 1073741824
      }
    ]
  },
  "Ti": {
    "CODE": "TIB",
    "names": [
      "tebi"
    ],
    "printSymbols": [
      "Ti"
    ],
    "values": [
      {
        "printable": "1099511627776",
        "numeric": 1099511627776
      }
    ]
  }
}

},{}],52:[function(require,module,exports){
module.exports={
  "Y": 1e+24,
  "Z": 1e+21,
  "E": 1000000000000000000,
  "P": 1000000000000000,
  "T": 1000000000000,
  "G": 1000000000,
  "M": 1000000,
  "k": 1000,
  "h": 100,
  "da": 10,
  "d": 0.1,
  "c": 0.01,
  "m": 0.001,
  "u": 0.000001,
  "n": 1e-9,
  "p": 1e-12,
  "f": 1e-15,
  "a": 1e-18,
  "z": 1e-21,
  "y": 1e-24,
  "Ki": 1024,
  "Mi": 1048576,
  "Gi": 1073741824,
  "Ti": 1099511627776
}

},{}],53:[function(require,module,exports){
module.exports = function () {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */
  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.offset = offset;
    this.line = line;
    this.column = column;
    this.name = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        peg$FAILED = {},
        peg$startRuleIndices = {
      start: 0
    },
        peg$startRuleIndex = 0,
        peg$consts = [function (e) {
      return e; // cleanup(e);
    }, peg$FAILED, "/", {
      type: "literal",
      value: "/",
      description: "\"/\""
    }, function (e) {
      return multiply({
        value: 1,
        units: {}
      }, [["/", e]]);
    }, ".", {
      type: "literal",
      value: ".",
      description: "\".\""
    }, [], function (t, ms) {
      return multiply(t, ms);
    }, null, function (e, exp) {
      return e.ann && exp;
    }, void 0, function (e, exp) {
      return topower(e, exp);
    }, function (d) {
      var ret = {
        value: d,
        units: {}
      };
      return ret;
    }, function (u) {
      return u;
    }, "(", {
      type: "literal",
      value: "(",
      description: "\"(\""
    }, ")", {
      type: "literal",
      value: ")",
      description: "\")\""
    }, function (e) {
      return e;
    }, /^[+\-]/, {
      type: "class",
      value: "[+\\-]",
      description: "[+\\-]"
    }, function (s, d) {
      return s == "-" ? -1 * d : d;
    }, function (p, a) {
      return p && !ismetric(a);
    }, function (p, a) {
      var ret = a;
      var u = Object.keys(ret.units)[0]; // console.log("simpleUnit: p:", JSON.stringify(p, null, 2), "a: ", JSON.stringify(a, null, 2));

      if (p) {
        ret.value = ret.value * prefixes[p];
        ret.metadata = {};

        if (prefixMetadata[p]) {
          // if this prefix has metadata, augment the return with it
          Object.keys(prefixMetadata[p]).forEach(function (key) {
            if (!ret.metadata[u]) {
              ret.metadata[u] = {
                prefix: {}
              };
            }

            ret.metadata[u].prefix[key] = prefixMetadata[p][key];
          });
        } // merge in the unit metadata


        if (unitMetadata[u]) {
          //console.log("simpleUnit: ", JSON.stringify(unitMetadata[u], null ,2));
          Object.keys(unitMetadata[u]).forEach(function (key) {
            if (!ret.metadata[u]) {
              ret.metadata[u] = {};
            }

            ret.metadata[u][key] = unitMetadata[u][key];
          });
        }
      } //console.log("simpleUnit: ret: ", JSON.stringify(ret, null ,2));


      return ret;
    }, /^[0-9]/, {
      type: "class",
      value: "[0-9]",
      description: "[0-9]"
    }, "e", {
      type: "literal",
      value: "e",
      description: "\"e\""
    }, function (v, epresent, e) {
      return !epresent && !!e;
    }, function (v, epresent, e) {
      return parseInt(v.join("")) * Math.pow(10, e || 0);
    }, "{", {
      type: "literal",
      value: "{",
      description: "\"{\""
    }, /^[^}]/, {
      type: "class",
      value: "[^}]",
      description: "[^}]"
    }, "}", {
      type: "literal",
      value: "}",
      description: "\"}\""
    }, function (m) {
      return /[^\x00-\x7F]/.test(m);
    }, function (m) {
      return {
        value: 1,
        units: {},
        ann: m
      };
    }, "[anti'Xa'U]", {
      type: "literal",
      value: "[anti'Xa'U]",
      description: "\"[anti'Xa'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[anti'Xa'U]": 1
        },
        "metadata": {
          "[anti'Xa'U]": {
            "isBase": false,
            "CODE": "[ANTI'XA'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["anti factor Xa unit"],
            "properties": ["biologic activity of factor Xa inhibitor (heparin)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[Amb'a'1'U]", {
      type: "literal",
      value: "[Amb'a'1'U]",
      description: "\"[Amb'a'1'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[Amb'a'1'U]": 1
        },
        "metadata": {
          "[Amb'a'1'U]": {
            "isBase": false,
            "CODE": "[AMB'A'1'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["allergen unit for Ambrosia artemisiifolia"],
            "printSymbols": ["Amb a 1 U"],
            "properties": ["procedure defined amount of the major allergen of ragweed."],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[stone_av]", {
      type: "literal",
      value: "[stone_av]",
      description: "\"[stone_av]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[stone_av]": 1
        },
        "metadata": {
          "[stone_av]": {
            "isBase": false,
            "CODE": "[STONE_AV]",
            "isMetric": "no",
            "class": "avoirdupois",
            "names": ["stone", "British stone"],
            "properties": ["mass"],
            "values": [{
              "printable": "14",
              "numeric": 14
            }]
          }
        }
      };
    }, "[in_i'H2O]", {
      type: "literal",
      value: "[in_i'H2O]",
      description: "\"[in_i'H2O]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[in_i'H2O]": 1
        },
        "metadata": {
          "[in_i'H2O]": {
            "isBase": false,
            "CODE": "[IN_I'H2O]",
            "isMetric": "no",
            "class": "clinical",
            "names": ["inch of water column"],
            "printSymbols": ["in&#160;H<sub>\n            <r>2</r>\n         </sub>O"],
            "properties": ["pressure"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[ston_av]", {
      type: "literal",
      value: "[ston_av]",
      description: "\"[ston_av]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ston_av]": 1
        },
        "metadata": {
          "[ston_av]": {
            "isBase": false,
            "CODE": "[STON_AV]",
            "isMetric": "no",
            "class": "avoirdupois",
            "names": ["short ton", "U.S. ton"],
            "properties": ["mass"],
            "values": [{
              "printable": "20",
              "numeric": 20
            }]
          }
        }
      };
    }, "[TCID_50]", {
      type: "literal",
      value: "[TCID_50]",
      description: "\"[TCID_50]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[TCID_50]": 1
        },
        "metadata": {
          "[TCID_50]": {
            "isBase": false,
            "CODE": "[TCID_50]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["50% tissue culture infectious dose"],
            "printSymbols": ["TCID<sub>50</sub>"],
            "properties": ["biologic activity (infectivity) of an infectious agent preparation"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[CCID_50]", {
      type: "literal",
      value: "[CCID_50]",
      description: "\"[CCID_50]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[CCID_50]": 1
        },
        "metadata": {
          "[CCID_50]": {
            "isBase": false,
            "CODE": "[CCID_50]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["50% cell culture infectious dose"],
            "printSymbols": ["CCID<sub>50</sub>"],
            "properties": ["biologic activity (infectivity) of an infectious agent preparation"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[scwt_av]", {
      type: "literal",
      value: "[scwt_av]",
      description: "\"[scwt_av]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[scwt_av]": 1
        },
        "metadata": {
          "[scwt_av]": {
            "isBase": false,
            "CODE": "[SCWT_AV]",
            "isMetric": "no",
            "class": "avoirdupois",
            "names": ["short hundredweight", "U.S. hundredweight"],
            "properties": ["mass"],
            "values": [{
              "printable": "100",
              "numeric": 100
            }]
          }
        }
      };
    }, "[lcwt_av]", {
      type: "literal",
      value: "[lcwt_av]",
      description: "\"[lcwt_av]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[lcwt_av]": 1
        },
        "metadata": {
          "[lcwt_av]": {
            "isBase": false,
            "CODE": "[LCWT_AV]",
            "isMetric": "no",
            "class": "avoirdupois",
            "names": ["long hunderdweight", "British hundredweight"],
            "properties": ["mass"],
            "values": [{
              "printable": "112",
              "numeric": 112
            }]
          }
        }
      };
    }, "[lton_av]", {
      type: "literal",
      value: "[lton_av]",
      description: "\"[lton_av]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[lton_av]": 1
        },
        "metadata": {
          "[lton_av]": {
            "isBase": false,
            "CODE": "[LTON_AV]",
            "isMetric": "no",
            "class": "avoirdupois",
            "names": ["long ton", "British ton"],
            "properties": ["mass"],
            "values": [{
              "printable": "20",
              "numeric": 20
            }]
          }
        }
      };
    }, "[in_i'Hg]", {
      type: "literal",
      value: "[in_i'Hg]",
      description: "\"[in_i'Hg]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[in_i'Hg]": 1
        },
        "metadata": {
          "[in_i'Hg]": {
            "isBase": false,
            "CODE": "[IN_I'HG]",
            "isMetric": "no",
            "class": "clinical",
            "names": ["inch of mercury column"],
            "printSymbols": ["in&#160;Hg"],
            "properties": ["pressure"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[tbs_us]", {
      type: "literal",
      value: "[tbs_us]",
      description: "\"[tbs_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[tbs_us]": 1
        },
        "metadata": {
          "[tbs_us]": {
            "isBase": false,
            "CODE": "[TBS_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["tablespoon"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[dpt_us]", {
      type: "literal",
      value: "[dpt_us]",
      description: "\"[dpt_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[dpt_us]": 1
        },
        "metadata": {
          "[dpt_us]": {
            "isBase": false,
            "CODE": "[DPT_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["dry pint"],
            "properties": ["dry volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[bdsk'U]", {
      type: "literal",
      value: "[bdsk'U]",
      description: "\"[bdsk'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[bdsk'U]": 1
        },
        "metadata": {
          "[bdsk'U]": {
            "isBase": false,
            "CODE": "[BDSK'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["Bodansky unit"],
            "properties": ["biologic activity of phosphatase"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[smgy'U]", {
      type: "literal",
      value: "[smgy'U]",
      description: "\"[smgy'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[smgy'U]": 1
        },
        "metadata": {
          "[smgy'U]": {
            "isBase": false,
            "CODE": "[SMGY'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["Somogyi unit"],
            "properties": ["biologic activity of amylase"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[dqt_us]", {
      type: "literal",
      value: "[dqt_us]",
      description: "\"[dqt_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[dqt_us]": 1
        },
        "metadata": {
          "[dqt_us]": {
            "isBase": false,
            "CODE": "[DQT_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["dry quart"],
            "properties": ["dry volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[todd'U]", {
      type: "literal",
      value: "[todd'U]",
      description: "\"[todd'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[todd'U]": 1
        },
        "metadata": {
          "[todd'U]": {
            "isBase": false,
            "CODE": "[TODD'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["Todd unit"],
            "properties": ["biologic activity antistreptolysin O"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[D'ag'U]", {
      type: "literal",
      value: "[D'ag'U]",
      description: "\"[D'ag'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[D'ag'U]": 1
        },
        "metadata": {
          "[D'ag'U]": {
            "isBase": false,
            "CODE": "[D'AG'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["D-antigen unit"],
            "printSymbols": [""],
            "properties": ["procedure defined amount of a poliomyelitis d-antigen substance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[beth'U]", {
      type: "literal",
      value: "[beth'U]",
      description: "\"[beth'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[beth'U]": 1
        },
        "metadata": {
          "[beth'U]": {
            "isBase": false,
            "CODE": "[BETH'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["Bethesda unit"],
            "properties": ["biologic activity of factor VIII inhibitor"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[gal_wi]", {
      type: "literal",
      value: "[gal_wi]",
      description: "\"[gal_wi]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[gal_wi]": 1
        },
        "metadata": {
          "[gal_wi]": {
            "isBase": false,
            "CODE": "[GAL_WI]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["historical winchester gallon"],
            "properties": ["dry volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[crd_us]", {
      type: "literal",
      value: "[crd_us]",
      description: "\"[crd_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[crd_us]": 1
        },
        "metadata": {
          "[crd_us]": {
            "isBase": false,
            "CODE": "[CRD_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["cord"],
            "properties": ["fluid volume"],
            "values": [{
              "printable": "128",
              "numeric": 128
            }]
          }
        }
      };
    }, "[min_us]", {
      type: "literal",
      value: "[min_us]",
      description: "\"[min_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[min_us]": 1
        },
        "metadata": {
          "[min_us]": {
            "isBase": false,
            "CODE": "[MIN_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["minim"],
            "properties": ["fluid volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[fdr_us]", {
      type: "literal",
      value: "[fdr_us]",
      description: "\"[fdr_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[fdr_us]": 1
        },
        "metadata": {
          "[fdr_us]": {
            "isBase": false,
            "CODE": "[FDR_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["fluid dram"],
            "properties": ["fluid volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[foz_us]", {
      type: "literal",
      value: "[foz_us]",
      description: "\"[foz_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[foz_us]": 1
        },
        "metadata": {
          "[foz_us]": {
            "isBase": false,
            "CODE": "[FOZ_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["fluid ounce"],
            "printSymbols": ["oz fl"],
            "properties": ["fluid volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[gil_us]", {
      type: "literal",
      value: "[gil_us]",
      description: "\"[gil_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[gil_us]": 1
        },
        "metadata": {
          "[gil_us]": {
            "isBase": false,
            "CODE": "[GIL_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["gill"],
            "properties": ["fluid volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[bbl_us]", {
      type: "literal",
      value: "[bbl_us]",
      description: "\"[bbl_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[bbl_us]": 1
        },
        "metadata": {
          "[bbl_us]": {
            "isBase": false,
            "CODE": "[BBL_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["barrel"],
            "properties": ["fluid volume"],
            "values": [{
              "printable": "42",
              "numeric": 42
            }]
          }
        }
      };
    }, "[gal_us]", {
      type: "literal",
      value: "[gal_us]",
      description: "\"[gal_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[gal_us]": 1
        },
        "metadata": {
          "[gal_us]": {
            "isBase": false,
            "CODE": "[GAL_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["Queen Anne's wine gallon"],
            "properties": ["fluid volume"],
            "values": [{
              "printable": "231",
              "numeric": 231
            }]
          }
        }
      };
    }, "[acr_br]", {
      type: "literal",
      value: "[acr_br]",
      description: "\"[acr_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[acr_br]": 1
        },
        "metadata": {
          "[acr_br]": {
            "isBase": false,
            "CODE": "[ACR_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["acre"],
            "properties": ["area"],
            "values": [{
              "printable": "4840",
              "numeric": 4840
            }]
          }
        }
      };
    }, "[nmi_br]", {
      type: "literal",
      value: "[nmi_br]",
      description: "\"[nmi_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[nmi_br]": 1
        },
        "metadata": {
          "[nmi_br]": {
            "isBase": false,
            "CODE": "[NMI_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["nautical mile"],
            "properties": ["length"],
            "values": [{
              "printable": "6080",
              "numeric": 6080
            }]
          }
        }
      };
    }, "[fth_br]", {
      type: "literal",
      value: "[fth_br]",
      description: "\"[fth_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[fth_br]": 1
        },
        "metadata": {
          "[fth_br]": {
            "isBase": false,
            "CODE": "[FTH_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["fathom"],
            "properties": ["length"],
            "values": [{
              "printable": "6",
              "numeric": 6
            }]
          }
        }
      };
    }, "[mil_us]", {
      type: "literal",
      value: "[mil_us]",
      description: "\"[mil_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[mil_us]": 1
        },
        "metadata": {
          "[mil_us]": {
            "isBase": false,
            "CODE": "[MIL_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["mil"],
            "properties": ["length"],
            "values": [{
              "printable": "1 &#215; 10<sup>-3</sup>",
              "numeric": 0.001
            }]
          }
        }
      };
    }, "[smi_us]", {
      type: "literal",
      value: "[smi_us]",
      description: "\"[smi_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[smi_us]": 1
        },
        "metadata": {
          "[smi_us]": {
            "isBase": false,
            "CODE": "[SMI_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["square mile"],
            "properties": ["area"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[acr_us]", {
      type: "literal",
      value: "[acr_us]",
      description: "\"[acr_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[acr_us]": 1
        },
        "metadata": {
          "[acr_us]": {
            "isBase": false,
            "CODE": "[ACR_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["acre"],
            "properties": ["area"],
            "values": [{
              "printable": "160",
              "numeric": 160
            }]
          }
        }
      };
    }, "[fur_us]", {
      type: "literal",
      value: "[fur_us]",
      description: "\"[fur_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[fur_us]": 1
        },
        "metadata": {
          "[fur_us]": {
            "isBase": false,
            "CODE": "[FUR_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["furlong"],
            "properties": ["length"],
            "values": [{
              "printable": "40",
              "numeric": 40
            }]
          }
        }
      };
    }, "[fth_us]", {
      type: "literal",
      value: "[fth_us]",
      description: "\"[fth_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[fth_us]": 1
        },
        "metadata": {
          "[fth_us]": {
            "isBase": false,
            "CODE": "[FTH_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["fathom"],
            "properties": ["length"],
            "values": [{
              "printable": "6",
              "numeric": 6
            }]
          }
        }
      };
    }, "[rlk_us]", {
      type: "literal",
      value: "[rlk_us]",
      description: "\"[rlk_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[rlk_us]": 1
        },
        "metadata": {
          "[rlk_us]": {
            "isBase": false,
            "CODE": "[RLK_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["link for Ramden's chain"],
            "properties": ["length"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[rch_us]", {
      type: "literal",
      value: "[rch_us]",
      description: "\"[rch_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[rch_us]": 1
        },
        "metadata": {
          "[rch_us]": {
            "isBase": false,
            "CODE": "[RCH_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["Ramden's chain", "Engineer's chain"],
            "properties": ["length"],
            "values": [{
              "printable": "100",
              "numeric": 100
            }]
          }
        }
      };
    }, "[lbf_av]", {
      type: "literal",
      value: "[lbf_av]",
      description: "\"[lbf_av]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[lbf_av]": 1
        },
        "metadata": {
          "[lbf_av]": {
            "isBase": false,
            "CODE": "[LBF_AV]",
            "isMetric": "no",
            "class": "const",
            "names": ["pound force"],
            "printSymbols": ["lbf"],
            "properties": ["force"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[hnsf'U]", {
      type: "literal",
      value: "[hnsf'U]",
      description: "\"[hnsf'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[hnsf'U]": 1
        },
        "metadata": {
          "[hnsf'U]": {
            "isBase": false,
            "CODE": "[HNSF'U]",
            "isMetric": "no",
            "class": "clinical",
            "names": ["Hounsfield unit"],
            "printSymbols": ["HF"],
            "properties": ["x-ray attenuation"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[mesh_i]", {
      type: "literal",
      value: "[mesh_i]",
      description: "\"[mesh_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[mesh_i]": 1
        },
        "metadata": {
          "[mesh_i]": {
            "isBase": false,
            "CODE": "[MESH_I]",
            "isMetric": "no",
            "class": "clinical",
            "names": ["mesh"],
            "properties": ["lineic number"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "%[slope]", {
      type: "literal",
      value: "%[slope]",
      description: "\"%[slope]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "%[slope]": 1
        },
        "metadata": {
          "%[slope]": {
            "isBase": false,
            "CODE": "%[SLOPE]",
            "isMetric": "no",
            "isSpecial": "yes",
            "class": "clinical",
            "names": ["percent of slope"],
            "printSymbols": ["%"],
            "properties": ["slope"],
            "values": [{
              "printable": "<function name=\"100tan\" value=\"1\" Unit=\"deg\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[p'diop]", {
      type: "literal",
      value: "[p'diop]",
      description: "\"[p'diop]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[p'diop]": 1
        },
        "metadata": {
          "[p'diop]": {
            "isBase": false,
            "CODE": "[P'DIOP]",
            "isMetric": "no",
            "isSpecial": "yes",
            "class": "clinical",
            "names": ["prism diopter"],
            "printSymbols": ["PD"],
            "properties": ["refraction of a prism"],
            "values": [{
              "printable": "<function name=\"tanTimes100\" value=\"1\" Unit=\"deg\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[gil_br]", {
      type: "literal",
      value: "[gil_br]",
      description: "\"[gil_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[gil_br]": 1
        },
        "metadata": {
          "[gil_br]": {
            "isBase": false,
            "CODE": "[GIL_BR]",
            "isMetric": "no",
            "class": "brit-volumes",
            "names": ["gill"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[wood'U]", {
      type: "literal",
      value: "[wood'U]",
      description: "\"[wood'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[wood'U]": 1
        },
        "metadata": {
          "[wood'U]": {
            "isBase": false,
            "CODE": "[WOOD'U]",
            "isMetric": "no",
            "class": "clinical",
            "names": ["Wood unit"],
            "printSymbols": ["Wood U."],
            "properties": ["fluid resistance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "cal_[15]", {
      type: "literal",
      value: "cal_[15]",
      description: "\"cal_[15]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "cal_[15]": 1
        },
        "metadata": {
          "cal_[15]": {
            "isBase": false,
            "CODE": "CAL_[15]",
            "isMetric": "yes",
            "class": "heat",
            "names": ["calorie at 15 °C"],
            "printSymbols": ["cal<sub>15&#176;C</sub>"],
            "properties": ["energy"],
            "values": [{
              "printable": "4.18580",
              "numeric": 4.1858
            }]
          }
        }
      };
    }, "cal_[20]", {
      type: "literal",
      value: "cal_[20]",
      description: "\"cal_[20]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "cal_[20]": 1
        },
        "metadata": {
          "cal_[20]": {
            "isBase": false,
            "CODE": "CAL_[20]",
            "isMetric": "yes",
            "class": "heat",
            "names": ["calorie at 20 °C"],
            "printSymbols": ["cal<sub>20&#176;C</sub>"],
            "properties": ["energy"],
            "values": [{
              "printable": "4.18190",
              "numeric": 4.1819
            }]
          }
        }
      };
    }, "[foz_br]", {
      type: "literal",
      value: "[foz_br]",
      description: "\"[foz_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[foz_br]": 1
        },
        "metadata": {
          "[foz_br]": {
            "isBase": false,
            "CODE": "[FOZ_BR]",
            "isMetric": "no",
            "class": "brit-volumes",
            "names": ["fluid ounce"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[fdr_br]", {
      type: "literal",
      value: "[fdr_br]",
      description: "\"[fdr_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[fdr_br]": 1
        },
        "metadata": {
          "[fdr_br]": {
            "isBase": false,
            "CODE": "[FDR_BR]",
            "isMetric": "no",
            "class": "brit-volumes",
            "names": ["fluid dram"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[srd_us]", {
      type: "literal",
      value: "[srd_us]",
      description: "\"[srd_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[srd_us]": 1
        },
        "metadata": {
          "[srd_us]": {
            "isBase": false,
            "CODE": "[SRD_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["square rod"],
            "properties": ["area"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[min_br]", {
      type: "literal",
      value: "[min_br]",
      description: "\"[min_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[min_br]": 1
        },
        "metadata": {
          "[min_br]": {
            "isBase": false,
            "CODE": "[MIN_BR]",
            "isMetric": "no",
            "class": "brit-volumes",
            "names": ["minim"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[EID_50]", {
      type: "literal",
      value: "[EID_50]",
      description: "\"[EID_50]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[EID_50]": 1
        },
        "metadata": {
          "[EID_50]": {
            "isBase": false,
            "CODE": "[EID_50]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["50% embryo infectious dose"],
            "printSymbols": ["EID<sub>50</sub>"],
            "properties": ["biologic activity (infectivity) of an infectious agent preparation"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[Btu_th]", {
      type: "literal",
      value: "[Btu_th]",
      description: "\"[Btu_th]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[Btu_th]": 1
        },
        "metadata": {
          "[Btu_th]": {
            "isBase": false,
            "CODE": "[BTU_TH]",
            "isMetric": "no",
            "class": "heat",
            "names": ["thermochemical British thermal unit"],
            "printSymbols": ["Btu<sub>th</sub>"],
            "properties": ["energy"],
            "values": [{
              "printable": "1.054350",
              "numeric": 1.05435
            }]
          }
        }
      };
    }, "[Btu_IT]", {
      type: "literal",
      value: "[Btu_IT]",
      description: "\"[Btu_IT]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[Btu_IT]": 1
        },
        "metadata": {
          "[Btu_IT]": {
            "isBase": false,
            "CODE": "[BTU_IT]",
            "isMetric": "no",
            "class": "heat",
            "names": ["international table British thermal unit"],
            "printSymbols": ["Btu<sub>IT</sub>"],
            "properties": ["energy"],
            "values": [{
              "printable": "1.05505585262",
              "numeric": 1.05505585262
            }]
          }
        }
      };
    }, "[car_Au]", {
      type: "literal",
      value: "[car_Au]",
      description: "\"[car_Au]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[car_Au]": 1
        },
        "metadata": {
          "[car_Au]": {
            "isBase": false,
            "CODE": "[CAR_AU]",
            "isMetric": "no",
            "class": "misc",
            "names": ["carat of gold alloys"],
            "printSymbols": ["ct<sub>\n            <r>Au</r>\n         </sub>"],
            "properties": ["mass fraction"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[Btu_60]", {
      type: "literal",
      value: "[Btu_60]",
      description: "\"[Btu_60]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[Btu_60]": 1
        },
        "metadata": {
          "[Btu_60]": {
            "isBase": false,
            "CODE": "[BTU_60]",
            "isMetric": "no",
            "class": "heat",
            "names": ["British thermal unit at 60 °F"],
            "printSymbols": ["Btu<sub>60&#176;F</sub>"],
            "properties": ["energy"],
            "values": [{
              "printable": "1.05468",
              "numeric": 1.05468
            }]
          }
        }
      };
    }, "[Btu_59]", {
      type: "literal",
      value: "[Btu_59]",
      description: "\"[Btu_59]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[Btu_59]": 1
        },
        "metadata": {
          "[Btu_59]": {
            "isBase": false,
            "CODE": "[BTU_59]",
            "isMetric": "no",
            "class": "heat",
            "names": ["British thermal unit at 59 °F"],
            "printSymbols": ["Btu<sub>59&#176;F</sub>"],
            "properties": ["energy"],
            "values": [{
              "printable": "1.05480",
              "numeric": 1.0548
            }]
          }
        }
      };
    }, "[Btu_39]", {
      type: "literal",
      value: "[Btu_39]",
      description: "\"[Btu_39]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[Btu_39]": 1
        },
        "metadata": {
          "[Btu_39]": {
            "isBase": false,
            "CODE": "[BTU_39]",
            "isMetric": "no",
            "class": "heat",
            "names": ["British thermal unit at 39 °F"],
            "printSymbols": ["Btu<sub>39&#176;F</sub>"],
            "properties": ["energy"],
            "values": [{
              "printable": "1.05967",
              "numeric": 1.05967
            }]
          }
        }
      };
    }, "[cup_us]", {
      type: "literal",
      value: "[cup_us]",
      description: "\"[cup_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[cup_us]": 1
        },
        "metadata": {
          "[cup_us]": {
            "isBase": false,
            "CODE": "[CUP_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["cup"],
            "properties": ["volume"],
            "values": [{
              "printable": "16",
              "numeric": 16
            }]
          }
        }
      };
    }, "B[10.nV]", {
      type: "literal",
      value: "B[10.nV]",
      description: "\"B[10.nV]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "B[10.nV]": 1
        },
        "metadata": {
          "B[10.nV]": {
            "isBase": false,
            "CODE": "B[10.NV]",
            "isMetric": "yes",
            "isSpecial": "yes",
            "class": "levels",
            "names": ["bel 10 nanovolt"],
            "printSymbols": ["B(10 nV)"],
            "properties": ["electric potential level"],
            "values": [{
              "printable": "<function name=\"lgTimes2\" value=\"10\" Unit=\"nV\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[tsp_us]", {
      type: "literal",
      value: "[tsp_us]",
      description: "\"[tsp_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[tsp_us]": 1
        },
        "metadata": {
          "[tsp_us]": {
            "isBase": false,
            "CODE": "[TSP_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["teaspoon"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[mclg'U]", {
      type: "literal",
      value: "[mclg'U]",
      description: "\"[mclg'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[mclg'U]": 1
        },
        "metadata": {
          "[mclg'U]": {
            "isBase": false,
            "CODE": "[MCLG'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["Mac Lagan unit"],
            "properties": ["arbitrary biologic activity"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[cicero]", {
      type: "literal",
      value: "[cicero]",
      description: "\"[cicero]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[cicero]": 1
        },
        "metadata": {
          "[cicero]": {
            "isBase": false,
            "CODE": "[CICERO]",
            "isMetric": "no",
            "class": "typeset",
            "names": ["cicero", "Didot's pica"],
            "properties": ["length"],
            "values": [{
              "printable": "12",
              "numeric": 12
            }]
          }
        }
      };
    }, "[pwt_tr]", {
      type: "literal",
      value: "[pwt_tr]",
      description: "\"[pwt_tr]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pwt_tr]": 1
        },
        "metadata": {
          "[pwt_tr]": {
            "isBase": false,
            "CODE": "[PWT_TR]",
            "isMetric": "no",
            "class": "troy",
            "names": ["pennyweight"],
            "printSymbols": ["dwt"],
            "properties": ["mass"],
            "values": [{
              "printable": "24",
              "numeric": 24
            }]
          }
        }
      };
    }, "[pnt_pr]", {
      type: "literal",
      value: "[pnt_pr]",
      description: "\"[pnt_pr]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pnt_pr]": 1
        },
        "metadata": {
          "[pnt_pr]": {
            "isBase": false,
            "CODE": "[PNT_PR]",
            "isMetric": "no",
            "class": "typeset",
            "names": ["Printer's point"],
            "properties": ["length"],
            "values": [{
              "printable": "0.013837",
              "numeric": 0.013837
            }]
          }
        }
      };
    }, "[pca_pr]", {
      type: "literal",
      value: "[pca_pr]",
      description: "\"[pca_pr]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pca_pr]": 1
        },
        "metadata": {
          "[pca_pr]": {
            "isBase": false,
            "CODE": "[PCA_PR]",
            "isMetric": "no",
            "class": "typeset",
            "names": ["Printer's pica"],
            "properties": ["length"],
            "values": [{
              "printable": "12",
              "numeric": 12
            }]
          }
        }
      };
    }, "[gal_br]", {
      type: "literal",
      value: "[gal_br]",
      description: "\"[gal_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[gal_br]": 1
        },
        "metadata": {
          "[gal_br]": {
            "isBase": false,
            "CODE": "[GAL_BR]",
            "isMetric": "no",
            "class": "brit-volumes",
            "names": ["gallon"],
            "properties": ["volume"],
            "values": [{
              "printable": "4.54609",
              "numeric": 4.54609
            }]
          }
        }
      };
    }, "[yd_us]", {
      type: "literal",
      value: "[yd_us]",
      description: "\"[yd_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[yd_us]": 1
        },
        "metadata": {
          "[yd_us]": {
            "isBase": false,
            "CODE": "[YD_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["yard"],
            "properties": ["length"],
            "values": [{
              "printable": "3",
              "numeric": 3
            }]
          }
        }
      };
    }, "[ligne]", {
      type: "literal",
      value: "[ligne]",
      description: "\"[ligne]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ligne]": 1
        },
        "metadata": {
          "[ligne]": {
            "isBase": false,
            "CODE": "[LIGNE]",
            "isMetric": "no",
            "class": "typeset",
            "names": ["ligne", "French line"],
            "properties": ["length"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[tbs_m]", {
      type: "literal",
      value: "[tbs_m]",
      description: "\"[tbs_m]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[tbs_m]": 1
        },
        "metadata": {
          "[tbs_m]": {
            "isBase": false,
            "CODE": "[TBS_M]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["metric tablespoon"],
            "properties": ["volume"],
            "values": [{
              "printable": "15",
              "numeric": 15
            }]
          }
        }
      };
    }, "[lb_ap]", {
      type: "literal",
      value: "[lb_ap]",
      description: "\"[lb_ap]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[lb_ap]": 1
        },
        "metadata": {
          "[lb_ap]": {
            "isBase": false,
            "CODE": "[LB_AP]",
            "isMetric": "no",
            "class": "apoth",
            "names": ["pound"],
            "printSymbols": ["<strike>lb</strike>"],
            "properties": ["mass"],
            "values": [{
              "printable": "12",
              "numeric": 12
            }]
          }
        }
      };
    }, "[oz_ap]", {
      type: "literal",
      value: "[oz_ap]",
      description: "\"[oz_ap]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[oz_ap]": 1
        },
        "metadata": {
          "[oz_ap]": {
            "isBase": false,
            "CODE": "[OZ_AP]",
            "isMetric": "no",
            "class": "apoth",
            "names": ["ounce"],
            "printSymbols": ["&#8485;"],
            "properties": ["mass"],
            "values": [{
              "printable": "8",
              "numeric": 8
            }]
          }
        }
      };
    }, "[dr_ap]", {
      type: "literal",
      value: "[dr_ap]",
      description: "\"[dr_ap]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[dr_ap]": 1
        },
        "metadata": {
          "[dr_ap]": {
            "isBase": false,
            "CODE": "[DR_AP]",
            "isMetric": "no",
            "class": "apoth",
            "names": ["dram", "drachm"],
            "printSymbols": ["&#658;"],
            "properties": ["mass"],
            "values": [{
              "printable": "3",
              "numeric": 3
            }]
          }
        }
      };
    }, "[sc_ap]", {
      type: "literal",
      value: "[sc_ap]",
      description: "\"[sc_ap]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[sc_ap]": 1
        },
        "metadata": {
          "[sc_ap]": {
            "isBase": false,
            "CODE": "[SC_AP]",
            "isMetric": "no",
            "class": "apoth",
            "names": ["scruple"],
            "printSymbols": ["&#8456;"],
            "properties": ["mass"],
            "values": [{
              "printable": "20",
              "numeric": 20
            }]
          }
        }
      };
    }, "[tsp_m]", {
      type: "literal",
      value: "[tsp_m]",
      description: "\"[tsp_m]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[tsp_m]": 1
        },
        "metadata": {
          "[tsp_m]": {
            "isBase": false,
            "CODE": "[TSP_M]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["metric teaspoon"],
            "properties": ["volume"],
            "values": [{
              "printable": "5",
              "numeric": 5
            }]
          }
        }
      };
    }, "[cup_m]", {
      type: "literal",
      value: "[cup_m]",
      description: "\"[cup_m]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[cup_m]": 1
        },
        "metadata": {
          "[cup_m]": {
            "isBase": false,
            "CODE": "[CUP_M]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["metric cup"],
            "properties": ["volume"],
            "values": [{
              "printable": "240",
              "numeric": 240
            }]
          }
        }
      };
    }, "[lb_tr]", {
      type: "literal",
      value: "[lb_tr]",
      description: "\"[lb_tr]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[lb_tr]": 1
        },
        "metadata": {
          "[lb_tr]": {
            "isBase": false,
            "CODE": "[LB_TR]",
            "isMetric": "no",
            "class": "troy",
            "names": ["troy pound"],
            "printSymbols": ["lb t"],
            "properties": ["mass"],
            "values": [{
              "printable": "12",
              "numeric": 12
            }]
          }
        }
      };
    }, "[oz_tr]", {
      type: "literal",
      value: "[oz_tr]",
      description: "\"[oz_tr]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[oz_tr]": 1
        },
        "metadata": {
          "[oz_tr]": {
            "isBase": false,
            "CODE": "[OZ_TR]",
            "isMetric": "no",
            "class": "troy",
            "names": ["troy ounce"],
            "printSymbols": ["oz t"],
            "properties": ["mass"],
            "values": [{
              "printable": "20",
              "numeric": 20
            }]
          }
        }
      };
    }, "[didot]", {
      type: "literal",
      value: "[didot]",
      description: "\"[didot]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[didot]": 1
        },
        "metadata": {
          "[didot]": {
            "isBase": false,
            "CODE": "[DIDOT]",
            "isMetric": "no",
            "class": "typeset",
            "names": ["didot", "Didot's point"],
            "properties": ["length"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[foz_m]", {
      type: "literal",
      value: "[foz_m]",
      description: "\"[foz_m]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[foz_m]": 1
        },
        "metadata": {
          "[foz_m]": {
            "isBase": false,
            "CODE": "[FOZ_M]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["metric fluid ounce"],
            "printSymbols": ["oz fl"],
            "properties": ["fluid volume"],
            "values": [{
              "printable": "30",
              "numeric": 30
            }]
          }
        }
      };
    }, "[car_m]", {
      type: "literal",
      value: "[car_m]",
      description: "\"[car_m]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[car_m]": 1
        },
        "metadata": {
          "[car_m]": {
            "isBase": false,
            "CODE": "[CAR_M]",
            "isMetric": "no",
            "class": "misc",
            "names": ["metric carat"],
            "printSymbols": ["ct<sub>m</sub>"],
            "properties": ["mass"],
            "values": [{
              "printable": "0.2",
              "numeric": 0.2
            }]
          }
        }
      };
    }, "[smoot]", {
      type: "literal",
      value: "[smoot]",
      description: "\"[smoot]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[smoot]": 1
        },
        "metadata": {
          "[smoot]": {
            "isBase": false,
            "CODE": "[SMOOT]",
            "isMetric": "no",
            "class": "misc",
            "names": ["Smoot"],
            "printSymbols": [""],
            "properties": ["length"],
            "values": [{
              "printable": "67",
              "numeric": 67
            }]
          }
        }
      };
    }, "[knk'U]", {
      type: "literal",
      value: "[knk'U]",
      description: "\"[knk'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[knk'U]": 1
        },
        "metadata": {
          "[knk'U]": {
            "isBase": false,
            "CODE": "[KNK'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["Kunkel unit"],
            "properties": ["arbitrary biologic activity"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[Btu_m]", {
      type: "literal",
      value: "[Btu_m]",
      description: "\"[Btu_m]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[Btu_m]": 1
        },
        "metadata": {
          "[Btu_m]": {
            "isBase": false,
            "CODE": "[BTU_M]",
            "isMetric": "no",
            "class": "heat",
            "names": ["mean British thermal unit"],
            "printSymbols": ["Btu<sub>m</sub>"],
            "properties": ["energy"],
            "values": [{
              "printable": "1.05587",
              "numeric": 1.05587
            }]
          }
        }
      };
    }, "[dr_av]", {
      type: "literal",
      value: "[dr_av]",
      description: "\"[dr_av]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[dr_av]": 1
        },
        "metadata": {
          "[dr_av]": {
            "isBase": false,
            "CODE": "[DR_AV]",
            "isMetric": "no",
            "class": "avoirdupois",
            "names": ["dram"],
            "properties": ["mass"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[oz_av]", {
      type: "literal",
      value: "[oz_av]",
      description: "\"[oz_av]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[oz_av]": 1
        },
        "metadata": {
          "[oz_av]": {
            "isBase": false,
            "CODE": "[OZ_AV]",
            "isMetric": "no",
            "class": "avoirdupois",
            "names": ["ounce"],
            "printSymbols": ["oz"],
            "properties": ["mass"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[lb_av]", {
      type: "literal",
      value: "[lb_av]",
      description: "\"[lb_av]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[lb_av]": 1
        },
        "metadata": {
          "[lb_av]": {
            "isBase": false,
            "CODE": "[LB_AV]",
            "isMetric": "no",
            "class": "avoirdupois",
            "names": ["pound"],
            "printSymbols": ["lb"],
            "properties": ["mass"],
            "values": [{
              "printable": "7000",
              "numeric": 7000
            }]
          }
        }
      };
    }, "[dye'U]", {
      type: "literal",
      value: "[dye'U]",
      description: "\"[dye'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[dye'U]": 1
        },
        "metadata": {
          "[dye'U]": {
            "isBase": false,
            "CODE": "[DYE'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["Dye unit"],
            "properties": ["biologic activity of amylase"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[pk_us]", {
      type: "literal",
      value: "[pk_us]",
      description: "\"[pk_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pk_us]": 1
        },
        "metadata": {
          "[pk_us]": {
            "isBase": false,
            "CODE": "[PK_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["peck"],
            "properties": ["dry volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[APL'U]", {
      type: "literal",
      value: "[APL'U]",
      description: "\"[APL'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[APL'U]": 1
        },
        "metadata": {
          "[APL'U]": {
            "isBase": false,
            "CODE": "[APL'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["APL unit"],
            "properties": ["biologic activity of anticardiolipin IgA"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[bu_us]", {
      type: "literal",
      value: "[bu_us]",
      description: "\"[bu_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[bu_us]": 1
        },
        "metadata": {
          "[bu_us]": {
            "isBase": false,
            "CODE": "[BU_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["bushel"],
            "properties": ["dry volume"],
            "values": [{
              "printable": "2150.42",
              "numeric": 2150.42
            }]
          }
        }
      };
    }, "[pt_br]", {
      type: "literal",
      value: "[pt_br]",
      description: "\"[pt_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pt_br]": 1
        },
        "metadata": {
          "[pt_br]": {
            "isBase": false,
            "CODE": "[PT_BR]",
            "isMetric": "no",
            "class": "brit-volumes",
            "names": ["pint"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[qt_br]", {
      type: "literal",
      value: "[qt_br]",
      description: "\"[qt_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[qt_br]": 1
        },
        "metadata": {
          "[qt_br]": {
            "isBase": false,
            "CODE": "[QT_BR]",
            "isMetric": "no",
            "class": "brit-volumes",
            "names": ["quart"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[bu_br]", {
      type: "literal",
      value: "[bu_br]",
      description: "\"[bu_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[bu_br]": 1
        },
        "metadata": {
          "[bu_br]": {
            "isBase": false,
            "CODE": "[BU_BR]",
            "isMetric": "no",
            "class": "brit-volumes",
            "names": ["bushel"],
            "properties": ["volume"],
            "values": [{
              "printable": "4",
              "numeric": 4
            }]
          }
        }
      };
    }, "[hp'_X]", {
      type: "literal",
      value: "[hp'_X]",
      description: "\"[hp'_X]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[hp'_X]": 1
        },
        "metadata": {
          "[hp'_X]": {
            "isBase": false,
            "CODE": "[HP'_X]",
            "isMetric": "no",
            "isSpecial": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of decimal series (retired)"],
            "printSymbols": ["X"],
            "properties": ["homeopathic potency (retired)"],
            "values": [{
              "printable": "<function name=\"hpX\" value=\"1\" Unit=\"1\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[MPL'U]", {
      type: "literal",
      value: "[MPL'U]",
      description: "\"[MPL'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[MPL'U]": 1
        },
        "metadata": {
          "[MPL'U]": {
            "isBase": false,
            "CODE": "[MPL'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["MPL unit"],
            "properties": ["biologic activity of anticardiolipin IgM"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[GPL'U]", {
      type: "literal",
      value: "[GPL'U]",
      description: "\"[GPL'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[GPL'U]": 1
        },
        "metadata": {
          "[GPL'U]": {
            "isBase": false,
            "CODE": "[GPL'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["GPL unit"],
            "properties": ["biologic activity of anticardiolipin IgG"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[USP'U]", {
      type: "literal",
      value: "[USP'U]",
      description: "\"[USP'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[USP'U]": 1
        },
        "metadata": {
          "[USP'U]": {
            "isBase": false,
            "CODE": "[USP'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["United States Pharmacopeia unit"],
            "printSymbols": ["U.S.P."],
            "properties": ["arbitrary"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[eps_0]", {
      type: "literal",
      value: "[eps_0]",
      description: "\"[eps_0]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[eps_0]": 1
        },
        "metadata": {
          "[eps_0]": {
            "isBase": false,
            "CODE": "[EPS_0]",
            "isMetric": "yes",
            "class": "const",
            "names": ["permittivity of vacuum"],
            "printSymbols": ["<i>&#949;<sub>\n               <r>0</r>\n            </sub>\n         </i>"],
            "properties": ["electric permittivity"],
            "values": [{
              "printable": "8.854187817 &#215; 10<sup>-12</sup>",
              "numeric": 8.854187817e-12
            }]
          }
        }
      };
    }, "[fth_i]", {
      type: "literal",
      value: "[fth_i]",
      description: "\"[fth_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[fth_i]": 1
        },
        "metadata": {
          "[fth_i]": {
            "isBase": false,
            "CODE": "[FTH_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["fathom"],
            "printSymbols": ["fth"],
            "properties": ["depth of water"],
            "values": [{
              "printable": "6",
              "numeric": 6
            }]
          }
        }
      };
    }, "[nmi_i]", {
      type: "literal",
      value: "[nmi_i]",
      description: "\"[nmi_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[nmi_i]": 1
        },
        "metadata": {
          "[nmi_i]": {
            "isBase": false,
            "CODE": "[NMI_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["nautical mile"],
            "printSymbols": ["n.mi"],
            "properties": ["length"],
            "values": [{
              "printable": "1852",
              "numeric": 1852
            }]
          }
        }
      };
    }, "[pt_us]", {
      type: "literal",
      value: "[pt_us]",
      description: "\"[pt_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pt_us]": 1
        },
        "metadata": {
          "[pt_us]": {
            "isBase": false,
            "CODE": "[PT_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["pint"],
            "properties": ["fluid volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[sin_i]", {
      type: "literal",
      value: "[sin_i]",
      description: "\"[sin_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[sin_i]": 1
        },
        "metadata": {
          "[sin_i]": {
            "isBase": false,
            "CODE": "[SIN_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["square inch"],
            "properties": ["area"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[sft_i]", {
      type: "literal",
      value: "[sft_i]",
      description: "\"[sft_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[sft_i]": 1
        },
        "metadata": {
          "[sft_i]": {
            "isBase": false,
            "CODE": "[SFT_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["square foot"],
            "properties": ["area"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[syd_i]", {
      type: "literal",
      value: "[syd_i]",
      description: "\"[syd_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[syd_i]": 1
        },
        "metadata": {
          "[syd_i]": {
            "isBase": false,
            "CODE": "[SYD_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["square yard"],
            "properties": ["area"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[cin_i]", {
      type: "literal",
      value: "[cin_i]",
      description: "\"[cin_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[cin_i]": 1
        },
        "metadata": {
          "[cin_i]": {
            "isBase": false,
            "CODE": "[CIN_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["cubic inch"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[cft_i]", {
      type: "literal",
      value: "[cft_i]",
      description: "\"[cft_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[cft_i]": 1
        },
        "metadata": {
          "[cft_i]": {
            "isBase": false,
            "CODE": "[CFT_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["cubic foot"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[cyd_i]", {
      type: "literal",
      value: "[cyd_i]",
      description: "\"[cyd_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[cyd_i]": 1
        },
        "metadata": {
          "[cyd_i]": {
            "isBase": false,
            "CODE": "[CYD_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["cubic yard"],
            "printSymbols": ["cu.yd"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[qt_us]", {
      type: "literal",
      value: "[qt_us]",
      description: "\"[qt_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[qt_us]": 1
        },
        "metadata": {
          "[qt_us]": {
            "isBase": false,
            "CODE": "[QT_US]",
            "isMetric": "no",
            "class": "us-volumes",
            "names": ["quart"],
            "properties": ["fluid volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[arb'U]", {
      type: "literal",
      value: "[arb'U]",
      description: "\"[arb'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[arb'U]": 1
        },
        "metadata": {
          "[arb'U]": {
            "isBase": false,
            "CODE": "[ARB'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["arbitary unit"],
            "printSymbols": ["arb. U"],
            "properties": ["arbitrary"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[mil_i]", {
      type: "literal",
      value: "[mil_i]",
      description: "\"[mil_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[mil_i]": 1
        },
        "metadata": {
          "[mil_i]": {
            "isBase": false,
            "CODE": "[MIL_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["mil"],
            "printSymbols": ["mil"],
            "properties": ["length"],
            "values": [{
              "printable": "1 &#215; 10<sup>-3</sup>",
              "numeric": 0.001
            }]
          }
        }
      };
    }, "[cml_i]", {
      type: "literal",
      value: "[cml_i]",
      description: "\"[cml_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[cml_i]": 1
        },
        "metadata": {
          "[cml_i]": {
            "isBase": false,
            "CODE": "[CML_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["circular mil"],
            "printSymbols": ["circ.mil"],
            "properties": ["area"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[kn_br]", {
      type: "literal",
      value: "[kn_br]",
      description: "\"[kn_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[kn_br]": 1
        },
        "metadata": {
          "[kn_br]": {
            "isBase": false,
            "CODE": "[KN_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["knot"],
            "properties": ["velocity"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[ft_us]", {
      type: "literal",
      value: "[ft_us]",
      description: "\"[ft_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ft_us]": 1
        },
        "metadata": {
          "[ft_us]": {
            "isBase": false,
            "CODE": "[FT_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["foot"],
            "printSymbols": ["ft<sub>us</sub>"],
            "properties": ["length"],
            "values": [{
              "printable": "1200",
              "numeric": 1200
            }]
          }
        }
      };
    }, "[pouce]", {
      type: "literal",
      value: "[pouce]",
      description: "\"[pouce]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pouce]": 1
        },
        "metadata": {
          "[pouce]": {
            "isBase": false,
            "CODE": "[POUCE]",
            "isMetric": "no",
            "class": "typeset",
            "names": ["pouce", "French inch"],
            "properties": ["length"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[in_us]", {
      type: "literal",
      value: "[in_us]",
      description: "\"[in_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[in_us]": 1
        },
        "metadata": {
          "[in_us]": {
            "isBase": false,
            "CODE": "[IN_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["inch"],
            "properties": ["length"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[rd_us]", {
      type: "literal",
      value: "[rd_us]",
      description: "\"[rd_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[rd_us]": 1
        },
        "metadata": {
          "[rd_us]": {
            "isBase": false,
            "CODE": "[RD_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["rod"],
            "properties": ["length"],
            "values": [{
              "printable": "16.5",
              "numeric": 16.5
            }]
          }
        }
      };
    }, "[ch_us]", {
      type: "literal",
      value: "[ch_us]",
      description: "\"[ch_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ch_us]": 1
        },
        "metadata": {
          "[ch_us]": {
            "isBase": false,
            "CODE": "[CH_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["Gunter's chain", "Surveyor's chain"],
            "properties": ["length"],
            "values": [{
              "printable": "4",
              "numeric": 4
            }]
          }
        }
      };
    }, "[lk_us]", {
      type: "literal",
      value: "[lk_us]",
      description: "\"[lk_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[lk_us]": 1
        },
        "metadata": {
          "[lk_us]": {
            "isBase": false,
            "CODE": "[LK_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["link for Gunter's chain"],
            "properties": ["length"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[hp'_C]", {
      type: "literal",
      value: "[hp'_C]",
      description: "\"[hp'_C]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[hp'_C]": 1
        },
        "metadata": {
          "[hp'_C]": {
            "isBase": false,
            "CODE": "[HP'_C]",
            "isMetric": "no",
            "isSpecial": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of centesimal series (retired)"],
            "printSymbols": ["C"],
            "properties": ["homeopathic potency (retired)"],
            "values": [{
              "printable": "<function name=\"hpC\" value=\"1\" Unit=\"1\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[hp'_M]", {
      type: "literal",
      value: "[hp'_M]",
      description: "\"[hp'_M]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[hp'_M]": 1
        },
        "metadata": {
          "[hp'_M]": {
            "isBase": false,
            "CODE": "[HP'_M]",
            "isMetric": "no",
            "isSpecial": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of millesimal series (retired)"],
            "printSymbols": ["M"],
            "properties": ["homeopathic potency (retired)"],
            "values": [{
              "printable": "<function name=\"hpM\" value=\"1\" Unit=\"1\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[hp'_Q]", {
      type: "literal",
      value: "[hp'_Q]",
      description: "\"[hp'_Q]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[hp'_Q]": 1
        },
        "metadata": {
          "[hp'_Q]": {
            "isBase": false,
            "CODE": "[HP'_Q]",
            "isMetric": "no",
            "isSpecial": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of quintamillesimal series (retired)"],
            "printSymbols": ["Q"],
            "properties": ["homeopathic potency (retired)"],
            "values": [{
              "printable": "<function name=\"hpQ\" value=\"1\" Unit=\"1\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[mi_br]", {
      type: "literal",
      value: "[mi_br]",
      description: "\"[mi_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[mi_br]": 1
        },
        "metadata": {
          "[mi_br]": {
            "isBase": false,
            "CODE": "[MI_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["mile"],
            "properties": ["length"],
            "values": [{
              "printable": "5280",
              "numeric": 5280
            }]
          }
        }
      };
    }, "[mi_us]", {
      type: "literal",
      value: "[mi_us]",
      description: "\"[mi_us]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[mi_us]": 1
        },
        "metadata": {
          "[mi_us]": {
            "isBase": false,
            "CODE": "[MI_US]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["mile"],
            "properties": ["length"],
            "values": [{
              "printable": "8",
              "numeric": 8
            }]
          }
        }
      };
    }, "[yd_br]", {
      type: "literal",
      value: "[yd_br]",
      description: "\"[yd_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[yd_br]": 1
        },
        "metadata": {
          "[yd_br]": {
            "isBase": false,
            "CODE": "[YD_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["yard"],
            "properties": ["length"],
            "values": [{
              "printable": "3",
              "numeric": 3
            }]
          }
        }
      };
    }, "[pk_br]", {
      type: "literal",
      value: "[pk_br]",
      description: "\"[pk_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pk_br]": 1
        },
        "metadata": {
          "[pk_br]": {
            "isBase": false,
            "CODE": "[PK_BR]",
            "isMetric": "no",
            "class": "brit-volumes",
            "names": ["peck"],
            "properties": ["volume"],
            "values": [{
              "printable": "2",
              "numeric": 2
            }]
          }
        }
      };
    }, "[pc_br]", {
      type: "literal",
      value: "[pc_br]",
      description: "\"[pc_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pc_br]": 1
        },
        "metadata": {
          "[pc_br]": {
            "isBase": false,
            "CODE": "[PC_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["pace"],
            "properties": ["length"],
            "values": [{
              "printable": "2.5",
              "numeric": 2.5
            }]
          }
        }
      };
    }, "[lk_br]", {
      type: "literal",
      value: "[lk_br]",
      description: "\"[lk_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[lk_br]": 1
        },
        "metadata": {
          "[lk_br]": {
            "isBase": false,
            "CODE": "[LK_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["link for Gunter's chain"],
            "properties": ["length"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[in_br]", {
      type: "literal",
      value: "[in_br]",
      description: "\"[in_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[in_br]": 1
        },
        "metadata": {
          "[in_br]": {
            "isBase": false,
            "CODE": "[IN_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["inch"],
            "properties": ["length"],
            "values": [{
              "printable": "2.539998",
              "numeric": 2.539998
            }]
          }
        }
      };
    }, "[ft_br]", {
      type: "literal",
      value: "[ft_br]",
      description: "\"[ft_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ft_br]": 1
        },
        "metadata": {
          "[ft_br]": {
            "isBase": false,
            "CODE": "[FT_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["foot"],
            "properties": ["length"],
            "values": [{
              "printable": "12",
              "numeric": 12
            }]
          }
        }
      };
    }, "[rd_br]", {
      type: "literal",
      value: "[rd_br]",
      description: "\"[rd_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[rd_br]": 1
        },
        "metadata": {
          "[rd_br]": {
            "isBase": false,
            "CODE": "[RD_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["rod"],
            "properties": ["length"],
            "values": [{
              "printable": "16.5",
              "numeric": 16.5
            }]
          }
        }
      };
    }, "[ch_br]", {
      type: "literal",
      value: "[ch_br]",
      description: "\"[ch_br]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ch_br]": 1
        },
        "metadata": {
          "[ch_br]": {
            "isBase": false,
            "CODE": "[CH_BR]",
            "isMetric": "no",
            "class": "brit-length",
            "names": ["Gunter's chain"],
            "properties": ["length"],
            "values": [{
              "printable": "4",
              "numeric": 4
            }]
          }
        }
      };
    }, "[ft_i]", {
      type: "literal",
      value: "[ft_i]",
      description: "\"[ft_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ft_i]": 1
        },
        "metadata": {
          "[ft_i]": {
            "isBase": false,
            "CODE": "[FT_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["foot"],
            "printSymbols": ["ft"],
            "properties": ["length"],
            "values": [{
              "printable": "12",
              "numeric": 12
            }]
          }
        }
      };
    }, "[hp_Q]", {
      type: "literal",
      value: "[hp_Q]",
      description: "\"[hp_Q]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[hp_Q]": 1
        },
        "metadata": {
          "[hp_Q]": {
            "isBase": false,
            "CODE": "[HP_Q]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of quintamillesimal hahnemannian series"],
            "printSymbols": ["Q"],
            "properties": ["homeopathic potency (Hahnemann)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[hp_M]", {
      type: "literal",
      value: "[hp_M]",
      description: "\"[hp_M]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[hp_M]": 1
        },
        "metadata": {
          "[hp_M]": {
            "isBase": false,
            "CODE": "[HP_M]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of millesimal hahnemannian series"],
            "printSymbols": ["M"],
            "properties": ["homeopathic potency (Hahnemann)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[hp_C]", {
      type: "literal",
      value: "[hp_C]",
      description: "\"[hp_C]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[hp_C]": 1
        },
        "metadata": {
          "[hp_C]": {
            "isBase": false,
            "CODE": "[HP_C]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of centesimal hahnemannian series"],
            "printSymbols": ["C"],
            "properties": ["homeopathic potency (Hahnemann)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[hp_X]", {
      type: "literal",
      value: "[hp_X]",
      description: "\"[hp_X]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[hp_X]": 1
        },
        "metadata": {
          "[hp_X]": {
            "isBase": false,
            "CODE": "[HP_X]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of decimal hahnemannian series"],
            "printSymbols": ["X"],
            "properties": ["homeopathic potency (Hahnemann)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[kp_C]", {
      type: "literal",
      value: "[kp_C]",
      description: "\"[kp_C]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[kp_C]": 1
        },
        "metadata": {
          "[kp_C]": {
            "isBase": false,
            "CODE": "[KP_C]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of centesimal korsakovian series"],
            "printSymbols": ["C"],
            "properties": ["homeopathic potency (Korsakov)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[hd_i]", {
      type: "literal",
      value: "[hd_i]",
      description: "\"[hd_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[hd_i]": 1
        },
        "metadata": {
          "[hd_i]": {
            "isBase": false,
            "CODE": "[HD_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["hand"],
            "printSymbols": ["hd"],
            "properties": ["height of horses"],
            "values": [{
              "printable": "4",
              "numeric": 4
            }]
          }
        }
      };
    }, "[kp_M]", {
      type: "literal",
      value: "[kp_M]",
      description: "\"[kp_M]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[kp_M]": 1
        },
        "metadata": {
          "[kp_M]": {
            "isBase": false,
            "CODE": "[KP_M]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of millesimal korsakovian series"],
            "printSymbols": ["M"],
            "properties": ["homeopathic potency (Korsakov)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[kp_Q]", {
      type: "literal",
      value: "[kp_Q]",
      description: "\"[kp_Q]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[kp_Q]": 1
        },
        "metadata": {
          "[kp_Q]": {
            "isBase": false,
            "CODE": "[KP_Q]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of quintamillesimal korsakovian series"],
            "printSymbols": ["Q"],
            "properties": ["homeopathic potency (Korsakov)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[cr_i]", {
      type: "literal",
      value: "[cr_i]",
      description: "\"[cr_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[cr_i]": 1
        },
        "metadata": {
          "[cr_i]": {
            "isBase": false,
            "CODE": "[CR_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["cord"],
            "properties": ["volume"],
            "values": [{
              "printable": "128",
              "numeric": 128
            }]
          }
        }
      };
    }, "[bf_i]", {
      type: "literal",
      value: "[bf_i]",
      description: "\"[bf_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[bf_i]": 1
        },
        "metadata": {
          "[bf_i]": {
            "isBase": false,
            "CODE": "[BF_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["board foot"],
            "properties": ["volume"],
            "values": [{
              "printable": "144",
              "numeric": 144
            }]
          }
        }
      };
    }, "[kn_i]", {
      type: "literal",
      value: "[kn_i]",
      description: "\"[kn_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[kn_i]": 1
        },
        "metadata": {
          "[kn_i]": {
            "isBase": false,
            "CODE": "[KN_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["knot"],
            "printSymbols": ["knot"],
            "properties": ["velocity"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[mu_0]", {
      type: "literal",
      value: "[mu_0]",
      description: "\"[mu_0]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[mu_0]": 1
        },
        "metadata": {
          "[mu_0]": {
            "isBase": false,
            "CODE": "[MU_0]",
            "isMetric": "yes",
            "class": "const",
            "names": ["permeability of vacuum"],
            "printSymbols": ["<i>&#956;<sub>\n               <r>0</r>\n            </sub>\n         </i>"],
            "properties": ["magnetic permeability"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[mi_i]", {
      type: "literal",
      value: "[mi_i]",
      description: "\"[mi_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[mi_i]": 1
        },
        "metadata": {
          "[mi_i]": {
            "isBase": false,
            "CODE": "[MI_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["statute mile"],
            "printSymbols": ["mi"],
            "properties": ["length"],
            "values": [{
              "printable": "5280",
              "numeric": 5280
            }]
          }
        }
      };
    }, "[yd_i]", {
      type: "literal",
      value: "[yd_i]",
      description: "\"[yd_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[yd_i]": 1
        },
        "metadata": {
          "[yd_i]": {
            "isBase": false,
            "CODE": "[YD_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["yard"],
            "printSymbols": ["yd"],
            "properties": ["length"],
            "values": [{
              "printable": "3",
              "numeric": 3
            }]
          }
        }
      };
    }, "[kp_X]", {
      type: "literal",
      value: "[kp_X]",
      description: "\"[kp_X]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[kp_X]": 1
        },
        "metadata": {
          "[kp_X]": {
            "isBase": false,
            "CODE": "[KP_X]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "clinical",
            "names": ["homeopathic potency of decimal korsakovian series"],
            "printSymbols": ["X"],
            "properties": ["homeopathic potency (Korsakov)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[in_i]", {
      type: "literal",
      value: "[in_i]",
      description: "\"[in_i]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[in_i]": 1
        },
        "metadata": {
          "[in_i]": {
            "isBase": false,
            "CODE": "[IN_I]",
            "isMetric": "no",
            "class": "intcust",
            "names": ["inch"],
            "printSymbols": ["in"],
            "properties": ["length"],
            "values": [{
              "printable": "2.54",
              "numeric": 2.54
            }]
          }
        }
      };
    }, "[diop]", {
      type: "literal",
      value: "[diop]",
      description: "\"[diop]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[diop]": 1
        },
        "metadata": {
          "[diop]": {
            "isBase": false,
            "CODE": "[DIOP]",
            "isMetric": "no",
            "class": "clinical",
            "names": ["diopter"],
            "printSymbols": ["dpt"],
            "properties": ["refraction of a lens"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "cal_IT", {
      type: "literal",
      value: "cal_IT",
      description: "\"cal_IT\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "cal_IT": 1
        },
        "metadata": {
          "cal_IT": {
            "isBase": false,
            "CODE": "CAL_IT",
            "isMetric": "yes",
            "class": "heat",
            "names": ["international table calorie"],
            "printSymbols": ["cal<sub>IT</sub>"],
            "properties": ["energy"],
            "values": [{
              "printable": "4.1868",
              "numeric": 4.1868
            }]
          }
        }
      };
    }, "cal_th", {
      type: "literal",
      value: "cal_th",
      description: "\"cal_th\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "cal_th": 1
        },
        "metadata": {
          "cal_th": {
            "isBase": false,
            "CODE": "CAL_TH",
            "isMetric": "yes",
            "class": "heat",
            "names": ["thermochemical calorie"],
            "printSymbols": ["cal<sub>th</sub>"],
            "properties": ["energy"],
            "values": [{
              "printable": "4.184",
              "numeric": 4.184
            }]
          }
        }
      };
    }, "m[H2O]", {
      type: "literal",
      value: "m[H2O]",
      description: "\"m[H2O]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "m[H2O]": 1
        },
        "metadata": {
          "m[H2O]": {
            "isBase": false,
            "CODE": "M[H2O]",
            "isMetric": "yes",
            "class": "clinical",
            "names": ["meter of water column"],
            "printSymbols": ["m&#160;H<sub>\n            <r>2</r>\n         </sub>O"],
            "properties": ["pressure"],
            "values": [{
              "printable": "9.80665",
              "numeric": 9.80665
            }]
          }
        }
      };
    }, "[ka'U]", {
      type: "literal",
      value: "[ka'U]",
      description: "\"[ka'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ka'U]": 1
        },
        "metadata": {
          "[ka'U]": {
            "isBase": false,
            "CODE": "[KA'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["King-Armstrong unit"],
            "properties": ["biologic activity of phosphatase"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "B[SPL]", {
      type: "literal",
      value: "B[SPL]",
      description: "\"B[SPL]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "B[SPL]": 1
        },
        "metadata": {
          "B[SPL]": {
            "isBase": false,
            "CODE": "B[SPL]",
            "isMetric": "yes",
            "isSpecial": "yes",
            "class": "levels",
            "names": ["bel sound pressure"],
            "printSymbols": ["B(SPL)"],
            "properties": ["pressure level"],
            "values": [{
              "printable": "<function name=\"lgTimes2\" value=\"2\" Unit=\"10*-5.Pa\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[tb'U]", {
      type: "literal",
      value: "[tb'U]",
      description: "\"[tb'U]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[tb'U]": 1
        },
        "metadata": {
          "[tb'U]": {
            "isBase": false,
            "CODE": "[TB'U]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["tuberculin unit"],
            "properties": ["biologic activity of tuberculin"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[degR]", {
      type: "literal",
      value: "[degR]",
      description: "\"[degR]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[degR]": 1
        },
        "metadata": {
          "[degR]": {
            "isBase": false,
            "CODE": "[degR]",
            "isMetric": "no",
            "class": "heat",
            "names": ["degree Rankine"],
            "printSymbols": ["&#176;R"],
            "properties": ["temperature"],
            "values": [{
              "printable": "5",
              "numeric": 5
            }]
          }
        }
      };
    }, "[degF]", {
      type: "literal",
      value: "[degF]",
      description: "\"[degF]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[degF]": 1
        },
        "metadata": {
          "[degF]": {
            "isBase": false,
            "CODE": "[DEGF]",
            "isMetric": "no",
            "isSpecial": "yes",
            "class": "heat",
            "names": ["degree Fahrenheit"],
            "printSymbols": ["&#176;F"],
            "properties": ["temperature"],
            "values": [{
              "printable": "<function name=\"degF\" value=\"5\" Unit=\"K/9\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[pptr]", {
      type: "literal",
      value: "[pptr]",
      description: "\"[pptr]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pptr]": 1
        },
        "metadata": {
          "[pptr]": {
            "isBase": false,
            "CODE": "[PPTR]",
            "isMetric": "no",
            "class": "dimless",
            "names": ["parts per trillion"],
            "printSymbols": ["pptr"],
            "properties": ["fraction"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[ppth]", {
      type: "literal",
      value: "[ppth]",
      description: "\"[ppth]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ppth]": 1
        },
        "metadata": {
          "[ppth]": {
            "isBase": false,
            "CODE": "[PPTH]",
            "isMetric": "no",
            "class": "dimless",
            "names": ["parts per thousand"],
            "printSymbols": ["ppth"],
            "properties": ["fraction"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[oz_m]", {
      type: "literal",
      value: "[oz_m]",
      description: "\"[oz_m]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[oz_m]": 1
        },
        "metadata": {
          "[oz_m]": {
            "isBase": false,
            "CODE": "[OZ_M]",
            "isMetric": "no",
            "class": "apoth",
            "names": ["metric ounce"],
            "properties": ["mass"],
            "values": [{
              "printable": "28",
              "numeric": 28
            }]
          }
        }
      };
    }, "[pied]", {
      type: "literal",
      value: "[pied]",
      description: "\"[pied]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pied]": 1
        },
        "metadata": {
          "[pied]": {
            "isBase": false,
            "CODE": "[PIED]",
            "isMetric": "no",
            "class": "typeset",
            "names": ["pied", "French foot"],
            "properties": ["length"],
            "values": [{
              "printable": "32.48",
              "numeric": 32.48
            }]
          }
        }
      };
    }, "[ppm]", {
      type: "literal",
      value: "[ppm]",
      description: "\"[ppm]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ppm]": 1
        },
        "metadata": {
          "[ppm]": {
            "isBase": false,
            "CODE": "[PPM]",
            "isMetric": "no",
            "class": "dimless",
            "names": ["parts per million"],
            "printSymbols": ["ppm"],
            "properties": ["fraction"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[ppb]", {
      type: "literal",
      value: "[ppb]",
      description: "\"[ppb]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ppb]": 1
        },
        "metadata": {
          "[ppb]": {
            "isBase": false,
            "CODE": "[PPB]",
            "isMetric": "no",
            "class": "dimless",
            "names": ["parts per billion"],
            "printSymbols": ["ppb"],
            "properties": ["fraction"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "bit_s", {
      type: "literal",
      value: "bit_s",
      description: "\"bit_s\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "bit_s": 1
        },
        "metadata": {
          "bit_s": {
            "isBase": false,
            "CODE": "BIT_S",
            "isMetric": "no",
            "isSpecial": "yes",
            "class": "infotech",
            "names": ["bit"],
            "printSymbols": ["bit<sub>s</sub>"],
            "properties": ["amount of information"],
            "values": [{
              "printable": "<function name=\"ld\" value=\"1\" Unit=\"1\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[PNU]", {
      type: "literal",
      value: "[PNU]",
      description: "\"[PNU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[PNU]": 1
        },
        "metadata": {
          "[PNU]": {
            "isBase": false,
            "CODE": "[PNU]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["protein nitrogen unit"],
            "printSymbols": ["PNU"],
            "properties": ["procedure defined amount of a protein substance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[psi]", {
      type: "literal",
      value: "[psi]",
      description: "\"[psi]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[psi]": 1
        },
        "metadata": {
          "[psi]": {
            "isBase": false,
            "CODE": "[PSI]",
            "isMetric": "no",
            "class": "misc",
            "names": ["pound per sqare inch"],
            "printSymbols": ["psi"],
            "properties": ["pressure"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[BAU]", {
      type: "literal",
      value: "[BAU]",
      description: "\"[BAU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[BAU]": 1
        },
        "metadata": {
          "[BAU]": {
            "isBase": false,
            "CODE": "[BAU]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["bioequivalent allergen unit"],
            "printSymbols": ["BAU"],
            "properties": ["amount of an allergen callibrated through in-vivo testing based on the ID50EAL method of (intradermal dilution for 50mm sum of erythema diameters"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[Cal]", {
      type: "literal",
      value: "[Cal]",
      description: "\"[Cal]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[Cal]": 1
        },
        "metadata": {
          "[Cal]": {
            "isBase": false,
            "CODE": "[CAL]",
            "isMetric": "no",
            "class": "heat",
            "names": ["nutrition label Calories"],
            "printSymbols": ["Cal"],
            "properties": ["energy"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "B[mV]", {
      type: "literal",
      value: "B[mV]",
      description: "\"B[mV]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "B[mV]": 1
        },
        "metadata": {
          "B[mV]": {
            "isBase": false,
            "CODE": "B[MV]",
            "isMetric": "yes",
            "isSpecial": "yes",
            "class": "levels",
            "names": ["bel millivolt"],
            "printSymbols": ["B(mV)"],
            "properties": ["electric potential level"],
            "values": [{
              "printable": "<function name=\"lgTimes2\" value=\"1\" Unit=\"mV\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "B[uV]", {
      type: "literal",
      value: "B[uV]",
      description: "\"B[uV]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "B[uV]": 1
        },
        "metadata": {
          "B[uV]": {
            "isBase": false,
            "CODE": "B[UV]",
            "isMetric": "yes",
            "isSpecial": "yes",
            "class": "levels",
            "names": ["bel microvolt"],
            "printSymbols": ["B(&#956;V)"],
            "properties": ["electric potential level"],
            "values": [{
              "printable": "<function name=\"lgTimes2\" value=\"1\" Unit=\"uV\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[CFU]", {
      type: "literal",
      value: "[CFU]",
      description: "\"[CFU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[CFU]": 1
        },
        "metadata": {
          "[CFU]": {
            "isBase": false,
            "CODE": "[CFU]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["colony forming units"],
            "printSymbols": ["CFU"],
            "properties": ["amount of a proliferating organism"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[FFU]", {
      type: "literal",
      value: "[FFU]",
      description: "\"[FFU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[FFU]": 1
        },
        "metadata": {
          "[FFU]": {
            "isBase": false,
            "CODE": "[FFU]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["focus forming units"],
            "printSymbols": ["FFU"],
            "properties": ["amount of an infectious agent"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "B[kW]", {
      type: "literal",
      value: "B[kW]",
      description: "\"B[kW]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "B[kW]": 1
        },
        "metadata": {
          "B[kW]": {
            "isBase": false,
            "CODE": "B[KW]",
            "isMetric": "yes",
            "isSpecial": "yes",
            "class": "levels",
            "names": ["bel kilowatt"],
            "printSymbols": ["B(kW)"],
            "properties": ["power level"],
            "values": [{
              "printable": "<function name=\"lg\" value=\"1\" Unit=\"kW\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "[PFU]", {
      type: "literal",
      value: "[PFU]",
      description: "\"[PFU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[PFU]": 1
        },
        "metadata": {
          "[PFU]": {
            "isBase": false,
            "CODE": "[PFU]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["plaque forming units"],
            "printSymbols": ["PFU"],
            "properties": ["amount of an infectious agent"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "cal_m", {
      type: "literal",
      value: "cal_m",
      description: "\"cal_m\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "cal_m": 1
        },
        "metadata": {
          "cal_m": {
            "isBase": false,
            "CODE": "CAL_M",
            "isMetric": "yes",
            "class": "heat",
            "names": ["mean calorie"],
            "printSymbols": ["cal<sub>m</sub>"],
            "properties": ["energy"],
            "values": [{
              "printable": "4.19002",
              "numeric": 4.19002
            }]
          }
        }
      };
    }, "[ELU]", {
      type: "literal",
      value: "[ELU]",
      description: "\"[ELU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ELU]": 1
        },
        "metadata": {
          "[ELU]": {
            "isBase": false,
            "CODE": "[ELU]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["ELISA unit"],
            "printSymbols": [""],
            "properties": ["arbitrary ELISA unit"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[FEU]", {
      type: "literal",
      value: "[FEU]",
      description: "\"[FEU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[FEU]": 1
        },
        "metadata": {
          "[FEU]": {
            "isBase": false,
            "CODE": "[FEU]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["fibrinogen equivalent unit"],
            "printSymbols": [""],
            "properties": ["amount of fibrinogen broken down into the measured d-dimers"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[PRU]", {
      type: "literal",
      value: "[PRU]",
      description: "\"[PRU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[PRU]": 1
        },
        "metadata": {
          "[PRU]": {
            "isBase": false,
            "CODE": "[PRU]",
            "isMetric": "no",
            "class": "clinical",
            "names": ["peripheral vascular resistance unit"],
            "printSymbols": ["P.R.U."],
            "properties": ["fluid resistance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[m_e]", {
      type: "literal",
      value: "[m_e]",
      description: "\"[m_e]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[m_e]": 1
        },
        "metadata": {
          "[m_e]": {
            "isBase": false,
            "CODE": "[M_E]",
            "isMetric": "yes",
            "class": "const",
            "names": ["electron mass"],
            "printSymbols": ["<i>m<sub>\n               <r>e</r>\n            </sub>\n         </i>"],
            "properties": ["mass"],
            "values": [{
              "printable": "9.1093897 &#215; 10<sup>-28</sup>",
              "numeric": 9.1093897e-28
            }]
          }
        }
      };
    }, "[m_p]", {
      type: "literal",
      value: "[m_p]",
      description: "\"[m_p]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[m_p]": 1
        },
        "metadata": {
          "[m_p]": {
            "isBase": false,
            "CODE": "[M_P]",
            "isMetric": "yes",
            "class": "const",
            "names": ["proton mass"],
            "printSymbols": ["<i>m<sub>\n               <r>p</r>\n            </sub>\n         </i>"],
            "properties": ["mass"],
            "values": [{
              "printable": "1.6726231 &#215; 10<sup>-24</sup>",
              "numeric": 1.6726231e-24
            }]
          }
        }
      };
    }, "m[Hg]", {
      type: "literal",
      value: "m[Hg]",
      description: "\"m[Hg]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "m[Hg]": 1
        },
        "metadata": {
          "m[Hg]": {
            "isBase": false,
            "CODE": "M[HG]",
            "isMetric": "yes",
            "class": "clinical",
            "names": ["meter of mercury column"],
            "printSymbols": ["m&#160;Hg"],
            "properties": ["pressure"],
            "values": [{
              "printable": "133.3220",
              "numeric": 133.322
            }]
          }
        }
      };
    }, "[pca]", {
      type: "literal",
      value: "[pca]",
      description: "\"[pca]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pca]": 1
        },
        "metadata": {
          "[pca]": {
            "isBase": false,
            "CODE": "[PCA]",
            "isMetric": "no",
            "class": "typeset",
            "names": ["pica"],
            "properties": ["length"],
            "values": [{
              "printable": "12",
              "numeric": 12
            }]
          }
        }
      };
    }, "[pnt]", {
      type: "literal",
      value: "[pnt]",
      description: "\"[pnt]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pnt]": 1
        },
        "metadata": {
          "[pnt]": {
            "isBase": false,
            "CODE": "[PNT]",
            "isMetric": "no",
            "class": "typeset",
            "names": ["point"],
            "properties": ["length"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[lne]", {
      type: "literal",
      value: "[lne]",
      description: "\"[lne]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[lne]": 1
        },
        "metadata": {
          "[lne]": {
            "isBase": false,
            "CODE": "[LNE]",
            "isMetric": "no",
            "class": "typeset",
            "names": ["line"],
            "properties": ["length"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[LPF]", {
      type: "literal",
      value: "[LPF]",
      description: "\"[LPF]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[LPF]": 1
        },
        "metadata": {
          "[LPF]": {
            "isBase": false,
            "CODE": "[LPF]",
            "isMetric": "no",
            "class": "chemical",
            "names": ["low power field"],
            "printSymbols": ["LPF"],
            "properties": ["view area in microscope"],
            "values": [{
              "printable": "100",
              "numeric": 100
            }]
          }
        }
      };
    }, "[den]", {
      type: "literal",
      value: "[den]",
      description: "\"[den]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[den]": 1
        },
        "metadata": {
          "[den]": {
            "isBase": false,
            "CODE": "[DEN]",
            "isMetric": "no",
            "class": "heat",
            "names": ["Denier"],
            "printSymbols": ["den"],
            "properties": ["linear mass density (of textile thread)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[sct]", {
      type: "literal",
      value: "[sct]",
      description: "\"[sct]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[sct]": 1
        },
        "metadata": {
          "[sct]": {
            "isBase": false,
            "CODE": "[SCT]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["section"],
            "properties": ["area"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[twp]", {
      type: "literal",
      value: "[twp]",
      description: "\"[twp]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[twp]": 1
        },
        "metadata": {
          "[twp]": {
            "isBase": false,
            "CODE": "[TWP]",
            "isMetric": "no",
            "class": "us-lengths",
            "names": ["township"],
            "properties": ["area"],
            "values": [{
              "printable": "36",
              "numeric": 36
            }]
          }
        }
      };
    }, "[Btu]", {
      type: "literal",
      value: "[Btu]",
      description: "\"[Btu]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[Btu]": 1
        },
        "metadata": {
          "[Btu]": {
            "isBase": false,
            "CODE": "[BTU]",
            "isMetric": "no",
            "class": "heat",
            "names": ["British thermal unit"],
            "printSymbols": ["btu"],
            "properties": ["energy"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[MET]", {
      type: "literal",
      value: "[MET]",
      description: "\"[MET]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[MET]": 1
        },
        "metadata": {
          "[MET]": {
            "isBase": false,
            "CODE": "[MET]",
            "isMetric": "no",
            "class": "clinical",
            "names": ["metabolic equivalent"],
            "printSymbols": ["MET"],
            "properties": ["metabolic cost of physical activity"],
            "values": [{
              "printable": "3.5",
              "numeric": 3.5
            }]
          }
        }
      };
    }, "[HPF]", {
      type: "literal",
      value: "[HPF]",
      description: "\"[HPF]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[HPF]": 1
        },
        "metadata": {
          "[HPF]": {
            "isBase": false,
            "CODE": "[HPF]",
            "isMetric": "no",
            "class": "chemical",
            "names": ["high power field"],
            "printSymbols": ["HPF"],
            "properties": ["view area in microscope"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[drp]", {
      type: "literal",
      value: "[drp]",
      description: "\"[drp]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[drp]": 1
        },
        "metadata": {
          "[drp]": {
            "isBase": false,
            "CODE": "[DRP]",
            "isMetric": "no",
            "class": "clinical",
            "names": ["drop"],
            "printSymbols": ["drp"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[AU]", {
      type: "literal",
      value: "[AU]",
      description: "\"[AU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[AU]": 1
        },
        "metadata": {
          "[AU]": {
            "isBase": false,
            "CODE": "[AU]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["allergen unit"],
            "printSymbols": ["AU"],
            "properties": ["procedure defined amount of an allergen using some reference standard"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[IU]", {
      type: "literal",
      value: "[IU]",
      description: "\"[IU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[IU]": 1
        },
        "metadata": {
          "[IU]": {
            "isBase": false,
            "CODE": "[IU]",
            "isMetric": "yes",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["international unit"],
            "printSymbols": ["i.U."],
            "properties": ["arbitrary"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "mo_s", {
      type: "literal",
      value: "mo_s",
      description: "\"mo_s\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "mo_s": 1
        },
        "metadata": {
          "mo_s": {
            "isBase": false,
            "CODE": "MO_S",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["synodal month"],
            "printSymbols": ["mo<sub>s</sub>"],
            "properties": ["time"],
            "values": [{
              "printable": "29.53059",
              "numeric": 29.53059
            }]
          }
        }
      };
    }, "[gr]", {
      type: "literal",
      value: "[gr]",
      description: "\"[gr]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[gr]": 1
        },
        "metadata": {
          "[gr]": {
            "isBase": false,
            "CODE": "[GR]",
            "isMetric": "no",
            "class": "avoirdupois",
            "names": ["grain"],
            "properties": ["mass"],
            "values": [{
              "printable": "64.79891",
              "numeric": 64.79891
            }]
          }
        }
      };
    }, "circ", {
      type: "literal",
      value: "circ",
      description: "\"circ\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "circ": 1
        },
        "metadata": {
          "circ": {
            "isBase": false,
            "CODE": "CIRC",
            "isMetric": "no",
            "class": "misc",
            "names": ["circle"],
            "printSymbols": ["circ"],
            "properties": ["plane angle"],
            "values": [{
              "printable": "2",
              "numeric": 2
            }]
          }
        }
      };
    }, "[pi]", {
      type: "literal",
      value: "[pi]",
      description: "\"[pi]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pi]": 1
        },
        "metadata": {
          "[pi]": {
            "isBase": false,
            "CODE": "[PI]",
            "isMetric": "no",
            "class": "dimless",
            "names": ["the number pi"],
            "printSymbols": ["&#960;"],
            "properties": ["number"],
            "values": [{
              "printable": "&#960;",
              "numeric": 3.141592653589793
            }]
          }
        }
      };
    }, "[EU]", {
      type: "literal",
      value: "[EU]",
      description: "\"[EU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[EU]": 1
        },
        "metadata": {
          "[EU]": {
            "isBase": false,
            "CODE": "[EU]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["Ehrlich unit"],
            "printSymbols": [""],
            "properties": ["Ehrlich unit"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[Lf]", {
      type: "literal",
      value: "[Lf]",
      description: "\"[Lf]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[Lf]": 1
        },
        "metadata": {
          "[Lf]": {
            "isBase": false,
            "CODE": "[LF]",
            "isMetric": "no",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["Limit of flocculation"],
            "printSymbols": ["Lf"],
            "properties": ["procedure defined amount of an antigen substance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "mo_j", {
      type: "literal",
      value: "mo_j",
      description: "\"mo_j\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "mo_j": 1
        },
        "metadata": {
          "mo_j": {
            "isBase": false,
            "CODE": "MO_J",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["mean Julian month"],
            "printSymbols": ["mo<sub>j</sub>"],
            "properties": ["time"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "B[W]", {
      type: "literal",
      value: "B[W]",
      description: "\"B[W]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "B[W]": 1
        },
        "metadata": {
          "B[W]": {
            "isBase": false,
            "CODE": "B[W]",
            "isMetric": "yes",
            "isSpecial": "yes",
            "class": "levels",
            "names": ["bel watt"],
            "printSymbols": ["B(W)"],
            "properties": ["power level"],
            "values": [{
              "printable": "<function name=\"lg\" value=\"1\" Unit=\"W\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "B[V]", {
      type: "literal",
      value: "B[V]",
      description: "\"B[V]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "B[V]": 1
        },
        "metadata": {
          "B[V]": {
            "isBase": false,
            "CODE": "B[V]",
            "isMetric": "yes",
            "isSpecial": "yes",
            "class": "levels",
            "names": ["bel volt"],
            "printSymbols": ["B(V)"],
            "properties": ["electric potential level"],
            "values": [{
              "printable": "<function name=\"lgTimes2\" value=\"1\" Unit=\"V\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "mo_g", {
      type: "literal",
      value: "mo_g",
      description: "\"mo_g\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "mo_g": 1
        },
        "metadata": {
          "mo_g": {
            "isBase": false,
            "CODE": "MO_G",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["mean Gregorian month"],
            "printSymbols": ["mo<sub>g</sub>"],
            "properties": ["time"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[iU]", {
      type: "literal",
      value: "[iU]",
      description: "\"[iU]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[iU]": 1
        },
        "metadata": {
          "[iU]": {
            "isBase": false,
            "CODE": "[IU]",
            "isMetric": "yes",
            "isArbitrary": "yes",
            "class": "chemical",
            "names": ["international unit"],
            "printSymbols": ["IU"],
            "properties": ["arbitrary"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[HP]", {
      type: "literal",
      value: "[HP]",
      description: "\"[HP]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[HP]": 1
        },
        "metadata": {
          "[HP]": {
            "isBase": false,
            "CODE": "[HP]",
            "isMetric": "no",
            "class": "heat",
            "names": ["horsepower"],
            "properties": ["power"],
            "values": [{
              "printable": "550",
              "numeric": 550
            }]
          }
        }
      };
    }, "[Ch]", {
      type: "literal",
      value: "[Ch]",
      description: "\"[Ch]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[Ch]": 1
        },
        "metadata": {
          "[Ch]": {
            "isBase": false,
            "CODE": "[CH]",
            "isMetric": "no",
            "class": "clinical",
            "names": ["Charrière", "french"],
            "printSymbols": ["Ch"],
            "properties": ["gauge of catheters"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[ly]", {
      type: "literal",
      value: "[ly]",
      description: "\"[ly]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[ly]": 1
        },
        "metadata": {
          "[ly]": {
            "isBase": false,
            "CODE": "[LY]",
            "isMetric": "yes",
            "class": "const",
            "names": ["light-year"],
            "printSymbols": ["l.y."],
            "properties": ["length"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[pH]", {
      type: "literal",
      value: "[pH]",
      description: "\"[pH]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[pH]": 1
        },
        "metadata": {
          "[pH]": {
            "isBase": false,
            "CODE": "[PH]",
            "isMetric": "no",
            "isSpecial": "yes",
            "class": "chemical",
            "names": ["pH"],
            "printSymbols": ["pH"],
            "properties": ["acidity"],
            "values": [{
              "printable": "<function name=\"pH\" value=\"1\" Unit=\"mol/l\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "a_j", {
      type: "literal",
      value: "a_j",
      description: "\"a_j\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "a_j": 1
        },
        "metadata": {
          "a_j": {
            "isBase": false,
            "CODE": "ANN_J",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["mean Julian year"],
            "printSymbols": ["a<sub>j</sub>"],
            "properties": ["time"],
            "values": [{
              "printable": "365.25",
              "numeric": 365.25
            }]
          }
        }
      };
    }, "rad", {
      type: "literal",
      value: "rad",
      description: "\"rad\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "rad": 1
        },
        "metadata": {
          "rad": {
            "isBase": true,
            "CODE": "RAD",
            "dim": "A",
            "names": ["radian"],
            "printSymbols": ["rad"],
            "properties": ["plane angle"]
          }
        }
      };
    }, "a_t", {
      type: "literal",
      value: "a_t",
      description: "\"a_t\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "a_t": 1
        },
        "metadata": {
          "a_t": {
            "isBase": false,
            "CODE": "ANN_T",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["tropical year"],
            "printSymbols": ["a<sub>t</sub>"],
            "properties": ["time"],
            "values": [{
              "printable": "365.24219",
              "numeric": 365.24219
            }]
          }
        }
      };
    }, "Ohm", {
      type: "literal",
      value: "Ohm",
      description: "\"Ohm\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Ohm": 1
        },
        "metadata": {
          "Ohm": {
            "isBase": false,
            "CODE": "OHM",
            "isMetric": "yes",
            "class": "si",
            "names": ["Ohm"],
            "printSymbols": ["&#937;"],
            "properties": ["electric resistance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "sph", {
      type: "literal",
      value: "sph",
      description: "\"sph\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "sph": 1
        },
        "metadata": {
          "sph": {
            "isBase": false,
            "CODE": "SPH",
            "isMetric": "no",
            "class": "misc",
            "names": ["spere"],
            "printSymbols": ["sph"],
            "properties": ["solid angle"],
            "values": [{
              "printable": "4",
              "numeric": 4
            }]
          }
        }
      };
    }, "bit", {
      type: "literal",
      value: "bit",
      description: "\"bit\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "bit": 1
        },
        "metadata": {
          "bit": {
            "isBase": false,
            "CODE": "BIT",
            "isMetric": "yes",
            "class": "infotech",
            "names": ["bit"],
            "printSymbols": ["bit"],
            "properties": ["amount of information"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "mho", {
      type: "literal",
      value: "mho",
      description: "\"mho\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "mho": 1
        },
        "metadata": {
          "mho": {
            "isBase": false,
            "CODE": "MHO",
            "isMetric": "yes",
            "class": "misc",
            "names": ["mho"],
            "printSymbols": ["mho"],
            "properties": ["electric conductance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "min", {
      type: "literal",
      value: "min",
      description: "\"min\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "min": 1
        },
        "metadata": {
          "min": {
            "isBase": false,
            "CODE": "MIN",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["minute"],
            "printSymbols": ["min"],
            "properties": ["time"],
            "values": [{
              "printable": "60",
              "numeric": 60
            }]
          }
        }
      };
    }, "mol", {
      type: "literal",
      value: "mol",
      description: "\"mol\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "mol": 1
        },
        "metadata": {
          "mol": {
            "isBase": false,
            "CODE": "MOL",
            "isMetric": "yes",
            "class": "si",
            "names": ["mole"],
            "printSymbols": ["mol"],
            "properties": ["amount of substance"],
            "values": [{
              "printable": "6.0221367",
              "numeric": 6.0221367
            }]
          }
        }
      };
    }, "deg", {
      type: "literal",
      value: "deg",
      description: "\"deg\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "deg": 1
        },
        "metadata": {
          "deg": {
            "isBase": false,
            "CODE": "DEG",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["degree"],
            "printSymbols": ["&#176;"],
            "properties": ["plane angle"],
            "values": [{
              "printable": "2",
              "numeric": 2
            }]
          }
        }
      };
    }, "gon", {
      type: "literal",
      value: "gon",
      description: "\"gon\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "gon": 1
        },
        "metadata": {
          "gon": {
            "isBase": false,
            "CODE": "GON",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["gon", "grade"],
            "printSymbols": ["&#9633;<sup>g</sup>"],
            "properties": ["plane angle"],
            "values": [{
              "printable": "0.9",
              "numeric": 0.9
            }]
          }
        }
      };
    }, "Cel", {
      type: "literal",
      value: "Cel",
      description: "\"Cel\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Cel": 1
        },
        "metadata": {
          "Cel": {
            "isBase": false,
            "CODE": "CEL",
            "isMetric": "yes",
            "isSpecial": "yes",
            "class": "si",
            "names": ["degree Celsius"],
            "printSymbols": ["&#176;C"],
            "properties": ["temperature"],
            "values": [{
              "printable": "<function name=\"Cel\" value=\"1\" Unit=\"K\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "kat", {
      type: "literal",
      value: "kat",
      description: "\"kat\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "kat": 1
        },
        "metadata": {
          "kat": {
            "isBase": false,
            "CODE": "KAT",
            "isMetric": "yes",
            "class": "chemical",
            "names": ["katal"],
            "printSymbols": ["kat"],
            "properties": ["catalytic activity"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "att", {
      type: "literal",
      value: "att",
      description: "\"att\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "att": 1
        },
        "metadata": {
          "att": {
            "isBase": false,
            "CODE": "ATT",
            "isMetric": "no",
            "class": "misc",
            "names": ["technical atmosphere"],
            "printSymbols": ["at"],
            "properties": ["pressure"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "osm", {
      type: "literal",
      value: "osm",
      description: "\"osm\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "osm": 1
        },
        "metadata": {
          "osm": {
            "isBase": false,
            "CODE": "OSM",
            "isMetric": "yes",
            "class": "chemical",
            "names": ["osmole"],
            "printSymbols": ["osm"],
            "properties": ["amount of substance (dissolved particles)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "tex", {
      type: "literal",
      value: "tex",
      description: "\"tex\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "tex": 1
        },
        "metadata": {
          "tex": {
            "isBase": false,
            "CODE": "TEX",
            "isMetric": "yes",
            "class": "heat",
            "names": ["tex"],
            "printSymbols": ["tex"],
            "properties": ["linear mass density (of textile thread)"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "cal", {
      type: "literal",
      value: "cal",
      description: "\"cal\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "cal": 1
        },
        "metadata": {
          "cal": {
            "isBase": false,
            "CODE": "CAL",
            "isMetric": "yes",
            "class": "heat",
            "names": ["calorie"],
            "printSymbols": ["cal"],
            "properties": ["energy"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "REM", {
      type: "literal",
      value: "REM",
      description: "\"REM\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "REM": 1
        },
        "metadata": {
          "REM": {
            "isBase": false,
            "CODE": "[REM]",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["radiation equivalent man"],
            "printSymbols": ["REM"],
            "properties": ["dose equivalent"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "RAD", {
      type: "literal",
      value: "RAD",
      description: "\"RAD\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "RAD": 1
        },
        "metadata": {
          "RAD": {
            "isBase": false,
            "CODE": "[RAD]",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["radiation absorbed dose"],
            "printSymbols": ["RAD"],
            "properties": ["energy dose"],
            "values": [{
              "printable": "100",
              "numeric": 100
            }]
          }
        }
      };
    }, "a_g", {
      type: "literal",
      value: "a_g",
      description: "\"a_g\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "a_g": 1
        },
        "metadata": {
          "a_g": {
            "isBase": false,
            "CODE": "ANN_G",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["mean Gregorian year"],
            "printSymbols": ["a<sub>g</sub>"],
            "properties": ["time"],
            "values": [{
              "printable": "365.2425",
              "numeric": 365.2425
            }]
          }
        }
      };
    }, "Lmb", {
      type: "literal",
      value: "Lmb",
      description: "\"Lmb\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Lmb": 1
        },
        "metadata": {
          "Lmb": {
            "isBase": false,
            "CODE": "LMB",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Lambert"],
            "printSymbols": ["L"],
            "properties": ["brightness"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "atm", {
      type: "literal",
      value: "atm",
      description: "\"atm\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "atm": 1
        },
        "metadata": {
          "atm": {
            "isBase": false,
            "CODE": "ATM",
            "isMetric": "no",
            "class": "const",
            "names": ["standard atmosphere"],
            "printSymbols": ["atm"],
            "properties": ["pressure"],
            "values": [{
              "printable": "101325",
              "numeric": 101325
            }]
          }
        }
      };
    }, "erg", {
      type: "literal",
      value: "erg",
      description: "\"erg\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "erg": 1
        },
        "metadata": {
          "erg": {
            "isBase": false,
            "CODE": "ERG",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["erg"],
            "printSymbols": ["erg"],
            "properties": ["energy"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "dyn", {
      type: "literal",
      value: "dyn",
      description: "\"dyn\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "dyn": 1
        },
        "metadata": {
          "dyn": {
            "isBase": false,
            "CODE": "DYN",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["dyne"],
            "printSymbols": ["dyn"],
            "properties": ["force"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "Gal", {
      type: "literal",
      value: "Gal",
      description: "\"Gal\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Gal": 1
        },
        "metadata": {
          "Gal": {
            "isBase": false,
            "CODE": "GL",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Gal"],
            "printSymbols": ["Gal"],
            "properties": ["acceleration"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "10^", {
      type: "literal",
      value: "10^",
      description: "\"10^\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "10^": 1
        },
        "metadata": {
          "10^": {
            "isBase": false,
            "CODE": "10^",
            "isMetric": "no",
            "class": "dimless",
            "names": ["the number ten for arbitrary powers"],
            "printSymbols": ["10"],
            "properties": ["number"],
            "values": [{
              "printable": "10",
              "numeric": 10
            }]
          }
        }
      };
    }, "10*", {
      type: "literal",
      value: "10*",
      description: "\"10*\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "10*": 1
        },
        "metadata": {
          "10*": {
            "isBase": false,
            "CODE": "10*",
            "isMetric": "no",
            "class": "dimless",
            "names": ["the number ten for arbitrary powers"],
            "printSymbols": ["10"],
            "properties": ["number"],
            "values": [{
              "printable": "10",
              "numeric": 10
            }]
          }
        }
      };
    }, "[S]", {
      type: "literal",
      value: "[S]",
      description: "\"[S]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[S]": 1
        },
        "metadata": {
          "[S]": {
            "isBase": false,
            "CODE": "[S]",
            "isMetric": "no",
            "class": "chemical",
            "names": ["Svedberg unit"],
            "printSymbols": ["S"],
            "properties": ["sedimentation coefficient"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "[g]", {
      type: "literal",
      value: "[g]",
      description: "\"[g]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[g]": 1
        },
        "metadata": {
          "[g]": {
            "isBase": false,
            "CODE": "[G]",
            "isMetric": "yes",
            "class": "const",
            "names": ["standard acceleration of free fall"],
            "printSymbols": ["<i>g<sub>n</sub>\n         </i>"],
            "properties": ["acceleration"],
            "values": [{
              "printable": "9.80665",
              "numeric": 9.80665
            }]
          }
        }
      };
    }, "[G]", {
      type: "literal",
      value: "[G]",
      description: "\"[G]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[G]": 1
        },
        "metadata": {
          "[G]": {
            "isBase": false,
            "CODE": "[GC]",
            "isMetric": "yes",
            "class": "const",
            "names": ["Newtonian constant of gravitation"],
            "printSymbols": ["<i>G</i>"],
            "properties": ["(unclassified)"],
            "values": [{
              "printable": "6.67259 &#215; 10<sup>-11</sup>",
              "numeric": 6.67259e-11
            }]
          }
        }
      };
    }, "[e]", {
      type: "literal",
      value: "[e]",
      description: "\"[e]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[e]": 1
        },
        "metadata": {
          "[e]": {
            "isBase": false,
            "CODE": "[E]",
            "isMetric": "yes",
            "class": "const",
            "names": ["elementary charge"],
            "printSymbols": ["<i>e</i>"],
            "properties": ["electric charge"],
            "values": [{
              "printable": "1.60217733 &#215; 10<sup>-19</sup>",
              "numeric": 1.60217733e-19
            }]
          }
        }
      };
    }, "[k]", {
      type: "literal",
      value: "[k]",
      description: "\"[k]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[k]": 1
        },
        "metadata": {
          "[k]": {
            "isBase": false,
            "CODE": "[K]",
            "isMetric": "yes",
            "class": "const",
            "names": ["Boltzmann constant"],
            "printSymbols": ["<i>k</i>"],
            "properties": ["(unclassified)"],
            "values": [{
              "printable": "1.380658 &#215; 10<sup>-23</sup>",
              "numeric": 1.380658e-23
            }]
          }
        }
      };
    }, "[h]", {
      type: "literal",
      value: "[h]",
      description: "\"[h]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[h]": 1
        },
        "metadata": {
          "[h]": {
            "isBase": false,
            "CODE": "[H]",
            "isMetric": "yes",
            "class": "const",
            "names": ["Planck constant"],
            "printSymbols": ["<i>h</i>"],
            "properties": ["action"],
            "values": [{
              "printable": "6.6260755 &#215; 10<sup>-24</sup>",
              "numeric": 6.6260755e-24
            }]
          }
        }
      };
    }, "[c]", {
      type: "literal",
      value: "[c]",
      description: "\"[c]\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "[c]": 1
        },
        "metadata": {
          "[c]": {
            "isBase": false,
            "CODE": "[C]",
            "isMetric": "yes",
            "class": "const",
            "names": ["velocity of light"],
            "printSymbols": ["<i>c</i>"],
            "properties": ["velocity"],
            "values": [{
              "printable": "299792458",
              "numeric": 299792458
            }]
          }
        }
      };
    }, "bar", {
      type: "literal",
      value: "bar",
      description: "\"bar\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "bar": 1
        },
        "metadata": {
          "bar": {
            "isBase": false,
            "CODE": "BAR",
            "isMetric": "yes",
            "class": "iso1000",
            "names": ["bar"],
            "printSymbols": ["bar"],
            "properties": ["pressure"],
            "values": [{
              "printable": "1 &#215; 10<sup>5</sup>",
              "numeric": 100000
            }]
          }
        }
      };
    }, "lm", {
      type: "literal",
      value: "lm",
      description: "\"lm\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "lm": 1
        },
        "metadata": {
          "lm": {
            "isBase": false,
            "CODE": "LM",
            "isMetric": "yes",
            "class": "si",
            "names": ["lumen"],
            "printSymbols": ["lm"],
            "properties": ["luminous flux"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "Ci", {
      type: "literal",
      value: "Ci",
      description: "\"Ci\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Ci": 1
        },
        "metadata": {
          "Ci": {
            "isBase": false,
            "CODE": "CI",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Curie"],
            "printSymbols": ["Ci"],
            "properties": ["radioactivity"],
            "values": [{
              "printable": "3.7 &#215; 10<sup>10</sup>",
              "numeric": 37000000000
            }]
          }
        }
      };
    }, "ph", {
      type: "literal",
      value: "ph",
      description: "\"ph\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "ph": 1
        },
        "metadata": {
          "ph": {
            "isBase": false,
            "CODE": "PHT",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["phot"],
            "printSymbols": ["ph"],
            "properties": ["illuminance"],
            "values": [{
              "printable": "1 &#215; 10<sup>-4</sup>",
              "numeric": 0.0001
            }]
          }
        }
      };
    }, "cd", {
      type: "literal",
      value: "cd",
      description: "\"cd\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "cd": 1
        },
        "metadata": {
          "cd": {
            "isBase": true,
            "CODE": "CD",
            "dim": "F",
            "names": ["candela"],
            "printSymbols": ["cd"],
            "properties": ["luminous intensity"]
          }
        }
      };
    }, "Ao", {
      type: "literal",
      value: "Ao",
      description: "\"Ao\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Ao": 1
        },
        "metadata": {
          "Ao": {
            "isBase": false,
            "CODE": "AO",
            "isMetric": "no",
            "class": "misc",
            "names": ["Ångström"],
            "printSymbols": ["&#197;"],
            "properties": ["length"],
            "values": [{
              "printable": "0.1",
              "numeric": 0.1
            }]
          }
        }
      };
    }, "Wb", {
      type: "literal",
      value: "Wb",
      description: "\"Wb\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Wb": 1
        },
        "metadata": {
          "Wb": {
            "isBase": false,
            "CODE": "WB",
            "isMetric": "yes",
            "class": "si",
            "names": ["Weber"],
            "printSymbols": ["Wb"],
            "properties": ["magentic flux"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "Gb", {
      type: "literal",
      value: "Gb",
      description: "\"Gb\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Gb": 1
        },
        "metadata": {
          "Gb": {
            "isBase": false,
            "CODE": "GB",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Gilbert"],
            "printSymbols": ["Gb"],
            "properties": ["magnetic tension"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "Oe", {
      type: "literal",
      value: "Oe",
      description: "\"Oe\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Oe": 1
        },
        "metadata": {
          "Oe": {
            "isBase": false,
            "CODE": "OE",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Oersted"],
            "printSymbols": ["Oe"],
            "properties": ["magnetic field intensity"],
            "values": [{
              "printable": "250",
              "numeric": 250
            }]
          }
        }
      };
    }, "lx", {
      type: "literal",
      value: "lx",
      description: "\"lx\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "lx": 1
        },
        "metadata": {
          "lx": {
            "isBase": false,
            "CODE": "LX",
            "isMetric": "yes",
            "class": "si",
            "names": ["lux"],
            "printSymbols": ["lx"],
            "properties": ["illuminance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "Mx", {
      type: "literal",
      value: "Mx",
      description: "\"Mx\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Mx": 1
        },
        "metadata": {
          "Mx": {
            "isBase": false,
            "CODE": "MX",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Maxwell"],
            "printSymbols": ["Mx"],
            "properties": ["flux of magnetic induction"],
            "values": [{
              "printable": "1 &#215; 10<sup>-8</sup>",
              "numeric": 1e-8
            }]
          }
        }
      };
    }, "St", {
      type: "literal",
      value: "St",
      description: "\"St\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "St": 1
        },
        "metadata": {
          "St": {
            "isBase": false,
            "CODE": "ST",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Stokes"],
            "printSymbols": ["St"],
            "properties": ["kinematic viscosity"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "Bi", {
      type: "literal",
      value: "Bi",
      description: "\"Bi\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Bi": 1
        },
        "metadata": {
          "Bi": {
            "isBase": false,
            "CODE": "BI",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Biot"],
            "printSymbols": ["Bi"],
            "properties": ["electric current"],
            "values": [{
              "printable": "10",
              "numeric": 10
            }]
          }
        }
      };
    }, "Bq", {
      type: "literal",
      value: "Bq",
      description: "\"Bq\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Bq": 1
        },
        "metadata": {
          "Bq": {
            "isBase": false,
            "CODE": "BQ",
            "isMetric": "yes",
            "class": "si",
            "names": ["Becquerel"],
            "printSymbols": ["Bq"],
            "properties": ["radioactivity"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "Np", {
      type: "literal",
      value: "Np",
      description: "\"Np\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Np": 1
        },
        "metadata": {
          "Np": {
            "isBase": false,
            "CODE": "NEP",
            "isMetric": "yes",
            "isSpecial": "yes",
            "class": "levels",
            "names": ["neper"],
            "printSymbols": ["Np"],
            "properties": ["level"],
            "values": [{
              "printable": "<function name=\"ln\" value=\"1\" Unit=\"1\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "AU", {
      type: "literal",
      value: "AU",
      description: "\"AU\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "AU": 1
        },
        "metadata": {
          "AU": {
            "isBase": false,
            "CODE": "ASU",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["astronomic unit"],
            "printSymbols": ["AU"],
            "properties": ["length"],
            "values": [{
              "printable": "149597.870691",
              "numeric": 149597.870691
            }]
          }
        }
      };
    }, "mo", {
      type: "literal",
      value: "mo",
      description: "\"mo\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "mo": 1
        },
        "metadata": {
          "mo": {
            "isBase": false,
            "CODE": "MO",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["month"],
            "printSymbols": ["mo"],
            "properties": ["time"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "Ky", {
      type: "literal",
      value: "Ky",
      description: "\"Ky\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Ky": 1
        },
        "metadata": {
          "Ky": {
            "isBase": false,
            "CODE": "KY",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Kayser"],
            "printSymbols": ["K"],
            "properties": ["lineic number"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "gf", {
      type: "literal",
      value: "gf",
      description: "\"gf\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "gf": 1
        },
        "metadata": {
          "gf": {
            "isBase": false,
            "CODE": "GF",
            "isMetric": "yes",
            "class": "const",
            "names": ["gram-force"],
            "printSymbols": ["gf"],
            "properties": ["force"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "wk", {
      type: "literal",
      value: "wk",
      description: "\"wk\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "wk": 1
        },
        "metadata": {
          "wk": {
            "isBase": false,
            "CODE": "WK",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["week"],
            "printSymbols": ["wk"],
            "properties": ["time"],
            "values": [{
              "printable": "7",
              "numeric": 7
            }]
          }
        }
      };
    }, "Pa", {
      type: "literal",
      value: "Pa",
      description: "\"Pa\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Pa": 1
        },
        "metadata": {
          "Pa": {
            "isBase": false,
            "CODE": "PAL",
            "isMetric": "yes",
            "class": "si",
            "names": ["Pascal"],
            "printSymbols": ["Pa"],
            "properties": ["pressure"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "g%", {
      type: "literal",
      value: "g%",
      description: "\"g%\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "g%": 1
        },
        "metadata": {
          "g%": {
            "isBase": false,
            "CODE": "G%",
            "isMetric": "yes",
            "class": "chemical",
            "names": ["gram percent"],
            "printSymbols": ["g%"],
            "properties": ["mass concentration"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "sr", {
      type: "literal",
      value: "sr",
      description: "\"sr\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "sr": 1
        },
        "metadata": {
          "sr": {
            "isBase": false,
            "CODE": "SR",
            "isMetric": "yes",
            "class": "si",
            "names": ["steradian"],
            "printSymbols": ["sr"],
            "properties": ["solid angle"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "Bd", {
      type: "literal",
      value: "Bd",
      description: "\"Bd\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Bd": 1
        },
        "metadata": {
          "Bd": {
            "isBase": false,
            "CODE": "BD",
            "isMetric": "yes",
            "class": "infotech",
            "names": ["baud"],
            "printSymbols": ["Bd"],
            "properties": ["signal transmission rate"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "eq", {
      type: "literal",
      value: "eq",
      description: "\"eq\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "eq": 1
        },
        "metadata": {
          "eq": {
            "isBase": false,
            "CODE": "EQ",
            "isMetric": "yes",
            "class": "chemical",
            "names": ["equivalents"],
            "printSymbols": ["eq"],
            "properties": ["amount of substance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "By", {
      type: "literal",
      value: "By",
      description: "\"By\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "By": 1
        },
        "metadata": {
          "By": {
            "isBase": false,
            "CODE": "BY",
            "isMetric": "yes",
            "class": "infotech",
            "names": ["byte"],
            "printSymbols": ["B"],
            "properties": ["amount of information"],
            "values": [{
              "printable": "8",
              "numeric": 8
            }]
          }
        }
      };
    }, "Hz", {
      type: "literal",
      value: "Hz",
      description: "\"Hz\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Hz": 1
        },
        "metadata": {
          "Hz": {
            "isBase": false,
            "CODE": "HZ",
            "isMetric": "yes",
            "class": "si",
            "names": ["Hertz"],
            "printSymbols": ["Hz"],
            "properties": ["frequency"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "''", {
      type: "literal",
      value: "''",
      description: "\"''\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "''": 1
        },
        "metadata": {
          "''": {
            "isBase": false,
            "CODE": "''",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["second"],
            "printSymbols": ["''"],
            "properties": ["plane angle"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "pc", {
      type: "literal",
      value: "pc",
      description: "\"pc\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "pc": 1
        },
        "metadata": {
          "pc": {
            "isBase": false,
            "CODE": "PRS",
            "isMetric": "yes",
            "class": "iso1000",
            "names": ["parsec"],
            "printSymbols": ["pc"],
            "properties": ["length"],
            "values": [{
              "printable": "3.085678 &#215; 10<sup>16</sup>",
              "numeric": 30856780000000000
            }]
          }
        }
      };
    }, "eV", {
      type: "literal",
      value: "eV",
      description: "\"eV\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "eV": 1
        },
        "metadata": {
          "eV": {
            "isBase": false,
            "CODE": "EV",
            "isMetric": "yes",
            "class": "iso1000",
            "names": ["electronvolt"],
            "printSymbols": ["eV"],
            "properties": ["energy"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "Gy", {
      type: "literal",
      value: "Gy",
      description: "\"Gy\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Gy": 1
        },
        "metadata": {
          "Gy": {
            "isBase": false,
            "CODE": "GY",
            "isMetric": "yes",
            "class": "si",
            "names": ["Gray"],
            "printSymbols": ["Gy"],
            "properties": ["energy dose"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "st", {
      type: "literal",
      value: "st",
      description: "\"st\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "st": 1
        },
        "metadata": {
          "st": {
            "isBase": false,
            "CODE": "STR",
            "isMetric": "yes",
            "class": "misc",
            "names": ["stere"],
            "printSymbols": ["st"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "Sv", {
      type: "literal",
      value: "Sv",
      description: "\"Sv\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "Sv": 1
        },
        "metadata": {
          "Sv": {
            "isBase": false,
            "CODE": "SV",
            "isMetric": "yes",
            "class": "si",
            "names": ["Sievert"],
            "printSymbols": ["Sv"],
            "properties": ["dose equivalent"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "ar", {
      type: "literal",
      value: "ar",
      description: "\"ar\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "ar": 1
        },
        "metadata": {
          "ar": {
            "isBase": false,
            "CODE": "AR",
            "isMetric": "yes",
            "class": "iso1000",
            "names": ["are"],
            "printSymbols": ["a"],
            "properties": ["area"],
            "values": [{
              "printable": "100",
              "numeric": 100
            }]
          }
        }
      };
    }, "sb", {
      type: "literal",
      value: "sb",
      description: "\"sb\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "sb": 1
        },
        "metadata": {
          "sb": {
            "isBase": false,
            "CODE": "SB",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["stilb"],
            "printSymbols": ["sb"],
            "properties": ["lum. intensity density"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "L", {
      type: "literal",
      value: "L",
      description: "\"L\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "L": 1
        },
        "metadata": {
          "L": {
            "isBase": false,
            "isMetric": "yes",
            "class": "iso1000",
            "names": ["liter"],
            "printSymbols": ["L"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "t", {
      type: "literal",
      value: "t",
      description: "\"t\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "t": 1
        },
        "metadata": {
          "t": {
            "isBase": false,
            "CODE": "TNE",
            "isMetric": "yes",
            "class": "iso1000",
            "names": ["tonne"],
            "printSymbols": ["t"],
            "properties": ["mass"],
            "values": [{
              "printable": "1 &#215; 10<sup>3</sup>",
              "numeric": 1000
            }]
          }
        }
      };
    }, "u", {
      type: "literal",
      value: "u",
      description: "\"u\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "u": 1
        },
        "metadata": {
          "u": {
            "isBase": false,
            "CODE": "AMU",
            "isMetric": "yes",
            "class": "iso1000",
            "names": ["unified atomic mass unit"],
            "printSymbols": ["u"],
            "properties": ["mass"],
            "values": [{
              "printable": "1.6605402 &#215; 10<sup>-24</sup>",
              "numeric": 1.6605402e-24
            }]
          }
        }
      };
    }, "P", {
      type: "literal",
      value: "P",
      description: "\"P\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "P": 1
        },
        "metadata": {
          "P": {
            "isBase": false,
            "CODE": "P",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Poise"],
            "printSymbols": ["P"],
            "properties": ["dynamic viscosity"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "G", {
      type: "literal",
      value: "G",
      description: "\"G\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "G": 1
        },
        "metadata": {
          "G": {
            "isBase": false,
            "CODE": "GS",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Gauss"],
            "printSymbols": ["Gs"],
            "properties": ["magnetic flux density"],
            "values": [{
              "printable": "1 &#215; 10<sup>-4</sup>",
              "numeric": 0.0001
            }]
          }
        }
      };
    }, "R", {
      type: "literal",
      value: "R",
      description: "\"R\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "R": 1
        },
        "metadata": {
          "R": {
            "isBase": false,
            "CODE": "ROE",
            "isMetric": "yes",
            "class": "cgs",
            "names": ["Roentgen"],
            "printSymbols": ["R"],
            "properties": ["ion dose"],
            "values": [{
              "printable": "2.58 &#215; 10<sup>-4</sup>",
              "numeric": 0.000258
            }]
          }
        }
      };
    }, "H", {
      type: "literal",
      value: "H",
      description: "\"H\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "H": 1
        },
        "metadata": {
          "H": {
            "isBase": false,
            "CODE": "H",
            "isMetric": "yes",
            "class": "si",
            "names": ["Henry"],
            "printSymbols": ["H"],
            "properties": ["inductance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "T", {
      type: "literal",
      value: "T",
      description: "\"T\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "T": 1
        },
        "metadata": {
          "T": {
            "isBase": false,
            "CODE": "T",
            "isMetric": "yes",
            "class": "si",
            "names": ["Tesla"],
            "printSymbols": ["T"],
            "properties": ["magnetic flux density"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "U", {
      type: "literal",
      value: "U",
      description: "\"U\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "U": 1
        },
        "metadata": {
          "U": {
            "isBase": false,
            "CODE": "U",
            "isMetric": "yes",
            "class": "chemical",
            "names": ["Unit"],
            "printSymbols": ["U"],
            "properties": ["catalytic activity"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "B", {
      type: "literal",
      value: "B",
      description: "\"B\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "B": 1
        },
        "metadata": {
          "B": {
            "isBase": false,
            "CODE": "B",
            "isMetric": "yes",
            "isSpecial": "yes",
            "class": "levels",
            "names": ["bel"],
            "printSymbols": ["B"],
            "properties": ["level"],
            "values": [{
              "printable": "<function name=\"lg\" value=\"1\" Unit=\"1\"/>",
              "numeric": null
            }]
          }
        }
      };
    }, "S", {
      type: "literal",
      value: "S",
      description: "\"S\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "S": 1
        },
        "metadata": {
          "S": {
            "isBase": false,
            "CODE": "SIE",
            "isMetric": "yes",
            "class": "si",
            "names": ["Siemens"],
            "printSymbols": ["S"],
            "properties": ["electric conductance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "m", {
      type: "literal",
      value: "m",
      description: "\"m\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "m": 1
        },
        "metadata": {
          "m": {
            "isBase": true,
            "CODE": "M",
            "dim": "L",
            "names": ["meter"],
            "printSymbols": ["m"],
            "properties": ["length"]
          }
        }
      };
    }, "s", {
      type: "literal",
      value: "s",
      description: "\"s\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "s": 1
        },
        "metadata": {
          "s": {
            "isBase": true,
            "CODE": "S",
            "dim": "T",
            "names": ["second"],
            "printSymbols": ["s"],
            "properties": ["time"]
          }
        }
      };
    }, "F", {
      type: "literal",
      value: "F",
      description: "\"F\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "F": 1
        },
        "metadata": {
          "F": {
            "isBase": false,
            "CODE": "F",
            "isMetric": "yes",
            "class": "si",
            "names": ["Farad"],
            "printSymbols": ["F"],
            "properties": ["electric capacitance"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "l", {
      type: "literal",
      value: "l",
      description: "\"l\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "l": 1
        },
        "metadata": {
          "l": {
            "isBase": false,
            "CODE": "L",
            "isMetric": "yes",
            "class": "iso1000",
            "names": ["liter"],
            "printSymbols": ["l"],
            "properties": ["volume"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "V", {
      type: "literal",
      value: "V",
      description: "\"V\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "V": 1
        },
        "metadata": {
          "V": {
            "isBase": false,
            "CODE": "V",
            "isMetric": "yes",
            "class": "si",
            "names": ["Volt"],
            "printSymbols": ["V"],
            "properties": ["electric potential"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "A", {
      type: "literal",
      value: "A",
      description: "\"A\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "A": 1
        },
        "metadata": {
          "A": {
            "isBase": false,
            "CODE": "A",
            "isMetric": "yes",
            "class": "si",
            "names": ["Ampère"],
            "printSymbols": ["A"],
            "properties": ["electric current"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "W", {
      type: "literal",
      value: "W",
      description: "\"W\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "W": 1
        },
        "metadata": {
          "W": {
            "isBase": false,
            "CODE": "W",
            "isMetric": "yes",
            "class": "si",
            "names": ["Watt"],
            "printSymbols": ["W"],
            "properties": ["power"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "K", {
      type: "literal",
      value: "K",
      description: "\"K\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "K": 1
        },
        "metadata": {
          "K": {
            "isBase": true,
            "CODE": "K",
            "dim": "C",
            "names": ["Kelvin"],
            "printSymbols": ["K"],
            "properties": ["temperature"]
          }
        }
      };
    }, "C", {
      type: "literal",
      value: "C",
      description: "\"C\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "C": 1
        },
        "metadata": {
          "C": {
            "isBase": true,
            "CODE": "C",
            "dim": "Q",
            "names": ["Coulomb"],
            "printSymbols": ["C"],
            "properties": ["electric charge"]
          }
        }
      };
    }, "b", {
      type: "literal",
      value: "b",
      description: "\"b\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "b": 1
        },
        "metadata": {
          "b": {
            "isBase": false,
            "CODE": "BRN",
            "isMetric": "no",
            "class": "misc",
            "names": ["barn"],
            "printSymbols": ["b"],
            "properties": ["action area"],
            "values": [{
              "printable": "100",
              "numeric": 100
            }]
          }
        }
      };
    }, "%", {
      type: "literal",
      value: "%",
      description: "\"%\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "%": 1
        },
        "metadata": {
          "%": {
            "isBase": false,
            "CODE": "%",
            "isMetric": "no",
            "class": "dimless",
            "names": ["percent"],
            "printSymbols": ["%"],
            "properties": ["fraction"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "J", {
      type: "literal",
      value: "J",
      description: "\"J\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "J": 1
        },
        "metadata": {
          "J": {
            "isBase": false,
            "CODE": "J",
            "isMetric": "yes",
            "class": "si",
            "names": ["Joule"],
            "printSymbols": ["J"],
            "properties": ["energy"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "'", {
      type: "literal",
      value: "'",
      description: "\"'\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "'": 1
        },
        "metadata": {
          "'": {
            "isBase": false,
            "CODE": "'",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["minute"],
            "printSymbols": ["'"],
            "properties": ["plane angle"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "h", {
      type: "literal",
      value: "h",
      description: "\"h\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "h": 1
        },
        "metadata": {
          "h": {
            "isBase": false,
            "CODE": "HR",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["hour"],
            "printSymbols": ["h"],
            "properties": ["time"],
            "values": [{
              "printable": "60",
              "numeric": 60
            }]
          }
        }
      };
    }, "d", {
      type: "literal",
      value: "d",
      description: "\"d\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "d": 1
        },
        "metadata": {
          "d": {
            "isBase": false,
            "CODE": "D",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["day"],
            "printSymbols": ["d"],
            "properties": ["time"],
            "values": [{
              "printable": "24",
              "numeric": 24
            }]
          }
        }
      };
    }, "N", {
      type: "literal",
      value: "N",
      description: "\"N\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "N": 1
        },
        "metadata": {
          "N": {
            "isBase": false,
            "CODE": "N",
            "isMetric": "yes",
            "class": "si",
            "names": ["Newton"],
            "printSymbols": ["N"],
            "properties": ["force"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "a", {
      type: "literal",
      value: "a",
      description: "\"a\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "a": 1
        },
        "metadata": {
          "a": {
            "isBase": false,
            "CODE": "ANN",
            "isMetric": "no",
            "class": "iso1000",
            "names": ["year"],
            "printSymbols": ["a"],
            "properties": ["time"],
            "values": [{
              "printable": "1",
              "numeric": 1
            }]
          }
        }
      };
    }, "g", {
      type: "literal",
      value: "g",
      description: "\"g\""
    }, function (u) {
      return {
        "value": 1,
        "units": {
          "g": 1
        },
        "metadata": {
          "g": {
            "isBase": true,
            "CODE": "G",
            "dim": "M",
            "names": ["gram"],
            "printSymbols": ["g"],
            "properties": ["mass"]
          }
        }
      };
    }, "Y", {
      type: "literal",
      value: "Y",
      description: "\"Y\""
    }, "Z", {
      type: "literal",
      value: "Z",
      description: "\"Z\""
    }, "E", {
      type: "literal",
      value: "E",
      description: "\"E\""
    }, "M", {
      type: "literal",
      value: "M",
      description: "\"M\""
    }, "k", {
      type: "literal",
      value: "k",
      description: "\"k\""
    }, "da", {
      type: "literal",
      value: "da",
      description: "\"da\""
    }, "c", {
      type: "literal",
      value: "c",
      description: "\"c\""
    }, "n", {
      type: "literal",
      value: "n",
      description: "\"n\""
    }, "p", {
      type: "literal",
      value: "p",
      description: "\"p\""
    }, "f", {
      type: "literal",
      value: "f",
      description: "\"f\""
    }, "z", {
      type: "literal",
      value: "z",
      description: "\"z\""
    }, "y", {
      type: "literal",
      value: "y",
      description: "\"y\""
    }, "Ki", {
      type: "literal",
      value: "Ki",
      description: "\"Ki\""
    }, "Mi", {
      type: "literal",
      value: "Mi",
      description: "\"Mi\""
    }, "Gi", {
      type: "literal",
      value: "Gi",
      description: "\"Gi\""
    }, "Ti", {
      type: "literal",
      value: "Ti",
      description: "\"Ti\""
    }],
        peg$bytecode = [peg$decode("!7!+' 4!6 !! %"), peg$decode("!.\"\"\"2\"3#+2$7#+(%4\"6$\"! %$\"# !\"# !*# \"7#"), peg$decode("!.%\"\"2%3&+-$7$+#%'\"%$\"# !\"# !*> \"!.\"\"\"2\"3#+-$7$+#%'\"%$\"# !\"# !"), peg$decode("!7$+;$ '7\",#&7\"\"+)%4\"6(\"\"! %$\"# !\"# !"), peg$decode("!7%+c$7&*# \" )+S% '7),#&7)\"+A%56* \"\"!)##\" !\" ++)%4$6,$\"#\"%$$# !$## !$\"# !\"# !*E \"!7(+:$ '7),#&7)\"+(%4\"6-\"!!%$\"# !\"# !"), peg$decode("!7'+' 4!6.!! %*Y \"!./\"\"2/30+B$7#+8%.1\"\"2132+(%4#63#!!%$## !$\"# !\"# !*# \"7)"), peg$decode("!04\"\"1!35*# \" )+3$7(+)%4\"66\"\"! %$\"# !\"# !"), peg$decode("!7+*# \" )+K$7*+A%567 \"! )##\" !\" ++)%4#68#\"\"!%$## !$\"# !\"# !*# \"7*"), peg$decode("! '09\"\"1!3:+,$,)&09\"\"1!3:\"\"\" !+i$.;\"\"2;3<*# \" )+S%7&*# \" )+C%56= #\"! )##\" !\" ++*%4$6>$##\"!%$$# !$## !$\"# !\"# !"), peg$decode("!.?\"\"2?3@+t$ '0A\"\"1!3B+,$,)&0A\"\"1!3B\"\"\" !+O%.C\"\"2C3D+?%56E !!)##\" !\" ++(%4$6F$!\"%$$# !$## !$\"# !\"# !"), peg$decode("!.G\"\"2G3H+' 4!6I!! %*\u1CCD \"!.J\"\"2J3K+' 4!6L!! %*\u1CB5 \"!.M\"\"2M3N+' 4!6O!! %*\u1C9D \"!.P\"\"2P3Q+' 4!6R!! %*\u1C85 \"!.S\"\"2S3T+' 4!6U!! %*\u1C6D \"!.V\"\"2V3W+' 4!6X!! %*\u1C55 \"!.Y\"\"2Y3Z+' 4!6[!! %*\u1C3D \"!.\\\"\"2\\3]+' 4!6^!! %*\u1C25 \"!._\"\"2_3`+' 4!6a!! %*\u1C0D \"!.b\"\"2b3c+' 4!6d!! %*\u1BF5 \"!.e\"\"2e3f+' 4!6g!! %*\u1BDD \"!.h\"\"2h3i+' 4!6j!! %*\u1BC5 \"!.k\"\"2k3l+' 4!6m!! %*\u1BAD \"!.n\"\"2n3o+' 4!6p!! %*\u1B95 \"!.q\"\"2q3r+' 4!6s!! %*\u1B7D \"!.t\"\"2t3u+' 4!6v!! %*\u1B65 \"!.w\"\"2w3x+' 4!6y!! %*\u1B4D \"!.z\"\"2z3{+' 4!6|!! %*\u1B35 \"!.}\"\"2}3~+' 4!6\x7F!! %*\u1B1D \"!.\x80\"\"2\x803\x81+' 4!6\x82!! %*\u1B05 \"!.\x83\"\"2\x833\x84+' 4!6\x85!! %*\u1AED \"!.\x86\"\"2\x863\x87+' 4!6\x88!! %*\u1AD5 \"!.\x89\"\"2\x893\x8A+' 4!6\x8B!! %*\u1ABD \"!.\x8C\"\"2\x8C3\x8D+' 4!6\x8E!! %*\u1AA5 \"!.\x8F\"\"2\x8F3\x90+' 4!6\x91!! %*\u1A8D \"!.\x92\"\"2\x923\x93+' 4!6\x94!! %*\u1A75 \"!.\x95\"\"2\x953\x96+' 4!6\x97!! %*\u1A5D \"!.\x98\"\"2\x983\x99+' 4!6\x9A!! %*\u1A45 \"!.\x9B\"\"2\x9B3\x9C+' 4!6\x9D!! %*\u1A2D \"!.\x9E\"\"2\x9E3\x9F+' 4!6\xA0!! %*\u1A15 \"!.\xA1\"\"2\xA13\xA2+' 4!6\xA3!! %*\u19FD \"!.\xA4\"\"2\xA43\xA5+' 4!6\xA6!! %*\u19E5 \"!.\xA7\"\"2\xA73\xA8+' 4!6\xA9!! %*\u19CD \"!.\xAA\"\"2\xAA3\xAB+' 4!6\xAC!! %*\u19B5 \"!.\xAD\"\"2\xAD3\xAE+' 4!6\xAF!! %*\u199D \"!.\xB0\"\"2\xB03\xB1+' 4!6\xB2!! %*\u1985 \"!.\xB3\"\"2\xB33\xB4+' 4!6\xB5!! %*\u196D \"!.\xB6\"\"2\xB63\xB7+' 4!6\xB8!! %*\u1955 \"!.\xB9\"\"2\xB93\xBA+' 4!6\xBB!! %*\u193D \"!.\xBC\"\"2\xBC3\xBD+' 4!6\xBE!! %*\u1925 \"!.\xBF\"\"2\xBF3\xC0+' 4!6\xC1!! %*\u190D \"!.\xC2\"\"2\xC23\xC3+' 4!6\xC4!! %*\u18F5 \"!.\xC5\"\"2\xC53\xC6+' 4!6\xC7!! %*\u18DD \"!.\xC8\"\"2\xC83\xC9+' 4!6\xCA!! %*\u18C5 \"!.\xCB\"\"2\xCB3\xCC+' 4!6\xCD!! %*\u18AD \"!.\xCE\"\"2\xCE3\xCF+' 4!6\xD0!! %*\u1895 \"!.\xD1\"\"2\xD13\xD2+' 4!6\xD3!! %*\u187D \"!.\xD4\"\"2\xD43\xD5+' 4!6\xD6!! %*\u1865 \"!.\xD7\"\"2\xD73\xD8+' 4!6\xD9!! %*\u184D \"!.\xDA\"\"2\xDA3\xDB+' 4!6\xDC!! %*\u1835 \"!.\xDD\"\"2\xDD3\xDE+' 4!6\xDF!! %*\u181D \"!.\xE0\"\"2\xE03\xE1+' 4!6\xE2!! %*\u1805 \"!.\xE3\"\"2\xE33\xE4+' 4!6\xE5!! %*\u17ED \"!.\xE6\"\"2\xE63\xE7+' 4!6\xE8!! %*\u17D5 \"!.\xE9\"\"2\xE93\xEA+' 4!6\xEB!! %*\u17BD \"!.\xEC\"\"2\xEC3\xED+' 4!6\xEE!! %*\u17A5 \"!.\xEF\"\"2\xEF3\xF0+' 4!6\xF1!! %*\u178D \"!.\xF2\"\"2\xF23\xF3+' 4!6\xF4!! %*\u1775 \"!.\xF5\"\"2\xF53\xF6+' 4!6\xF7!! %*\u175D \"!.\xF8\"\"2\xF83\xF9+' 4!6\xFA!! %*\u1745 \"!.\xFB\"\"2\xFB3\xFC+' 4!6\xFD!! %*\u172D \"!.\xFE\"\"2\xFE3\xFF+' 4!6\u0100!! %*\u1715 \"!.\u0101\"\"2\u01013\u0102+' 4!6\u0103!! %*\u16FD \"!.\u0104\"\"2\u01043\u0105+' 4!6\u0106!! %*\u16E5 \"!.\u0107\"\"2\u01073\u0108+' 4!6\u0109!! %*\u16CD \"!.\u010A\"\"2\u010A3\u010B+' 4!6\u010C!! %*\u16B5 \"!.\u010D\"\"2\u010D3\u010E+' 4!6\u010F!! %*\u169D \"!.\u0110\"\"2\u01103\u0111+' 4!6\u0112!! %*\u1685 \"!.\u0113\"\"2\u01133\u0114+' 4!6\u0115!! %*\u166D \"!.\u0116\"\"2\u01163\u0117+' 4!6\u0118!! %*\u1655 \"!.\u0119\"\"2\u01193\u011A+' 4!6\u011B!! %*\u163D \"!.\u011C\"\"2\u011C3\u011D+' 4!6\u011E!! %*\u1625 \"!.\u011F\"\"2\u011F3\u0120+' 4!6\u0121!! %*\u160D \"!.\u0122\"\"2\u01223\u0123+' 4!6\u0124!! %*\u15F5 \"!.\u0125\"\"2\u01253\u0126+' 4!6\u0127!! %*\u15DD \"!.\u0128\"\"2\u01283\u0129+' 4!6\u012A!! %*\u15C5 \"!.\u012B\"\"2\u012B3\u012C+' 4!6\u012D!! %*\u15AD \"!.\u012E\"\"2\u012E3\u012F+' 4!6\u0130!! %*\u1595 \"!.\u0131\"\"2\u01313\u0132+' 4!6\u0133!! %*\u157D \"!.\u0134\"\"2\u01343\u0135+' 4!6\u0136!! %*\u1565 \"!.\u0137\"\"2\u01373\u0138+' 4!6\u0139!! %*\u154D \"!.\u013A\"\"2\u013A3\u013B+' 4!6\u013C!! %*\u1535 \"!.\u013D\"\"2\u013D3\u013E+' 4!6\u013F!! %*\u151D \"!.\u0140\"\"2\u01403\u0141+' 4!6\u0142!! %*\u1505 \"!.\u0143\"\"2\u01433\u0144+' 4!6\u0145!! %*\u14ED \"!.\u0146\"\"2\u01463\u0147+' 4!6\u0148!! %*\u14D5 \"!.\u0149\"\"2\u01493\u014A+' 4!6\u014B!! %*\u14BD \"!.\u014C\"\"2\u014C3\u014D+' 4!6\u014E!! %*\u14A5 \"!.\u014F\"\"2\u014F3\u0150+' 4!6\u0151!! %*\u148D \"!.\u0152\"\"2\u01523\u0153+' 4!6\u0154!! %*\u1475 \"!.\u0155\"\"2\u01553\u0156+' 4!6\u0157!! %*\u145D \"!.\u0158\"\"2\u01583\u0159+' 4!6\u015A!! %*\u1445 \"!.\u015B\"\"2\u015B3\u015C+' 4!6\u015D!! %*\u142D \"!.\u015E\"\"2\u015E3\u015F+' 4!6\u0160!! %*\u1415 \"!.\u0161\"\"2\u01613\u0162+' 4!6\u0163!! %*\u13FD \"!.\u0164\"\"2\u01643\u0165+' 4!6\u0166!! %*\u13E5 \"!.\u0167\"\"2\u01673\u0168+' 4!6\u0169!! %*\u13CD \"!.\u016A\"\"2\u016A3\u016B+' 4!6\u016C!! %*\u13B5 \"!.\u016D\"\"2\u016D3\u016E+' 4!6\u016F!! %*\u139D \"!.\u0170\"\"2\u01703\u0171+' 4!6\u0172!! %*\u1385 \"!.\u0173\"\"2\u01733\u0174+' 4!6\u0175!! %*\u136D \"!.\u0176\"\"2\u01763\u0177+' 4!6\u0178!! %*\u1355 \"!.\u0179\"\"2\u01793\u017A+' 4!6\u017B!! %*\u133D \"!.\u017C\"\"2\u017C3\u017D+' 4!6\u017E!! %*\u1325 \"!.\u017F\"\"2\u017F3\u0180+' 4!6\u0181!! %*\u130D \"!.\u0182\"\"2\u01823\u0183+' 4!6\u0184!! %*\u12F5 \"!.\u0185\"\"2\u01853\u0186+' 4!6\u0187!! %*\u12DD \"!.\u0188\"\"2\u01883\u0189+' 4!6\u018A!! %*\u12C5 \"!.\u018B\"\"2\u018B3\u018C+' 4!6\u018D!! %*\u12AD \"!.\u018E\"\"2\u018E3\u018F+' 4!6\u0190!! %*\u1295 \"!.\u0191\"\"2\u01913\u0192+' 4!6\u0193!! %*\u127D \"!.\u0194\"\"2\u01943\u0195+' 4!6\u0196!! %*\u1265 \"!.\u0197\"\"2\u01973\u0198+' 4!6\u0199!! %*\u124D \"!.\u019A\"\"2\u019A3\u019B+' 4!6\u019C!! %*\u1235 \"!.\u019D\"\"2\u019D3\u019E+' 4!6\u019F!! %*\u121D \"!.\u01A0\"\"2\u01A03\u01A1+' 4!6\u01A2!! %*\u1205 \"!.\u01A3\"\"2\u01A33\u01A4+' 4!6\u01A5!! %*\u11ED \"!.\u01A6\"\"2\u01A63\u01A7+' 4!6\u01A8!! %*\u11D5 \"!.\u01A9\"\"2\u01A93\u01AA+' 4!6\u01AB!! %*\u11BD \"!.\u01AC\"\"2\u01AC3\u01AD+' 4!6\u01AE!! %*\u11A5 \"!.\u01AF\"\"2\u01AF3\u01B0+' 4!6\u01B1!! %*\u118D \"!.\u01B2\"\"2\u01B23\u01B3+' 4!6\u01B4!! %*\u1175 \"!.\u01B5\"\"2\u01B53\u01B6+' 4!6\u01B7!! %*\u115D \"!.\u01B8\"\"2\u01B83\u01B9+' 4!6\u01BA!! %*\u1145 \"!.\u01BB\"\"2\u01BB3\u01BC+' 4!6\u01BD!! %*\u112D \"!.\u01BE\"\"2\u01BE3\u01BF+' 4!6\u01C0!! %*\u1115 \"!.\u01C1\"\"2\u01C13\u01C2+' 4!6\u01C3!! %*\u10FD \"!.\u01C4\"\"2\u01C43\u01C5+' 4!6\u01C6!! %*\u10E5 \"!.\u01C7\"\"2\u01C73\u01C8+' 4!6\u01C9!! %*\u10CD \"!.\u01CA\"\"2\u01CA3\u01CB+' 4!6\u01CC!! %*\u10B5 \"!.\u01CD\"\"2\u01CD3\u01CE+' 4!6\u01CF!! %*\u109D \"!.\u01D0\"\"2\u01D03\u01D1+' 4!6\u01D2!! %*\u1085 \"!.\u01D3\"\"2\u01D33\u01D4+' 4!6\u01D5!! %*\u106D \"!.\u01D6\"\"2\u01D63\u01D7+' 4!6\u01D8!! %*\u1055 \"!.\u01D9\"\"2\u01D93\u01DA+' 4!6\u01DB!! %*\u103D \"!.\u01DC\"\"2\u01DC3\u01DD+' 4!6\u01DE!! %*\u1025 \"!.\u01DF\"\"2\u01DF3\u01E0+' 4!6\u01E1!! %*\u100D \"!.\u01E2\"\"2\u01E23\u01E3+' 4!6\u01E4!! %*\u0FF5 \"!.\u01E5\"\"2\u01E53\u01E6+' 4!6\u01E7!! %*\u0FDD \"!.\u01E8\"\"2\u01E83\u01E9+' 4!6\u01EA!! %*\u0FC5 \"!.\u01EB\"\"2\u01EB3\u01EC+' 4!6\u01ED!! %*\u0FAD \"!.\u01EE\"\"2\u01EE3\u01EF+' 4!6\u01F0!! %*\u0F95 \"!.\u01F1\"\"2\u01F13\u01F2+' 4!6\u01F3!! %*\u0F7D \"!.\u01F4\"\"2\u01F43\u01F5+' 4!6\u01F6!! %*\u0F65 \"!.\u01F7\"\"2\u01F73\u01F8+' 4!6\u01F9!! %*\u0F4D \"!.\u01FA\"\"2\u01FA3\u01FB+' 4!6\u01FC!! %*\u0F35 \"!.\u01FD\"\"2\u01FD3\u01FE+' 4!6\u01FF!! %*\u0F1D \"!.\u0200\"\"2\u02003\u0201+' 4!6\u0202!! %*\u0F05 \"!.\u0203\"\"2\u02033\u0204+' 4!6\u0205!! %*\u0EED \"!.\u0206\"\"2\u02063\u0207+' 4!6\u0208!! %*\u0ED5 \"!.\u0209\"\"2\u02093\u020A+' 4!6\u020B!! %*\u0EBD \"!.\u020C\"\"2\u020C3\u020D+' 4!6\u020E!! %*\u0EA5 \"!.\u020F\"\"2\u020F3\u0210+' 4!6\u0211!! %*\u0E8D \"!.\u0212\"\"2\u02123\u0213+' 4!6\u0214!! %*\u0E75 \"!.\u0215\"\"2\u02153\u0216+' 4!6\u0217!! %*\u0E5D \"!.\u0218\"\"2\u02183\u0219+' 4!6\u021A!! %*\u0E45 \"!.\u021B\"\"2\u021B3\u021C+' 4!6\u021D!! %*\u0E2D \"!.\u021E\"\"2\u021E3\u021F+' 4!6\u0220!! %*\u0E15 \"!.\u0221\"\"2\u02213\u0222+' 4!6\u0223!! %*\u0DFD \"!.\u0224\"\"2\u02243\u0225+' 4!6\u0226!! %*\u0DE5 \"!.\u0227\"\"2\u02273\u0228+' 4!6\u0229!! %*\u0DCD \"!.\u022A\"\"2\u022A3\u022B+' 4!6\u022C!! %*\u0DB5 \"!.\u022D\"\"2\u022D3\u022E+' 4!6\u022F!! %*\u0D9D \"!.\u0230\"\"2\u02303\u0231+' 4!6\u0232!! %*\u0D85 \"!.\u0233\"\"2\u02333\u0234+' 4!6\u0235!! %*\u0D6D \"!.\u0236\"\"2\u02363\u0237+' 4!6\u0238!! %*\u0D55 \"!.\u0239\"\"2\u02393\u023A+' 4!6\u023B!! %*\u0D3D \"!.\u023C\"\"2\u023C3\u023D+' 4!6\u023E!! %*\u0D25 \"!.\u023F\"\"2\u023F3\u0240+' 4!6\u0241!! %*\u0D0D \"!.\u0242\"\"2\u02423\u0243+' 4!6\u0244!! %*\u0CF5 \"!.\u0245\"\"2\u02453\u0246+' 4!6\u0247!! %*\u0CDD \"!.\u0248\"\"2\u02483\u0249+' 4!6\u024A!! %*\u0CC5 \"!.\u024B\"\"2\u024B3\u024C+' 4!6\u024D!! %*\u0CAD \"!.\u024E\"\"2\u024E3\u024F+' 4!6\u0250!! %*\u0C95 \"!.\u0251\"\"2\u02513\u0252+' 4!6\u0253!! %*\u0C7D \"!.\u0254\"\"2\u02543\u0255+' 4!6\u0256!! %*\u0C65 \"!.\u0257\"\"2\u02573\u0258+' 4!6\u0259!! %*\u0C4D \"!.\u025A\"\"2\u025A3\u025B+' 4!6\u025C!! %*\u0C35 \"!.\u025D\"\"2\u025D3\u025E+' 4!6\u025F!! %*\u0C1D \"!.\u0260\"\"2\u02603\u0261+' 4!6\u0262!! %*\u0C05 \"!.\u0263\"\"2\u02633\u0264+' 4!6\u0265!! %*\u0BED \"!.\u0266\"\"2\u02663\u0267+' 4!6\u0268!! %*\u0BD5 \"!.\u0269\"\"2\u02693\u026A+' 4!6\u026B!! %*\u0BBD \"!.\u026C\"\"2\u026C3\u026D+' 4!6\u026E!! %*\u0BA5 \"!.\u026F\"\"2\u026F3\u0270+' 4!6\u0271!! %*\u0B8D \"!.\u0272\"\"2\u02723\u0273+' 4!6\u0274!! %*\u0B75 \"!.\u0275\"\"2\u02753\u0276+' 4!6\u0277!! %*\u0B5D \"!.\u0278\"\"2\u02783\u0279+' 4!6\u027A!! %*\u0B45 \"!.\u027B\"\"2\u027B3\u027C+' 4!6\u027D!! %*\u0B2D \"!.\u027E\"\"2\u027E3\u027F+' 4!6\u0280!! %*\u0B15 \"!.\u0281\"\"2\u02813\u0282+' 4!6\u0283!! %*\u0AFD \"!.\u0284\"\"2\u02843\u0285+' 4!6\u0286!! %*\u0AE5 \"!.\u0287\"\"2\u02873\u0288+' 4!6\u0289!! %*\u0ACD \"!.\u028A\"\"2\u028A3\u028B+' 4!6\u028C!! %*\u0AB5 \"!.\u028D\"\"2\u028D3\u028E+' 4!6\u028F!! %*\u0A9D \"!.\u0290\"\"2\u02903\u0291+' 4!6\u0292!! %*\u0A85 \"!.\u0293\"\"2\u02933\u0294+' 4!6\u0295!! %*\u0A6D \"!.\u0296\"\"2\u02963\u0297+' 4!6\u0298!! %*\u0A55 \"!.\u0299\"\"2\u02993\u029A+' 4!6\u029B!! %*\u0A3D \"!.\u029C\"\"2\u029C3\u029D+' 4!6\u029E!! %*\u0A25 \"!.\u029F\"\"2\u029F3\u02A0+' 4!6\u02A1!! %*\u0A0D \"!.\u02A2\"\"2\u02A23\u02A3+' 4!6\u02A4!! %*\u09F5 \"!.\u02A5\"\"2\u02A53\u02A6+' 4!6\u02A7!! %*\u09DD \"!.\u02A8\"\"2\u02A83\u02A9+' 4!6\u02AA!! %*\u09C5 \"!.\u02AB\"\"2\u02AB3\u02AC+' 4!6\u02AD!! %*\u09AD \"!.\u02AE\"\"2\u02AE3\u02AF+' 4!6\u02B0!! %*\u0995 \"!.\u02B1\"\"2\u02B13\u02B2+' 4!6\u02B3!! %*\u097D \"!.\u02B4\"\"2\u02B43\u02B5+' 4!6\u02B6!! %*\u0965 \"!.\u02B7\"\"2\u02B73\u02B8+' 4!6\u02B9!! %*\u094D \"!.\u02BA\"\"2\u02BA3\u02BB+' 4!6\u02BC!! %*\u0935 \"!.\u02BD\"\"2\u02BD3\u02BE+' 4!6\u02BF!! %*\u091D \"!.\u02C0\"\"2\u02C03\u02C1+' 4!6\u02C2!! %*\u0905 \"!.\u02C3\"\"2\u02C33\u02C4+' 4!6\u02C5!! %*\u08ED \"!.\u02C6\"\"2\u02C63\u02C7+' 4!6\u02C8!! %*\u08D5 \"!.\u02C9\"\"2\u02C93\u02CA+' 4!6\u02CB!! %*\u08BD \"!.\u02CC\"\"2\u02CC3\u02CD+' 4!6\u02CE!! %*\u08A5 \"!.\u02CF\"\"2\u02CF3\u02D0+' 4!6\u02D1!! %*\u088D \"!.\u02D2\"\"2\u02D23\u02D3+' 4!6\u02D4!! %*\u0875 \"!.\u02D5\"\"2\u02D53\u02D6+' 4!6\u02D7!! %*\u085D \"!.\u02D8\"\"2\u02D83\u02D9+' 4!6\u02DA!! %*\u0845 \"!.\u02DB\"\"2\u02DB3\u02DC+' 4!6\u02DD!! %*\u082D \"!.\u02DE\"\"2\u02DE3\u02DF+' 4!6\u02E0!! %*\u0815 \"!.\u02E1\"\"2\u02E13\u02E2+' 4!6\u02E3!! %*\u07FD \"!.\u02E4\"\"2\u02E43\u02E5+' 4!6\u02E6!! %*\u07E5 \"!.\u02E7\"\"2\u02E73\u02E8+' 4!6\u02E9!! %*\u07CD \"!.\u02EA\"\"2\u02EA3\u02EB+' 4!6\u02EC!! %*\u07B5 \"!.\u02ED\"\"2\u02ED3\u02EE+' 4!6\u02EF!! %*\u079D \"!.\u02F0\"\"2\u02F03\u02F1+' 4!6\u02F2!! %*\u0785 \"!.\u02F3\"\"2\u02F33\u02F4+' 4!6\u02F5!! %*\u076D \"!.\u02F6\"\"2\u02F63\u02F7+' 4!6\u02F8!! %*\u0755 \"!.\u02F9\"\"2\u02F93\u02FA+' 4!6\u02FB!! %*\u073D \"!.\u02FC\"\"2\u02FC3\u02FD+' 4!6\u02FE!! %*\u0725 \"!.\u02FF\"\"2\u02FF3\u0300+' 4!6\u0301!! %*\u070D \"!.\u0302\"\"2\u03023\u0303+' 4!6\u0304!! %*\u06F5 \"!.\u0305\"\"2\u03053\u0306+' 4!6\u0307!! %*\u06DD \"!.\u0308\"\"2\u03083\u0309+' 4!6\u030A!! %*\u06C5 \"!.\u030B\"\"2\u030B3\u030C+' 4!6\u030D!! %*\u06AD \"!.\u030E\"\"2\u030E3\u030F+' 4!6\u0310!! %*\u0695 \"!.\u0311\"\"2\u03113\u0312+' 4!6\u0313!! %*\u067D \"!.\u0314\"\"2\u03143\u0315+' 4!6\u0316!! %*\u0665 \"!.\u0317\"\"2\u03173\u0318+' 4!6\u0319!! %*\u064D \"!.\u031A\"\"2\u031A3\u031B+' 4!6\u031C!! %*\u0635 \"!.\u031D\"\"2\u031D3\u031E+' 4!6\u031F!! %*\u061D \"!.\u0320\"\"2\u03203\u0321+' 4!6\u0322!! %*\u0605 \"!.\u0323\"\"2\u03233\u0324+' 4!6\u0325!! %*\u05ED \"!.\u0326\"\"2\u03263\u0327+' 4!6\u0328!! %*\u05D5 \"!.\u0329\"\"2\u03293\u032A+' 4!6\u032B!! %*\u05BD \"!.\u032C\"\"2\u032C3\u032D+' 4!6\u032E!! %*\u05A5 \"!.\u032F\"\"2\u032F3\u0330+' 4!6\u0331!! %*\u058D \"!.\u0332\"\"2\u03323\u0333+' 4!6\u0334!! %*\u0575 \"!.\u0335\"\"2\u03353\u0336+' 4!6\u0337!! %*\u055D \"!.\u0338\"\"2\u03383\u0339+' 4!6\u033A!! %*\u0545 \"!.\u033B\"\"2\u033B3\u033C+' 4!6\u033D!! %*\u052D \"!.\u033E\"\"2\u033E3\u033F+' 4!6\u0340!! %*\u0515 \"!.\u0341\"\"2\u03413\u0342+' 4!6\u0343!! %*\u04FD \"!.\u0344\"\"2\u03443\u0345+' 4!6\u0346!! %*\u04E5 \"!.\u0347\"\"2\u03473\u0348+' 4!6\u0349!! %*\u04CD \"!.\u034A\"\"2\u034A3\u034B+' 4!6\u034C!! %*\u04B5 \"!.\u034D\"\"2\u034D3\u034E+' 4!6\u034F!! %*\u049D \"!.\u0350\"\"2\u03503\u0351+' 4!6\u0352!! %*\u0485 \"!.\u0353\"\"2\u03533\u0354+' 4!6\u0355!! %*\u046D \"!.\u0356\"\"2\u03563\u0357+' 4!6\u0358!! %*\u0455 \"!.\u0359\"\"2\u03593\u035A+' 4!6\u035B!! %*\u043D \"!.\u035C\"\"2\u035C3\u035D+' 4!6\u035E!! %*\u0425 \"!.\u035F\"\"2\u035F3\u0360+' 4!6\u0361!! %*\u040D \"!.\u0362\"\"2\u03623\u0363+' 4!6\u0364!! %*\u03F5 \"!.\u0365\"\"2\u03653\u0366+' 4!6\u0367!! %*\u03DD \"!.\u0368\"\"2\u03683\u0369+' 4!6\u036A!! %*\u03C5 \"!.\u036B\"\"2\u036B3\u036C+' 4!6\u036D!! %*\u03AD \"!.\u036E\"\"2\u036E3\u036F+' 4!6\u0370!! %*\u0395 \"!.\u0371\"\"2\u03713\u0372+' 4!6\u0373!! %*\u037D \"!.\u0374\"\"2\u03743\u0375+' 4!6\u0376!! %*\u0365 \"!.\u0377\"\"2\u03773\u0378+' 4!6\u0379!! %*\u034D \"!.\u037A\"\"2\u037A3\u037B+' 4!6\u037C!! %*\u0335 \"!.\u037D\"\"2\u037D3\u037E+' 4!6\u037F!! %*\u031D \"!.\u0380\"\"2\u03803\u0381+' 4!6\u0382!! %*\u0305 \"!.\u0383\"\"2\u03833\u0384+' 4!6\u0385!! %*\u02ED \"!.\u0386\"\"2\u03863\u0387+' 4!6\u0388!! %*\u02D5 \"!.\u0389\"\"2\u03893\u038A+' 4!6\u038B!! %*\u02BD \"!.\u038C\"\"2\u038C3\u038D+' 4!6\u038E!! %*\u02A5 \"!.\u038F\"\"2\u038F3\u0390+' 4!6\u0391!! %*\u028D \"!.\u0392\"\"2\u03923\u0393+' 4!6\u0394!! %*\u0275 \"!.\u0395\"\"2\u03953\u0396+' 4!6\u0397!! %*\u025D \"!.\u0398\"\"2\u03983\u0399+' 4!6\u039A!! %*\u0245 \"!.\u039B\"\"2\u039B3\u039C+' 4!6\u039D!! %*\u022D \"!.\u039E\"\"2\u039E3\u039F+' 4!6\u03A0!! %*\u0215 \"!.\u03A1\"\"2\u03A13\u03A2+' 4!6\u03A3!! %*\u01FD \"!.\u03A4\"\"2\u03A43\u03A5+' 4!6\u03A6!! %*\u01E5 \"!.\u03A7\"\"2\u03A73\u03A8+' 4!6\u03A9!! %*\u01CD \"!.\u03AA\"\"2\u03AA3\u03AB+' 4!6\u03AC!! %*\u01B5 \"!.\u03AD\"\"2\u03AD3\u03AE+' 4!6\u03AF!! %*\u019D \"!.\u03B0\"\"2\u03B03\u03B1+' 4!6\u03B2!! %*\u0185 \"!.\u03B3\"\"2\u03B33\u03B4+' 4!6\u03B5!! %*\u016D \"!.\u03B6\"\"2\u03B63\u03B7+' 4!6\u03B8!! %*\u0155 \"!.\u03B9\"\"2\u03B93\u03BA+' 4!6\u03BB!! %*\u013D \"!.\u03BC\"\"2\u03BC3\u03BD+' 4!6\u03BE!! %*\u0125 \"!.\u03BF\"\"2\u03BF3\u03C0+' 4!6\u03C1!! %*\u010D \"!.\u03C2\"\"2\u03C23\u03C3+' 4!6\u03C4!! %*\xF5 \"!.\u03C5\"\"2\u03C53\u03C6+' 4!6\u03C7!! %*\xDD \"!.\u03C8\"\"2\u03C83\u03C9+' 4!6\u03CA!! %*\xC5 \"!.\u03CB\"\"2\u03CB3\u03CC+' 4!6\u03CD!! %*\xAD \"!.\u03CE\"\"2\u03CE3\u03CF+' 4!6\u03D0!! %*\x95 \"!.\u03D1\"\"2\u03D13\u03D2+' 4!6\u03D3!! %*} \"!.\u03D4\"\"2\u03D43\u03D5+' 4!6\u03D6!! %*e \"!.\u03D7\"\"2\u03D73\u03D8+' 4!6\u03D9!! %*M \"!.\u03DA\"\"2\u03DA3\u03DB+' 4!6\u03DC!! %*5 \"!.\u03DD\"\"2\u03DD3\u03DE+' 4!6\u03DF!! %"), peg$decode(".\u03E0\"\"2\u03E03\u03E1*\u0131 \".\u03E2\"\"2\u03E23\u03E3*\u0125 \".\u03E4\"\"2\u03E43\u03E5*\u0119 \".\u0392\"\"2\u03923\u0393*\u010D \".\u039E\"\"2\u039E3\u039F*\u0101 \".\u0395\"\"2\u03953\u0396*\xF5 \".\u03E6\"\"2\u03E63\u03E7*\xE9 \".\u03E8\"\"2\u03E83\u03E9*\xDD \".\u03D1\"\"2\u03D13\u03D2*\xD1 \".\u03EA\"\"2\u03EA3\u03EB*\xC5 \".\u03D4\"\"2\u03D43\u03D5*\xB9 \".\u03EC\"\"2\u03EC3\u03ED*\xAD \".\u03AA\"\"2\u03AA3\u03AB*\xA1 \".\u038F\"\"2\u038F3\u0390*\x95 \".\u03EE\"\"2\u03EE3\u03EF*\x89 \".\u03F0\"\"2\u03F03\u03F1*} \".\u03F2\"\"2\u03F23\u03F3*q \".\u03DA\"\"2\u03DA3\u03DB*e \".\u03F4\"\"2\u03F43\u03F5*Y \".\u03F6\"\"2\u03F63\u03F7*M \".\u03F8\"\"2\u03F83\u03F9*A \".\u03FA\"\"2\u03FA3\u03FB*5 \".\u03FC\"\"2\u03FC3\u03FD*) \".\u03FE\"\"2\u03FE3\u03FF")],
        peg$currPos = 0,
        peg$reportedPos = 0,
        peg$cachedPos = 0,
        peg$cachedPosDetails = {
      line: 1,
      column: 1,
      seenCR: false
    },
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(null, [{
        type: "other",
        description: description
      }], peg$reportedPos);
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);

          if (ch === "\n") {
            if (!details.seenCR) {
              details.line++;
            }

            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = {
            line: 1,
            column: 1,
            seenCR: false
          };
        }

        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;
        expected.sort(function (a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }

          return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\x08/g, '\\b').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) {
            return '\\x0' + hex(ch);
          }).replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) {
            return '\\x' + hex(ch);
          }).replace(/[\u0180-\u0FFF]/g, function (ch) {
            return "\\u0" + hex(ch);
          }).replace(/[\u1080-\uFFFF]/g, function (ch) {
            return "\\u" + hex(ch);
          });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc,
            foundDesc,
            i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(", ") + " or " + expectedDescs[expected.length - 1] : expectedDescs[0];
        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";
        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, pos, posDetails.line, posDetails.column);
    }

    function peg$decode(s) {
      var bc = new Array(s.length),
          i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc = peg$bytecode[index],
          ip = 0,
          ips = [],
          end = bc.length,
          ends = [],
          stack = [],
          params,
          i;

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);
                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);

              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }

              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);

              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(stack.length - bc[ip + 2], bc[ip + 2], peg$consts[bc[ip + 1]].apply(null, params));
              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }

    helpers = require('../lib/helpers');
    prefixes = require('./prefixes.json');
    prefixMetadata = require('./prefixMetadata.json');
    unitMetadata = require('./unitMetadata.json');
    metrics = require('./metrics.json');
    multiply = helpers.multiply;
    topower = helpers.topower;
    cleanup = helpers.cleanup;
    ismetric = helpers.ismetric(metrics);
    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({
          type: "end",
          description: "end of input"
        });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse: parse
  };
}();

},{"../lib/helpers":55,"./metrics.json":50,"./prefixMetadata.json":51,"./prefixes.json":52,"./unitMetadata.json":54}],54:[function(require,module,exports){
module.exports={
  "10*": {
    "isBase": false,
    "CODE": "10*",
    "isMetric": "no",
    "class": "dimless",
    "names": [
      "the number ten for arbitrary powers"
    ],
    "printSymbols": [
      "10"
    ],
    "properties": [
      "number"
    ],
    "values": [
      {
        "printable": "10",
        "numeric": 10
      }
    ]
  },
  "10^": {
    "isBase": false,
    "CODE": "10^",
    "isMetric": "no",
    "class": "dimless",
    "names": [
      "the number ten for arbitrary powers"
    ],
    "printSymbols": [
      "10"
    ],
    "properties": [
      "number"
    ],
    "values": [
      {
        "printable": "10",
        "numeric": 10
      }
    ]
  },
  "[pi]": {
    "isBase": false,
    "CODE": "[PI]",
    "isMetric": "no",
    "class": "dimless",
    "names": [
      "the number pi"
    ],
    "printSymbols": [
      "&#960;"
    ],
    "properties": [
      "number"
    ],
    "values": [
      {
        "printable": "&#960;",
        "numeric": 3.141592653589793
      }
    ]
  },
  "%": {
    "isBase": false,
    "CODE": "%",
    "isMetric": "no",
    "class": "dimless",
    "names": [
      "percent"
    ],
    "printSymbols": [
      "%"
    ],
    "properties": [
      "fraction"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[ppth]": {
    "isBase": false,
    "CODE": "[PPTH]",
    "isMetric": "no",
    "class": "dimless",
    "names": [
      "parts per thousand"
    ],
    "printSymbols": [
      "ppth"
    ],
    "properties": [
      "fraction"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[ppm]": {
    "isBase": false,
    "CODE": "[PPM]",
    "isMetric": "no",
    "class": "dimless",
    "names": [
      "parts per million"
    ],
    "printSymbols": [
      "ppm"
    ],
    "properties": [
      "fraction"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[ppb]": {
    "isBase": false,
    "CODE": "[PPB]",
    "isMetric": "no",
    "class": "dimless",
    "names": [
      "parts per billion"
    ],
    "printSymbols": [
      "ppb"
    ],
    "properties": [
      "fraction"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[pptr]": {
    "isBase": false,
    "CODE": "[PPTR]",
    "isMetric": "no",
    "class": "dimless",
    "names": [
      "parts per trillion"
    ],
    "printSymbols": [
      "pptr"
    ],
    "properties": [
      "fraction"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "mol": {
    "isBase": false,
    "CODE": "MOL",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "mole"
    ],
    "printSymbols": [
      "mol"
    ],
    "properties": [
      "amount of substance"
    ],
    "values": [
      {
        "printable": "6.0221367",
        "numeric": 6.0221367
      }
    ]
  },
  "sr": {
    "isBase": false,
    "CODE": "SR",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "steradian"
    ],
    "printSymbols": [
      "sr"
    ],
    "properties": [
      "solid angle"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Hz": {
    "isBase": false,
    "CODE": "HZ",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Hertz"
    ],
    "printSymbols": [
      "Hz"
    ],
    "properties": [
      "frequency"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "N": {
    "isBase": false,
    "CODE": "N",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Newton"
    ],
    "printSymbols": [
      "N"
    ],
    "properties": [
      "force"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Pa": {
    "isBase": false,
    "CODE": "PAL",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Pascal"
    ],
    "printSymbols": [
      "Pa"
    ],
    "properties": [
      "pressure"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "J": {
    "isBase": false,
    "CODE": "J",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Joule"
    ],
    "printSymbols": [
      "J"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "W": {
    "isBase": false,
    "CODE": "W",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Watt"
    ],
    "printSymbols": [
      "W"
    ],
    "properties": [
      "power"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "A": {
    "isBase": false,
    "CODE": "A",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Ampère"
    ],
    "printSymbols": [
      "A"
    ],
    "properties": [
      "electric current"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "V": {
    "isBase": false,
    "CODE": "V",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Volt"
    ],
    "printSymbols": [
      "V"
    ],
    "properties": [
      "electric potential"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "F": {
    "isBase": false,
    "CODE": "F",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Farad"
    ],
    "printSymbols": [
      "F"
    ],
    "properties": [
      "electric capacitance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Ohm": {
    "isBase": false,
    "CODE": "OHM",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Ohm"
    ],
    "printSymbols": [
      "&#937;"
    ],
    "properties": [
      "electric resistance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "S": {
    "isBase": false,
    "CODE": "SIE",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Siemens"
    ],
    "printSymbols": [
      "S"
    ],
    "properties": [
      "electric conductance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Wb": {
    "isBase": false,
    "CODE": "WB",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Weber"
    ],
    "printSymbols": [
      "Wb"
    ],
    "properties": [
      "magentic flux"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Cel": {
    "isBase": false,
    "CODE": "CEL",
    "isMetric": "yes",
    "isSpecial": "yes",
    "class": "si",
    "names": [
      "degree Celsius"
    ],
    "printSymbols": [
      "&#176;C"
    ],
    "properties": [
      "temperature"
    ],
    "values": [
      {
        "printable": "<function name=\"Cel\" value=\"1\" Unit=\"K\"/>",
        "numeric": null
      }
    ]
  },
  "T": {
    "isBase": false,
    "CODE": "T",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Tesla"
    ],
    "printSymbols": [
      "T"
    ],
    "properties": [
      "magnetic flux density"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "H": {
    "isBase": false,
    "CODE": "H",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Henry"
    ],
    "printSymbols": [
      "H"
    ],
    "properties": [
      "inductance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "lm": {
    "isBase": false,
    "CODE": "LM",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "lumen"
    ],
    "printSymbols": [
      "lm"
    ],
    "properties": [
      "luminous flux"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "lx": {
    "isBase": false,
    "CODE": "LX",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "lux"
    ],
    "printSymbols": [
      "lx"
    ],
    "properties": [
      "illuminance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Bq": {
    "isBase": false,
    "CODE": "BQ",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Becquerel"
    ],
    "printSymbols": [
      "Bq"
    ],
    "properties": [
      "radioactivity"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Gy": {
    "isBase": false,
    "CODE": "GY",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Gray"
    ],
    "printSymbols": [
      "Gy"
    ],
    "properties": [
      "energy dose"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Sv": {
    "isBase": false,
    "CODE": "SV",
    "isMetric": "yes",
    "class": "si",
    "names": [
      "Sievert"
    ],
    "printSymbols": [
      "Sv"
    ],
    "properties": [
      "dose equivalent"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "gon": {
    "isBase": false,
    "CODE": "GON",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "gon",
      "grade"
    ],
    "printSymbols": [
      "&#9633;<sup>g</sup>"
    ],
    "properties": [
      "plane angle"
    ],
    "values": [
      {
        "printable": "0.9",
        "numeric": 0.9
      }
    ]
  },
  "deg": {
    "isBase": false,
    "CODE": "DEG",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "degree"
    ],
    "printSymbols": [
      "&#176;"
    ],
    "properties": [
      "plane angle"
    ],
    "values": [
      {
        "printable": "2",
        "numeric": 2
      }
    ]
  },
  "'": {
    "isBase": false,
    "CODE": "'",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "minute"
    ],
    "printSymbols": [
      "'"
    ],
    "properties": [
      "plane angle"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "''": {
    "isBase": false,
    "CODE": "''",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "second"
    ],
    "printSymbols": [
      "''"
    ],
    "properties": [
      "plane angle"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "l": {
    "isBase": false,
    "CODE": "L",
    "isMetric": "yes",
    "class": "iso1000",
    "names": [
      "liter"
    ],
    "printSymbols": [
      "l"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "L": {
    "isBase": false,
    "isMetric": "yes",
    "class": "iso1000",
    "names": [
      "liter"
    ],
    "printSymbols": [
      "L"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "ar": {
    "isBase": false,
    "CODE": "AR",
    "isMetric": "yes",
    "class": "iso1000",
    "names": [
      "are"
    ],
    "printSymbols": [
      "a"
    ],
    "properties": [
      "area"
    ],
    "values": [
      {
        "printable": "100",
        "numeric": 100
      }
    ]
  },
  "min": {
    "isBase": false,
    "CODE": "MIN",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "minute"
    ],
    "printSymbols": [
      "min"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "60",
        "numeric": 60
      }
    ]
  },
  "h": {
    "isBase": false,
    "CODE": "HR",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "hour"
    ],
    "printSymbols": [
      "h"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "60",
        "numeric": 60
      }
    ]
  },
  "d": {
    "isBase": false,
    "CODE": "D",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "day"
    ],
    "printSymbols": [
      "d"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "24",
        "numeric": 24
      }
    ]
  },
  "a_t": {
    "isBase": false,
    "CODE": "ANN_T",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "tropical year"
    ],
    "printSymbols": [
      "a<sub>t</sub>"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "365.24219",
        "numeric": 365.24219
      }
    ]
  },
  "a_j": {
    "isBase": false,
    "CODE": "ANN_J",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "mean Julian year"
    ],
    "printSymbols": [
      "a<sub>j</sub>"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "365.25",
        "numeric": 365.25
      }
    ]
  },
  "a_g": {
    "isBase": false,
    "CODE": "ANN_G",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "mean Gregorian year"
    ],
    "printSymbols": [
      "a<sub>g</sub>"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "365.2425",
        "numeric": 365.2425
      }
    ]
  },
  "a": {
    "isBase": false,
    "CODE": "ANN",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "year"
    ],
    "printSymbols": [
      "a"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "wk": {
    "isBase": false,
    "CODE": "WK",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "week"
    ],
    "printSymbols": [
      "wk"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "7",
        "numeric": 7
      }
    ]
  },
  "mo_s": {
    "isBase": false,
    "CODE": "MO_S",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "synodal month"
    ],
    "printSymbols": [
      "mo<sub>s</sub>"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "29.53059",
        "numeric": 29.53059
      }
    ]
  },
  "mo_j": {
    "isBase": false,
    "CODE": "MO_J",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "mean Julian month"
    ],
    "printSymbols": [
      "mo<sub>j</sub>"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "mo_g": {
    "isBase": false,
    "CODE": "MO_G",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "mean Gregorian month"
    ],
    "printSymbols": [
      "mo<sub>g</sub>"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "mo": {
    "isBase": false,
    "CODE": "MO",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "month"
    ],
    "printSymbols": [
      "mo"
    ],
    "properties": [
      "time"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "t": {
    "isBase": false,
    "CODE": "TNE",
    "isMetric": "yes",
    "class": "iso1000",
    "names": [
      "tonne"
    ],
    "printSymbols": [
      "t"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>3</sup>",
        "numeric": 1000
      }
    ]
  },
  "bar": {
    "isBase": false,
    "CODE": "BAR",
    "isMetric": "yes",
    "class": "iso1000",
    "names": [
      "bar"
    ],
    "printSymbols": [
      "bar"
    ],
    "properties": [
      "pressure"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>5</sup>",
        "numeric": 100000
      }
    ]
  },
  "u": {
    "isBase": false,
    "CODE": "AMU",
    "isMetric": "yes",
    "class": "iso1000",
    "names": [
      "unified atomic mass unit"
    ],
    "printSymbols": [
      "u"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "1.6605402 &#215; 10<sup>-24</sup>",
        "numeric": 1.6605402e-24
      }
    ]
  },
  "eV": {
    "isBase": false,
    "CODE": "EV",
    "isMetric": "yes",
    "class": "iso1000",
    "names": [
      "electronvolt"
    ],
    "printSymbols": [
      "eV"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "AU": {
    "isBase": false,
    "CODE": "ASU",
    "isMetric": "no",
    "class": "iso1000",
    "names": [
      "astronomic unit"
    ],
    "printSymbols": [
      "AU"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "149597.870691",
        "numeric": 149597.870691
      }
    ]
  },
  "pc": {
    "isBase": false,
    "CODE": "PRS",
    "isMetric": "yes",
    "class": "iso1000",
    "names": [
      "parsec"
    ],
    "printSymbols": [
      "pc"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "3.085678 &#215; 10<sup>16</sup>",
        "numeric": 30856780000000000
      }
    ]
  },
  "[c]": {
    "isBase": false,
    "CODE": "[C]",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "velocity of light"
    ],
    "printSymbols": [
      "<i>c</i>"
    ],
    "properties": [
      "velocity"
    ],
    "values": [
      {
        "printable": "299792458",
        "numeric": 299792458
      }
    ]
  },
  "[h]": {
    "isBase": false,
    "CODE": "[H]",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "Planck constant"
    ],
    "printSymbols": [
      "<i>h</i>"
    ],
    "properties": [
      "action"
    ],
    "values": [
      {
        "printable": "6.6260755 &#215; 10<sup>-24</sup>",
        "numeric": 6.6260755e-24
      }
    ]
  },
  "[k]": {
    "isBase": false,
    "CODE": "[K]",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "Boltzmann constant"
    ],
    "printSymbols": [
      "<i>k</i>"
    ],
    "properties": [
      "(unclassified)"
    ],
    "values": [
      {
        "printable": "1.380658 &#215; 10<sup>-23</sup>",
        "numeric": 1.380658e-23
      }
    ]
  },
  "[eps_0]": {
    "isBase": false,
    "CODE": "[EPS_0]",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "permittivity of vacuum"
    ],
    "printSymbols": [
      "<i>&#949;<sub>\n               <r>0</r>\n            </sub>\n         </i>"
    ],
    "properties": [
      "electric permittivity"
    ],
    "values": [
      {
        "printable": "8.854187817 &#215; 10<sup>-12</sup>",
        "numeric": 8.854187817e-12
      }
    ]
  },
  "[mu_0]": {
    "isBase": false,
    "CODE": "[MU_0]",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "permeability of vacuum"
    ],
    "printSymbols": [
      "<i>&#956;<sub>\n               <r>0</r>\n            </sub>\n         </i>"
    ],
    "properties": [
      "magnetic permeability"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[e]": {
    "isBase": false,
    "CODE": "[E]",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "elementary charge"
    ],
    "printSymbols": [
      "<i>e</i>"
    ],
    "properties": [
      "electric charge"
    ],
    "values": [
      {
        "printable": "1.60217733 &#215; 10<sup>-19</sup>",
        "numeric": 1.60217733e-19
      }
    ]
  },
  "[m_e]": {
    "isBase": false,
    "CODE": "[M_E]",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "electron mass"
    ],
    "printSymbols": [
      "<i>m<sub>\n               <r>e</r>\n            </sub>\n         </i>"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "9.1093897 &#215; 10<sup>-28</sup>",
        "numeric": 9.1093897e-28
      }
    ]
  },
  "[m_p]": {
    "isBase": false,
    "CODE": "[M_P]",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "proton mass"
    ],
    "printSymbols": [
      "<i>m<sub>\n               <r>p</r>\n            </sub>\n         </i>"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "1.6726231 &#215; 10<sup>-24</sup>",
        "numeric": 1.6726231e-24
      }
    ]
  },
  "[G]": {
    "isBase": false,
    "CODE": "[GC]",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "Newtonian constant of gravitation"
    ],
    "printSymbols": [
      "<i>G</i>"
    ],
    "properties": [
      "(unclassified)"
    ],
    "values": [
      {
        "printable": "6.67259 &#215; 10<sup>-11</sup>",
        "numeric": 6.67259e-11
      }
    ]
  },
  "[g]": {
    "isBase": false,
    "CODE": "[G]",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "standard acceleration of free fall"
    ],
    "printSymbols": [
      "<i>g<sub>n</sub>\n         </i>"
    ],
    "properties": [
      "acceleration"
    ],
    "values": [
      {
        "printable": "9.80665",
        "numeric": 9.80665
      }
    ]
  },
  "atm": {
    "isBase": false,
    "CODE": "ATM",
    "isMetric": "no",
    "class": "const",
    "names": [
      "standard atmosphere"
    ],
    "printSymbols": [
      "atm"
    ],
    "properties": [
      "pressure"
    ],
    "values": [
      {
        "printable": "101325",
        "numeric": 101325
      }
    ]
  },
  "[ly]": {
    "isBase": false,
    "CODE": "[LY]",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "light-year"
    ],
    "printSymbols": [
      "l.y."
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "gf": {
    "isBase": false,
    "CODE": "GF",
    "isMetric": "yes",
    "class": "const",
    "names": [
      "gram-force"
    ],
    "printSymbols": [
      "gf"
    ],
    "properties": [
      "force"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[lbf_av]": {
    "isBase": false,
    "CODE": "[LBF_AV]",
    "isMetric": "no",
    "class": "const",
    "names": [
      "pound force"
    ],
    "printSymbols": [
      "lbf"
    ],
    "properties": [
      "force"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Ky": {
    "isBase": false,
    "CODE": "KY",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Kayser"
    ],
    "printSymbols": [
      "K"
    ],
    "properties": [
      "lineic number"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Gal": {
    "isBase": false,
    "CODE": "GL",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Gal"
    ],
    "printSymbols": [
      "Gal"
    ],
    "properties": [
      "acceleration"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "dyn": {
    "isBase": false,
    "CODE": "DYN",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "dyne"
    ],
    "printSymbols": [
      "dyn"
    ],
    "properties": [
      "force"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "erg": {
    "isBase": false,
    "CODE": "ERG",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "erg"
    ],
    "printSymbols": [
      "erg"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "P": {
    "isBase": false,
    "CODE": "P",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Poise"
    ],
    "printSymbols": [
      "P"
    ],
    "properties": [
      "dynamic viscosity"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Bi": {
    "isBase": false,
    "CODE": "BI",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Biot"
    ],
    "printSymbols": [
      "Bi"
    ],
    "properties": [
      "electric current"
    ],
    "values": [
      {
        "printable": "10",
        "numeric": 10
      }
    ]
  },
  "St": {
    "isBase": false,
    "CODE": "ST",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Stokes"
    ],
    "printSymbols": [
      "St"
    ],
    "properties": [
      "kinematic viscosity"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Mx": {
    "isBase": false,
    "CODE": "MX",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Maxwell"
    ],
    "printSymbols": [
      "Mx"
    ],
    "properties": [
      "flux of magnetic induction"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-8</sup>",
        "numeric": 1e-8
      }
    ]
  },
  "G": {
    "isBase": false,
    "CODE": "GS",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Gauss"
    ],
    "printSymbols": [
      "Gs"
    ],
    "properties": [
      "magnetic flux density"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-4</sup>",
        "numeric": 0.0001
      }
    ]
  },
  "Oe": {
    "isBase": false,
    "CODE": "OE",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Oersted"
    ],
    "printSymbols": [
      "Oe"
    ],
    "properties": [
      "magnetic field intensity"
    ],
    "values": [
      {
        "printable": "250",
        "numeric": 250
      }
    ]
  },
  "Gb": {
    "isBase": false,
    "CODE": "GB",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Gilbert"
    ],
    "printSymbols": [
      "Gb"
    ],
    "properties": [
      "magnetic tension"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "sb": {
    "isBase": false,
    "CODE": "SB",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "stilb"
    ],
    "printSymbols": [
      "sb"
    ],
    "properties": [
      "lum. intensity density"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Lmb": {
    "isBase": false,
    "CODE": "LMB",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Lambert"
    ],
    "printSymbols": [
      "L"
    ],
    "properties": [
      "brightness"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "ph": {
    "isBase": false,
    "CODE": "PHT",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "phot"
    ],
    "printSymbols": [
      "ph"
    ],
    "properties": [
      "illuminance"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-4</sup>",
        "numeric": 0.0001
      }
    ]
  },
  "Ci": {
    "isBase": false,
    "CODE": "CI",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Curie"
    ],
    "printSymbols": [
      "Ci"
    ],
    "properties": [
      "radioactivity"
    ],
    "values": [
      {
        "printable": "3.7 &#215; 10<sup>10</sup>",
        "numeric": 37000000000
      }
    ]
  },
  "R": {
    "isBase": false,
    "CODE": "ROE",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "Roentgen"
    ],
    "printSymbols": [
      "R"
    ],
    "properties": [
      "ion dose"
    ],
    "values": [
      {
        "printable": "2.58 &#215; 10<sup>-4</sup>",
        "numeric": 0.000258
      }
    ]
  },
  "RAD": {
    "isBase": false,
    "CODE": "[RAD]",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "radiation absorbed dose"
    ],
    "printSymbols": [
      "RAD"
    ],
    "properties": [
      "energy dose"
    ],
    "values": [
      {
        "printable": "100",
        "numeric": 100
      }
    ]
  },
  "REM": {
    "isBase": false,
    "CODE": "[REM]",
    "isMetric": "yes",
    "class": "cgs",
    "names": [
      "radiation equivalent man"
    ],
    "printSymbols": [
      "REM"
    ],
    "properties": [
      "dose equivalent"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[in_i]": {
    "isBase": false,
    "CODE": "[IN_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "inch"
    ],
    "printSymbols": [
      "in"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "2.54",
        "numeric": 2.54
      }
    ]
  },
  "[ft_i]": {
    "isBase": false,
    "CODE": "[FT_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "foot"
    ],
    "printSymbols": [
      "ft"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "12",
        "numeric": 12
      }
    ]
  },
  "[yd_i]": {
    "isBase": false,
    "CODE": "[YD_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "yard"
    ],
    "printSymbols": [
      "yd"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "3",
        "numeric": 3
      }
    ]
  },
  "[mi_i]": {
    "isBase": false,
    "CODE": "[MI_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "statute mile"
    ],
    "printSymbols": [
      "mi"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "5280",
        "numeric": 5280
      }
    ]
  },
  "[fth_i]": {
    "isBase": false,
    "CODE": "[FTH_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "fathom"
    ],
    "printSymbols": [
      "fth"
    ],
    "properties": [
      "depth of water"
    ],
    "values": [
      {
        "printable": "6",
        "numeric": 6
      }
    ]
  },
  "[nmi_i]": {
    "isBase": false,
    "CODE": "[NMI_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "nautical mile"
    ],
    "printSymbols": [
      "n.mi"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1852",
        "numeric": 1852
      }
    ]
  },
  "[kn_i]": {
    "isBase": false,
    "CODE": "[KN_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "knot"
    ],
    "printSymbols": [
      "knot"
    ],
    "properties": [
      "velocity"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[sin_i]": {
    "isBase": false,
    "CODE": "[SIN_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "square inch"
    ],
    "properties": [
      "area"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[sft_i]": {
    "isBase": false,
    "CODE": "[SFT_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "square foot"
    ],
    "properties": [
      "area"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[syd_i]": {
    "isBase": false,
    "CODE": "[SYD_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "square yard"
    ],
    "properties": [
      "area"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[cin_i]": {
    "isBase": false,
    "CODE": "[CIN_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "cubic inch"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[cft_i]": {
    "isBase": false,
    "CODE": "[CFT_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "cubic foot"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[cyd_i]": {
    "isBase": false,
    "CODE": "[CYD_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "cubic yard"
    ],
    "printSymbols": [
      "cu.yd"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[bf_i]": {
    "isBase": false,
    "CODE": "[BF_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "board foot"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "144",
        "numeric": 144
      }
    ]
  },
  "[cr_i]": {
    "isBase": false,
    "CODE": "[CR_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "cord"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "128",
        "numeric": 128
      }
    ]
  },
  "[mil_i]": {
    "isBase": false,
    "CODE": "[MIL_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "mil"
    ],
    "printSymbols": [
      "mil"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-3</sup>",
        "numeric": 0.001
      }
    ]
  },
  "[cml_i]": {
    "isBase": false,
    "CODE": "[CML_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "circular mil"
    ],
    "printSymbols": [
      "circ.mil"
    ],
    "properties": [
      "area"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[hd_i]": {
    "isBase": false,
    "CODE": "[HD_I]",
    "isMetric": "no",
    "class": "intcust",
    "names": [
      "hand"
    ],
    "printSymbols": [
      "hd"
    ],
    "properties": [
      "height of horses"
    ],
    "values": [
      {
        "printable": "4",
        "numeric": 4
      }
    ]
  },
  "[ft_us]": {
    "isBase": false,
    "CODE": "[FT_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "foot"
    ],
    "printSymbols": [
      "ft<sub>us</sub>"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1200",
        "numeric": 1200
      }
    ]
  },
  "[yd_us]": {
    "isBase": false,
    "CODE": "[YD_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "yard"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "3",
        "numeric": 3
      }
    ]
  },
  "[in_us]": {
    "isBase": false,
    "CODE": "[IN_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "inch"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[rd_us]": {
    "isBase": false,
    "CODE": "[RD_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "rod"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "16.5",
        "numeric": 16.5
      }
    ]
  },
  "[ch_us]": {
    "isBase": false,
    "CODE": "[CH_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "Gunter's chain",
      "Surveyor's chain"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "4",
        "numeric": 4
      }
    ]
  },
  "[lk_us]": {
    "isBase": false,
    "CODE": "[LK_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "link for Gunter's chain"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[rch_us]": {
    "isBase": false,
    "CODE": "[RCH_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "Ramden's chain",
      "Engineer's chain"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "100",
        "numeric": 100
      }
    ]
  },
  "[rlk_us]": {
    "isBase": false,
    "CODE": "[RLK_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "link for Ramden's chain"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[fth_us]": {
    "isBase": false,
    "CODE": "[FTH_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "fathom"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "6",
        "numeric": 6
      }
    ]
  },
  "[fur_us]": {
    "isBase": false,
    "CODE": "[FUR_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "furlong"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "40",
        "numeric": 40
      }
    ]
  },
  "[mi_us]": {
    "isBase": false,
    "CODE": "[MI_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "mile"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "8",
        "numeric": 8
      }
    ]
  },
  "[acr_us]": {
    "isBase": false,
    "CODE": "[ACR_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "acre"
    ],
    "properties": [
      "area"
    ],
    "values": [
      {
        "printable": "160",
        "numeric": 160
      }
    ]
  },
  "[srd_us]": {
    "isBase": false,
    "CODE": "[SRD_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "square rod"
    ],
    "properties": [
      "area"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[smi_us]": {
    "isBase": false,
    "CODE": "[SMI_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "square mile"
    ],
    "properties": [
      "area"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[sct]": {
    "isBase": false,
    "CODE": "[SCT]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "section"
    ],
    "properties": [
      "area"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[twp]": {
    "isBase": false,
    "CODE": "[TWP]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "township"
    ],
    "properties": [
      "area"
    ],
    "values": [
      {
        "printable": "36",
        "numeric": 36
      }
    ]
  },
  "[mil_us]": {
    "isBase": false,
    "CODE": "[MIL_US]",
    "isMetric": "no",
    "class": "us-lengths",
    "names": [
      "mil"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1 &#215; 10<sup>-3</sup>",
        "numeric": 0.001
      }
    ]
  },
  "[in_br]": {
    "isBase": false,
    "CODE": "[IN_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "inch"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "2.539998",
        "numeric": 2.539998
      }
    ]
  },
  "[ft_br]": {
    "isBase": false,
    "CODE": "[FT_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "foot"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "12",
        "numeric": 12
      }
    ]
  },
  "[rd_br]": {
    "isBase": false,
    "CODE": "[RD_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "rod"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "16.5",
        "numeric": 16.5
      }
    ]
  },
  "[ch_br]": {
    "isBase": false,
    "CODE": "[CH_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "Gunter's chain"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "4",
        "numeric": 4
      }
    ]
  },
  "[lk_br]": {
    "isBase": false,
    "CODE": "[LK_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "link for Gunter's chain"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[fth_br]": {
    "isBase": false,
    "CODE": "[FTH_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "fathom"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "6",
        "numeric": 6
      }
    ]
  },
  "[pc_br]": {
    "isBase": false,
    "CODE": "[PC_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "pace"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "2.5",
        "numeric": 2.5
      }
    ]
  },
  "[yd_br]": {
    "isBase": false,
    "CODE": "[YD_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "yard"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "3",
        "numeric": 3
      }
    ]
  },
  "[mi_br]": {
    "isBase": false,
    "CODE": "[MI_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "mile"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "5280",
        "numeric": 5280
      }
    ]
  },
  "[nmi_br]": {
    "isBase": false,
    "CODE": "[NMI_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "nautical mile"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "6080",
        "numeric": 6080
      }
    ]
  },
  "[kn_br]": {
    "isBase": false,
    "CODE": "[KN_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "knot"
    ],
    "properties": [
      "velocity"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[acr_br]": {
    "isBase": false,
    "CODE": "[ACR_BR]",
    "isMetric": "no",
    "class": "brit-length",
    "names": [
      "acre"
    ],
    "properties": [
      "area"
    ],
    "values": [
      {
        "printable": "4840",
        "numeric": 4840
      }
    ]
  },
  "[gal_us]": {
    "isBase": false,
    "CODE": "[GAL_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "Queen Anne's wine gallon"
    ],
    "properties": [
      "fluid volume"
    ],
    "values": [
      {
        "printable": "231",
        "numeric": 231
      }
    ]
  },
  "[bbl_us]": {
    "isBase": false,
    "CODE": "[BBL_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "barrel"
    ],
    "properties": [
      "fluid volume"
    ],
    "values": [
      {
        "printable": "42",
        "numeric": 42
      }
    ]
  },
  "[qt_us]": {
    "isBase": false,
    "CODE": "[QT_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "quart"
    ],
    "properties": [
      "fluid volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[pt_us]": {
    "isBase": false,
    "CODE": "[PT_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "pint"
    ],
    "properties": [
      "fluid volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[gil_us]": {
    "isBase": false,
    "CODE": "[GIL_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "gill"
    ],
    "properties": [
      "fluid volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[foz_us]": {
    "isBase": false,
    "CODE": "[FOZ_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "fluid ounce"
    ],
    "printSymbols": [
      "oz fl"
    ],
    "properties": [
      "fluid volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[fdr_us]": {
    "isBase": false,
    "CODE": "[FDR_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "fluid dram"
    ],
    "properties": [
      "fluid volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[min_us]": {
    "isBase": false,
    "CODE": "[MIN_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "minim"
    ],
    "properties": [
      "fluid volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[crd_us]": {
    "isBase": false,
    "CODE": "[CRD_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "cord"
    ],
    "properties": [
      "fluid volume"
    ],
    "values": [
      {
        "printable": "128",
        "numeric": 128
      }
    ]
  },
  "[bu_us]": {
    "isBase": false,
    "CODE": "[BU_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "bushel"
    ],
    "properties": [
      "dry volume"
    ],
    "values": [
      {
        "printable": "2150.42",
        "numeric": 2150.42
      }
    ]
  },
  "[gal_wi]": {
    "isBase": false,
    "CODE": "[GAL_WI]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "historical winchester gallon"
    ],
    "properties": [
      "dry volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[pk_us]": {
    "isBase": false,
    "CODE": "[PK_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "peck"
    ],
    "properties": [
      "dry volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[dqt_us]": {
    "isBase": false,
    "CODE": "[DQT_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "dry quart"
    ],
    "properties": [
      "dry volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[dpt_us]": {
    "isBase": false,
    "CODE": "[DPT_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "dry pint"
    ],
    "properties": [
      "dry volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[tbs_us]": {
    "isBase": false,
    "CODE": "[TBS_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "tablespoon"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[tsp_us]": {
    "isBase": false,
    "CODE": "[TSP_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "teaspoon"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[cup_us]": {
    "isBase": false,
    "CODE": "[CUP_US]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "cup"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "16",
        "numeric": 16
      }
    ]
  },
  "[foz_m]": {
    "isBase": false,
    "CODE": "[FOZ_M]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "metric fluid ounce"
    ],
    "printSymbols": [
      "oz fl"
    ],
    "properties": [
      "fluid volume"
    ],
    "values": [
      {
        "printable": "30",
        "numeric": 30
      }
    ]
  },
  "[cup_m]": {
    "isBase": false,
    "CODE": "[CUP_M]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "metric cup"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "240",
        "numeric": 240
      }
    ]
  },
  "[tsp_m]": {
    "isBase": false,
    "CODE": "[TSP_M]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "metric teaspoon"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "5",
        "numeric": 5
      }
    ]
  },
  "[tbs_m]": {
    "isBase": false,
    "CODE": "[TBS_M]",
    "isMetric": "no",
    "class": "us-volumes",
    "names": [
      "metric tablespoon"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "15",
        "numeric": 15
      }
    ]
  },
  "[gal_br]": {
    "isBase": false,
    "CODE": "[GAL_BR]",
    "isMetric": "no",
    "class": "brit-volumes",
    "names": [
      "gallon"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "4.54609",
        "numeric": 4.54609
      }
    ]
  },
  "[pk_br]": {
    "isBase": false,
    "CODE": "[PK_BR]",
    "isMetric": "no",
    "class": "brit-volumes",
    "names": [
      "peck"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "2",
        "numeric": 2
      }
    ]
  },
  "[bu_br]": {
    "isBase": false,
    "CODE": "[BU_BR]",
    "isMetric": "no",
    "class": "brit-volumes",
    "names": [
      "bushel"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "4",
        "numeric": 4
      }
    ]
  },
  "[qt_br]": {
    "isBase": false,
    "CODE": "[QT_BR]",
    "isMetric": "no",
    "class": "brit-volumes",
    "names": [
      "quart"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[pt_br]": {
    "isBase": false,
    "CODE": "[PT_BR]",
    "isMetric": "no",
    "class": "brit-volumes",
    "names": [
      "pint"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[gil_br]": {
    "isBase": false,
    "CODE": "[GIL_BR]",
    "isMetric": "no",
    "class": "brit-volumes",
    "names": [
      "gill"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[foz_br]": {
    "isBase": false,
    "CODE": "[FOZ_BR]",
    "isMetric": "no",
    "class": "brit-volumes",
    "names": [
      "fluid ounce"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[fdr_br]": {
    "isBase": false,
    "CODE": "[FDR_BR]",
    "isMetric": "no",
    "class": "brit-volumes",
    "names": [
      "fluid dram"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[min_br]": {
    "isBase": false,
    "CODE": "[MIN_BR]",
    "isMetric": "no",
    "class": "brit-volumes",
    "names": [
      "minim"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[gr]": {
    "isBase": false,
    "CODE": "[GR]",
    "isMetric": "no",
    "class": "avoirdupois",
    "names": [
      "grain"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "64.79891",
        "numeric": 64.79891
      }
    ]
  },
  "[lb_av]": {
    "isBase": false,
    "CODE": "[LB_AV]",
    "isMetric": "no",
    "class": "avoirdupois",
    "names": [
      "pound"
    ],
    "printSymbols": [
      "lb"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "7000",
        "numeric": 7000
      }
    ]
  },
  "[oz_av]": {
    "isBase": false,
    "CODE": "[OZ_AV]",
    "isMetric": "no",
    "class": "avoirdupois",
    "names": [
      "ounce"
    ],
    "printSymbols": [
      "oz"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[dr_av]": {
    "isBase": false,
    "CODE": "[DR_AV]",
    "isMetric": "no",
    "class": "avoirdupois",
    "names": [
      "dram"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[scwt_av]": {
    "isBase": false,
    "CODE": "[SCWT_AV]",
    "isMetric": "no",
    "class": "avoirdupois",
    "names": [
      "short hundredweight",
      "U.S. hundredweight"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "100",
        "numeric": 100
      }
    ]
  },
  "[lcwt_av]": {
    "isBase": false,
    "CODE": "[LCWT_AV]",
    "isMetric": "no",
    "class": "avoirdupois",
    "names": [
      "long hundredweight",
      "British hundredweight"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "112",
        "numeric": 112
      }
    ]
  },
  "[ston_av]": {
    "isBase": false,
    "CODE": "[STON_AV]",
    "isMetric": "no",
    "class": "avoirdupois",
    "names": [
      "short ton",
      "U.S. ton"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "20",
        "numeric": 20
      }
    ]
  },
  "[lton_av]": {
    "isBase": false,
    "CODE": "[LTON_AV]",
    "isMetric": "no",
    "class": "avoirdupois",
    "names": [
      "long ton",
      "British ton"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "20",
        "numeric": 20
      }
    ]
  },
  "[stone_av]": {
    "isBase": false,
    "CODE": "[STONE_AV]",
    "isMetric": "no",
    "class": "avoirdupois",
    "names": [
      "stone",
      "British stone"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "14",
        "numeric": 14
      }
    ]
  },
  "[pwt_tr]": {
    "isBase": false,
    "CODE": "[PWT_TR]",
    "isMetric": "no",
    "class": "troy",
    "names": [
      "pennyweight"
    ],
    "printSymbols": [
      "dwt"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "24",
        "numeric": 24
      }
    ]
  },
  "[oz_tr]": {
    "isBase": false,
    "CODE": "[OZ_TR]",
    "isMetric": "no",
    "class": "troy",
    "names": [
      "troy ounce"
    ],
    "printSymbols": [
      "oz t"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "20",
        "numeric": 20
      }
    ]
  },
  "[lb_tr]": {
    "isBase": false,
    "CODE": "[LB_TR]",
    "isMetric": "no",
    "class": "troy",
    "names": [
      "troy pound"
    ],
    "printSymbols": [
      "lb t"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "12",
        "numeric": 12
      }
    ]
  },
  "[sc_ap]": {
    "isBase": false,
    "CODE": "[SC_AP]",
    "isMetric": "no",
    "class": "apoth",
    "names": [
      "scruple"
    ],
    "printSymbols": [
      "&#8456;"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "20",
        "numeric": 20
      }
    ]
  },
  "[dr_ap]": {
    "isBase": false,
    "CODE": "[DR_AP]",
    "isMetric": "no",
    "class": "apoth",
    "names": [
      "dram",
      "drachm"
    ],
    "printSymbols": [
      "&#658;"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "3",
        "numeric": 3
      }
    ]
  },
  "[oz_ap]": {
    "isBase": false,
    "CODE": "[OZ_AP]",
    "isMetric": "no",
    "class": "apoth",
    "names": [
      "ounce"
    ],
    "printSymbols": [
      "&#8485;"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "8",
        "numeric": 8
      }
    ]
  },
  "[lb_ap]": {
    "isBase": false,
    "CODE": "[LB_AP]",
    "isMetric": "no",
    "class": "apoth",
    "names": [
      "pound"
    ],
    "printSymbols": [
      "<strike>lb</strike>"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "12",
        "numeric": 12
      }
    ]
  },
  "[oz_m]": {
    "isBase": false,
    "CODE": "[OZ_M]",
    "isMetric": "no",
    "class": "apoth",
    "names": [
      "metric ounce"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "28",
        "numeric": 28
      }
    ]
  },
  "[lne]": {
    "isBase": false,
    "CODE": "[LNE]",
    "isMetric": "no",
    "class": "typeset",
    "names": [
      "line"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[pnt]": {
    "isBase": false,
    "CODE": "[PNT]",
    "isMetric": "no",
    "class": "typeset",
    "names": [
      "point"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[pca]": {
    "isBase": false,
    "CODE": "[PCA]",
    "isMetric": "no",
    "class": "typeset",
    "names": [
      "pica"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "12",
        "numeric": 12
      }
    ]
  },
  "[pnt_pr]": {
    "isBase": false,
    "CODE": "[PNT_PR]",
    "isMetric": "no",
    "class": "typeset",
    "names": [
      "Printer's point"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "0.013837",
        "numeric": 0.013837
      }
    ]
  },
  "[pca_pr]": {
    "isBase": false,
    "CODE": "[PCA_PR]",
    "isMetric": "no",
    "class": "typeset",
    "names": [
      "Printer's pica"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "12",
        "numeric": 12
      }
    ]
  },
  "[pied]": {
    "isBase": false,
    "CODE": "[PIED]",
    "isMetric": "no",
    "class": "typeset",
    "names": [
      "pied",
      "French foot"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "32.48",
        "numeric": 32.48
      }
    ]
  },
  "[pouce]": {
    "isBase": false,
    "CODE": "[POUCE]",
    "isMetric": "no",
    "class": "typeset",
    "names": [
      "pouce",
      "French inch"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[ligne]": {
    "isBase": false,
    "CODE": "[LIGNE]",
    "isMetric": "no",
    "class": "typeset",
    "names": [
      "ligne",
      "French line"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[didot]": {
    "isBase": false,
    "CODE": "[DIDOT]",
    "isMetric": "no",
    "class": "typeset",
    "names": [
      "didot",
      "Didot's point"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[cicero]": {
    "isBase": false,
    "CODE": "[CICERO]",
    "isMetric": "no",
    "class": "typeset",
    "names": [
      "cicero",
      "Didot's pica"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "12",
        "numeric": 12
      }
    ]
  },
  "[degF]": {
    "isBase": false,
    "CODE": "[DEGF]",
    "isMetric": "no",
    "isSpecial": "yes",
    "class": "heat",
    "names": [
      "degree Fahrenheit"
    ],
    "printSymbols": [
      "&#176;F"
    ],
    "properties": [
      "temperature"
    ],
    "values": [
      {
        "printable": "<function name=\"degF\" value=\"5\" Unit=\"K/9\"/>",
        "numeric": null
      }
    ]
  },
  "[degR]": {
    "isBase": false,
    "CODE": "[degR]",
    "isMetric": "no",
    "class": "heat",
    "names": [
      "degree Rankine"
    ],
    "printSymbols": [
      "&#176;R"
    ],
    "properties": [
      "temperature"
    ],
    "values": [
      {
        "printable": "5",
        "numeric": 5
      }
    ]
  },
  "cal_[15]": {
    "isBase": false,
    "CODE": "CAL_[15]",
    "isMetric": "yes",
    "class": "heat",
    "names": [
      "calorie at 15 °C"
    ],
    "printSymbols": [
      "cal<sub>15&#176;C</sub>"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "4.18580",
        "numeric": 4.1858
      }
    ]
  },
  "cal_[20]": {
    "isBase": false,
    "CODE": "CAL_[20]",
    "isMetric": "yes",
    "class": "heat",
    "names": [
      "calorie at 20 °C"
    ],
    "printSymbols": [
      "cal<sub>20&#176;C</sub>"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "4.18190",
        "numeric": 4.1819
      }
    ]
  },
  "cal_m": {
    "isBase": false,
    "CODE": "CAL_M",
    "isMetric": "yes",
    "class": "heat",
    "names": [
      "mean calorie"
    ],
    "printSymbols": [
      "cal<sub>m</sub>"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "4.19002",
        "numeric": 4.19002
      }
    ]
  },
  "cal_IT": {
    "isBase": false,
    "CODE": "CAL_IT",
    "isMetric": "yes",
    "class": "heat",
    "names": [
      "international table calorie"
    ],
    "printSymbols": [
      "cal<sub>IT</sub>"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "4.1868",
        "numeric": 4.1868
      }
    ]
  },
  "cal_th": {
    "isBase": false,
    "CODE": "CAL_TH",
    "isMetric": "yes",
    "class": "heat",
    "names": [
      "thermochemical calorie"
    ],
    "printSymbols": [
      "cal<sub>th</sub>"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "4.184",
        "numeric": 4.184
      }
    ]
  },
  "cal": {
    "isBase": false,
    "CODE": "CAL",
    "isMetric": "yes",
    "class": "heat",
    "names": [
      "calorie"
    ],
    "printSymbols": [
      "cal"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[Cal]": {
    "isBase": false,
    "CODE": "[CAL]",
    "isMetric": "no",
    "class": "heat",
    "names": [
      "nutrition label Calories"
    ],
    "printSymbols": [
      "Cal"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[Btu_39]": {
    "isBase": false,
    "CODE": "[BTU_39]",
    "isMetric": "no",
    "class": "heat",
    "names": [
      "British thermal unit at 39 °F"
    ],
    "printSymbols": [
      "Btu<sub>39&#176;F</sub>"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1.05967",
        "numeric": 1.05967
      }
    ]
  },
  "[Btu_59]": {
    "isBase": false,
    "CODE": "[BTU_59]",
    "isMetric": "no",
    "class": "heat",
    "names": [
      "British thermal unit at 59 °F"
    ],
    "printSymbols": [
      "Btu<sub>59&#176;F</sub>"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1.05480",
        "numeric": 1.0548
      }
    ]
  },
  "[Btu_60]": {
    "isBase": false,
    "CODE": "[BTU_60]",
    "isMetric": "no",
    "class": "heat",
    "names": [
      "British thermal unit at 60 °F"
    ],
    "printSymbols": [
      "Btu<sub>60&#176;F</sub>"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1.05468",
        "numeric": 1.05468
      }
    ]
  },
  "[Btu_m]": {
    "isBase": false,
    "CODE": "[BTU_M]",
    "isMetric": "no",
    "class": "heat",
    "names": [
      "mean British thermal unit"
    ],
    "printSymbols": [
      "Btu<sub>m</sub>"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1.05587",
        "numeric": 1.05587
      }
    ]
  },
  "[Btu_IT]": {
    "isBase": false,
    "CODE": "[BTU_IT]",
    "isMetric": "no",
    "class": "heat",
    "names": [
      "international table British thermal unit"
    ],
    "printSymbols": [
      "Btu<sub>IT</sub>"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1.05505585262",
        "numeric": 1.05505585262
      }
    ]
  },
  "[Btu_th]": {
    "isBase": false,
    "CODE": "[BTU_TH]",
    "isMetric": "no",
    "class": "heat",
    "names": [
      "thermochemical British thermal unit"
    ],
    "printSymbols": [
      "Btu<sub>th</sub>"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1.054350",
        "numeric": 1.05435
      }
    ]
  },
  "[Btu]": {
    "isBase": false,
    "CODE": "[BTU]",
    "isMetric": "no",
    "class": "heat",
    "names": [
      "British thermal unit"
    ],
    "printSymbols": [
      "btu"
    ],
    "properties": [
      "energy"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[HP]": {
    "isBase": false,
    "CODE": "[HP]",
    "isMetric": "no",
    "class": "heat",
    "names": [
      "horsepower"
    ],
    "properties": [
      "power"
    ],
    "values": [
      {
        "printable": "550",
        "numeric": 550
      }
    ]
  },
  "tex": {
    "isBase": false,
    "CODE": "TEX",
    "isMetric": "yes",
    "class": "heat",
    "names": [
      "tex"
    ],
    "printSymbols": [
      "tex"
    ],
    "properties": [
      "linear mass density (of textile thread)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[den]": {
    "isBase": false,
    "CODE": "[DEN]",
    "isMetric": "no",
    "class": "heat",
    "names": [
      "Denier"
    ],
    "printSymbols": [
      "den"
    ],
    "properties": [
      "linear mass density (of textile thread)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "m[H2O]": {
    "isBase": false,
    "CODE": "M[H2O]",
    "isMetric": "yes",
    "class": "clinical",
    "names": [
      "meter of water column"
    ],
    "printSymbols": [
      "m&#160;H<sub>\n            <r>2</r>\n         </sub>O"
    ],
    "properties": [
      "pressure"
    ],
    "values": [
      {
        "printable": "9.80665",
        "numeric": 9.80665
      }
    ]
  },
  "m[Hg]": {
    "isBase": false,
    "CODE": "M[HG]",
    "isMetric": "yes",
    "class": "clinical",
    "names": [
      "meter of mercury column"
    ],
    "printSymbols": [
      "m&#160;Hg"
    ],
    "properties": [
      "pressure"
    ],
    "values": [
      {
        "printable": "133.3220",
        "numeric": 133.322
      }
    ]
  },
  "[in_i'H2O]": {
    "isBase": false,
    "CODE": "[IN_I'H2O]",
    "isMetric": "no",
    "class": "clinical",
    "names": [
      "inch of water column"
    ],
    "printSymbols": [
      "in&#160;H<sub>\n            <r>2</r>\n         </sub>O"
    ],
    "properties": [
      "pressure"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[in_i'Hg]": {
    "isBase": false,
    "CODE": "[IN_I'HG]",
    "isMetric": "no",
    "class": "clinical",
    "names": [
      "inch of mercury column"
    ],
    "printSymbols": [
      "in&#160;Hg"
    ],
    "properties": [
      "pressure"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[PRU]": {
    "isBase": false,
    "CODE": "[PRU]",
    "isMetric": "no",
    "class": "clinical",
    "names": [
      "peripheral vascular resistance unit"
    ],
    "printSymbols": [
      "P.R.U."
    ],
    "properties": [
      "fluid resistance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[wood'U]": {
    "isBase": false,
    "CODE": "[WOOD'U]",
    "isMetric": "no",
    "class": "clinical",
    "names": [
      "Wood unit"
    ],
    "printSymbols": [
      "Wood U."
    ],
    "properties": [
      "fluid resistance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[diop]": {
    "isBase": false,
    "CODE": "[DIOP]",
    "isMetric": "no",
    "class": "clinical",
    "names": [
      "diopter"
    ],
    "printSymbols": [
      "dpt"
    ],
    "properties": [
      "refraction of a lens"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[p'diop]": {
    "isBase": false,
    "CODE": "[P'DIOP]",
    "isMetric": "no",
    "isSpecial": "yes",
    "class": "clinical",
    "names": [
      "prism diopter"
    ],
    "printSymbols": [
      "PD"
    ],
    "properties": [
      "refraction of a prism"
    ],
    "values": [
      {
        "printable": "<function name=\"tanTimes100\" value=\"1\" Unit=\"deg\"/>",
        "numeric": null
      }
    ]
  },
  "%[slope]": {
    "isBase": false,
    "CODE": "%[SLOPE]",
    "isMetric": "no",
    "isSpecial": "yes",
    "class": "clinical",
    "names": [
      "percent of slope"
    ],
    "printSymbols": [
      "%"
    ],
    "properties": [
      "slope"
    ],
    "values": [
      {
        "printable": "<function name=\"100tan\" value=\"1\" Unit=\"deg\"/>",
        "numeric": null
      }
    ]
  },
  "[mesh_i]": {
    "isBase": false,
    "CODE": "[MESH_I]",
    "isMetric": "no",
    "class": "clinical",
    "names": [
      "mesh"
    ],
    "properties": [
      "lineic number"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[Ch]": {
    "isBase": false,
    "CODE": "[CH]",
    "isMetric": "no",
    "class": "clinical",
    "names": [
      "Charrière",
      "french"
    ],
    "printSymbols": [
      "Ch"
    ],
    "properties": [
      "gauge of catheters"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[drp]": {
    "isBase": false,
    "CODE": "[DRP]",
    "isMetric": "no",
    "class": "clinical",
    "names": [
      "drop"
    ],
    "printSymbols": [
      "drp"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[hnsf'U]": {
    "isBase": false,
    "CODE": "[HNSF'U]",
    "isMetric": "no",
    "class": "clinical",
    "names": [
      "Hounsfield unit"
    ],
    "printSymbols": [
      "HF"
    ],
    "properties": [
      "x-ray attenuation"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[MET]": {
    "isBase": false,
    "CODE": "[MET]",
    "isMetric": "no",
    "class": "clinical",
    "names": [
      "metabolic equivalent"
    ],
    "printSymbols": [
      "MET"
    ],
    "properties": [
      "metabolic cost of physical activity"
    ],
    "values": [
      {
        "printable": "3.5",
        "numeric": 3.5
      }
    ]
  },
  "[hp'_X]": {
    "isBase": false,
    "CODE": "[HP'_X]",
    "isMetric": "no",
    "isSpecial": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of decimal series (retired)"
    ],
    "printSymbols": [
      "X"
    ],
    "properties": [
      "homeopathic potency (retired)"
    ],
    "values": [
      {
        "printable": "<function name=\"hpX\" value=\"1\" Unit=\"1\"/>",
        "numeric": null
      }
    ]
  },
  "[hp'_C]": {
    "isBase": false,
    "CODE": "[HP'_C]",
    "isMetric": "no",
    "isSpecial": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of centesimal series (retired)"
    ],
    "printSymbols": [
      "C"
    ],
    "properties": [
      "homeopathic potency (retired)"
    ],
    "values": [
      {
        "printable": "<function name=\"hpC\" value=\"1\" Unit=\"1\"/>",
        "numeric": null
      }
    ]
  },
  "[hp'_M]": {
    "isBase": false,
    "CODE": "[HP'_M]",
    "isMetric": "no",
    "isSpecial": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of millesimal series (retired)"
    ],
    "printSymbols": [
      "M"
    ],
    "properties": [
      "homeopathic potency (retired)"
    ],
    "values": [
      {
        "printable": "<function name=\"hpM\" value=\"1\" Unit=\"1\"/>",
        "numeric": null
      }
    ]
  },
  "[hp'_Q]": {
    "isBase": false,
    "CODE": "[HP'_Q]",
    "isMetric": "no",
    "isSpecial": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of quintamillesimal series (retired)"
    ],
    "printSymbols": [
      "Q"
    ],
    "properties": [
      "homeopathic potency (retired)"
    ],
    "values": [
      {
        "printable": "<function name=\"hpQ\" value=\"1\" Unit=\"1\"/>",
        "numeric": null
      }
    ]
  },
  "[hp_X]": {
    "isBase": false,
    "CODE": "[HP_X]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of decimal hahnemannian series"
    ],
    "printSymbols": [
      "X"
    ],
    "properties": [
      "homeopathic potency (Hahnemann)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[hp_C]": {
    "isBase": false,
    "CODE": "[HP_C]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of centesimal hahnemannian series"
    ],
    "printSymbols": [
      "C"
    ],
    "properties": [
      "homeopathic potency (Hahnemann)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[hp_M]": {
    "isBase": false,
    "CODE": "[HP_M]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of millesimal hahnemannian series"
    ],
    "printSymbols": [
      "M"
    ],
    "properties": [
      "homeopathic potency (Hahnemann)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[hp_Q]": {
    "isBase": false,
    "CODE": "[HP_Q]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of quintamillesimal hahnemannian series"
    ],
    "printSymbols": [
      "Q"
    ],
    "properties": [
      "homeopathic potency (Hahnemann)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[kp_X]": {
    "isBase": false,
    "CODE": "[KP_X]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of decimal korsakovian series"
    ],
    "printSymbols": [
      "X"
    ],
    "properties": [
      "homeopathic potency (Korsakov)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[kp_C]": {
    "isBase": false,
    "CODE": "[KP_C]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of centesimal korsakovian series"
    ],
    "printSymbols": [
      "C"
    ],
    "properties": [
      "homeopathic potency (Korsakov)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[kp_M]": {
    "isBase": false,
    "CODE": "[KP_M]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of millesimal korsakovian series"
    ],
    "printSymbols": [
      "M"
    ],
    "properties": [
      "homeopathic potency (Korsakov)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[kp_Q]": {
    "isBase": false,
    "CODE": "[KP_Q]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "clinical",
    "names": [
      "homeopathic potency of quintamillesimal korsakovian series"
    ],
    "printSymbols": [
      "Q"
    ],
    "properties": [
      "homeopathic potency (Korsakov)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "eq": {
    "isBase": false,
    "CODE": "EQ",
    "isMetric": "yes",
    "class": "chemical",
    "names": [
      "equivalents"
    ],
    "printSymbols": [
      "eq"
    ],
    "properties": [
      "amount of substance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "osm": {
    "isBase": false,
    "CODE": "OSM",
    "isMetric": "yes",
    "class": "chemical",
    "names": [
      "osmole"
    ],
    "printSymbols": [
      "osm"
    ],
    "properties": [
      "amount of substance (dissolved particles)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[pH]": {
    "isBase": false,
    "CODE": "[PH]",
    "isMetric": "no",
    "isSpecial": "yes",
    "class": "chemical",
    "names": [
      "pH"
    ],
    "printSymbols": [
      "pH"
    ],
    "properties": [
      "acidity"
    ],
    "values": [
      {
        "printable": "<function name=\"pH\" value=\"1\" Unit=\"mol/l\"/>",
        "numeric": null
      }
    ]
  },
  "g%": {
    "isBase": false,
    "CODE": "G%",
    "isMetric": "yes",
    "class": "chemical",
    "names": [
      "gram percent"
    ],
    "printSymbols": [
      "g%"
    ],
    "properties": [
      "mass concentration"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[S]": {
    "isBase": false,
    "CODE": "[S]",
    "isMetric": "no",
    "class": "chemical",
    "names": [
      "Svedberg unit"
    ],
    "printSymbols": [
      "S"
    ],
    "properties": [
      "sedimentation coefficient"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[HPF]": {
    "isBase": false,
    "CODE": "[HPF]",
    "isMetric": "no",
    "class": "chemical",
    "names": [
      "high power field"
    ],
    "printSymbols": [
      "HPF"
    ],
    "properties": [
      "view area in microscope"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[LPF]": {
    "isBase": false,
    "CODE": "[LPF]",
    "isMetric": "no",
    "class": "chemical",
    "names": [
      "low power field"
    ],
    "printSymbols": [
      "LPF"
    ],
    "properties": [
      "view area in microscope"
    ],
    "values": [
      {
        "printable": "100",
        "numeric": 100
      }
    ]
  },
  "kat": {
    "isBase": false,
    "CODE": "KAT",
    "isMetric": "yes",
    "class": "chemical",
    "names": [
      "katal"
    ],
    "printSymbols": [
      "kat"
    ],
    "properties": [
      "catalytic activity"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "U": {
    "isBase": false,
    "CODE": "U",
    "isMetric": "yes",
    "class": "chemical",
    "names": [
      "Unit"
    ],
    "printSymbols": [
      "U"
    ],
    "properties": [
      "catalytic activity"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[iU]": {
    "isBase": false,
    "CODE": "[IU]",
    "isMetric": "yes",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "international unit"
    ],
    "printSymbols": [
      "IU"
    ],
    "properties": [
      "arbitrary"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[IU]": {
    "isBase": false,
    "CODE": "[IU]",
    "isMetric": "yes",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "international unit"
    ],
    "printSymbols": [
      "i.U."
    ],
    "properties": [
      "arbitrary"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[arb'U]": {
    "isBase": false,
    "CODE": "[ARB'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "arbitary unit"
    ],
    "printSymbols": [
      "arb. U"
    ],
    "properties": [
      "arbitrary"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[USP'U]": {
    "isBase": false,
    "CODE": "[USP'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "United States Pharmacopeia unit"
    ],
    "printSymbols": [
      "U.S.P."
    ],
    "properties": [
      "arbitrary"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[GPL'U]": {
    "isBase": false,
    "CODE": "[GPL'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "GPL unit"
    ],
    "properties": [
      "biologic activity of anticardiolipin IgG"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[MPL'U]": {
    "isBase": false,
    "CODE": "[MPL'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "MPL unit"
    ],
    "properties": [
      "biologic activity of anticardiolipin IgM"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[APL'U]": {
    "isBase": false,
    "CODE": "[APL'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "APL unit"
    ],
    "properties": [
      "biologic activity of anticardiolipin IgA"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[beth'U]": {
    "isBase": false,
    "CODE": "[BETH'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "Bethesda unit"
    ],
    "properties": [
      "biologic activity of factor VIII inhibitor"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[anti'Xa'U]": {
    "isBase": false,
    "CODE": "[ANTI'XA'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "anti factor Xa unit"
    ],
    "properties": [
      "biologic activity of factor Xa inhibitor (heparin)"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[todd'U]": {
    "isBase": false,
    "CODE": "[TODD'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "Todd unit"
    ],
    "properties": [
      "biologic activity antistreptolysin O"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[dye'U]": {
    "isBase": false,
    "CODE": "[DYE'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "Dye unit"
    ],
    "properties": [
      "biologic activity of amylase"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[smgy'U]": {
    "isBase": false,
    "CODE": "[SMGY'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "Somogyi unit"
    ],
    "properties": [
      "biologic activity of amylase"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[bdsk'U]": {
    "isBase": false,
    "CODE": "[BDSK'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "Bodansky unit"
    ],
    "properties": [
      "biologic activity of phosphatase"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[ka'U]": {
    "isBase": false,
    "CODE": "[KA'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "King-Armstrong unit"
    ],
    "properties": [
      "biologic activity of phosphatase"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[knk'U]": {
    "isBase": false,
    "CODE": "[KNK'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "Kunkel unit"
    ],
    "properties": [
      "arbitrary biologic activity"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[mclg'U]": {
    "isBase": false,
    "CODE": "[MCLG'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "Mac Lagan unit"
    ],
    "properties": [
      "arbitrary biologic activity"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[tb'U]": {
    "isBase": false,
    "CODE": "[TB'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "tuberculin unit"
    ],
    "properties": [
      "biologic activity of tuberculin"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[CCID_50]": {
    "isBase": false,
    "CODE": "[CCID_50]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "50% cell culture infectious dose"
    ],
    "printSymbols": [
      "CCID<sub>50</sub>"
    ],
    "properties": [
      "biologic activity (infectivity) of an infectious agent preparation"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[TCID_50]": {
    "isBase": false,
    "CODE": "[TCID_50]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "50% tissue culture infectious dose"
    ],
    "printSymbols": [
      "TCID<sub>50</sub>"
    ],
    "properties": [
      "biologic activity (infectivity) of an infectious agent preparation"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[EID_50]": {
    "isBase": false,
    "CODE": "[EID_50]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "50% embryo infectious dose"
    ],
    "printSymbols": [
      "EID<sub>50</sub>"
    ],
    "properties": [
      "biologic activity (infectivity) of an infectious agent preparation"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[PFU]": {
    "isBase": false,
    "CODE": "[PFU]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "plaque forming units"
    ],
    "printSymbols": [
      "PFU"
    ],
    "properties": [
      "amount of an infectious agent"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[FFU]": {
    "isBase": false,
    "CODE": "[FFU]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "focus forming units"
    ],
    "printSymbols": [
      "FFU"
    ],
    "properties": [
      "amount of an infectious agent"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[CFU]": {
    "isBase": false,
    "CODE": "[CFU]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "colony forming units"
    ],
    "printSymbols": [
      "CFU"
    ],
    "properties": [
      "amount of a proliferating organism"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[BAU]": {
    "isBase": false,
    "CODE": "[BAU]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "bioequivalent allergen unit"
    ],
    "printSymbols": [
      "BAU"
    ],
    "properties": [
      "amount of an allergen callibrated through in-vivo testing based on the ID50EAL method of (intradermal dilution for 50mm sum of erythema diameters"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[AU]": {
    "isBase": false,
    "CODE": "[AU]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "allergen unit"
    ],
    "printSymbols": [
      "AU"
    ],
    "properties": [
      "procedure defined amount of an allergen using some reference standard"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[Amb'a'1'U]": {
    "isBase": false,
    "CODE": "[AMB'A'1'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "allergen unit for Ambrosia artemisiifolia"
    ],
    "printSymbols": [
      "Amb a 1 U"
    ],
    "properties": [
      "procedure defined amount of the major allergen of ragweed."
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[PNU]": {
    "isBase": false,
    "CODE": "[PNU]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "protein nitrogen unit"
    ],
    "printSymbols": [
      "PNU"
    ],
    "properties": [
      "procedure defined amount of a protein substance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[Lf]": {
    "isBase": false,
    "CODE": "[LF]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "Limit of flocculation"
    ],
    "printSymbols": [
      "Lf"
    ],
    "properties": [
      "procedure defined amount of an antigen substance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[D'ag'U]": {
    "isBase": false,
    "CODE": "[D'AG'U]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "D-antigen unit"
    ],
    "printSymbols": [
      ""
    ],
    "properties": [
      "procedure defined amount of a poliomyelitis d-antigen substance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[FEU]": {
    "isBase": false,
    "CODE": "[FEU]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "fibrinogen equivalent unit"
    ],
    "printSymbols": [
      ""
    ],
    "properties": [
      "amount of fibrinogen broken down into the measured d-dimers"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[ELU]": {
    "isBase": false,
    "CODE": "[ELU]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "ELISA unit"
    ],
    "printSymbols": [
      ""
    ],
    "properties": [
      "arbitrary ELISA unit"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[EU]": {
    "isBase": false,
    "CODE": "[EU]",
    "isMetric": "no",
    "isArbitrary": "yes",
    "class": "chemical",
    "names": [
      "Ehrlich unit"
    ],
    "printSymbols": [
      ""
    ],
    "properties": [
      "Ehrlich unit"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Np": {
    "isBase": false,
    "CODE": "NEP",
    "isMetric": "yes",
    "isSpecial": "yes",
    "class": "levels",
    "names": [
      "neper"
    ],
    "printSymbols": [
      "Np"
    ],
    "properties": [
      "level"
    ],
    "values": [
      {
        "printable": "<function name=\"ln\" value=\"1\" Unit=\"1\"/>",
        "numeric": null
      }
    ]
  },
  "B": {
    "isBase": false,
    "CODE": "B",
    "isMetric": "yes",
    "isSpecial": "yes",
    "class": "levels",
    "names": [
      "bel"
    ],
    "printSymbols": [
      "B"
    ],
    "properties": [
      "level"
    ],
    "values": [
      {
        "printable": "<function name=\"lg\" value=\"1\" Unit=\"1\"/>",
        "numeric": null
      }
    ]
  },
  "B[SPL]": {
    "isBase": false,
    "CODE": "B[SPL]",
    "isMetric": "yes",
    "isSpecial": "yes",
    "class": "levels",
    "names": [
      "bel sound pressure"
    ],
    "printSymbols": [
      "B(SPL)"
    ],
    "properties": [
      "pressure level"
    ],
    "values": [
      {
        "printable": "<function name=\"lgTimes2\" value=\"2\" Unit=\"10*-5.Pa\"/>",
        "numeric": null
      }
    ]
  },
  "B[V]": {
    "isBase": false,
    "CODE": "B[V]",
    "isMetric": "yes",
    "isSpecial": "yes",
    "class": "levels",
    "names": [
      "bel volt"
    ],
    "printSymbols": [
      "B(V)"
    ],
    "properties": [
      "electric potential level"
    ],
    "values": [
      {
        "printable": "<function name=\"lgTimes2\" value=\"1\" Unit=\"V\"/>",
        "numeric": null
      }
    ]
  },
  "B[mV]": {
    "isBase": false,
    "CODE": "B[MV]",
    "isMetric": "yes",
    "isSpecial": "yes",
    "class": "levels",
    "names": [
      "bel millivolt"
    ],
    "printSymbols": [
      "B(mV)"
    ],
    "properties": [
      "electric potential level"
    ],
    "values": [
      {
        "printable": "<function name=\"lgTimes2\" value=\"1\" Unit=\"mV\"/>",
        "numeric": null
      }
    ]
  },
  "B[uV]": {
    "isBase": false,
    "CODE": "B[UV]",
    "isMetric": "yes",
    "isSpecial": "yes",
    "class": "levels",
    "names": [
      "bel microvolt"
    ],
    "printSymbols": [
      "B(&#956;V)"
    ],
    "properties": [
      "electric potential level"
    ],
    "values": [
      {
        "printable": "<function name=\"lgTimes2\" value=\"1\" Unit=\"uV\"/>",
        "numeric": null
      }
    ]
  },
  "B[10.nV]": {
    "isBase": false,
    "CODE": "B[10.NV]",
    "isMetric": "yes",
    "isSpecial": "yes",
    "class": "levels",
    "names": [
      "bel 10 nanovolt"
    ],
    "printSymbols": [
      "B(10 nV)"
    ],
    "properties": [
      "electric potential level"
    ],
    "values": [
      {
        "printable": "<function name=\"lgTimes2\" value=\"10\" Unit=\"nV\"/>",
        "numeric": null
      }
    ]
  },
  "B[W]": {
    "isBase": false,
    "CODE": "B[W]",
    "isMetric": "yes",
    "isSpecial": "yes",
    "class": "levels",
    "names": [
      "bel watt"
    ],
    "printSymbols": [
      "B(W)"
    ],
    "properties": [
      "power level"
    ],
    "values": [
      {
        "printable": "<function name=\"lg\" value=\"1\" Unit=\"W\"/>",
        "numeric": null
      }
    ]
  },
  "B[kW]": {
    "isBase": false,
    "CODE": "B[KW]",
    "isMetric": "yes",
    "isSpecial": "yes",
    "class": "levels",
    "names": [
      "bel kilowatt"
    ],
    "printSymbols": [
      "B(kW)"
    ],
    "properties": [
      "power level"
    ],
    "values": [
      {
        "printable": "<function name=\"lg\" value=\"1\" Unit=\"kW\"/>",
        "numeric": null
      }
    ]
  },
  "st": {
    "isBase": false,
    "CODE": "STR",
    "isMetric": "yes",
    "class": "misc",
    "names": [
      "stere"
    ],
    "printSymbols": [
      "st"
    ],
    "properties": [
      "volume"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "Ao": {
    "isBase": false,
    "CODE": "AO",
    "isMetric": "no",
    "class": "misc",
    "names": [
      "Ångström"
    ],
    "printSymbols": [
      "&#197;"
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "0.1",
        "numeric": 0.1
      }
    ]
  },
  "b": {
    "isBase": false,
    "CODE": "BRN",
    "isMetric": "no",
    "class": "misc",
    "names": [
      "barn"
    ],
    "printSymbols": [
      "b"
    ],
    "properties": [
      "action area"
    ],
    "values": [
      {
        "printable": "100",
        "numeric": 100
      }
    ]
  },
  "att": {
    "isBase": false,
    "CODE": "ATT",
    "isMetric": "no",
    "class": "misc",
    "names": [
      "technical atmosphere"
    ],
    "printSymbols": [
      "at"
    ],
    "properties": [
      "pressure"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "mho": {
    "isBase": false,
    "CODE": "MHO",
    "isMetric": "yes",
    "class": "misc",
    "names": [
      "mho"
    ],
    "printSymbols": [
      "mho"
    ],
    "properties": [
      "electric conductance"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[psi]": {
    "isBase": false,
    "CODE": "[PSI]",
    "isMetric": "no",
    "class": "misc",
    "names": [
      "pound per sqare inch"
    ],
    "printSymbols": [
      "psi"
    ],
    "properties": [
      "pressure"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "circ": {
    "isBase": false,
    "CODE": "CIRC",
    "isMetric": "no",
    "class": "misc",
    "names": [
      "circle"
    ],
    "printSymbols": [
      "circ"
    ],
    "properties": [
      "plane angle"
    ],
    "values": [
      {
        "printable": "2",
        "numeric": 2
      }
    ]
  },
  "sph": {
    "isBase": false,
    "CODE": "SPH",
    "isMetric": "no",
    "class": "misc",
    "names": [
      "spere"
    ],
    "printSymbols": [
      "sph"
    ],
    "properties": [
      "solid angle"
    ],
    "values": [
      {
        "printable": "4",
        "numeric": 4
      }
    ]
  },
  "[car_m]": {
    "isBase": false,
    "CODE": "[CAR_M]",
    "isMetric": "no",
    "class": "misc",
    "names": [
      "metric carat"
    ],
    "printSymbols": [
      "ct<sub>m</sub>"
    ],
    "properties": [
      "mass"
    ],
    "values": [
      {
        "printable": "0.2",
        "numeric": 0.2
      }
    ]
  },
  "[car_Au]": {
    "isBase": false,
    "CODE": "[CAR_AU]",
    "isMetric": "no",
    "class": "misc",
    "names": [
      "carat of gold alloys"
    ],
    "printSymbols": [
      "ct<sub>\n            <r>Au</r>\n         </sub>"
    ],
    "properties": [
      "mass fraction"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "[smoot]": {
    "isBase": false,
    "CODE": "[SMOOT]",
    "isMetric": "no",
    "class": "misc",
    "names": [
      "Smoot"
    ],
    "printSymbols": [
      ""
    ],
    "properties": [
      "length"
    ],
    "values": [
      {
        "printable": "67",
        "numeric": 67
      }
    ]
  },
  "bit_s": {
    "isBase": false,
    "CODE": "BIT_S",
    "isMetric": "no",
    "isSpecial": "yes",
    "class": "infotech",
    "names": [
      "bit"
    ],
    "printSymbols": [
      "bit<sub>s</sub>"
    ],
    "properties": [
      "amount of information"
    ],
    "values": [
      {
        "printable": "<function name=\"ld\" value=\"1\" Unit=\"1\"/>",
        "numeric": null
      }
    ]
  },
  "bit": {
    "isBase": false,
    "CODE": "BIT",
    "isMetric": "yes",
    "class": "infotech",
    "names": [
      "bit"
    ],
    "printSymbols": [
      "bit"
    ],
    "properties": [
      "amount of information"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "By": {
    "isBase": false,
    "CODE": "BY",
    "isMetric": "yes",
    "class": "infotech",
    "names": [
      "byte"
    ],
    "printSymbols": [
      "B"
    ],
    "properties": [
      "amount of information"
    ],
    "values": [
      {
        "printable": "8",
        "numeric": 8
      }
    ]
  },
  "Bd": {
    "isBase": false,
    "CODE": "BD",
    "isMetric": "yes",
    "class": "infotech",
    "names": [
      "baud"
    ],
    "printSymbols": [
      "Bd"
    ],
    "properties": [
      "signal transmission rate"
    ],
    "values": [
      {
        "printable": "1",
        "numeric": 1
      }
    ]
  },
  "m": {
    "isBase": true,
    "CODE": "M",
    "dim": "L",
    "names": [
      "meter"
    ],
    "printSymbols": [
      "m"
    ],
    "properties": [
      "length"
    ]
  },
  "s": {
    "isBase": true,
    "CODE": "S",
    "dim": "T",
    "names": [
      "second"
    ],
    "printSymbols": [
      "s"
    ],
    "properties": [
      "time"
    ]
  },
  "g": {
    "isBase": true,
    "CODE": "G",
    "dim": "M",
    "names": [
      "gram"
    ],
    "printSymbols": [
      "g"
    ],
    "properties": [
      "mass"
    ]
  },
  "rad": {
    "isBase": true,
    "CODE": "RAD",
    "dim": "A",
    "names": [
      "radian"
    ],
    "printSymbols": [
      "rad"
    ],
    "properties": [
      "plane angle"
    ]
  },
  "K": {
    "isBase": true,
    "CODE": "K",
    "dim": "C",
    "names": [
      "Kelvin"
    ],
    "printSymbols": [
      "K"
    ],
    "properties": [
      "temperature"
    ]
  },
  "C": {
    "isBase": true,
    "CODE": "C",
    "dim": "Q",
    "names": [
      "Coulomb"
    ],
    "printSymbols": [
      "C"
    ],
    "properties": [
      "electric charge"
    ]
  },
  "cd": {
    "isBase": true,
    "CODE": "CD",
    "dim": "F",
    "names": [
      "candela"
    ],
    "printSymbols": [
      "cd"
    ],
    "properties": [
      "luminous intensity"
    ]
  }
}

},{}],55:[function(require,module,exports){
module.exports = {
  multiply: function multiply(t, ms) {
    //console.log("Multiply: ", JSON.stringify(t), JSON.stringify(ms));
    if (ms.length == 0) return t;
    var ret = t;
    ms.forEach(function (mterm) {
      var sign = mterm[0] == "." ? 1 : -1;
      var b = mterm[1];
      ret.value *= Math.pow(b.value, sign); //console.log("b = ", JSON.stringify(b));
      //console.log("ret = ", JSON.stringify(ret));

      Object.keys(b.units).forEach(function (u) {
        ret.units[u] = ret.units[u] || 0;
        ret.units[u] = ret.units[u] + sign * b.units[u];

        if (!ret.metadata && b.metadata) {
          ret.metadata = {};
          ret.metadata[u] = b.metadata[u];
        } else if (ret.metadata && b.metadata) {
          ret.metadata[u] = b.metadata[u];
        }

        if (ret.units[u] == 0) {
          delete ret.units[u];

          if (ret.metadata) {
            delete ret.metadata[u];
          }
        }
      });
    }); //console.log("Multiply ret: ", ret);

    return ret;
  },
  topower: function topower(e, exp) {
    if (!exp) {
      exp = 1;
    }

    var ret = e;
    ret.value = Math.pow(ret.value, exp);
    Object.keys(e.units).forEach(function (u) {
      ret.units[u] = e.units[u] * exp;
    });
    return ret;
  },
  cleanup: function cleanup(e) {
    ["10^", "10*"].forEach(function (k) {
      if (e.units[k]) {
        e.value *= Math.pow(10, e.units[k]);
        delete e.units[k];
      }
    });
    return e;
  },
  ismetric: function ismetric(metrics) {
    return function (u) {
      return metrics[Object.keys(u.units)[0]] !== undefined;
    };
  }
};

},{}],56:[function(require,module,exports){
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

parser = require('./generated/ucum-parser.js');
equivalents = require('./generated/equivalents.json');
helpers = require('./lib/helpers.js');
unitMetadata = require('./generated/unitMetadata.json');
module.exports = {
  parse: parse,
  canonicalize: canonicalize,
  convert: convert,
  format: format,
  unitQuery: unitQuery
};

function parse(value, units) {
  if (arguments.length === 1 || units === undefined) {
    units = value;
    value = 1;
  }

  if (units.match(/^\//)) {
    units = '1' + units;
  }

  if (units === '') units = '1';
  var ret = parser.parse(units);
  ret.value *= value;
  return ret;
}

function nonBaseUnit(u) {
  return equivalents[u] !== undefined;
}

function remainingNonBaseUnits(value) {
  return Object.keys(value.units).filter(nonBaseUnit);
}

function canonicalize(value, units) {
  value = parse(value, units);
  var remaining = remainingNonBaseUnits(value);

  while (remaining.length) {
    if (remaining.length === 0) {
      return false;
    }

    remaining.forEach(function (u) {
      var sub = parse(equivalents[u].ucum);
      sub.value *= equivalents[u].value;
      sub = helpers.topower(sub, value.units[u]);
      value = helpers.multiply(value, [['.', sub]]);
      delete value.units[u];
    });
    remaining = remainingNonBaseUnits(value);
  } // we should remove any prefix metadata that exists at this point
  // because it represents residual artifacts of the above process


  if (value.metadata) {
    Object.keys(value.metadata).forEach(function (u) {
      if (value.metadata[u]) {
        if (value.metadata[u].prefix) {
          delete value.metadata[u].prefix;
        } // if it's not in the final array of units we should delete this metadata as well


        if (Object.keys(value.units).indexOf(u) == -1) {
          delete value.metadata[u];
        }
      }
    });
  }

  return value;
}

function conformant(a, b) {
  var ret = true;
  Object.keys(a.units).concat(Object.keys(b.units)).forEach(function (k) {
    if (a.units[k] !== b.units[k]) {
      ret = false;
    }
  });
  return ret;
}

function convert(fromValue, fromUnits, toUnits) {
  fromc = canonicalize(fromValue, fromUnits);
  toc = canonicalize(toUnits);

  if (!conformant(fromc, toc)) {
    throw "Non-conformant units; can't convert from " + fromUnits + " to " + toUnits;
  }

  return fromc.value / toc.value;
} // format returns a printable representation of the value
// the resulting units are a single-line html rendering of the resultant units
// can be invoked in the following supported ways, by example:
// 1. ucum.format('[in_i]') -> 'in'
// 2. ucum.format('[in_i]', true) -> '1 in'
// 3. ucum.format(3, '[in_i]', true) -> '3 in'
// 4. var x = ucum.parse(3, '[in_i]'); ucum.format(x) -> 'in'
// 5. var x = ucum.parse(3, '[in_i]'); ucum.format(x, true) -> '3 in'


function format(value, units, includeValue) {
  var obj;

  if (typeof value === 'string') {
    includeValue = units;
    units = value;
    value = 1;
  }

  if (_typeof(value) === 'object') {
    // treat it like a UCUM parse output
    obj = value;
    includeValue = units; // you would never provide units in this case, but you might provide includeValue
  } else {
    // parse it first
    obj = parse(value, units);
  }

  var units = Object.keys(obj.units);
  var metadata = obj.metadata;
  var numUnits = units.length;
  var numeratorUnits = [];
  var denominatorUnits = [];
  var printableUnits = "";
  units.forEach(function (unit, index) {
    var exponent = obj.units[unit];
    var absExponent = Math.abs(exponent);
    var printable = metadata[unit].printSymbols ? metadata[unit].printSymbols[0] : metadata[unit].names[0];
    var prefix = metadata[unit].prefix ? metadata[unit].prefix.printSymbols[0] : "";
    pUnit = prefix + printable;

    if (absExponent !== 1) {
      pUnit += "<sup>";
      pUnit += Math.abs(exponent);
      pUnit += "</sup>";
    }

    if (exponent > 0) {
      numeratorUnits.push(pUnit);
    } else {
      denominatorUnits.push(pUnit);
    }
  });

  if (numeratorUnits.length == 0) {
    printableUnits = "1";
  } else if (numeratorUnits.length > 0) {
    printableUnits = numeratorUnits.join("*");
  }

  if (denominatorUnits.length > 0) {
    printableUnits += "/";
  }

  printableUnits += denominatorUnits.join("/");

  if (includeValue) {
    printableUnits = obj.value + " " + printableUnits;
  }

  return printableUnits;
} // searches the unit metadata for all unit metadata
// criteria is an object like
//   { properties: 'area', isMetric: 'yes' }
// where the key/value pairs form a logical intersection, i.e. all criteria must be met
// resultFields is an array to pre-reduce the result set fields


function unitQuery(criteria, resultFields) {
  return Object.keys(unitMetadata).filter(function (unit) {
    var keys = Object.keys(criteria);

    for (var ii = 0; ii < keys.length; ii++) {
      var key = keys[ii];
      var val = unitMetadata[unit][key];
      var value = criteria[key];

      if (val && _typeof(val) === 'object') {
        // it's a list of values, it's a match if the target value occurs in the list
        if (val.indexOf(value) === -1) {
          return false;
        }
      } else {
        // it's a non-object, make a direct comparison
        if (unitMetadata[unit][key] !== value) {
          return false;
        }
      }
    }

    return true;
  }).map(function (key) {
    var obj = {};

    if (resultFields) {
      if (resultFields.length) {
        obj[key] = {};
        resultFields.forEach(function (field) {
          if (unitMetadata[key][field] !== undefined) {
            obj[key][field] = JSON.parse(JSON.stringify(unitMetadata[key][field]));
          }
        });
      } else {
        // just return the keys if an empty array gets passed for resultSet
        obj = key;
      }
    } else {
      obj[key] = JSON.parse(JSON.stringify(unitMetadata[key]));
    }

    return obj;
  });
}

},{"./generated/equivalents.json":49,"./generated/ucum-parser.js":53,"./generated/unitMetadata.json":54,"./lib/helpers.js":55}]},{},[1]);
