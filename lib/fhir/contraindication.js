// Generated by CoffeeScript 1.12.7
(function() {
  var Address, Attachment, BackboneElement, CORE, CodeableConcept, Coding, ContactPoint, Contraindication, ContraindicationMitigationComponent, DT, DomainResource, Element, ElementDefinition, Extension, HumanName, Identifier, Narrative, Parameters, Period, Quantity, Range, Ratio, Reference, Resource, SampledData, Timing,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DT = require('../cql-datatypes');

  CORE = require('./core');

  Element = CORE.Element;

  Resource = CORE.Resource;

  Timing = CORE.Timing;

  Period = CORE.Period;

  Parameters = CORE.Parameters;

  Coding = CORE.Coding;

  Resource = CORE.Resource;

  Range = CORE.Range;

  Quantity = CORE.Quantity;

  Attachment = CORE.Attachment;

  BackboneElement = CORE.BackboneElement;

  DomainResource = CORE.DomainResource;

  ContactPoint = CORE.ContactPoint;

  ElementDefinition = CORE.ElementDefinition;

  Extension = CORE.Extension;

  HumanName = CORE.HumanName;

  Address = CORE.Address;

  Ratio = CORE.Ratio;

  SampledData = CORE.SampledData;

  Reference = CORE.Reference;

  CodeableConcept = CORE.CodeableConcept;

  Identifier = CORE.Identifier;

  Narrative = CORE.Narrative;

  Element = CORE.Element;


  /** 
  Embedded class
  @class ContraindicationMitigationComponent
  @exports  ContraindicationMitigationComponent as ContraindicationMitigationComponent
   */

  ContraindicationMitigationComponent = (function(superClass) {
    extend(ContraindicationMitigationComponent, superClass);

    function ContraindicationMitigationComponent(json) {
      this.json = json;
      ContraindicationMitigationComponent.__super__.constructor.call(this, this.json);
    }


    /**
    Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified contraindication.
    @returns {CodeableConcept}
     */

    ContraindicationMitigationComponent.prototype.action = function() {
      if (this.json['action']) {
        return new CodeableConcept(this.json['action']);
      }
    };


    /**
    Indicates when the mitigating action was documented.
    @returns {Array} an array of {@link Date} objects
     */

    ContraindicationMitigationComponent.prototype.date = function() {
      if (this.json['date']) {
        return DT.DateTime.parse(this.json['date']);
      }
    };


    /**
    Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
    @returns {Reference}
     */

    ContraindicationMitigationComponent.prototype.author = function() {
      if (this.json['author']) {
        return new Reference(this.json['author']);
      }
    };

    return ContraindicationMitigationComponent;

  })(BackboneElement);


  /**
  Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient.  E.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
  @class Contraindication
  @exports Contraindication as Contraindication
   */

  Contraindication = (function(superClass) {
    extend(Contraindication, superClass);

    function Contraindication(json) {
      this.json = json;
      Contraindication.__super__.constructor.call(this, this.json);
    }


    /**
    Indicates the patient whose record the contraindication is associated with.
    @returns {Reference}
     */

    Contraindication.prototype.patient = function() {
      if (this.json['patient']) {
        return new Reference(this.json['patient']);
      }
    };


    /**
    Identifies the general type of issue identified.
    @returns {CodeableConcept}
     */

    Contraindication.prototype.category = function() {
      if (this.json['category']) {
        return new CodeableConcept(this.json['category']);
      }
    };


    /**
    Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
    @returns {Array} an array of {@link String} objects
     */

    Contraindication.prototype.severity = function() {
      return this.json['severity'];
    };


    /**
    Indicates the resource representing the current activity or proposed activity that.
    @returns {Array} an array of {@link Reference} objects
     */

    Contraindication.prototype.implicated = function() {
      var i, item, len, ref, results;
      if (this.json['implicated']) {
        ref = this.json['implicated'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new Reference(item));
        }
        return results;
      }
    };


    /**
    A textual explanation of the contraindication.
    @returns {Array} an array of {@link String} objects
     */

    Contraindication.prototype.detail = function() {
      return this.json['detail'];
    };


    /**
    The date or date-time when the contraindication was initially identified.
    @returns {Array} an array of {@link Date} objects
     */

    Contraindication.prototype.date = function() {
      if (this.json['date']) {
        return DT.DateTime.parse(this.json['date']);
      }
    };


    /**
    Identifies the provider or software that identified the.
    @returns {Reference}
     */

    Contraindication.prototype.author = function() {
      if (this.json['author']) {
        return new Reference(this.json['author']);
      }
    };


    /**
    Business identifier associated with the contraindication record.
    @returns {Identifier}
     */

    Contraindication.prototype.identifier = function() {
      if (this.json['identifier']) {
        return new Identifier(this.json['identifier']);
      }
    };


    /**
    The literature, knowledge-base or similar reference that describes the propensity for the contraindication identified.
    @returns {Array} an array of {@link String} objects
     */

    Contraindication.prototype.reference = function() {
      return this.json['reference'];
    };


    /**
    Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the contraindicaiton from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
    @returns {Array} an array of {@link ContraindicationMitigationComponent} objects
     */

    Contraindication.prototype.mitigation = function() {
      var i, item, len, ref, results;
      if (this.json['mitigation']) {
        ref = this.json['mitigation'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new ContraindicationMitigationComponent(item));
        }
        return results;
      }
    };

    return Contraindication;

  })(DomainResource);

  module.exports.Contraindication = Contraindication;

}).call(this);

//# sourceMappingURL=contraindication.js.map
