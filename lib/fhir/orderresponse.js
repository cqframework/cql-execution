// Generated by CoffeeScript 1.12.7
(function() {
  var Address, Attachment, BackboneElement, CORE, CodeableConcept, Coding, ContactPoint, DT, DomainResource, Element, ElementDefinition, Extension, HumanName, Identifier, Narrative, OrderResponse, Parameters, Period, Quantity, Range, Ratio, Reference, Resource, SampledData, Timing,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DT = require('../cql-datatypes');

  CORE = require('./core');

  Element = CORE.Element;

  Resource = CORE.Resource;

  Timing = CORE.Timing;

  Period = CORE.Period;

  Parameters = CORE.Parameters;

  Coding = CORE.Coding;

  Resource = CORE.Resource;

  Range = CORE.Range;

  Quantity = CORE.Quantity;

  Attachment = CORE.Attachment;

  BackboneElement = CORE.BackboneElement;

  DomainResource = CORE.DomainResource;

  ContactPoint = CORE.ContactPoint;

  ElementDefinition = CORE.ElementDefinition;

  Extension = CORE.Extension;

  HumanName = CORE.HumanName;

  Address = CORE.Address;

  Ratio = CORE.Ratio;

  SampledData = CORE.SampledData;

  Reference = CORE.Reference;

  CodeableConcept = CORE.CodeableConcept;

  Identifier = CORE.Identifier;

  Narrative = CORE.Narrative;

  Element = CORE.Element;


  /**
  A response to an order.
  @class OrderResponse
  @exports OrderResponse as OrderResponse
   */

  OrderResponse = (function(superClass) {
    extend(OrderResponse, superClass);

    function OrderResponse(json) {
      this.json = json;
      OrderResponse.__super__.constructor.call(this, this.json);
    }


    /**
    Identifiers assigned to this order. The identifiers are usually assigned by the system responding to the order, but they may be provided or added to by other systems.
    @returns {Array} an array of {@link Identifier} objects
     */

    OrderResponse.prototype.identifier = function() {
      var i, item, len, ref, results;
      if (this.json['identifier']) {
        ref = this.json['identifier'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new Identifier(item));
        }
        return results;
      }
    };


    /**
    A reference to the order that this is in response to.
    @returns {Reference}
     */

    OrderResponse.prototype.request = function() {
      if (this.json['request']) {
        return new Reference(this.json['request']);
      }
    };


    /**
    The date and time at which this order response was made (created/posted).
    @returns {Array} an array of {@link Date} objects
     */

    OrderResponse.prototype.date = function() {
      if (this.json['date']) {
        return DT.DateTime.parse(this.json['date']);
      }
    };


    /**
    The person, organization, or device credited with making the response.
    @returns {Reference}
     */

    OrderResponse.prototype.who = function() {
      if (this.json['who']) {
        return new Reference(this.json['who']);
      }
    };


    /**
    A reference to an authority policy that is the reason for the response. Usually this is used when the order is rejected, to provide a reason for rejection.
    @returns {CodeableConcept}
     */

    OrderResponse.prototype.authorityCodeableConcept = function() {
      if (this.json['authorityCodeableConcept']) {
        return new CodeableConcept(this.json['authorityCodeableConcept']);
      }
    };


    /**
    A reference to an authority policy that is the reason for the response. Usually this is used when the order is rejected, to provide a reason for rejection.
    @returns {Reference}
     */

    OrderResponse.prototype.authorityReference = function() {
      if (this.json['authorityReference']) {
        return new Reference(this.json['authorityReference']);
      }
    };


    /**
    What this response says about the status of the original order.
    @returns {Array} an array of {@link String} objects
     */

    OrderResponse.prototype.code = function() {
      return this.json['code'];
    };


    /**
    Additional description about the response - e.g. a text description provided by a human user when making decisions about the order.
    @returns {Array} an array of {@link String} objects
     */

    OrderResponse.prototype.description = function() {
      return this.json['description'];
    };


    /**
    Links to resources that provide details of the outcome of performing the order. E.g. Diagnostic Reports in a response that is made to an order that referenced a diagnostic order.
    @returns {Array} an array of {@link Reference} objects
     */

    OrderResponse.prototype.fulfillment = function() {
      var i, item, len, ref, results;
      if (this.json['fulfillment']) {
        ref = this.json['fulfillment'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new Reference(item));
        }
        return results;
      }
    };

    return OrderResponse;

  })(DomainResource);

  module.exports.OrderResponse = OrderResponse;

}).call(this);

//# sourceMappingURL=orderresponse.js.map
