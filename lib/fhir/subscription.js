// Generated by CoffeeScript 1.12.7
(function() {
  var Address, Attachment, BackboneElement, CORE, CodeableConcept, Coding, ContactPoint, DT, DomainResource, Element, ElementDefinition, Extension, HumanName, Identifier, Narrative, Parameters, Period, Quantity, Range, Ratio, Reference, Resource, SampledData, Subscription, SubscriptionChannelComponent, SubscriptionTagComponent, Timing,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DT = require('../cql-datatypes');

  CORE = require('./core');

  Element = CORE.Element;

  Resource = CORE.Resource;

  Timing = CORE.Timing;

  Period = CORE.Period;

  Parameters = CORE.Parameters;

  Coding = CORE.Coding;

  Resource = CORE.Resource;

  Range = CORE.Range;

  Quantity = CORE.Quantity;

  Attachment = CORE.Attachment;

  BackboneElement = CORE.BackboneElement;

  DomainResource = CORE.DomainResource;

  ContactPoint = CORE.ContactPoint;

  ElementDefinition = CORE.ElementDefinition;

  Extension = CORE.Extension;

  HumanName = CORE.HumanName;

  Address = CORE.Address;

  Ratio = CORE.Ratio;

  SampledData = CORE.SampledData;

  Reference = CORE.Reference;

  CodeableConcept = CORE.CodeableConcept;

  Identifier = CORE.Identifier;

  Narrative = CORE.Narrative;

  Element = CORE.Element;


  /** 
  Embedded class
  @class SubscriptionChannelComponent
  @exports  SubscriptionChannelComponent as SubscriptionChannelComponent
   */

  SubscriptionChannelComponent = (function(superClass) {
    extend(SubscriptionChannelComponent, superClass);

    function SubscriptionChannelComponent(json) {
      this.json = json;
      SubscriptionChannelComponent.__super__.constructor.call(this, this.json);
    }


    /**
    Todo.
    @returns {Array} an array of {@link String} objects
     */

    SubscriptionChannelComponent.prototype.type = function() {
      return this.json['type'];
    };


    /**
    Todo.
    @returns {Array} an array of {@link String} objects
     */

    SubscriptionChannelComponent.prototype.url = function() {
      return this.json['url'];
    };


    /**
    ToDo.
    @returns {Array} an array of {@link String} objects
     */

    SubscriptionChannelComponent.prototype.payload = function() {
      return this.json['payload'];
    };


    /**
    Usage depends on the channel type.
    @returns {Array} an array of {@link String} objects
     */

    SubscriptionChannelComponent.prototype.header = function() {
      return this.json['header'];
    };

    return SubscriptionChannelComponent;

  })(BackboneElement);


  /** 
  Embedded class
  @class SubscriptionTagComponent
  @exports  SubscriptionTagComponent as SubscriptionTagComponent
   */

  SubscriptionTagComponent = (function(superClass) {
    extend(SubscriptionTagComponent, superClass);

    function SubscriptionTagComponent(json) {
      this.json = json;
      SubscriptionTagComponent.__super__.constructor.call(this, this.json);
    }


    /**
    Todo.
    @returns {Array} an array of {@link String} objects
     */

    SubscriptionTagComponent.prototype.term = function() {
      return this.json['term'];
    };


    /**
    Todo.
    @returns {Array} an array of {@link String} objects
     */

    SubscriptionTagComponent.prototype.scheme = function() {
      return this.json['scheme'];
    };


    /**
    Todo.
    @returns {Array} an array of {@link String} objects
     */

    SubscriptionTagComponent.prototype.description = function() {
      return this.json['description'];
    };

    return SubscriptionTagComponent;

  })(BackboneElement);


  /**
  Todo.
  @class Subscription
  @exports Subscription as Subscription
   */

  Subscription = (function(superClass) {
    extend(Subscription, superClass);

    function Subscription(json) {
      this.json = json;
      Subscription.__super__.constructor.call(this, this.json);
    }


    /**
    Todo.
    @returns {Array} an array of {@link String} objects
     */

    Subscription.prototype.criteria = function() {
      return this.json['criteria'];
    };


    /**
    Todo.
    @returns {Array} an array of {@link ContactPoint} objects
     */

    Subscription.prototype.contact = function() {
      var i, item, len, ref, results;
      if (this.json['contact']) {
        ref = this.json['contact'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new ContactPoint(item));
        }
        return results;
      }
    };


    /**
    Todo.
    @returns {Array} an array of {@link String} objects
     */

    Subscription.prototype.reason = function() {
      return this.json['reason'];
    };


    /**
    Todo.
    @returns {Array} an array of {@link String} objects
     */

    Subscription.prototype.status = function() {
      return this.json['status'];
    };


    /**
    Todo.
    @returns {Array} an array of {@link String} objects
     */

    Subscription.prototype.error = function() {
      return this.json['error'];
    };


    /**
    Todo.
    @returns {SubscriptionChannelComponent}
     */

    Subscription.prototype.channel = function() {
      if (this.json['channel']) {
        return new SubscriptionChannelComponent(this.json['channel']);
      }
    };


    /**
    Todo.
    @returns {Array} an array of {@link Date} objects
     */

    Subscription.prototype.end = function() {
      if (this.json['end']) {
        return DT.DateTime.parse(this.json['end']);
      }
    };


    /**
    Todo.
    @returns {Array} an array of {@link SubscriptionTagComponent} objects
     */

    Subscription.prototype.tag = function() {
      var i, item, len, ref, results;
      if (this.json['tag']) {
        ref = this.json['tag'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new SubscriptionTagComponent(item));
        }
        return results;
      }
    };

    return Subscription;

  })(DomainResource);

  module.exports.Subscription = Subscription;

}).call(this);

//# sourceMappingURL=subscription.js.map
