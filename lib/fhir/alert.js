// Generated by CoffeeScript 1.12.7
(function() {
  var Address, Alert, Attachment, BackboneElement, CORE, CodeableConcept, Coding, ContactPoint, DT, DomainResource, Element, ElementDefinition, Extension, HumanName, Identifier, Narrative, Parameters, Period, Quantity, Range, Ratio, Reference, Resource, SampledData, Timing,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DT = require('../cql-datatypes');

  CORE = require('./core');

  Element = CORE.Element;

  Resource = CORE.Resource;

  Timing = CORE.Timing;

  Period = CORE.Period;

  Parameters = CORE.Parameters;

  Coding = CORE.Coding;

  Resource = CORE.Resource;

  Range = CORE.Range;

  Quantity = CORE.Quantity;

  Attachment = CORE.Attachment;

  BackboneElement = CORE.BackboneElement;

  DomainResource = CORE.DomainResource;

  ContactPoint = CORE.ContactPoint;

  ElementDefinition = CORE.ElementDefinition;

  Extension = CORE.Extension;

  HumanName = CORE.HumanName;

  Address = CORE.Address;

  Ratio = CORE.Ratio;

  SampledData = CORE.SampledData;

  Reference = CORE.Reference;

  CodeableConcept = CORE.CodeableConcept;

  Identifier = CORE.Identifier;

  Narrative = CORE.Narrative;

  Element = CORE.Element;


  /**
  Prospective warnings of potential issues when providing care to the patient.
  @class Alert
  @exports Alert as Alert
   */

  Alert = (function(superClass) {
    extend(Alert, superClass);

    function Alert(json) {
      this.json = json;
      Alert.__super__.constructor.call(this, this.json);
    }


    /**
    Identifier assigned to the alert for external use (outside the FHIR environment).
    @returns {Array} an array of {@link Identifier} objects
     */

    Alert.prototype.identifier = function() {
      var i, item, len, ref, results;
      if (this.json['identifier']) {
        ref = this.json['identifier'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new Identifier(item));
        }
        return results;
      }
    };


    /**
    Allows an alert to be divided into different categories like clinical, administrative etc.
    @returns {CodeableConcept}
     */

    Alert.prototype.category = function() {
      if (this.json['category']) {
        return new CodeableConcept(this.json['category']);
      }
    };


    /**
    Supports basic workflow.
    @returns {Array} an array of {@link String} objects
     */

    Alert.prototype.status = function() {
      return this.json['status'];
    };


    /**
    The person who this alert concerns.
    @returns {Reference}
     */

    Alert.prototype.subject = function() {
      if (this.json['subject']) {
        return new Reference(this.json['subject']);
      }
    };


    /**
    The person or device that created the alert.
    @returns {Reference}
     */

    Alert.prototype.author = function() {
      if (this.json['author']) {
        return new Reference(this.json['author']);
      }
    };


    /**
    The textual component of the alert to display to the user.
    @returns {Array} an array of {@link String} objects
     */

    Alert.prototype.note = function() {
      return this.json['note'];
    };

    return Alert;

  })(DomainResource);

  module.exports.Alert = Alert;

}).call(this);

//# sourceMappingURL=alert.js.map
