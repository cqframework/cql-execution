// Generated by CoffeeScript 1.12.7
(function() {
  var Address, Attachment, BackboneElement, CORE, CodeableConcept, Coding, ContactPoint, DT, DomainResource, Element, ElementDefinition, Extension, HumanName, Identifier, Narrative, Parameters, Period, Quantity, Range, Ratio, Reference, Resource, SampledData, SearchParameter, Timing,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DT = require('../cql-datatypes');

  CORE = require('./core');

  Element = CORE.Element;

  Resource = CORE.Resource;

  Timing = CORE.Timing;

  Period = CORE.Period;

  Parameters = CORE.Parameters;

  Coding = CORE.Coding;

  Resource = CORE.Resource;

  Range = CORE.Range;

  Quantity = CORE.Quantity;

  Attachment = CORE.Attachment;

  BackboneElement = CORE.BackboneElement;

  DomainResource = CORE.DomainResource;

  ContactPoint = CORE.ContactPoint;

  ElementDefinition = CORE.ElementDefinition;

  Extension = CORE.Extension;

  HumanName = CORE.HumanName;

  Address = CORE.Address;

  Ratio = CORE.Ratio;

  SampledData = CORE.SampledData;

  Reference = CORE.Reference;

  CodeableConcept = CORE.CodeableConcept;

  Identifier = CORE.Identifier;

  Narrative = CORE.Narrative;

  Element = CORE.Element;


  /**
  A Search Parameter that defines a named search item that can be used to search/filter on a resource.
  @class SearchParameter
  @exports SearchParameter as SearchParameter
   */

  SearchParameter = (function(superClass) {
    extend(SearchParameter, superClass);

    function SearchParameter(json) {
      this.json = json;
      SearchParameter.__super__.constructor.call(this, this.json);
    }


    /**
    The URL at which this search parameter is (or will be) published, and which is used to reference this profile in conformance statements.
    @returns {Array} an array of {@link String} objects
     */

    SearchParameter.prototype.url = function() {
      return this.json['url'];
    };


    /**
    The name of the standard or custom search parameter.
    @returns {Array} an array of {@link String} objects
     */

    SearchParameter.prototype.name = function() {
      return this.json['name'];
    };


    /**
    Details of the individual or organization who accepts responsibility for publishing the search parameter.
    @returns {Array} an array of {@link String} objects
     */

    SearchParameter.prototype.publisher = function() {
      return this.json['publisher'];
    };


    /**
    Contact details to assist a user in finding and communicating with the publisher.
    @returns {Array} an array of {@link ContactPoint} objects
     */

    SearchParameter.prototype.telecom = function() {
      var i, item, len, ref, results;
      if (this.json['telecom']) {
        ref = this.json['telecom'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new ContactPoint(item));
        }
        return results;
      }
    };


    /**
    The Scope and Usage that this search parameter was created to meet.
    @returns {Array} an array of {@link String} objects
     */

    SearchParameter.prototype.requirements = function() {
      return this.json['requirements'];
    };


    /**
    The base resource type that this search parameter refers to.
    @returns {Array} an array of {@link String} objects
     */

    SearchParameter.prototype.base = function() {
      return this.json['base'];
    };


    /**
    The type of value a search parameter refers to, and how the content is interpreted.
    @returns {Array} an array of {@link String} objects
     */

    SearchParameter.prototype.type = function() {
      return this.json['type'];
    };


    /**
    A description of the search parameters and how it used.
    @returns {Array} an array of {@link String} objects
     */

    SearchParameter.prototype.description = function() {
      return this.json['description'];
    };


    /**
    An XPath expression that returns a set of elements for the search parameter.
    @returns {Array} an array of {@link String} objects
     */

    SearchParameter.prototype.xpath = function() {
      return this.json['xpath'];
    };


    /**
    Types of resource (if a resource is referenced).
    @returns {Array} an array of {@link String} objects
     */

    SearchParameter.prototype.target = function() {
      return this.json['target'];
    };

    return SearchParameter;

  })(DomainResource);

  module.exports.SearchParameter = SearchParameter;

}).call(this);

//# sourceMappingURL=searchparameter.js.map
