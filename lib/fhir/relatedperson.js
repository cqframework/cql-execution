// Generated by CoffeeScript 1.12.7
(function() {
  var Address, Attachment, BackboneElement, CORE, CodeableConcept, Coding, ContactPoint, DT, DomainResource, Element, ElementDefinition, Extension, HumanName, Identifier, Narrative, Parameters, Period, Quantity, Range, Ratio, Reference, RelatedPerson, Resource, SampledData, Timing,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DT = require('../cql-datatypes');

  CORE = require('./core');

  Element = CORE.Element;

  Resource = CORE.Resource;

  Timing = CORE.Timing;

  Period = CORE.Period;

  Parameters = CORE.Parameters;

  Coding = CORE.Coding;

  Resource = CORE.Resource;

  Range = CORE.Range;

  Quantity = CORE.Quantity;

  Attachment = CORE.Attachment;

  BackboneElement = CORE.BackboneElement;

  DomainResource = CORE.DomainResource;

  ContactPoint = CORE.ContactPoint;

  ElementDefinition = CORE.ElementDefinition;

  Extension = CORE.Extension;

  HumanName = CORE.HumanName;

  Address = CORE.Address;

  Ratio = CORE.Ratio;

  SampledData = CORE.SampledData;

  Reference = CORE.Reference;

  CodeableConcept = CORE.CodeableConcept;

  Identifier = CORE.Identifier;

  Narrative = CORE.Narrative;

  Element = CORE.Element;


  /**
  Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
  @class RelatedPerson
  @exports RelatedPerson as RelatedPerson
   */

  RelatedPerson = (function(superClass) {
    extend(RelatedPerson, superClass);

    function RelatedPerson(json) {
      this.json = json;
      RelatedPerson.__super__.constructor.call(this, this.json);
    }


    /**
    Identifier for a person within a particular scope.
    @returns {Array} an array of {@link Identifier} objects
     */

    RelatedPerson.prototype.identifier = function() {
      var i, item, len, ref, results;
      if (this.json['identifier']) {
        ref = this.json['identifier'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new Identifier(item));
        }
        return results;
      }
    };


    /**
    The patient this person is related to.
    @returns {Reference}
     */

    RelatedPerson.prototype.patient = function() {
      if (this.json['patient']) {
        return new Reference(this.json['patient']);
      }
    };


    /**
    The nature of the relationship between a patient and the related person.
    @returns {CodeableConcept}
     */

    RelatedPerson.prototype.relationship = function() {
      if (this.json['relationship']) {
        return new CodeableConcept(this.json['relationship']);
      }
    };


    /**
    A name associated with the person.
    @returns {HumanName}
     */

    RelatedPerson.prototype.name = function() {
      if (this.json['name']) {
        return new HumanName(this.json['name']);
      }
    };


    /**
    A contact detail for the person, e.g. a telephone number or an email address.
    @returns {Array} an array of {@link ContactPoint} objects
     */

    RelatedPerson.prototype.telecom = function() {
      var i, item, len, ref, results;
      if (this.json['telecom']) {
        ref = this.json['telecom'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new ContactPoint(item));
        }
        return results;
      }
    };


    /**
    Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
    @returns {Array} an array of {@link String} objects
     */

    RelatedPerson.prototype.gender = function() {
      return this.json['gender'];
    };


    /**
    Address where the related person can be contacted or visited.
    @returns {Address}
     */

    RelatedPerson.prototype.address = function() {
      if (this.json['address']) {
        return new Address(this.json['address']);
      }
    };


    /**
    Image of the person.
    @returns {Array} an array of {@link Attachment} objects
     */

    RelatedPerson.prototype.photo = function() {
      var i, item, len, ref, results;
      if (this.json['photo']) {
        ref = this.json['photo'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new Attachment(item));
        }
        return results;
      }
    };

    return RelatedPerson;

  })(DomainResource);

  module.exports.RelatedPerson = RelatedPerson;

}).call(this);

//# sourceMappingURL=relatedperson.js.map
