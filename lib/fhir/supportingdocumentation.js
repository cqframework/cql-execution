// Generated by CoffeeScript 1.12.7
(function() {
  var Address, Attachment, BackboneElement, CORE, CodeableConcept, Coding, ContactPoint, DT, DomainResource, Element, ElementDefinition, Extension, HumanName, Identifier, Narrative, Parameters, Period, Quantity, Range, Ratio, Reference, Resource, SampledData, SupportingDocumentation, SupportingDocumentationDetailComponent, Timing,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DT = require('../cql-datatypes');

  CORE = require('./core');

  Element = CORE.Element;

  Resource = CORE.Resource;

  Timing = CORE.Timing;

  Period = CORE.Period;

  Parameters = CORE.Parameters;

  Coding = CORE.Coding;

  Resource = CORE.Resource;

  Range = CORE.Range;

  Quantity = CORE.Quantity;

  Attachment = CORE.Attachment;

  BackboneElement = CORE.BackboneElement;

  DomainResource = CORE.DomainResource;

  ContactPoint = CORE.ContactPoint;

  ElementDefinition = CORE.ElementDefinition;

  Extension = CORE.Extension;

  HumanName = CORE.HumanName;

  Address = CORE.Address;

  Ratio = CORE.Ratio;

  SampledData = CORE.SampledData;

  Reference = CORE.Reference;

  CodeableConcept = CORE.CodeableConcept;

  Identifier = CORE.Identifier;

  Narrative = CORE.Narrative;

  Element = CORE.Element;


  /** 
  Embedded class
  @class SupportingDocumentationDetailComponent
  @exports  SupportingDocumentationDetailComponent as SupportingDocumentationDetailComponent
   */

  SupportingDocumentationDetailComponent = (function(superClass) {
    extend(SupportingDocumentationDetailComponent, superClass);

    function SupportingDocumentationDetailComponent(json) {
      this.json = json;
      SupportingDocumentationDetailComponent.__super__.constructor.call(this, this.json);
    }


    /**
    A link Id for the response to reference.
    @returns {Array} an array of {@link Number} objects
     */

    SupportingDocumentationDetailComponent.prototype.linkId = function() {
      return this.json['linkId'];
    };


    /**
    The attached content.
    @returns {Reference}
     */

    SupportingDocumentationDetailComponent.prototype.contentReference = function() {
      if (this.json['contentReference']) {
        return new Reference(this.json['contentReference']);
      }
    };


    /**
    The attached content.
    @returns {Attachment}
     */

    SupportingDocumentationDetailComponent.prototype.contentAttachment = function() {
      if (this.json['contentAttachment']) {
        return new Attachment(this.json['contentAttachment']);
      }
    };


    /**
    The date and optionally time when the material was created.
    @returns {Array} an array of {@link Date} objects
     */

    SupportingDocumentationDetailComponent.prototype.dateTime = function() {
      if (this.json['dateTime']) {
        return DT.DateTime.parse(this.json['dateTime']);
      }
    };

    return SupportingDocumentationDetailComponent;

  })(BackboneElement);


  /**
  This resource provides the supporting information for a process, for example clinical or financial  information related to a claim or pre-authorization.
  @class SupportingDocumentation
  @exports SupportingDocumentation as SupportingDocumentation
   */

  SupportingDocumentation = (function(superClass) {
    extend(SupportingDocumentation, superClass);

    function SupportingDocumentation(json) {
      this.json = json;
      SupportingDocumentation.__super__.constructor.call(this, this.json);
    }


    /**
    The Response Business Identifier.
    @returns {Array} an array of {@link Identifier} objects
     */

    SupportingDocumentation.prototype.identifier = function() {
      var i, item, len, ref, results;
      if (this.json['identifier']) {
        ref = this.json['identifier'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new Identifier(item));
        }
        return results;
      }
    };


    /**
    The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    @returns {Coding}
     */

    SupportingDocumentation.prototype.ruleset = function() {
      if (this.json['ruleset']) {
        return new Coding(this.json['ruleset']);
      }
    };


    /**
    The style (standard) and version of the original material which was converted into this resource.
    @returns {Coding}
     */

    SupportingDocumentation.prototype.originalRuleset = function() {
      if (this.json['originalRuleset']) {
        return new Coding(this.json['originalRuleset']);
      }
    };


    /**
    The date when this resource was created.
    @returns {Array} an array of {@link Date} objects
     */

    SupportingDocumentation.prototype.date = function() {
      if (this.json['date']) {
        return DT.DateTime.parse(this.json['date']);
      }
    };


    /**
    The Insurer, organization or Provider who is target  of the submission.
    @returns {Reference}
     */

    SupportingDocumentation.prototype.target = function() {
      if (this.json['target']) {
        return new Reference(this.json['target']);
      }
    };


    /**
    The practitioner who is responsible for the services rendered to the patient.
    @returns {Reference}
     */

    SupportingDocumentation.prototype.provider = function() {
      if (this.json['provider']) {
        return new Reference(this.json['provider']);
      }
    };


    /**
    The organization which is responsible for the services rendered to the patient.
    @returns {Reference}
     */

    SupportingDocumentation.prototype.organization = function() {
      if (this.json['organization']) {
        return new Reference(this.json['organization']);
      }
    };


    /**
    Original request identifer.
    @returns {Reference}
     */

    SupportingDocumentation.prototype.request = function() {
      if (this.json['request']) {
        return new Reference(this.json['request']);
      }
    };


    /**
    Original response identifer.
    @returns {Reference}
     */

    SupportingDocumentation.prototype.response = function() {
      if (this.json['response']) {
        return new Reference(this.json['response']);
      }
    };


    /**
    Person who created the submission.
    @returns {Reference}
     */

    SupportingDocumentation.prototype.author = function() {
      if (this.json['author']) {
        return new Reference(this.json['author']);
      }
    };


    /**
    The patient who is directly or indirectly the subject of the supporting information.
    @returns {Reference}
     */

    SupportingDocumentation.prototype.subject = function() {
      if (this.json['subject']) {
        return new Reference(this.json['subject']);
      }
    };


    /**
    Supporting Files.
    @returns {Array} an array of {@link SupportingDocumentationDetailComponent} objects
     */

    SupportingDocumentation.prototype.detail = function() {
      var i, item, len, ref, results;
      if (this.json['detail']) {
        ref = this.json['detail'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new SupportingDocumentationDetailComponent(item));
        }
        return results;
      }
    };

    return SupportingDocumentation;

  })(DomainResource);

  module.exports.SupportingDocumentation = SupportingDocumentation;

}).call(this);

//# sourceMappingURL=supportingdocumentation.js.map
