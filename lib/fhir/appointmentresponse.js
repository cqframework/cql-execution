// Generated by CoffeeScript 1.12.7
(function() {
  var Address, AppointmentResponse, Attachment, BackboneElement, CORE, CodeableConcept, Coding, ContactPoint, DT, DomainResource, Element, ElementDefinition, Extension, HumanName, Identifier, Narrative, Parameters, Period, Quantity, Range, Ratio, Reference, Resource, SampledData, Timing,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DT = require('../cql-datatypes');

  CORE = require('./core');

  Element = CORE.Element;

  Resource = CORE.Resource;

  Timing = CORE.Timing;

  Period = CORE.Period;

  Parameters = CORE.Parameters;

  Coding = CORE.Coding;

  Resource = CORE.Resource;

  Range = CORE.Range;

  Quantity = CORE.Quantity;

  Attachment = CORE.Attachment;

  BackboneElement = CORE.BackboneElement;

  DomainResource = CORE.DomainResource;

  ContactPoint = CORE.ContactPoint;

  ElementDefinition = CORE.ElementDefinition;

  Extension = CORE.Extension;

  HumanName = CORE.HumanName;

  Address = CORE.Address;

  Ratio = CORE.Ratio;

  SampledData = CORE.SampledData;

  Reference = CORE.Reference;

  CodeableConcept = CORE.CodeableConcept;

  Identifier = CORE.Identifier;

  Narrative = CORE.Narrative;

  Element = CORE.Element;


  /**
  A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
  @class AppointmentResponse
  @exports AppointmentResponse as AppointmentResponse
   */

  AppointmentResponse = (function(superClass) {
    extend(AppointmentResponse, superClass);

    function AppointmentResponse(json) {
      this.json = json;
      AppointmentResponse.__super__.constructor.call(this, this.json);
    }


    /**
    This records identifiers associated with this appointment concern that are defined by business processed and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    @returns {Array} an array of {@link Identifier} objects
     */

    AppointmentResponse.prototype.identifier = function() {
      var i, item, len, ref, results;
      if (this.json['identifier']) {
        ref = this.json['identifier'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new Identifier(item));
        }
        return results;
      }
    };


    /**
    Parent appointment that this response is replying to.
    @returns {Reference}
     */

    AppointmentResponse.prototype.appointment = function() {
      if (this.json['appointment']) {
        return new Reference(this.json['appointment']);
      }
    };


    /**
    Role of participant in the appointment.
    @returns {Array} an array of {@link CodeableConcept} objects
     */

    AppointmentResponse.prototype.participantType = function() {
      var i, item, len, ref, results;
      if (this.json['participantType']) {
        ref = this.json['participantType'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new CodeableConcept(item));
        }
        return results;
      }
    };


    /**
    A Person of device that is participating in the appointment, usually Practitioner, Patient, RelatedPerson or Device.
    @returns {Array} an array of {@link Reference} objects
     */

    AppointmentResponse.prototype.individual = function() {
      var i, item, len, ref, results;
      if (this.json['individual']) {
        ref = this.json['individual'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new Reference(item));
        }
        return results;
      }
    };


    /**
    Participation status of the Patient.
    @returns {Array} an array of {@link String} objects
     */

    AppointmentResponse.prototype.participantStatus = function() {
      return this.json['participantStatus'];
    };


    /**
    Additional comments about the appointment.
    @returns {Array} an array of {@link String} objects
     */

    AppointmentResponse.prototype.comment = function() {
      return this.json['comment'];
    };


    /**
    Date/Time that the appointment is to take place.
    @returns {Array} an array of {@link Date} objects
     */

    AppointmentResponse.prototype.start = function() {
      if (this.json['start']) {
        return DT.DateTime.parse(this.json['start']);
      }
    };


    /**
    Date/Time that the appointment is to conclude.
    @returns {Array} an array of {@link Date} objects
     */

    AppointmentResponse.prototype.end = function() {
      if (this.json['end']) {
        return DT.DateTime.parse(this.json['end']);
      }
    };


    /**
    Who recorded the appointment response.
    @returns {Reference}
     */

    AppointmentResponse.prototype.lastModifiedBy = function() {
      if (this.json['lastModifiedBy']) {
        return new Reference(this.json['lastModifiedBy']);
      }
    };


    /**
    Date when the response was recorded or last updated.
    @returns {Array} an array of {@link Date} objects
     */

    AppointmentResponse.prototype.lastModified = function() {
      if (this.json['lastModified']) {
        return DT.DateTime.parse(this.json['lastModified']);
      }
    };

    return AppointmentResponse;

  })(DomainResource);

  module.exports.AppointmentResponse = AppointmentResponse;

}).call(this);

//# sourceMappingURL=appointmentresponse.js.map
