// Generated by CoffeeScript 1.12.7
(function() {
  var Address, Attachment, BackboneElement, Binary, CORE, CodeableConcept, Coding, ContactPoint, DT, DomainResource, Element, ElementDefinition, Extension, HumanName, Identifier, Narrative, Parameters, Period, Quantity, Range, Ratio, Reference, Resource, SampledData, Timing,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DT = require('../cql-datatypes');

  CORE = require('./core');

  Element = CORE.Element;

  Resource = CORE.Resource;

  Timing = CORE.Timing;

  Period = CORE.Period;

  Parameters = CORE.Parameters;

  Coding = CORE.Coding;

  Resource = CORE.Resource;

  Range = CORE.Range;

  Quantity = CORE.Quantity;

  Attachment = CORE.Attachment;

  BackboneElement = CORE.BackboneElement;

  DomainResource = CORE.DomainResource;

  ContactPoint = CORE.ContactPoint;

  ElementDefinition = CORE.ElementDefinition;

  Extension = CORE.Extension;

  HumanName = CORE.HumanName;

  Address = CORE.Address;

  Ratio = CORE.Ratio;

  SampledData = CORE.SampledData;

  Reference = CORE.Reference;

  CodeableConcept = CORE.CodeableConcept;

  Identifier = CORE.Identifier;

  Narrative = CORE.Narrative;

  Element = CORE.Element;


  /**
  A binary resource can contain any content, whether text, image, pdf, zip archive, etc.
  @class Binary
  @exports Binary as Binary
   */

  Binary = (function(superClass) {
    extend(Binary, superClass);

    function Binary(json) {
      this.json = json;
      Binary.__super__.constructor.call(this, this.json);
    }


    /**
    MimeType of the binary content represented as a standard MimeType (BCP 13).
    @returns {Array} an array of {@link String} objects
     */

    Binary.prototype.contentType = function() {
      return this.json['contentType'];
    };


    /**
    The actual content, base64 encoded.
    @returns {Array} an array of {@link } objects
     */

    Binary.prototype.content = function() {
      return this.json['content'];
    };

    return Binary;

  })(Resource);

  module.exports.Binary = Binary;

}).call(this);

//# sourceMappingURL=binary.js.map
