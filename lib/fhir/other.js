// Generated by CoffeeScript 1.12.7
(function() {
  var Address, Attachment, BackboneElement, CORE, CodeableConcept, Coding, ContactPoint, DT, DomainResource, Element, ElementDefinition, Extension, HumanName, Identifier, Narrative, Other, Parameters, Period, Quantity, Range, Ratio, Reference, Resource, SampledData, Timing,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DT = require('../cql-datatypes');

  CORE = require('./core');

  Element = CORE.Element;

  Resource = CORE.Resource;

  Timing = CORE.Timing;

  Period = CORE.Period;

  Parameters = CORE.Parameters;

  Coding = CORE.Coding;

  Resource = CORE.Resource;

  Range = CORE.Range;

  Quantity = CORE.Quantity;

  Attachment = CORE.Attachment;

  BackboneElement = CORE.BackboneElement;

  DomainResource = CORE.DomainResource;

  ContactPoint = CORE.ContactPoint;

  ElementDefinition = CORE.ElementDefinition;

  Extension = CORE.Extension;

  HumanName = CORE.HumanName;

  Address = CORE.Address;

  Ratio = CORE.Ratio;

  SampledData = CORE.SampledData;

  Reference = CORE.Reference;

  CodeableConcept = CORE.CodeableConcept;

  Identifier = CORE.Identifier;

  Narrative = CORE.Narrative;

  Element = CORE.Element;


  /**
  Other is a conformant for handling resource concepts not yet defined for FHIR or outside HL7's scope of interest.
  @class Other
  @exports Other as Other
   */

  Other = (function(superClass) {
    extend(Other, superClass);

    function Other(json) {
      this.json = json;
      Other.__super__.constructor.call(this, this.json);
    }


    /**
    Identifier assigned to the resource for business purposes, outside the context of FHIR.
    @returns {Array} an array of {@link Identifier} objects
     */

    Other.prototype.identifier = function() {
      var i, item, len, ref, results;
      if (this.json['identifier']) {
        ref = this.json['identifier'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new Identifier(item));
        }
        return results;
      }
    };


    /**
    Identifies the 'type' of resource - equivalent to the resource name for other resources.
    @returns {CodeableConcept}
     */

    Other.prototype.code = function() {
      if (this.json['code']) {
        return new CodeableConcept(this.json['code']);
      }
    };


    /**
    Identifies the patient, practitioner, device or any other resource that is the "focus" of this resoruce.
    @returns {Reference}
     */

    Other.prototype.subject = function() {
      if (this.json['subject']) {
        return new Reference(this.json['subject']);
      }
    };


    /**
    Indicates who was responsible for creating the resource instance.
    @returns {Reference}
     */

    Other.prototype.author = function() {
      if (this.json['author']) {
        return new Reference(this.json['author']);
      }
    };


    /**
    Identifies when the resource was first created.
    @returns {Array} an array of {@link Date} objects
     */

    Other.prototype.created = function() {
      if (this.json['created']) {
        return DT.DateTime.parse(this.json['created']);
      }
    };

    return Other;

  })(DomainResource);

  module.exports.Other = Other;

}).call(this);

//# sourceMappingURL=other.js.map
