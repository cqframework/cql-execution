// Generated by CoffeeScript 1.12.7
(function() {
  var Address, Attachment, BackboneElement, CORE, CodeableConcept, Coding, ContactPoint, DT, DomainResource, Element, ElementDefinition, Extension, HumanName, Identifier, Narrative, Parameters, PayeeComponent, Period, Quantity, Range, Ratio, Reference, Resource, Reversal, ReversalCoverageComponent, SampledData, Timing,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DT = require('../cql-datatypes');

  CORE = require('./core');

  Element = CORE.Element;

  Resource = CORE.Resource;

  Timing = CORE.Timing;

  Period = CORE.Period;

  Parameters = CORE.Parameters;

  Coding = CORE.Coding;

  Resource = CORE.Resource;

  Range = CORE.Range;

  Quantity = CORE.Quantity;

  Attachment = CORE.Attachment;

  BackboneElement = CORE.BackboneElement;

  DomainResource = CORE.DomainResource;

  ContactPoint = CORE.ContactPoint;

  ElementDefinition = CORE.ElementDefinition;

  Extension = CORE.Extension;

  HumanName = CORE.HumanName;

  Address = CORE.Address;

  Ratio = CORE.Ratio;

  SampledData = CORE.SampledData;

  Reference = CORE.Reference;

  CodeableConcept = CORE.CodeableConcept;

  Identifier = CORE.Identifier;

  Narrative = CORE.Narrative;

  Element = CORE.Element;


  /** 
  Embedded class
  @class PayeeComponent
  @exports  PayeeComponent as PayeeComponent
   */

  PayeeComponent = (function(superClass) {
    extend(PayeeComponent, superClass);

    function PayeeComponent(json) {
      this.json = json;
      PayeeComponent.__super__.constructor.call(this, this.json);
    }


    /**
    Party to be reimbursed: Subscriber, provider, other.
    @returns {Coding}
     */

    PayeeComponent.prototype.type = function() {
      if (this.json['type']) {
        return new Coding(this.json['type']);
      }
    };


    /**
    The provider who is to be reimbursed for the claim (the party to whom any benefit is assigned).
    @returns {Reference}
     */

    PayeeComponent.prototype.provider = function() {
      if (this.json['provider']) {
        return new Reference(this.json['provider']);
      }
    };


    /**
    The organization who is to be reimbursed for the claim (the party to whom any benefit is assigned).
    @returns {Reference}
     */

    PayeeComponent.prototype.organization = function() {
      if (this.json['organization']) {
        return new Reference(this.json['organization']);
      }
    };


    /**
    The person other than the subscriber who is to be reimbursed for the claim (the party to whom any benefit is assigned).
    @returns {Reference}
     */

    PayeeComponent.prototype.person = function() {
      if (this.json['person']) {
        return new Reference(this.json['person']);
      }
    };

    return PayeeComponent;

  })(BackboneElement);


  /** 
  Embedded class
  @class ReversalCoverageComponent
  @exports  ReversalCoverageComponent as ReversalCoverageComponent
   */

  ReversalCoverageComponent = (function(superClass) {
    extend(ReversalCoverageComponent, superClass);

    function ReversalCoverageComponent(json) {
      this.json = json;
      ReversalCoverageComponent.__super__.constructor.call(this, this.json);
    }


    /**
    A service line item.
    @returns {Array} an array of {@link Number} objects
     */

    ReversalCoverageComponent.prototype.sequence = function() {
      return this.json['sequence'];
    };


    /**
    The instance number of the Coverage which is the focus for adjudication, that is the Coverage to which the claim is to be adjudicated against.
    @returns {Array} an array of {@link boolean} objects
     */

    ReversalCoverageComponent.prototype.focal = function() {
      return this.json['focal'];
    };


    /**
    Reference to the program or plan identification, underwriter or payor.
    @returns {Reference}
     */

    ReversalCoverageComponent.prototype.coverage = function() {
      if (this.json['coverage']) {
        return new Reference(this.json['coverage']);
      }
    };


    /**
    The contract number of a business agreement which describes the terms and conditions.
    @returns {Array} an array of {@link String} objects
     */

    ReversalCoverageComponent.prototype.businessArrangement = function() {
      return this.json['businessArrangement'];
    };


    /**
    The relationship of the patient to the subscriber.
    @returns {Coding}
     */

    ReversalCoverageComponent.prototype.relationship = function() {
      if (this.json['relationship']) {
        return new Coding(this.json['relationship']);
      }
    };

    return ReversalCoverageComponent;

  })(BackboneElement);


  /**
  This resource provides the request and response details for the request for which all actions are to be reversed or terminated.
  @class Reversal
  @exports Reversal as Reversal
   */

  Reversal = (function(superClass) {
    extend(Reversal, superClass);

    function Reversal(json) {
      this.json = json;
      Reversal.__super__.constructor.call(this, this.json);
    }


    /**
    The Response Business Identifier.
    @returns {Array} an array of {@link Identifier} objects
     */

    Reversal.prototype.identifier = function() {
      var i, item, len, ref, results;
      if (this.json['identifier']) {
        ref = this.json['identifier'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(new Identifier(item));
        }
        return results;
      }
    };


    /**
    The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    @returns {Coding}
     */

    Reversal.prototype.ruleset = function() {
      if (this.json['ruleset']) {
        return new Coding(this.json['ruleset']);
      }
    };


    /**
    The style (standard) and version of the original material which was converted into this resource.
    @returns {Coding}
     */

    Reversal.prototype.originalRuleset = function() {
      if (this.json['originalRuleset']) {
        return new Coding(this.json['originalRuleset']);
      }
    };


    /**
    The date when this resource was created.
    @returns {Array} an array of {@link Date} objects
     */

    Reversal.prototype.date = function() {
      if (this.json['date']) {
        return DT.DateTime.parse(this.json['date']);
      }
    };


    /**
    The Insurer who is target  of the request.
    @returns {Reference}
     */

    Reversal.prototype.target = function() {
      if (this.json['target']) {
        return new Reference(this.json['target']);
      }
    };


    /**
    The practitioner who is responsible for the services rendered to the patient.
    @returns {Reference}
     */

    Reversal.prototype.provider = function() {
      if (this.json['provider']) {
        return new Reference(this.json['provider']);
      }
    };


    /**
    The organization which is responsible for the services rendered to the patient.
    @returns {Reference}
     */

    Reversal.prototype.organization = function() {
      if (this.json['organization']) {
        return new Reference(this.json['organization']);
      }
    };


    /**
    Reference of resource to reverse.
    @returns {Reference}
     */

    Reversal.prototype.request = function() {
      if (this.json['request']) {
        return new Reference(this.json['request']);
      }
    };


    /**
    Reference of response to resource to reverse.
    @returns {Reference}
     */

    Reversal.prototype.response = function() {
      if (this.json['response']) {
        return new Reference(this.json['response']);
      }
    };


    /**
    Payee information suypplied for matching purposes.
    @returns {PayeeComponent}
     */

    Reversal.prototype.payee = function() {
      if (this.json['payee']) {
        return new PayeeComponent(this.json['payee']);
      }
    };


    /**
    Financial instrument by which payment information for health care.
    @returns {ReversalCoverageComponent}
     */

    Reversal.prototype.coverage = function() {
      if (this.json['coverage']) {
        return new ReversalCoverageComponent(this.json['coverage']);
      }
    };


    /**
    If true remove all history excluding audit.
    @returns {Array} an array of {@link boolean} objects
     */

    Reversal.prototype.nullify = function() {
      return this.json['nullify'];
    };

    return Reversal;

  })(DomainResource);

  module.exports.Reversal = Reversal;

}).call(this);

//# sourceMappingURL=reversal.js.map
