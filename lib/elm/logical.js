// Generated by CoffeeScript 1.12.7
(function() {
  var And, Expression, IsFalse, IsTrue, Not, Or, ThreeValuedLogic, Xor,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Expression = require('./expression').Expression;

  ThreeValuedLogic = require('../datatypes/datatypes').ThreeValuedLogic;

  module.exports.And = And = (function(superClass) {
    extend(And, superClass);

    function And(json) {
      And.__super__.constructor.apply(this, arguments);
    }

    And.prototype.exec = function(ctx) {
      return ThreeValuedLogic.and.apply(ThreeValuedLogic, this.execArgs(ctx));
    };

    return And;

  })(Expression);

  module.exports.Or = Or = (function(superClass) {
    extend(Or, superClass);

    function Or(json) {
      Or.__super__.constructor.apply(this, arguments);
    }

    Or.prototype.exec = function(ctx) {
      return ThreeValuedLogic.or.apply(ThreeValuedLogic, this.execArgs(ctx));
    };

    return Or;

  })(Expression);

  module.exports.Not = Not = (function(superClass) {
    extend(Not, superClass);

    function Not(json) {
      Not.__super__.constructor.apply(this, arguments);
    }

    Not.prototype.exec = function(ctx) {
      return ThreeValuedLogic.not(this.execArgs(ctx));
    };

    return Not;

  })(Expression);

  module.exports.Xor = Xor = (function(superClass) {
    extend(Xor, superClass);

    function Xor(json) {
      Xor.__super__.constructor.apply(this, arguments);
    }

    Xor.prototype.exec = function(ctx) {
      return ThreeValuedLogic.xor.apply(ThreeValuedLogic, this.execArgs(ctx));
    };

    return Xor;

  })(Expression);

  module.exports.IsTrue = IsTrue = (function(superClass) {
    extend(IsTrue, superClass);

    function IsTrue(json) {
      IsTrue.__super__.constructor.apply(this, arguments);
    }

    IsTrue.prototype.exec = function(ctx) {
      return true === this.execArgs(ctx);
    };

    return IsTrue;

  })(Expression);

  module.exports.IsFalse = IsFalse = (function(superClass) {
    extend(IsFalse, superClass);

    function IsFalse(json) {
      IsFalse.__super__.constructor.apply(this, arguments);
    }

    IsFalse.prototype.exec = function(ctx) {
      return false === this.execArgs(ctx);
    };

    return IsFalse;

  })(Expression);

}).call(this);

//# sourceMappingURL=logical.js.map
